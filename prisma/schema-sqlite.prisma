// Simplified SQLite-compatible Prisma schema
// This is a development-friendly version of the trading platform schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core User Model (Simplified)
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  name            String?
  image           String?
  emailVerified   DateTime?
  status          String   @default("ACTIVE") // ACTIVE, SUSPENDED, BANNED
  tier            String   @default("FREE")   // FREE, BASIC, PRO, ULTIMATE
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Trading fields
  aiAccess        Boolean  @default(true)
  tradingAllowed  Boolean  @default(true)
  kycStatus       String   @default("PENDING") // PENDING, VERIFIED, REJECTED
  
  // Relationships
  accounts        Account[]
  sessions        Session[]
  portfolios      Portfolio[]
  trades          Trade[]
  orders          Order[]
  socialPosts     SocialPost[]
  followers       Follow[] @relation("UserFollowers")
  following       Follow[] @relation("UserFollowing")
  notifications   Notification[]
  subscriptions   Subscription[]
  
  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Portfolio Management
model Portfolio {
  id              String   @id @default(cuid())
  userId          String
  name            String
  description     String?
  type            String   @default("PERSONAL") // PERSONAL, SHARED, AI_MANAGED, DEMO
  totalValue      Float    @default(0)
  cashBalance     Float    @default(10000) // Starting demo balance
  dayGain         Float    @default(0)
  totalGain       Float    @default(0)
  dayGainPercent  Float    @default(0)
  totalGainPercent Float   @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  holdings        Holding[]
  trades          Trade[]
  orders          Order[]

  @@map("portfolios")
}

// Individual Stock Holdings
model Holding {
  id              String   @id @default(cuid())
  portfolioId     String
  symbol          String
  companyName     String?
  quantity        Float
  averagePrice    Float
  currentPrice    Float    @default(0)
  marketValue     Float    @default(0)
  dayGain         Float    @default(0)
  totalGain       Float    @default(0)
  dayGainPercent  Float    @default(0)
  totalGainPercent Float   @default(0)
  side            String   @default("LONG") // LONG, SHORT
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  portfolio       Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, symbol])
  @@map("holdings")
}

// Trading Orders
model Order {
  id              String   @id @default(cuid())
  userId          String
  portfolioId     String
  symbol          String
  side            String   // BUY, SELL
  type            String   // MARKET, LIMIT, STOP, STOP_LIMIT
  quantity        Float
  price           Float?
  stopPrice       Float?
  filledQuantity  Float    @default(0)
  averageFillPrice Float?
  status          String   @default("PENDING") // PENDING, FILLED, CANCELLED, REJECTED
  timeInForce     String   @default("DAY") // DAY, GTC, IOC, FOK
  submittedAt     DateTime @default(now())
  filledAt        DateTime?
  cancelledAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio       Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  trades          Trade[]

  @@map("orders")
}

// Executed Trades
model Trade {
  id              String   @id @default(cuid())
  userId          String
  portfolioId     String
  orderId         String?
  symbol          String
  side            String   // BUY, SELL
  quantity        Float
  price           Float
  value           Float    // quantity * price
  fees            Float    @default(0)
  executedAt      DateTime @default(now())
  createdAt       DateTime @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  portfolio       Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  order           Order?    @relation(fields: [orderId], references: [id])

  @@map("trades")
}

// AI Trading Signals
model AISignal {
  id              String   @id @default(cuid())
  symbol          String
  type            String   // BUY, SELL, STRONG_BUY, STRONG_SELL, HOLD
  confidence      Float    // 0-1
  targetPrice     Float?
  stopLoss        Float?
  timeframe       String   @default("1D") // 1M, 5M, 15M, 1H, 4H, 1D
  reason          String?
  aiModelId       String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  expiresAt       DateTime?

  aiModel         AIModel? @relation(fields: [aiModelId], references: [id])

  @@map("ai_signals")
}

// AI Models
model AIModel {
  id              String   @id @default(cuid())
  name            String
  description     String?
  type            String   // LSTM, TRANSFORMER, ENSEMBLE, etc.
  version         String   @default("1.0.0")
  status          String   @default("ACTIVE") // TRAINING, ACTIVE, DEPRECATED
  accuracy        Float?   // 0-1
  riskLevel       String   @default("MODERATE") // CONSERVATIVE, MODERATE, AGGRESSIVE
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  signals         AISignal[]
  userModels      UserAIModel[]

  @@map("ai_models")
}

// User's AI Model Subscriptions
model UserAIModel {
  id              String   @id @default(cuid())
  userId          String
  aiModelId       String
  isActive        Boolean  @default(true)
  subscribedAt    DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  aiModel         AIModel  @relation(fields: [aiModelId], references: [id], onDelete: Cascade)

  @@unique([userId, aiModelId])
  @@map("user_ai_models")
}

// Social Trading
model Follow {
  id              String   @id @default(cuid())
  followerId      String
  followingId     String
  createdAt       DateTime @default(now())

  follower        User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following       User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model SocialPost {
  id              String   @id @default(cuid())
  userId          String
  content         String
  symbols         String?  // Comma-separated list of symbols
  sentiment       Float?   // -1 to 1
  likes           Int      @default(0)
  shares          Int      @default(0)
  comments        Int      @default(0)
  isPublic        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("social_posts")
}

// Market Data (Simple version)
model MarketData {
  id              String   @id @default(cuid())
  symbol          String
  price           Float
  open            Float?
  high            Float?
  low             Float?
  volume          BigInt?
  change          Float?
  changePercent   Float?
  timestamp       DateTime @default(now())

  @@unique([symbol, timestamp])
  @@map("market_data")
}

// Notifications
model Notification {
  id              String   @id @default(cuid())
  userId          String
  type            String   // TRADE_EXECUTED, AI_SIGNAL, PRICE_ALERT, etc.
  title           String
  message         String
  priority        String   @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  read            Boolean  @default(false)
  createdAt       DateTime @default(now())

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Subscriptions (Simple)
model Subscription {
  id              String   @id @default(cuid())
  userId          String
  plan            String   // FREE, BASIC, PRO, ULTIMATE
  status          String   @default("ACTIVE") // ACTIVE, CANCELLED, PAST_DUE
  startDate       DateTime @default(now())
  endDate         DateTime?
  price           Float?
  interval        String   @default("MONTHLY") // MONTHLY, YEARLY

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}
