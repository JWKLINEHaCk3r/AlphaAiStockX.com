// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  username          String    @unique
  password          String?
  name              String?
  image             String?
  emailVerified     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Trading related fields
  tradingBalance    Float     @default(0)
  totalProfit       Float     @default(0)
  totalTrades       Int       @default(0)
  successRate       Float     @default(0)
  riskTolerance     String    @default("medium")
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  trades            Trade[]
  portfolios        Portfolio[]
  watchlists        Watchlist[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Trade {
  id            String    @id @default(cuid())
  userId        String
  symbol        String
  action        String    // BUY, SELL
  quantity      Int
  price         Float
  totalValue    Float
  orderType     String    @default("MARKET")
  status        String    @default("PENDING")
  executedAt    DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("trades")
}

model Portfolio {
  id                String   @id @default(cuid())
  userId            String
  symbol            String
  quantity          Int
  averagePrice      Float
  currentPrice      Float
  marketValue       Float
  unrealizedPnL     Float
  unrealizedPnLPercent Float
  side              String   @default("LONG") // LONG, SHORT
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@map("portfolios")
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String
  symbol    String
  name      String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
  @@map("watchlists")
}

model MarketData {
  id            String   @id @default(cuid())
  symbol        String   @unique
  price         Float
  change        Float
  changePercent Float
  volume        BigInt
  marketCap     BigInt?
  high52Week    Float?
  low52Week     Float?
  lastUpdated   DateTime @default(now())

  @@map("market_data")
}

model AISignal {
  id          String   @id @default(cuid())
  symbol      String
  signal      String   // BUY, SELL, HOLD
  confidence  Float
  targetPrice Float?
  stopLoss    Float?
  reasoning   String?
  model       String   @default("gpt-4")
  createdAt   DateTime @default(now())
  expiresAt   DateTime?

  @@map("ai_signals")
}
