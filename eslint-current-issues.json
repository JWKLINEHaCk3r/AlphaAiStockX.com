[
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/.eslintrc.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/api/health/route.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 14,
        "column": 26,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 14,
        "endColumn": 26,
        "fix": { "range": [357, 357], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 20,
        "column": 73,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 20,
        "endColumn": 73,
        "fix": { "range": [617, 617], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 26,
        "column": 21,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 26,
        "endColumn": 21,
        "fix": { "range": [735, 735], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 27,
        "column": 8,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 27,
        "endColumn": 8,
        "fix": { "range": [743, 743], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `'Pragma'` with `Pragma`",
        "line": 34,
        "column": 9,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 34,
        "endColumn": 17,
        "fix": { "range": [904, 912], "text": "Pragma" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `'Expires':·'0'` with `Expires:·'0',`",
        "line": 35,
        "column": 9,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 35,
        "endColumn": 23,
        "fix": { "range": [934, 948], "text": "Expires: '0'," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 36,
        "column": 8,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 36,
        "endColumn": 8,
        "fix": { "range": [956, 956], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 37,
        "column": 8,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 38,
        "endColumn": 1,
        "fix": { "range": [964, 965], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 41,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 41,
        "endColumn": 5,
        "fix": { "range": [1036, 1040], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `⏎······`",
        "line": 42,
        "column": 30,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 42,
        "endColumn": 30,
        "fix": { "range": [1070, 1070], "text": "\n      " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 43,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 43,
        "endColumn": 1,
        "fix": { "range": [1072, 1072], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 44,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 44,
        "endColumn": 1,
        "fix": { "range": [1099, 1099], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 45,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 45,
        "endColumn": 1,
        "fix": { "range": [1142, 1142], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 46,
        "column": 7,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 46,
        "endColumn": 7,
        "fix": { "range": [1219, 1219], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `········api:·'error'` with `··········api:·'error',`",
        "line": 47,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 47,
        "endColumn": 21,
        "fix": { "range": [1229, 1249], "text": "          api: 'error'," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `······}` with `········},`",
        "line": 48,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 48,
        "endColumn": 8,
        "fix": { "range": [1250, 1257], "text": "        }," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `····},·{·` with `······},⏎······{`",
        "line": 49,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 49,
        "endColumn": 10,
        "fix": { "range": [1258, 1267], "text": "      },\n      {" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `······status:·500·` with `········status:·500,`",
        "line": 50,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 50,
        "endColumn": 19,
        "fix": { "range": [1268, 1286], "text": "        status: 500," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `}` with `··}⏎····`",
        "line": 51,
        "column": 5,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 51,
        "endColumn": 6,
        "fix": { "range": [1291, 1292], "text": "  }\n    " }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 19,
    "fixableErrorCount": 0,
    "fixableWarningCount": 19,
    "source": "import { NextResponse } from 'next/server';\n\n// Health check API endpoint\nexport async function GET() {\n  try {\n    const healthCheck = {\n      status: 'healthy',\n      timestamp: new Date().toISOString(),\n      version: '2.5.0',\n      services: {\n        api: 'online',\n        database: 'simulated',\n        trading: 'demo-mode',\n        ai: 'operational'\n      },\n      environment: process.env.NODE_ENV || 'development',\n      uptime: process.uptime(),\n      memory: {\n        used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),\n        total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024)\n      },\n      checks: {\n        nextjs: 'ok',\n        tailwind: 'ok',\n        components: 'ok',\n        routes: 'ok'\n      }\n    };\n\n    return NextResponse.json(healthCheck, {\n      status: 200,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'Pragma': 'no-cache',\n        'Expires': '0'\n      }\n    });\n\n  } catch (error) {\n    console.error('Health check failed:', error);\n    \n    return NextResponse.json({\n      status: 'unhealthy',\n      timestamp: new Date().toISOString(),\n      error: error instanceof Error ? error.message : 'Unknown error',\n      checks: {\n        api: 'error'\n      }\n    }, { \n      status: 500 \n    });\n  }\n}\n\n// Handle OPTIONS for CORS\nexport async function OPTIONS() {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/api/trading/analyze/route.ts",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 24,
        "column": 51,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 24,
        "endColumn": 51,
        "fix": { "range": [1007, 1007], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 25,
        "column": 8,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 25,
        "endColumn": 8,
        "fix": { "range": [1015, 1015], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 33,
        "column": 24,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 33,
        "endColumn": 24,
        "fix": { "range": [1174, 1174], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 35,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 36,
        "endColumn": 1,
        "fix": { "range": [1183, 1184], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `·`",
        "line": 39,
        "column": 8,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 39,
        "endColumn": 9,
        "fix": { "range": [1298, 1299], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 42,
        "column": 74,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 42,
        "endColumn": 74,
        "fix": { "range": [1447, 1447], "text": "," }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 6,
    "source": "import { NextRequest, NextResponse } from 'next/server';\n\n// Mock trading analysis API endpoint\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const symbol = searchParams.get('symbol') || 'AAPL';\n\n    // Generate mock stock data for demo purposes\n    const stockData = Array.from({ length: 30 }, (_, i) => ({\n      date: new Date(Date.now() - (30 - i) * 24 * 60 * 60 * 1000).toISOString(),\n      price: 150 + Math.random() * 50,\n      volume: Math.floor(Math.random() * 1000000) + 500000,\n    }));\n\n    // Generate mock recommendation\n    const recommendations = ['buy', 'sell', 'hold'];\n    const recommendation = {\n      action: recommendations[Math.floor(Math.random() * recommendations.length)],\n      confidence: Math.floor(Math.random() * 40) + 60, // 60-100%\n      reasons: [\n        'Technical indicators show strong momentum',\n        'Volume analysis suggests positive sentiment',\n        'AI algorithm detected favorable patterns'\n      ]\n    };\n\n    return NextResponse.json({\n      symbol,\n      stockData,\n      recommendation,\n      timestamp: new Date().toISOString(),\n      status: 'success'\n    });\n\n  } catch (error) {\n    console.error('Trading analysis API error:', error);\n    return NextResponse.json(\n      { \n        error: 'Failed to analyze trading data',\n        status: 'error',\n        message: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n// Handle OPTIONS for CORS\nexport async function OPTIONS() {\n  return new NextResponse(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type',\n    },\n  });\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/AIChat.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/AIInsights.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/AITradingDashboard.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `{strategy.performance?.totalReturn·||·0}%` with `⏎····························{strategy.performance?.totalReturn·||·0}%⏎··························`",
        "line": 542,
        "column": 57,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 542,
        "endColumn": 98,
        "fix": {
          "range": [20825, 20866],
          "text": "\n                            {strategy.performance?.totalReturn || 0}%\n                          "
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Card } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { AdvancedAIAutoTrader } from '../services/ai-auto-trader-enhanced';\n\ninterface TradingSignal {\n  symbol: string;\n  action: string;\n  confidence: number;\n  reasoning?: string[];\n}\n\ninterface Trade {\n  symbol: string;\n  action: 'buy' | 'sell';\n  price: number;\n  shares: number;\n  time: string;\n  reason: string;\n}\n\ninterface Portfolio {\n  totalValue: number;\n  cash: number;\n  holdings: Record<string, { shares: number; avgPrice: number }>;\n  trades: Trade[];\n  totalReturn?: number;\n  dailyPnL?: number;\n  performance?: {\n    totalReturn: number;\n    dailyReturn: number;\n    weeklyReturn: number;\n    monthlyReturn: number;\n    sharpeRatio: number;\n    maxDrawdown?: number;\n    winRate: number;\n    lastUpdated: Date;\n  };\n}\n\ninterface Performance {\n  totalReturn: number;\n  dailyPnL: number;\n  winRate: number;\n  sharpeRatio: number;\n}\n\ninterface TradingStrategy {\n  id: string;\n  name: string;\n  status: string;\n  description?: string;\n  performance?: {\n    totalReturn: number;\n    sharpeRatio: number;\n    maxDrawdown: number;\n    winRate: number;\n    profitFactor: number;\n    avgTrade: number;\n  };\n}\n\ninterface Analysis {\n  signals?: TradingSignal[];\n  marketCondition?: string;\n  volatility?: number;\n  lastTradeResult?: {\n    success: boolean;\n    message: string;\n    trades?: Trade[];\n  };\n  recommendations?: string[];\n  riskAnalysis?: {\n    riskScore: number;\n    volatility: number;\n    beta?: number;\n  };\n}\n\ninterface DashboardState {\n  trader: AdvancedAIAutoTrader | null;\n  portfolio: Portfolio | null;\n  isTrading: boolean;\n  performance: Performance | null;\n  analysis: Analysis | null;\n  loading: boolean;\n  error: string | null;\n}\n\nexport default function AITradingDashboard() {\n  const [state, setState] = useState<DashboardState>({\n    trader: null,\n    portfolio: null,\n    isTrading: false,\n    performance: null,\n    analysis: null,\n    loading: true,\n    error: null,\n  });\n\n  const [selectedSymbols] = useState(['AAPL', 'TSLA', 'MSFT', 'GOOGL', 'AMZN']);\n  const [riskLevel, setRiskLevel] = useState<'LOW' | 'MEDIUM' | 'HIGH'>('MEDIUM');\n\n  const initializeTrader = useCallback(async () => {\n    try {\n      const trader = new AdvancedAIAutoTrader(50000, riskLevel);\n      const portfolio = trader.getPortfolio();\n\n      setState(prev => ({\n        ...prev,\n        trader,\n        portfolio,\n        loading: false,\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: 'Failed to initialize AI trader',\n        loading: false,\n      }));\n    }\n  }, [riskLevel]);\n\n  useEffect(() => {\n    initializeTrader();\n  }, [initializeTrader]);\n\n  const runAIAnalysis = async () => {\n    if (!state.trader) return;\n\n    setState(prev => ({ ...prev, loading: true }));\n\n    try {\n      const analysis = await state.trader.runAIAnalysis(selectedSymbols);\n      const portfolio = state.trader.getPortfolio();\n\n      setState(prev => ({\n        ...prev,\n        analysis,\n        portfolio,\n        loading: false,\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: 'Analysis failed',\n        loading: false,\n      }));\n    }\n  };\n\n  const executeAITrading = async () => {\n    if (!state.trader) return;\n\n    setState(prev => ({ ...prev, isTrading: true }));\n\n    try {\n      const result = await state.trader.executeAITrading(selectedSymbols);\n      const portfolio = state.trader.getPortfolio();\n\n      setState(prev => ({\n        ...prev,\n        portfolio,\n        isTrading: false,\n        analysis: { ...prev.analysis, lastTradeResult: result },\n      }));\n    } catch (error) {\n      setState(prev => ({\n        ...prev,\n        error: 'Trading execution failed',\n        isTrading: false,\n      }));\n    }\n  };\n\n  const emergencyStop = () => {\n    if (state.trader) {\n      state.trader.emergencyStop();\n      setState(prev => ({ ...prev, isTrading: false }));\n    }\n  };\n\n  if (state.loading && !state.trader) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-black text-white\">\n        <div className=\"container mx-auto px-4 py-20\">\n          <div className=\"flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"animate-spin w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <h2 className=\"text-xl font-semibold\">Initializing AI Trading Engine...</h2>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-black text-white\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n            AI Trading Dashboard\n          </h1>\n          <p className=\"text-gray-300\">Advanced AI-powered trading with real-time analysis</p>\n        </div>\n\n        {/* Control Panel */}\n        <Card className=\"p-6 mb-6 bg-gray-900/50 border-gray-700\">\n          <div className=\"flex flex-wrap gap-4 items-center justify-between\">\n            <div className=\"flex gap-4 items-center\">\n              <Button\n                onClick={runAIAnalysis}\n                disabled={state.loading}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                {state.loading ? 'Analyzing...' : 'Run AI Analysis'}\n              </Button>\n\n              <Button\n                onClick={executeAITrading}\n                disabled={state.isTrading || !state.analysis}\n                className=\"bg-green-600 hover:bg-green-700\"\n              >\n                {state.isTrading ? 'Trading...' : 'Execute AI Trading'}\n              </Button>\n\n              <Button\n                onClick={emergencyStop}\n                variant=\"destructive\"\n                className=\"bg-red-600 hover:bg-red-700\"\n              >\n                Emergency Stop\n              </Button>\n            </div>\n\n            <div className=\"flex gap-4 items-center\">\n              <select\n                value={riskLevel}\n                onChange={e => setRiskLevel(e.target.value as 'LOW' | 'MEDIUM' | 'HIGH')}\n                className=\"px-3 py-2 bg-gray-800 border border-gray-600 rounded text-white\"\n              >\n                <option value=\"LOW\">Low Risk</option>\n                <option value=\"MEDIUM\">Medium Risk</option>\n                <option value=\"HIGH\">High Risk</option>\n              </select>\n            </div>\n          </div>\n        </Card>\n\n        <Tabs defaultValue=\"portfolio\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5 bg-gray-800\">\n            <TabsTrigger value=\"portfolio\">Portfolio</TabsTrigger>\n            <TabsTrigger value=\"analysis\">AI Analysis</TabsTrigger>\n            <TabsTrigger value=\"trades\">Trade History</TabsTrigger>\n            <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n            <TabsTrigger value=\"strategies\">Strategies</TabsTrigger>\n          </TabsList>\n\n          {/* Portfolio Tab */}\n          <TabsContent value=\"portfolio\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Portfolio Overview */}\n              <Card className=\"p-6 bg-gray-900/50 border-gray-700\">\n                <h3 className=\"text-xl font-semibold mb-4\">Portfolio Overview</h3>\n                {state.portfolio && (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Total Value</p>\n                        <p className=\"text-2xl font-bold text-green-400\">\n                          ${state.portfolio.totalValue?.toFixed(2) || '0.00'}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Cash</p>\n                        <p className=\"text-xl font-semibold\">\n                          ${state.portfolio.cash?.toFixed(2) || '0.00'}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Total Return</p>\n                        <p\n                          className={`text-xl font-semibold ${\n                            (state.portfolio.totalReturn || 0) >= 0\n                              ? 'text-green-400'\n                              : 'text-red-400'\n                          }`}\n                        >\n                          {(state.portfolio.totalReturn || 0).toFixed(2)}%\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Daily P&L</p>\n                        <p\n                          className={`text-xl font-semibold ${\n                            (state.portfolio.dailyPnL || 0) >= 0 ? 'text-green-400' : 'text-red-400'\n                          }`}\n                        >\n                          ${(state.portfolio.dailyPnL || 0).toFixed(2)}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </Card>\n\n              {/* Current Holdings */}\n              <Card className=\"p-6 bg-gray-900/50 border-gray-700\">\n                <h3 className=\"text-xl font-semibold mb-4\">Current Holdings</h3>\n                {state.portfolio?.holdings && Object.keys(state.portfolio.holdings).length > 0 ? (\n                  <div className=\"space-y-3\">\n                    {Object.entries(state.portfolio.holdings).map(\n                      ([symbol, holding]: [string, { shares: number; avgPrice: number }]) => (\n                        <div\n                          key={symbol}\n                          className=\"flex justify-between items-center p-3 bg-gray-800 rounded\"\n                        >\n                          <div>\n                            <p className=\"font-semibold\">{symbol}</p>\n                            <p className=\"text-sm text-gray-400\">{holding.shares} shares</p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-semibold\">${holding.avgPrice?.toFixed(2)}</p>\n                            <p className=\"text-sm text-gray-400\">Avg Cost</p>\n                          </div>\n                        </div>\n                      )\n                    )}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-400\">No current holdings</p>\n                )}\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* AI Analysis Tab */}\n          <TabsContent value=\"analysis\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* AI Signals */}\n              <Card className=\"p-6 bg-gray-900/50 border-gray-700\">\n                <h3 className=\"text-xl font-semibold mb-4\">AI Trading Signals</h3>\n                {state.analysis?.signals?.length ? (\n                  <div className=\"space-y-3\">\n                    {state.analysis?.signals?.map((signal: TradingSignal, index: number) => (\n                      <div key={index} className=\"p-3 bg-gray-800 rounded\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <span className=\"font-semibold\">{signal.symbol}</span>\n                          <span\n                            className={`px-2 py-1 rounded text-sm ${\n                              signal.action === 'BUY' ? 'bg-green-600' : 'bg-red-600'\n                            }`}\n                          >\n                            {signal.action}\n                          </span>\n                        </div>\n                        <div className=\"text-sm space-y-1\">\n                          <p>Confidence: {(signal.confidence * 100).toFixed(1)}%</p>\n                          <Progress value={signal.confidence * 100} className=\"h-2\" />\n                          <p className=\"text-gray-400\">\n                            {signal.reasoning?.slice(0, 2).join(', ')}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-400\">Run AI analysis to see signals</p>\n                )}\n              </Card>\n\n              {/* AI Recommendations */}\n              <Card className=\"p-6 bg-gray-900/50 border-gray-700\">\n                <h3 className=\"text-xl font-semibold mb-4\">AI Recommendations</h3>\n                {state.analysis?.recommendations?.length ? (\n                  <div className=\"space-y-2\">\n                    {state.analysis?.recommendations?.map((rec: string, index: number) => (\n                      <div\n                        key={index}\n                        className=\"p-3 bg-blue-900/30 border border-blue-700 rounded\"\n                      >\n                        <p className=\"text-sm\">{rec}</p>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <p className=\"text-gray-400\">No recommendations available</p>\n                )}\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Trade History Tab */}\n          <TabsContent value=\"trades\">\n            <Card className=\"p-6 bg-gray-900/50 border-gray-700\">\n              <h3 className=\"text-xl font-semibold mb-4\">Recent Trades</h3>\n              {state.portfolio?.trades?.length ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b border-gray-700\">\n                        <th className=\"text-left p-2\">Symbol</th>\n                        <th className=\"text-left p-2\">Action</th>\n                        <th className=\"text-left p-2\">Shares</th>\n                        <th className=\"text-left p-2\">Price</th>\n                        <th className=\"text-left p-2\">Time</th>\n                        <th className=\"text-left p-2\">Reason</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {state.portfolio?.trades\n                        ?.slice(-10)\n                        .reverse()\n                        .map((trade: Trade, index: number) => (\n                          <tr key={index} className=\"border-b border-gray-800\">\n                            <td className=\"p-2 font-semibold\">{trade.symbol}</td>\n                            <td className=\"p-2\">\n                              <span\n                                className={`px-2 py-1 rounded text-xs ${\n                                  trade.action === 'buy' ? 'bg-green-600' : 'bg-red-600'\n                                }`}\n                              >\n                                {trade.action.toUpperCase()}\n                              </span>\n                            </td>\n                            <td className=\"p-2\">{trade.shares}</td>\n                            <td className=\"p-2\">${trade.price.toFixed(2)}</td>\n                            <td className=\"p-2 text-sm text-gray-400\">\n                              {new Date(trade.time).toLocaleTimeString()}\n                            </td>\n                            <td className=\"p-2 text-sm text-gray-400 max-w-xs truncate\">\n                              {trade.reason}\n                            </td>\n                          </tr>\n                        ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <p className=\"text-gray-400\">No trades executed yet</p>\n              )}\n            </Card>\n          </TabsContent>\n\n          {/* Performance Tab */}\n          <TabsContent value=\"performance\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"p-6 bg-gray-900/50 border-gray-700\">\n                <h3 className=\"text-xl font-semibold mb-4\">Performance Metrics</h3>\n                {state.portfolio?.performance && (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Total Return</p>\n                        <p className=\"text-xl font-semibold text-green-400\">\n                          {state.portfolio.performance.totalReturn?.toFixed(2)}%\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Sharpe Ratio</p>\n                        <p className=\"text-xl font-semibold\">\n                          {state.portfolio.performance.sharpeRatio?.toFixed(2)}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Max Drawdown</p>\n                        <p className=\"text-xl font-semibold text-red-400\">\n                          {state.portfolio?.performance?.maxDrawdown\n                            ? (state.portfolio.performance.maxDrawdown * 100).toFixed(2) + '%'\n                            : 'N/A'}\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-gray-400\">Win Rate</p>\n                        <p className=\"text-xl font-semibold\">\n                          {state.portfolio.performance.winRate?.toFixed(1)}%\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </Card>\n\n              <Card className=\"p-6 bg-gray-900/50 border-gray-700\">\n                <h3 className=\"text-xl font-semibold mb-4\">Risk Analysis</h3>\n                {state.analysis?.riskAnalysis && (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <p className=\"text-sm text-gray-400\">Risk Score</p>\n                      <div className=\"flex items-center gap-2\">\n                        <Progress\n                          value={state.analysis.riskAnalysis.riskScore}\n                          className=\"flex-1 h-3\"\n                        />\n                        <span className=\"text-sm\">{state.analysis.riskAnalysis.riskScore}/100</span>\n                      </div>\n                    </div>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-gray-400\">Volatility</p>\n                        <p>{(state.analysis.riskAnalysis.volatility * 100).toFixed(1)}%</p>\n                      </div>\n                      <div>\n                        <p className=\"text-gray-400\">Beta</p>\n                        <p>{state.analysis.riskAnalysis.beta?.toFixed(2)}</p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Strategies Tab */}\n          <TabsContent value=\"strategies\">\n            <Card className=\"p-6 bg-gray-900/50 border-gray-700\">\n              <h3 className=\"text-xl font-semibold mb-4\">Active AI Strategies</h3>\n              {state.trader && (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {state.trader.getStrategies().map((strategy: TradingStrategy) => (\n                    <div key={strategy.id} className=\"p-4 bg-gray-800 rounded\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <h4 className=\"font-semibold\">{strategy.name}</h4>\n                        <span\n                          className={`px-2 py-1 rounded text-xs ${\n                            strategy.status === 'ACTIVE' ? 'bg-green-600' : 'bg-gray-600'\n                          }`}\n                        >\n                          {strategy.status}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-400 mb-3\">{strategy.description}</p>\n                      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                        <div>\n                          <p className=\"text-gray-400\">Return</p>\n                          <p className=\"text-green-400\">{strategy.performance?.totalReturn || 0}%</p>\n                        </div>\n                        <div>\n                          <p className=\"text-gray-400\">Win Rate</p>\n                          <p>{strategy.performance?.winRate || 0}%</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/AutoTradeBot.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ErrorBoundary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/MarketHeatmap.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/NewsAnalysis.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/PaymentForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/PerformanceMetrics.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/PortfolioOptimizer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/RiskAnalyzer.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/RiskControls.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/StockChart.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/StockChart3D.tsx",
    "messages": [
      {
        "ruleId": "react/no-unknown-property",
        "severity": 2,
        "message": "Unknown property 'intensity' found",
        "line": 58,
        "column": 23,
        "nodeType": "JSXAttribute",
        "messageId": "unknownProp",
        "endLine": 58,
        "endColumn": 38
      }
    ],
    "suppressedMessages": [
      {
        "ruleId": "react/no-unknown-property",
        "severity": 2,
        "message": "Unknown property 'position' found",
        "line": 60,
        "column": 27,
        "nodeType": "JSXAttribute",
        "messageId": "unknownProp",
        "endLine": 60,
        "endColumn": 50,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "react/no-unknown-property",
        "severity": 2,
        "message": "Unknown property 'intensity' found",
        "line": 60,
        "column": 51,
        "nodeType": "JSXAttribute",
        "messageId": "unknownProp",
        "endLine": 60,
        "endColumn": 66,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport dynamic from 'next/dynamic';\nimport { useEffect, useState, useMemo } from 'react';\n\nconst Canvas = dynamic(() => import('@react-three/fiber').then(mod => mod.Canvas), { ssr: false });\nconst PerspectiveCamera = dynamic(\n  () => import('@react-three/drei').then(mod => mod.PerspectiveCamera),\n  { ssr: false }\n);\nconst OrbitControls = dynamic(() => import('@react-three/drei').then(mod => mod.OrbitControls), {\n  ssr: false,\n});\nconst Line = dynamic(() => import('@react-three/drei').then(mod => mod.Line), { ssr: false });\nconst Html = dynamic(() => import('@react-three/drei').then(mod => mod.Html), { ssr: false });\n\n// Generate mock 3D stock data (replace with real data via props or API)\nfunction generateStockData3D(points = 120) {\n  const data = [];\n  let x = 0,\n    y = 100,\n    z = 0;\n  for (let i = 0; i < points; i++) {\n    x += 1;\n    y += Math.sin(i / 10) * 2 + Math.random() * 2;\n    z += Math.cos(i / 15) * 1.5 + Math.random() * 1.5;\n    data.push([x, y, z]);\n  }\n  return data;\n}\n\ntype StockChart3DProps = {\n  data?: [number, number, number][];\n};\n\nexport default function StockChart3D({ data }: StockChart3DProps) {\n  // Memoize chart data for performance\n  const chartData = useMemo(() => data || generateStockData3D(), [data]);\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n  if (!mounted) {\n    return (\n      <div className=\"w-full h-[400px] rounded-xl overflow-hidden shadow-2xl bg-black/60 border border-violet-800 flex items-center justify-center animate-pulse\">\n        <span className=\"text-violet-300 text-lg font-bold\">Loading 3D Chart...</span>\n      </div>\n    );\n  }\n  return (\n    <div\n      className=\"w-full h-[400px] rounded-xl overflow-hidden shadow-2xl bg-black/60 border border-violet-800 relative\"\n      aria-label=\"3D Stock Chart\"\n      tabIndex={0}\n    >\n      <Canvas shadows dpr={[1, 2]}>\n        <PerspectiveCamera makeDefault position={[60, 40, 60]} />\n        <ambientLight intensity={0.7} />\n        {/* eslint-disable-next-line react/no-unknown-property */}\n        <directionalLight position={[10, 20, 10]} intensity={1.2} />\n        <Line\n          points={chartData as [number, number, number][]}\n          color=\"#a78bfa\"\n          lineWidth={3}\n          dashed={false}\n        />\n        <OrbitControls enablePan enableZoom enableRotate />\n        {chartData && chartData.length > 0 && (\n          <Html\n            position={[\n              chartData[chartData.length - 1][0],\n              chartData[chartData.length - 1][1],\n              chartData[chartData.length - 1][2],\n            ]}\n          >\n            <div className=\"bg-violet-700/80 text-white px-2 py-1 rounded shadow-lg text-xs\">\n              Latest: {chartData[chartData.length - 1][1].toFixed(2)}\n            </div>\n          </Html>\n        )}\n      </Canvas>\n      <div className=\"absolute top-2 left-2 text-white text-lg font-bold drop-shadow-lg\">\n        3D Stock Chart\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/TechnicalIndicators.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/TradeHistory.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/TradingStrategies.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/about/AboutContent.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `string,·{·icon:·React.ComponentType<any>;·label:·string;·color:·string·}` with `⏎············string,⏎············{·icon:·React.ComponentType<any>;·label:·string;·color:·string·}⏎··········`",
        "line": 300,
        "column": 36,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 300,
        "endColumn": 108,
        "fix": {
          "range": [10716, 10788],
          "text": "\n            string,\n            { icon: React.ComponentType<any>; label: string; color: string }\n          "
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 300,
        "column": 72,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 300,
        "endColumn": 75,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10752, 10755], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10752, 10755], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Brain,\n  Rocket,\n  Shield,\n  Target,\n  TrendingUp,\n  BarChart3,\n  GraduationCap,\n  Bot,\n  Eye,\n  Activity,\n  Award,\n  Users,\n  Globe,\n  CheckCircle,\n  Star,\n  Atom,\n  Database,\n  Lock,\n  BookOpen,\n  DollarSign,\n  Building,\n  Crown,\n  CloudLightningIcon as Lightning,\n  Sparkles,\n  Server,\n  MessageSquare,\n} from 'lucide-react';\n\nexport default function AboutContent({ onNavigate }: { onNavigate: (tab: string) => void }) {\n  const [activeFeature, setActiveFeature] = useState('ai-analysis');\n\n  const platformStats = {\n    totalUsers: '50,000+',\n    successRate: '94.7%',\n    avgReturns: '23.4%',\n    uptime: '99.99%',\n    tradesExecuted: '2.5M+',\n    aiModels: '47',\n    dataPoints: '10B+',\n    countries: '120+',\n  };\n\n  const coreFeatures = [\n    {\n      id: 'ai-analysis',\n      title: 'Revolutionary AI Analysis',\n      icon: Brain,\n      color: 'from-blue-500 to-cyan-500',\n      description: 'Advanced neural networks analyze market patterns with 94.7% accuracy',\n      features: [\n        '47 proprietary AI models working in parallel',\n        'Real-time sentiment analysis from 10,000+ sources',\n        'Pattern recognition across 150+ technical indicators',\n        'Quantum-enhanced prediction algorithms',\n        'Machine learning that adapts to market conditions',\n        'Natural language processing for news analysis',\n      ],\n    },\n    {\n      id: 'education',\n      title: 'Comprehensive Education Platform',\n      icon: GraduationCap,\n      color: 'from-green-500 to-emerald-500',\n      description: 'Master trading with our world-class educational content',\n      features: [\n        'Complete Series 6 & 7 exam preparation',\n        'Interactive practice tests with detailed explanations',\n        'Video courses from industry experts',\n        'Real-time market simulation environment',\n        'Personalized learning paths based on your progress',\n        'Certification tracking and progress analytics',\n      ],\n    },\n    {\n      id: 'trading-bots',\n      title: 'Automated Trading Systems',\n      icon: Bot,\n      color: 'from-purple-500 to-pink-500',\n      description: 'Lightning-fast automated trading with guaranteed performance',\n      features: [\n        'Ultra-fast execution (5-15ms latency)',\n        '24/7 automated trading across global markets',\n        'Risk management with stop-loss protection',\n        'Multi-strategy portfolio optimization',\n        'Options trading with advanced Greeks analysis',\n        'Backtesting with 20+ years of historical data',\n      ],\n    },\n    {\n      id: 'security',\n      title: 'Quantum-Grade Security',\n      icon: Shield,\n      color: 'from-red-500 to-orange-500',\n      description: 'Military-grade security protecting your investments',\n      features: [\n        'Post-quantum cryptography implementation',\n        'Multi-factor authentication with biometrics',\n        'End-to-end encryption for all transactions',\n        'Real-time fraud detection and prevention',\n        'Regulatory compliance (SEC, FINRA, CFTC)',\n        'Insurance coverage up to $500M per account',\n      ],\n    },\n    {\n      id: 'analytics',\n      title: 'Advanced Analytics Suite',\n      icon: BarChart3,\n      color: 'from-yellow-500 to-orange-500',\n      description: 'Professional-grade analytics and reporting tools',\n      features: [\n        'Real-time portfolio performance tracking',\n        'Risk analysis with Monte Carlo simulations',\n        'Tax optimization and loss harvesting',\n        'Custom dashboard with 200+ widgets',\n        'Advanced charting with 300+ indicators',\n        'Institutional-grade research reports',\n      ],\n    },\n    {\n      id: 'scanners',\n      title: 'AI-Powered Market Scanners',\n      icon: Eye,\n      color: 'from-indigo-500 to-purple-500',\n      description: 'Discover opportunities with intelligent market scanning',\n      features: [\n        'Real-time stock screening across 50,000+ securities',\n        'Options flow analysis with unusual activity alerts',\n        'Earnings prediction with 89% accuracy rate',\n        'Sector rotation AI for market timing',\n        'Pattern recognition for 150+ chart formations',\n        'Social sentiment tracking from 1M+ sources',\n      ],\n    },\n  ];\n\n  const technologyStack = [\n    {\n      category: 'AI & Machine Learning',\n      icon: Brain,\n      technologies: [\n        'TensorFlow & PyTorch for deep learning',\n        'Custom neural networks for market prediction',\n        'Reinforcement learning for strategy optimization',\n        'Natural language processing for sentiment analysis',\n        'Computer vision for chart pattern recognition',\n        'Quantum computing integration for complex calculations',\n      ],\n    },\n    {\n      category: 'Infrastructure',\n      icon: Server,\n      technologies: [\n        'Cloud-native architecture on AWS/Azure',\n        'Kubernetes orchestration for scalability',\n        'Redis for ultra-fast data caching',\n        'PostgreSQL with time-series optimization',\n        'Apache Kafka for real-time data streaming',\n        'CDN with global edge locations',\n      ],\n    },\n    {\n      category: 'Security',\n      icon: Lock,\n      technologies: [\n        'Post-quantum cryptography algorithms',\n        'Zero-trust security architecture',\n        'Hardware security modules (HSM)',\n        'Multi-party computation protocols',\n        'Blockchain-based audit trails',\n        'Advanced threat detection systems',\n      ],\n    },\n    {\n      category: 'Data & Analytics',\n      icon: Database,\n      technologies: [\n        'Real-time market data from 50+ exchanges',\n        'Alternative data from satellite imagery',\n        'Social media sentiment analysis',\n        'Economic indicators and macro data',\n        'Corporate earnings and financial statements',\n        'Options flow and institutional activity',\n      ],\n    },\n  ];\n\n  const successStories = [\n    {\n      name: 'Sarah Chen',\n      role: 'Day Trader',\n      avatar: 'SC',\n      story:\n        \"Increased my win rate from 45% to 78% using AlphaAI's pattern recognition. Made $127K in 6 months!\",\n      returns: '+340%',\n      timeframe: '6 months',\n    },\n    {\n      name: 'Michael Rodriguez',\n      role: 'Portfolio Manager',\n      avatar: 'MR',\n      story:\n        'The AI analysis helped me identify market trends 3 weeks before they happened. Incredible accuracy!',\n      returns: '+156%',\n      timeframe: '1 year',\n    },\n    {\n      name: 'Jennifer Park',\n      role: 'Options Trader',\n      avatar: 'JP',\n      story:\n        \"The options flow scanner is a game-changer. I'm now consistently profitable with 85% win rate.\",\n      returns: '+289%',\n      timeframe: '8 months',\n    },\n    {\n      name: 'David Thompson',\n      role: 'Swing Trader',\n      avatar: 'DT',\n      story:\n        'Passed my Series 7 exam with 94% thanks to their education platform. Now managing $2M portfolio.',\n      returns: '+198%',\n      timeframe: '2 years',\n    },\n  ];\n\n  const companyMilestones = [\n    { year: '2020', event: 'Founded by former Goldman Sachs quants', icon: Building },\n    { year: '2021', event: 'Launched first AI trading algorithm', icon: Brain },\n    { year: '2022', event: 'Reached 10,000 active users', icon: Users },\n    { year: '2023', event: 'Introduced quantum-resistant security', icon: Shield },\n    { year: '2024', event: '50,000+ users, $2.5B+ in trades executed', icon: TrendingUp },\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hero Section */}\n      <div className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-blue-600/20 via-purple-600/20 to-cyan-600/20 rounded-3xl\"></div>\n        <Card className=\"relative bg-slate-900/50 backdrop-blur-xl border-2 border-blue-500/30\">\n          <CardContent className=\"p-12 text-center\">\n            <div className=\"flex items-center justify-center mb-6\">\n              <div className=\"relative\">\n                <Atom className=\"h-20 w-20 text-blue-400 animate-pulse\" />\n                <div className=\"absolute inset-0 h-20 w-20 bg-blue-400/20 rounded-full animate-ping\"></div>\n              </div>\n            </div>\n            <h1 className=\"text-5xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-cyan-400 bg-clip-text text-transparent mb-4\">\n              AlphaAIStockX\n            </h1>\n            <p className=\"text-2xl text-slate-300 mb-6 max-w-4xl mx-auto\">\n              The World&apos;s Most Advanced AI-Powered Trading & Education Platform\n            </p>\n            <p className=\"text-lg text-slate-400 mb-8 max-w-3xl mx-auto\">\n              Combining cutting-edge artificial intelligence, quantum computing, and decades of Wall\n              Street expertise to revolutionize how you trade, learn, and succeed in financial\n              markets.\n            </p>\n            <div className=\"flex flex-wrap justify-center gap-4 mb-8\">\n              <Badge className=\"bg-gradient-to-r from-green-500 to-emerald-500 text-white px-4 py-2 text-lg\">\n                <CheckCircle className=\"h-5 w-5 mr-2\" />\n                94.7% Success Rate\n              </Badge>\n              <Badge className=\"bg-gradient-to-r from-blue-500 to-cyan-500 text-white px-4 py-2 text-lg\">\n                <Users className=\"h-5 w-5 mr-2\" />\n                50,000+ Active Users\n              </Badge>\n              <Badge className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-2 text-lg\">\n                <DollarSign className=\"h-5 w-5 mr-2\" />\n                $2.5B+ Trades Executed\n              </Badge>\n            </div>\n            <div className=\"flex flex-wrap justify-center gap-4\">\n              <Button\n                size=\"lg\"\n                className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700\"\n              >\n                <Rocket className=\"h-5 w-5 mr-2\" />\n                Start Free Trial\n              </Button>\n              <Button size=\"lg\" variant=\"outline\" onClick={() => onNavigate('education')}>\n                <GraduationCap className=\"h-5 w-5 mr-2\" />\n                Explore Education\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Platform Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n        {Object.entries(platformStats).map(([key, value]) => {\n          const statConfig: Record<string, { icon: React.ComponentType<any>; label: string; color: string }> = {\n            totalUsers: { icon: Users, label: 'Active Users', color: 'text-blue-400' },\n            successRate: { icon: Target, label: 'Success Rate', color: 'text-green-400' },\n            avgReturns: { icon: TrendingUp, label: 'Avg Returns', color: 'text-purple-400' },\n            uptime: { icon: Activity, label: 'Uptime', color: 'text-cyan-400' },\n            tradesExecuted: { icon: BarChart3, label: 'Trades Executed', color: 'text-yellow-400' },\n            aiModels: { icon: Brain, label: 'AI Models', color: 'text-pink-400' },\n            dataPoints: { icon: Database, label: 'Data Points', color: 'text-orange-400' },\n            countries: { icon: Globe, label: 'Countries', color: 'text-emerald-400' },\n          };\n          const config = statConfig[key];\n          const IconComponent = config.icon;\n\n          return (\n            <Card\n              key={key}\n              className=\"bg-slate-800/50 backdrop-blur-sm border-slate-700/50 hover:border-blue-500/30 transition-all duration-300\"\n            >\n              <CardContent className=\"p-6 text-center\">\n                <IconComponent className={`h-8 w-8 mx-auto mb-3 ${config.color}`} />\n                <div className={`text-2xl font-bold ${config.color} mb-1`}>{value}</div>\n                <div className=\"text-slate-400 text-sm\">{config.label}</div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Core Features */}\n      <Card className=\"bg-slate-900/50 backdrop-blur-xl border-slate-700/50\">\n        <CardHeader>\n          <CardTitle className=\"text-3xl text-white text-center mb-2\">\n            Revolutionary Features\n          </CardTitle>\n          <CardDescription className=\"text-center text-lg text-slate-300\">\n            Discover why AlphaAIStockX is the most advanced trading platform ever created\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Tabs value={activeFeature} onValueChange={setActiveFeature}>\n            <TabsList className=\"grid w-full grid-cols-3 lg:grid-cols-6 mb-8 bg-slate-800/50\">\n              {coreFeatures.map(feature => {\n                const IconComponent = feature.icon;\n                return (\n                  <TabsTrigger\n                    key={feature.id}\n                    value={feature.id}\n                    className=\"data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500/20 data-[state=active]:to-purple-500/20\"\n                  >\n                    <IconComponent className=\"h-4 w-4 mr-2\" />\n                    <span className=\"hidden sm:inline\">{feature.title.split(' ')[0]}</span>\n                  </TabsTrigger>\n                );\n              })}\n            </TabsList>\n\n            {coreFeatures.map(feature => {\n              const IconComponent = feature.icon;\n              return (\n                <TabsContent key={feature.id} value={feature.id} className=\"space-y-6\">\n                  <div className=\"text-center mb-8\">\n                    <div\n                      className={`inline-flex p-4 rounded-full bg-gradient-to-r ${feature.color} mb-4`}\n                    >\n                      <IconComponent className=\"h-12 w-12 text-white\" />\n                    </div>\n                    <h3 className=\"text-2xl font-bold text-white mb-2\">{feature.title}</h3>\n                    <p className=\"text-lg text-slate-300 max-w-2xl mx-auto\">\n                      {feature.description}\n                    </p>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {feature.features.map((item, index) => (\n                      <div\n                        key={index}\n                        className=\"flex items-start gap-3 p-4 bg-slate-800/30 rounded-lg\"\n                      >\n                        <CheckCircle className=\"h-5 w-5 text-green-400 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-slate-300\">{item}</span>\n                      </div>\n                    ))}\n                  </div>\n                </TabsContent>\n              );\n            })}\n          </Tabs>\n        </CardContent>\n      </Card>\n\n      {/* Technology Stack */}\n      <Card className=\"bg-slate-900/50 backdrop-blur-xl border-slate-700/50\">\n        <CardHeader>\n          <CardTitle className=\"text-3xl text-white text-center mb-2\">\n            Cutting-Edge Technology\n          </CardTitle>\n          <CardDescription className=\"text-center text-lg text-slate-300\">\n            Built with the most advanced technologies available today\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {technologyStack.map((category, index) => {\n              const IconComponent = category.icon;\n              return (\n                <div key={index} className=\"space-y-4\">\n                  <div className=\"flex items-center gap-3 mb-4\">\n                    <div className=\"p-3 bg-gradient-to-r from-blue-500/20 to-purple-500/20 rounded-lg\">\n                      <IconComponent className=\"h-6 w-6 text-blue-400\" />\n                    </div>\n                    <h4 className=\"text-xl font-bold text-white\">{category.category}</h4>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {category.technologies.map((tech, techIndex) => (\n                      <div\n                        key={techIndex}\n                        className=\"flex items-center gap-3 p-3 bg-slate-800/30 rounded-lg\"\n                      >\n                        <Sparkles className=\"h-4 w-4 text-cyan-400 flex-shrink-0\" />\n                        <span className=\"text-slate-300\">{tech}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Success Stories */}\n      <Card className=\"bg-slate-900/50 backdrop-blur-xl border-slate-700/50\">\n        <CardHeader>\n          <CardTitle className=\"text-3xl text-white text-center mb-2\">Success Stories</CardTitle>\n          <CardDescription className=\"text-center text-lg text-slate-300\">\n            Real results from real traders using AlphaAIStockX\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {successStories.map((story, index) => (\n              <Card key={index} className=\"bg-slate-800/30 border-slate-600/30\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start gap-4 mb-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center text-white font-bold\">\n                      {story.avatar}\n                    </div>\n                    <div>\n                      <h5 className=\"font-bold text-white\">{story.name}</h5>\n                      <p className=\"text-slate-400 text-sm\">{story.role}</p>\n                    </div>\n                    <div className=\"ml-auto text-right\">\n                      <div className=\"text-green-400 font-bold text-lg\">{story.returns}</div>\n                      <div className=\"text-slate-400 text-sm\">{story.timeframe}</div>\n                    </div>\n                  </div>\n                  <p className=\"text-slate-300 italic\">&quot;{story.story}&quot;</p>\n                  <div className=\"flex items-center gap-1 mt-3\">\n                    {[...Array(5)].map((_, i) => (\n                      <Star key={i} className=\"h-4 w-4 text-yellow-400 fill-current\" />\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Company Timeline */}\n      <Card className=\"bg-slate-900/50 backdrop-blur-xl border-slate-700/50\">\n        <CardHeader>\n          <CardTitle className=\"text-3xl text-white text-center mb-2\">Our Journey</CardTitle>\n          <CardDescription className=\"text-center text-lg text-slate-300\">\n            From startup to the world&apos;s leading AI trading platform\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"relative\">\n            <div className=\"absolute left-8 top-0 bottom-0 w-0.5 bg-gradient-to-b from-blue-500 to-purple-500\"></div>\n            <div className=\"space-y-8\">\n              {companyMilestones.map((milestone, index) => {\n                const IconComponent = milestone.icon;\n                return (\n                  <div key={index} className=\"relative flex items-center gap-6\">\n                    <div className=\"relative z-10 w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n                      <IconComponent className=\"h-8 w-8 text-white\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <div className=\"text-2xl font-bold text-blue-400 mb-1\">{milestone.year}</div>\n                      <div className=\"text-lg text-white\">{milestone.event}</div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Why Choose Us */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-purple-900/20 border-2 border-blue-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-3xl text-white text-center mb-2\">\n            Why AlphaAIStockX is Amazing\n          </CardTitle>\n          <CardDescription className=\"text-center text-lg text-slate-300\">\n            The reasons why we&apos;re revolutionizing the trading industry\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[\n              {\n                icon: Lightning,\n                title: 'Lightning Fast',\n                description: '5-15ms execution speed beats 99% of competitors',\n                color: 'text-yellow-400',\n              },\n              {\n                icon: Brain,\n                title: 'AI Superiority',\n                description: '47 AI models working together for maximum accuracy',\n                color: 'text-blue-400',\n              },\n              {\n                icon: Shield,\n                title: 'Quantum Security',\n                description: 'Post-quantum cryptography protects your investments',\n                color: 'text-green-400',\n              },\n              {\n                icon: GraduationCap,\n                title: 'Complete Education',\n                description: 'From beginner to Series 7 certified professional',\n                color: 'text-purple-400',\n              },\n              {\n                icon: Globe,\n                title: 'Global Reach',\n                description: 'Access to 50+ exchanges across 120+ countries',\n                color: 'text-cyan-400',\n              },\n              {\n                icon: Award,\n                title: 'Proven Results',\n                description: '94.7% success rate with $2.5B+ in executed trades',\n                color: 'text-orange-400',\n              },\n            ].map((reason, index) => {\n              const IconComponent = reason.icon;\n              return (\n                <div key={index} className=\"text-center p-6 bg-slate-800/30 rounded-lg\">\n                  <IconComponent className={`h-12 w-12 mx-auto mb-4 ${reason.color}`} />\n                  <h4 className=\"text-xl font-bold text-white mb-2\">{reason.title}</h4>\n                  <p className=\"text-slate-300\">{reason.description}</p>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Call to Action */}\n      <Card className=\"bg-gradient-to-r from-purple-900/30 to-blue-900/30 border-2 border-purple-500/50 backdrop-blur-xl\">\n        <CardContent className=\"p-12 text-center\">\n          <Crown className=\"h-16 w-16 text-yellow-400 mx-auto mb-6\" />\n          <h2 className=\"text-4xl font-bold text-white mb-4\">Ready to Transform Your Trading?</h2>\n          <p className=\"text-xl text-slate-300 mb-8 max-w-2xl mx-auto\">\n            Join 50,000+ successful traders who are already using AlphaAIStockX to maximize their\n            profits and master the markets with AI-powered precision.\n          </p>\n          <div className=\"flex flex-wrap justify-center gap-4\">\n            <Button\n              size=\"lg\"\n              className=\"bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-lg px-8 py-4\"\n            >\n              <Rocket className=\"h-6 w-6 mr-2\" />\n              Start Your Free Trial\n            </Button>\n            <Button\n              size=\"lg\"\n              variant=\"outline\"\n              className=\"text-lg px-8 py-4\"\n              onClick={() => onNavigate('education')}\n            >\n              <BookOpen className=\"h-6 w-6 mr-2\" />\n              Explore Education\n            </Button>\n            <Button size=\"lg\" variant=\"outline\" className=\"text-lg px-8 py-4\">\n              <MessageSquare className=\"h-6 w-6 mr-2\" />\n              Contact Sales\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/admin/AdminDashboard.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `·(user.id·===·userId·?·{·...user,·status:·'suspended'·}·:·user)` with `⏎········user.id·===·userId·?·{·...user,·status:·'suspended'·}·:·user⏎······`",
        "line": 275,
        "column": 38,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 275,
        "endColumn": 101,
        "fix": {
          "range": [7188, 7251],
          "text": "\n        user.id === userId ? { ...user, status: 'suspended' } : user\n      "
        }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Input } from '@/components/ui/input';\nimport {\n  Shield,\n  Users,\n  DollarSign,\n  Activity,\n  TrendingUp,\n  AlertTriangle,\n  Eye,\n  Crown,\n  BarChart3,\n  Search,\n  Filter,\n  Download,\n  Settings,\n  Ban,\n  CheckCircle,\n  XCircle,\n  Clock,\n  Target,\n  Brain,\n  Sword,\n} from 'lucide-react';\n\ninterface UserProfile {\n  id: string;\n  name: string;\n  email: string;\n  membershipLevel: string;\n  accountValue: number;\n  profitLoss: number;\n  totalTrades: number;\n  status: string;\n  lastActivity: string;\n  riskScore: number;\n  subscription?: string;\n  lastActive?: string;\n  location?: string;\n  winRate?: number;\n}\n\ninterface SystemAlert {\n  id: string;\n  type: string;\n  message: string;\n  severity: string;\n  timestamp: string;\n}\n\ninterface LiveData {\n  realtimeUsers: number;\n  tradesPerSecond: number;\n  systemAlerts: SystemAlert[];\n  performanceMetrics: {\n    apiResponseTime?: number;\n    databaseConnections?: number;\n    memoryUsage?: number;\n    cpuUsage?: number;\n  };\n}\n\nexport default function AdminDashboard() {\n  const [adminStats, setAdminStats] = useState({\n    totalUsers: 0,\n    activeUsers: 0,\n    totalRevenue: 0,\n    dailyRevenue: 0,\n    totalTrades: 0,\n    activeTrades: 0,\n    systemHealth: 0,\n    serverLoad: 0,\n  });\n\n  const [userProfiles, setUserProfiles] = useState<UserProfile[]>([]);\n  const [liveData, setLiveData] = useState<LiveData>({\n    realtimeUsers: 0,\n    tradesPerSecond: 0,\n    systemAlerts: [],\n    performanceMetrics: {},\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  useEffect(() => {\n    // Simulate real-time admin data\n    const interval = setInterval(() => {\n      generateAdminStats();\n      generateUserProfiles();\n      generateLiveData();\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const generateAdminStats = () => {\n    setAdminStats({\n      totalUsers: 15847 + Math.floor(Math.random() * 100),\n      activeUsers: 3421 + Math.floor(Math.random() * 50),\n      totalRevenue: 2847392 + Math.random() * 10000,\n      dailyRevenue: 47832 + Math.random() * 5000,\n      totalTrades: 892456 + Math.floor(Math.random() * 1000),\n      activeTrades: 1247 + Math.floor(Math.random() * 100),\n      systemHealth: 95 + Math.random() * 5,\n      serverLoad: 45 + Math.random() * 30,\n    });\n  };\n\n  const generateUserProfiles = () => {\n    const profiles = [\n      {\n        id: '1',\n        name: 'John Alpha',\n        email: 'john@example.com',\n        membershipLevel: 'ultimate',\n        status: 'active',\n        totalTrades: 1247,\n        profitLoss: 23847.32,\n        riskScore: 7.2,\n        lastActivity: '2 minutes ago',\n        location: 'New York, USA',\n        accountValue: 125000,\n        winRate: 73.5,\n        subscription: 'ultimate',\n        lastActive: '2 minutes ago',\n      },\n      {\n        id: '2',\n        name: 'Sarah Wolf',\n        email: 'sarah@example.com',\n        membershipLevel: 'pro',\n        status: 'active',\n        totalTrades: 892,\n        profitLoss: 15632.18,\n        riskScore: 5.8,\n        lastActivity: '5 minutes ago',\n        location: 'London, UK',\n        accountValue: 87500,\n        winRate: 68.2,\n        subscription: 'pro',\n        lastActive: '5 minutes ago',\n      },\n      {\n        id: '3',\n        name: 'Mike Predator',\n        email: 'mike@example.com',\n        membershipLevel: 'ultimate',\n        status: 'suspended',\n        totalTrades: 2156,\n        profitLoss: -8934.67,\n        riskScore: 9.1,\n        lastActivity: '1 hour ago',\n        location: 'Tokyo, Japan',\n        accountValue: 45000,\n        winRate: 42.3,\n        subscription: 'ultimate',\n        lastActive: '1 hour ago',\n      },\n      {\n        id: '4',\n        name: 'Emma Hunter',\n        email: 'emma@example.com',\n        membershipLevel: 'basic',\n        status: 'active',\n        totalTrades: 234,\n        profitLoss: 3247.89,\n        riskScore: 3.4,\n        lastActivity: '10 minutes ago',\n        location: 'Sydney, Australia',\n        accountValue: 25000,\n        winRate: 61.7,\n        subscription: 'basic',\n        lastActive: '10 minutes ago',\n      },\n      {\n        id: '5',\n        name: 'David Apex',\n        email: 'david@example.com',\n        membershipLevel: 'ultimate',\n        subscription: 'ultimate',\n        status: 'active',\n        totalTrades: 3421,\n        profitLoss: 67834.21,\n        riskScore: 6.9,\n        lastActivity: '1 minute ago',\n        location: 'Toronto, Canada',\n        accountValue: 250000,\n        winRate: 78.9,\n        lastActive: '1 minute ago',\n      },\n    ];\n\n    // Add random variations\n    const updatedProfiles = profiles.map((profile: UserProfile) => ({\n      ...profile,\n      profitLoss: profile.profitLoss + (Math.random() - 0.5) * 1000,\n      accountValue: profile.accountValue + (Math.random() - 0.5) * 5000,\n      totalTrades: profile.totalTrades + Math.floor(Math.random() * 10),\n    }));\n\n    setUserProfiles(updatedProfiles);\n  };\n\n  const generateLiveData = () => {\n    setLiveData({\n      realtimeUsers: 3421 + Math.floor(Math.random() * 100),\n      tradesPerSecond: 12.5 + Math.random() * 5,\n      systemAlerts: [\n        {\n          id: '1',\n          type: 'warning',\n          message: 'High server load detected on EU-West-1',\n          timestamp: new Date().toISOString(),\n          severity: 'medium',\n        },\n        {\n          id: '2',\n          type: 'info',\n          message: 'New user registration spike: +15% in last hour',\n          timestamp: new Date(Date.now() - 300000).toISOString(),\n          severity: 'low',\n        },\n        {\n          id: '3',\n          type: 'error',\n          message: 'Payment gateway timeout for 3 transactions',\n          timestamp: new Date(Date.now() - 600000).toISOString(),\n          severity: 'high',\n        },\n      ],\n      performanceMetrics: {\n        apiResponseTime: 145 + Math.random() * 50,\n        databaseConnections: 847 + Math.floor(Math.random() * 100),\n        memoryUsage: 68 + Math.random() * 15,\n        cpuUsage: 42 + Math.random() * 20,\n      },\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'text-green-400';\n      case 'suspended':\n        return 'text-red-400';\n      case 'pending':\n        return 'text-yellow-400';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  const getSubscriptionColor = (subscription: string) => {\n    switch (subscription) {\n      case 'ultimate':\n        return 'bg-gradient-to-r from-red-500 to-orange-600';\n      case 'pro':\n        return 'bg-gradient-to-r from-purple-500 to-blue-600';\n      case 'basic':\n        return 'bg-gradient-to-r from-blue-500 to-cyan-600';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const suspendUser = (userId: string) => {\n    setUserProfiles(prev =>\n      prev.map((user: UserProfile) => (user.id === userId ? { ...user, status: 'suspended' } : user))\n    );\n  };\n\n  const activateUser = (userId: string) => {\n    setUserProfiles(prev =>\n      prev.map((user: UserProfile) => (user.id === userId ? { ...user, status: 'active' } : user))\n    );\n  };\n\n  const filteredUsers = userProfiles.filter(\n    user =>\n      user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Admin Header */}\n      <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-red-500/10 to-orange-500/5\"></div>\n        <CardHeader className=\"relative\">\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"relative\">\n                <Shield size={32} className=\"text-red-400 animate-pulse\" />\n                <Crown\n                  size={16}\n                  className=\"text-yellow-400 absolute -top-1 -right-1 animate-bounce\"\n                />\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold bg-gradient-to-r from-red-400 to-orange-400 bg-clip-text text-transparent\">\n                  Alpha Wolf Admin Command Center\n                </h2>\n                <p className=\"text-sm text-gray-400\">Supreme Pack Leader • Full System Control</p>\n              </div>\n            </div>\n            <Badge className=\"ml-3 bg-gradient-to-r from-red-500 to-orange-600 animate-pulse\">\n              <Eye size={12} className=\"mr-1\" />\n              LIVE MONITORING\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n      </Card>\n\n      {/* Real-Time System Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4\">\n        <Card className=\"bg-gray-900/60 border-green-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <Users size={24} className=\"text-green-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-green-400\">\n              {adminStats.totalUsers.toLocaleString()}\n            </p>\n            <p className=\"text-xs text-gray-400\">Total Users</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-900/60 border-blue-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <Activity size={24} className=\"text-blue-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-blue-400\">\n              {adminStats.activeUsers.toLocaleString()}\n            </p>\n            <p className=\"text-xs text-gray-400\">Active Users</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-900/60 border-yellow-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <DollarSign size={24} className=\"text-yellow-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-yellow-400\">\n              ${(adminStats.totalRevenue / 1000000).toFixed(1)}M\n            </p>\n            <p className=\"text-xs text-gray-400\">Total Revenue</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-900/60 border-orange-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <TrendingUp size={24} className=\"text-orange-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-orange-400\">\n              ${(adminStats.dailyRevenue / 1000).toFixed(0)}K\n            </p>\n            <p className=\"text-xs text-gray-400\">Daily Revenue</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-900/60 border-purple-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <Sword size={24} className=\"text-purple-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-purple-400\">\n              {adminStats.totalTrades.toLocaleString()}\n            </p>\n            <p className=\"text-xs text-gray-400\">Total Trades</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <Target size={24} className=\"text-red-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-red-400\">\n              {adminStats.activeTrades.toLocaleString()}\n            </p>\n            <p className=\"text-xs text-gray-400\">Active Trades</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-900/60 border-cyan-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <CheckCircle size={24} className=\"text-cyan-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-cyan-400\">{adminStats.systemHealth.toFixed(1)}%</p>\n            <p className=\"text-xs text-gray-400\">System Health</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gray-900/60 border-pink-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <BarChart3 size={24} className=\"text-pink-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-pink-400\">{adminStats.serverLoad.toFixed(0)}%</p>\n            <p className=\"text-xs text-gray-400\">Server Load</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Admin Tabs */}\n      <Tabs defaultValue=\"users\" className=\"space-y-6\">\n        <TabsList className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n          <TabsTrigger\n            value=\"users\"\n            className=\"data-[state=active]:bg-red-500/20 data-[state=active]:text-red-300\"\n          >\n            <Users size={16} className=\"mr-2\" />\n            User Profiles\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"live\"\n            className=\"data-[state=active]:bg-red-500/20 data-[state=active]:text-red-300\"\n          >\n            <Activity size={16} className=\"mr-2\" />\n            Live Data\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"system\"\n            className=\"data-[state=active]:bg-red-500/20 data-[state=active]:text-red-300\"\n          >\n            <Settings size={16} className=\"mr-2\" />\n            System Monitor\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"analytics\"\n            className=\"data-[state=active]:bg-red-500/20 data-[state=active]:text-red-300\"\n          >\n            <BarChart3 size={16} className=\"mr-2\" />\n            Analytics\n          </TabsTrigger>\n        </TabsList>\n\n        {/* User Profiles Tab */}\n        <TabsContent value=\"users\">\n          <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-gray-100 flex items-center\">\n                  <Users size={20} className=\"mr-2 text-blue-400\" />\n                  User Profile Management\n                </CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"relative\">\n                    <Search\n                      size={16}\n                      className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\n                    />\n                    <Input\n                      placeholder=\"Search users...\"\n                      value={searchQuery}\n                      onChange={e => setSearchQuery(e.target.value)}\n                      className=\"pl-10 w-64 bg-gray-800/30 border-red-500/30 text-gray-200\"\n                    />\n                  </div>\n                  <Button variant=\"outline\" className=\"border-red-500/30 text-red-400\">\n                    <Filter size={16} className=\"mr-2\" />\n                    Filter\n                  </Button>\n                  <Button variant=\"outline\" className=\"border-red-500/30 text-red-400\">\n                    <Download size={16} className=\"mr-2\" />\n                    Export\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {filteredUsers.map((user: UserProfile) => (\n                  <div\n                    key={user.id}\n                    className=\"p-4 bg-gradient-to-r from-red-800/20 to-orange-800/20 rounded-lg border border-red-500/30 hover:border-red-400/50 transition-all\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"relative\">\n                          <div className=\"w-12 h-12 bg-gradient-to-r from-red-500 to-orange-600 rounded-full flex items-center justify-center\">\n                            <span className=\"text-white font-bold\">{user.name.charAt(0)}</span>\n                          </div>\n                          <div\n                            className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-gray-900 ${\n                              user.status === 'active' ? 'bg-green-400' : 'bg-red-400'\n                            }`}\n                          ></div>\n                        </div>\n\n                        <div>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-gray-100 font-bold text-lg\">{user.name}</span>\n                            <Badge className={getSubscriptionColor(user.subscription || 'basic')}>\n                              {(user.subscription || 'basic').toUpperCase()}\n                            </Badge>\n                            <Badge\n                              className={`${getStatusColor(user.status)} border border-current`}\n                              variant=\"outline\"\n                            >\n                              {user.status.toUpperCase()}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-gray-400\">{user.email}</p>\n                          <p className=\"text-xs text-gray-500\">\n                            {user.location} • {user.lastActive}\n                          </p>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                          <div>\n                            <p className=\"text-xs text-gray-400\">Account Value</p>\n                            <p className=\"text-sm font-bold text-green-400\">\n                              ${user.accountValue.toLocaleString()}\n                            </p>\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-gray-400\">Total Trades</p>\n                            <p className=\"text-sm font-bold text-blue-400\">\n                              {user.totalTrades.toLocaleString()}\n                            </p>\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-gray-400\">P&L</p>\n                            <p\n                              className={`text-sm font-bold ${user.profitLoss >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                            >\n                              {user.profitLoss >= 0 ? '+' : ''}${user.profitLoss.toFixed(2)}\n                            </p>\n                          </div>\n                          <div>\n                            <p className=\"text-xs text-gray-400\">Win Rate</p>\n                            <p className=\"text-sm font-bold text-purple-400\">\n                              {(user.winRate || 0).toFixed(1)}%\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"text-center\">\n                          <p className=\"text-xs text-gray-400\">Risk Score</p>\n                          <div className=\"flex items-center\">\n                            <span\n                              className={`font-bold ${\n                                user.riskScore > 8\n                                  ? 'text-red-400'\n                                  : user.riskScore > 5\n                                    ? 'text-yellow-400'\n                                    : 'text-green-400'\n                              }`}\n                            >\n                              {user.riskScore.toFixed(1)}\n                            </span>\n                            <Progress\n                              value={user.riskScore * 10}\n                              className=\"w-16 h-2 ml-2\"\n                              style={{\n                                backgroundColor:\n                                  user.riskScore > 8\n                                    ? '#ef4444'\n                                    : user.riskScore > 5\n                                      ? '#eab308'\n                                      : '#22c55e',\n                              }}\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"flex flex-col space-y-1\">\n                          {user.status === 'active' ? (\n                            <Button\n                              onClick={() => suspendUser(user.id)}\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"border-red-500/30 text-red-400 hover:bg-red-500/20\"\n                            >\n                              <Ban size={12} className=\"mr-1\" />\n                              Suspend\n                            </Button>\n                          ) : (\n                            <Button\n                              onClick={() => activateUser(user.id)}\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"border-green-500/30 text-green-400 hover:bg-green-500/20\"\n                            >\n                              <CheckCircle size={12} className=\"mr-1\" />\n                              Activate\n                            </Button>\n                          )}\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"border-blue-500/30 text-blue-400 hover:bg-blue-500/20\"\n                          >\n                            <Eye size={12} className=\"mr-1\" />\n                            View\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Live Data Tab */}\n        <TabsContent value=\"live\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-100 flex items-center\">\n                  <Activity size={20} className=\"mr-2 text-green-400 animate-pulse\" />\n                  Real-Time Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between p-3 bg-green-500/10 rounded-lg border border-green-500/30\">\n                    <span className=\"text-gray-300\">Users Online</span>\n                    <span className=\"text-green-400 font-bold text-xl\">\n                      {liveData.realtimeUsers.toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-blue-500/10 rounded-lg border border-blue-500/30\">\n                    <span className=\"text-gray-300\">Trades/Second</span>\n                    <span className=\"text-blue-400 font-bold text-xl\">\n                      {liveData.tradesPerSecond.toFixed(1)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-purple-500/10 rounded-lg border border-purple-500/30\">\n                    <span className=\"text-gray-300\">API Response Time</span>\n                    <span className=\"text-purple-400 font-bold text-xl\">\n                      {liveData.performanceMetrics.apiResponseTime?.toFixed(0)}ms\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-orange-500/10 rounded-lg border border-orange-500/30\">\n                    <span className=\"text-gray-300\">DB Connections</span>\n                    <span className=\"text-orange-400 font-bold text-xl\">\n                      {liveData.performanceMetrics.databaseConnections}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-100 flex items-center\">\n                  <AlertTriangle size={20} className=\"mr-2 text-yellow-400\" />\n                  System Alerts\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {liveData.systemAlerts.map((alert: SystemAlert) => (\n                    <div\n                      key={alert.id}\n                      className={`p-3 rounded-lg border ${\n                        alert.severity === 'high'\n                          ? 'bg-red-500/10 border-red-500/30'\n                          : alert.severity === 'medium'\n                            ? 'bg-yellow-500/10 border-yellow-500/30'\n                            : 'bg-blue-500/10 border-blue-500/30'\n                      }`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          {alert.severity === 'high' ? (\n                            <XCircle size={16} className=\"text-red-400\" />\n                          ) : alert.severity === 'medium' ? (\n                            <AlertTriangle size={16} className=\"text-yellow-400\" />\n                          ) : (\n                            <CheckCircle size={16} className=\"text-blue-400\" />\n                          )}\n                          <span className=\"text-gray-200 font-medium\">\n                            {alert.type.toUpperCase()}\n                          </span>\n                        </div>\n                        <span className=\"text-xs text-gray-400\">\n                          {new Date(alert.timestamp).toLocaleTimeString()}\n                        </span>\n                      </div>\n                      <p className=\"text-sm text-gray-300 mt-1\">{alert.message}</p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* System Monitor Tab */}\n        <TabsContent value=\"system\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-100 flex items-center\">\n                  <Settings size={20} className=\"mr-2 text-cyan-400\" />\n                  Performance Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <div className=\"flex justify-between text-sm text-gray-400 mb-1\">\n                      <span>CPU Usage</span>\n                      <span>{liveData.performanceMetrics.cpuUsage?.toFixed(1)}%</span>\n                    </div>\n                    <Progress value={liveData.performanceMetrics.cpuUsage} className=\"h-3\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm text-gray-400 mb-1\">\n                      <span>Memory Usage</span>\n                      <span>{liveData.performanceMetrics.memoryUsage?.toFixed(1)}%</span>\n                    </div>\n                    <Progress value={liveData.performanceMetrics.memoryUsage} className=\"h-3\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm text-gray-400 mb-1\">\n                      <span>Server Load</span>\n                      <span>{adminStats.serverLoad.toFixed(1)}%</span>\n                    </div>\n                    <Progress value={adminStats.serverLoad} className=\"h-3\" />\n                  </div>\n                  <div>\n                    <div className=\"flex justify-between text-sm text-gray-400 mb-1\">\n                      <span>System Health</span>\n                      <span>{adminStats.systemHealth.toFixed(1)}%</span>\n                    </div>\n                    <Progress value={adminStats.systemHealth} className=\"h-3\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-100 flex items-center\">\n                  <Brain size={20} className=\"mr-2 text-purple-400\" />\n                  AI System Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-green-500/10 rounded-lg border border-green-500/30\">\n                    <span className=\"text-gray-300\">Alpha Wolf Bot</span>\n                    <Badge className=\"bg-green-500\">\n                      <CheckCircle size={12} className=\"mr-1\" />\n                      ACTIVE\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-green-500/10 rounded-lg border border-green-500/30\">\n                    <span className=\"text-gray-300\">Pattern Recognition</span>\n                    <Badge className=\"bg-green-500\">\n                      <CheckCircle size={12} className=\"mr-1\" />\n                      ACTIVE\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-green-500/10 rounded-lg border border-green-500/30\">\n                    <span className=\"text-gray-300\">Sports Predictor</span>\n                    <Badge className=\"bg-green-500\">\n                      <CheckCircle size={12} className=\"mr-1\" />\n                      ACTIVE\n                    </Badge>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-yellow-500/10 rounded-lg border border-yellow-500/30\">\n                    <span className=\"text-gray-300\">Model Training</span>\n                    <Badge className=\"bg-yellow-500\">\n                      <Clock size={12} className=\"mr-1\" />\n                      TRAINING\n                    </Badge>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Analytics Tab */}\n        <TabsContent value=\"analytics\">\n          <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100 flex items-center\">\n                <BarChart3 size={20} className=\"mr-2 text-orange-400\" />\n                Platform Analytics\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-gray-200 font-semibold\">User Distribution</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Ultimate Pack:</span>\n                      <span className=\"text-red-400 font-semibold\">45%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Pro Pack:</span>\n                      <span className=\"text-purple-400 font-semibold\">35%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Basic Pack:</span>\n                      <span className=\"text-blue-400 font-semibold\">20%</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-gray-200 font-semibold\">Trading Performance</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Avg Win Rate:</span>\n                      <span className=\"text-green-400 font-semibold\">68.7%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Avg Profit Factor:</span>\n                      <span className=\"text-green-400 font-semibold\">2.34</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Total Volume:</span>\n                      <span className=\"text-yellow-400 font-semibold\">$2.8B</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-gray-200 font-semibold\">System Metrics</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Uptime:</span>\n                      <span className=\"text-green-400 font-semibold\">99.97%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Avg Response:</span>\n                      <span className=\"text-blue-400 font-semibold\">142ms</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Error Rate:</span>\n                      <span className=\"text-green-400 font-semibold\">0.03%</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/admin/AdminProfile.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [706, 709], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [706, 709], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [723, 726], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [723, 726], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'onUpdateAdmin' is defined but never used.",
        "line": 40,
        "column": 47,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 40,
        "endColumn": 60
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'saveSettings' is assigned a value but never used.",
        "line": 93,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Shield,\n  Crown,\n  Settings,\n  Key,\n  Bell,\n  Database,\n  Users,\n  Activity,\n  Lock,\n  AlertTriangle,\n  CheckCircle,\n  Save,\n} from 'lucide-react';\n\ninterface Admin {\n  id: string;\n  name: string;\n  email: string;\n  role: string;\n  permissions: any;\n  settings: any;\n}\n\ninterface AdminProfileProps {\n  admin: Admin;\n  onUpdateAdmin: (admin: Admin) => void;\n}\n\nexport default function AdminProfile({ admin, onUpdateAdmin }: AdminProfileProps) {\n  const [adminSettings, setAdminSettings] = useState({\n    notifications: {\n      systemAlerts: true,\n      userActivity: true,\n      securityEvents: true,\n      performanceAlerts: true,\n      revenueUpdates: true,\n    },\n    permissions: {\n      userManagement: true,\n      systemConfig: true,\n      dataAccess: true,\n      financialData: true,\n      securitySettings: true,\n    },\n    preferences: {\n      darkMode: true,\n      autoRefresh: true,\n      detailedLogs: true,\n      realTimeUpdates: true,\n    },\n  });\n\n  const [securitySettings, setSecuritySettings] = useState({\n    twoFactorEnabled: true,\n    sessionTimeout: 30,\n    ipWhitelist: ['192.168.1.1', '10.0.0.1'],\n    lastPasswordChange: '2024-01-15',\n    loginAttempts: 3,\n  });\n\n  const handleNotificationChange = (key: string, value: boolean) => {\n    setAdminSettings(prev => ({\n      ...prev,\n      notifications: { ...prev.notifications, [key]: value },\n    }));\n  };\n\n  const handlePermissionChange = (key: string, value: boolean) => {\n    setAdminSettings(prev => ({\n      ...prev,\n      permissions: { ...prev.permissions, [key]: value },\n    }));\n  };\n\n  const handlePreferenceChange = (key: string, value: boolean) => {\n    setAdminSettings(prev => ({\n      ...prev,\n      preferences: { ...prev.preferences, [key]: value },\n    }));\n  };\n\n  const saveSettings = () => {\n    // Save admin settings\n    console.log('Saving admin settings:', adminSettings);\n    // Call API to update settings\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Admin Profile Header */}\n      <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-red-500 to-orange-600 rounded-full flex items-center justify-center\">\n                  <Crown size={32} className=\"text-yellow-400\" />\n                </div>\n                <div className=\"absolute -bottom-1 -right-1 w-6 h-6 bg-green-400 rounded-full border-2 border-gray-900 flex items-center justify-center\">\n                  <Shield size={12} className=\"text-white\" />\n                </div>\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold text-gray-100\">\n                  {admin?.name || 'Supreme Alpha Admin'}\n                </h2>\n                <p className=\"text-gray-400\">{admin?.email || 'admin@alphawolf.com'}</p>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <Badge className=\"bg-gradient-to-r from-red-500 to-orange-600\">\n                    <Crown size={12} className=\"mr-1\" />\n                    SUPREME ADMIN\n                  </Badge>\n                  <Badge className=\"bg-green-500\">\n                    <CheckCircle size={12} className=\"mr-1\" />\n                    ACTIVE\n                  </Badge>\n                </div>\n              </div>\n            </div>\n            <Button className=\"bg-gradient-to-r from-red-500 to-orange-600 hover:from-red-600 hover:to-orange-700\">\n              <Save size={16} className=\"mr-2\" />\n              Save Changes\n            </Button>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Admin Settings Tabs */}\n      <Tabs defaultValue=\"permissions\" className=\"space-y-6\">\n        <TabsList className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n          <TabsTrigger\n            value=\"permissions\"\n            className=\"data-[state=active]:bg-red-500/20 data-[state=active]:text-red-300\"\n          >\n            <Key size={16} className=\"mr-2\" />\n            Permissions\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"security\"\n            className=\"data-[state=active]:bg-red-500/20 data-[state=active]:text-red-300\"\n          >\n            <Lock size={16} className=\"mr-2\" />\n            Security\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"notifications\"\n            className=\"data-[state=active]:bg-red-500/20 data-[state=active]:text-red-300\"\n          >\n            <Bell size={16} className=\"mr-2\" />\n            Notifications\n          </TabsTrigger>\n          <TabsTrigger\n            value=\"preferences\"\n            className=\"data-[state=active]:bg-red-500/20 data-[state=active]:text-red-300\"\n          >\n            <Settings size={16} className=\"mr-2\" />\n            Preferences\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Permissions Tab */}\n        <TabsContent value=\"permissions\">\n          <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100 flex items-center\">\n                <Key size={20} className=\"mr-2 text-yellow-400\" />\n                Admin Permissions\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-gray-200 font-semibold\">System Access</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Users size={16} className=\"text-blue-400\" />\n                        <span className=\"text-gray-300\">User Management</span>\n                      </div>\n                      <Switch\n                        checked={adminSettings.permissions.userManagement}\n                        onCheckedChange={checked =>\n                          handlePermissionChange('userManagement', checked)\n                        }\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Settings size={16} className=\"text-green-400\" />\n                        <span className=\"text-gray-300\">System Configuration</span>\n                      </div>\n                      <Switch\n                        checked={adminSettings.permissions.systemConfig}\n                        onCheckedChange={checked => handlePermissionChange('systemConfig', checked)}\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Database size={16} className=\"text-purple-400\" />\n                        <span className=\"text-gray-300\">Data Access</span>\n                      </div>\n                      <Switch\n                        checked={adminSettings.permissions.dataAccess}\n                        onCheckedChange={checked => handlePermissionChange('dataAccess', checked)}\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-gray-200 font-semibold\">Advanced Permissions</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Activity size={16} className=\"text-orange-400\" />\n                        <span className=\"text-gray-300\">Financial Data</span>\n                      </div>\n                      <Switch\n                        checked={adminSettings.permissions.financialData}\n                        onCheckedChange={checked =>\n                          handlePermissionChange('financialData', checked)\n                        }\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Shield size={16} className=\"text-red-400\" />\n                        <span className=\"text-gray-300\">Security Settings</span>\n                      </div>\n                      <Switch\n                        checked={adminSettings.permissions.securitySettings}\n                        onCheckedChange={checked =>\n                          handlePermissionChange('securitySettings', checked)\n                        }\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Security Tab */}\n        <TabsContent value=\"security\">\n          <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100 flex items-center\">\n                <Lock size={20} className=\"mr-2 text-red-400\" />\n                Security Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-gray-200 font-semibold\">Authentication</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <span className=\"text-gray-300\">Two-Factor Authentication</span>\n                      <Badge\n                        className={\n                          securitySettings.twoFactorEnabled ? 'bg-green-500' : 'bg-red-500'\n                        }\n                      >\n                        {securitySettings.twoFactorEnabled ? 'ENABLED' : 'DISABLED'}\n                      </Badge>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-gray-300\">Session Timeout (minutes)</Label>\n                      <Input\n                        type=\"number\"\n                        value={securitySettings.sessionTimeout}\n                        onChange={e =>\n                          setSecuritySettings(prev => ({\n                            ...prev,\n                            sessionTimeout: Number.parseInt(e.target.value),\n                          }))\n                        }\n                        className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-gray-300\">Max Login Attempts</Label>\n                      <Input\n                        type=\"number\"\n                        value={securitySettings.loginAttempts}\n                        onChange={e =>\n                          setSecuritySettings(prev => ({\n                            ...prev,\n                            loginAttempts: Number.parseInt(e.target.value),\n                          }))\n                        }\n                        className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-gray-200 font-semibold\">Access Control</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-3 bg-gray-800/30 rounded-lg\">\n                      <p className=\"text-gray-300 text-sm mb-2\">Last Password Change</p>\n                      <p className=\"text-gray-100 font-semibold\">\n                        {securitySettings.lastPasswordChange}\n                      </p>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label className=\"text-gray-300\">IP Whitelist</Label>\n                      <div className=\"space-y-1\">\n                        {securitySettings.ipWhitelist.map((ip, index) => (\n                          <div\n                            key={index}\n                            className=\"flex items-center justify-between p-2 bg-gray-800/50 rounded\"\n                          >\n                            <span className=\"text-gray-200 font-mono\">{ip}</span>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"border-red-500/30 text-red-400\"\n                            >\n                              Remove\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                      <Button size=\"sm\" className=\"bg-green-600 hover:bg-green-700\">\n                        Add IP\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Notifications Tab */}\n        <TabsContent value=\"notifications\">\n          <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100 flex items-center\">\n                <Bell size={20} className=\"mr-2 text-blue-400\" />\n                Notification Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <h3 className=\"text-gray-200 font-semibold\">Alert Preferences</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <AlertTriangle size={16} className=\"text-red-400\" />\n                        <span className=\"text-gray-300\">System Alerts</span>\n                      </div>\n                      <Switch\n                        checked={adminSettings.notifications.systemAlerts}\n                        onCheckedChange={checked =>\n                          handleNotificationChange('systemAlerts', checked)\n                        }\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Users size={16} className=\"text-blue-400\" />\n                        <span className=\"text-gray-300\">User Activity</span>\n                      </div>\n                      <Switch\n                        checked={adminSettings.notifications.userActivity}\n                        onCheckedChange={checked =>\n                          handleNotificationChange('userActivity', checked)\n                        }\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Shield size={16} className=\"text-yellow-400\" />\n                        <span className=\"text-gray-300\">Security Events</span>\n                      </div>\n                      <Switch\n                        checked={adminSettings.notifications.securityEvents}\n                        onCheckedChange={checked =>\n                          handleNotificationChange('securityEvents', checked)\n                        }\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Activity size={16} className=\"text-green-400\" />\n                        <span className=\"text-gray-300\">Performance Alerts</span>\n                      </div>\n                      <Switch\n                        checked={adminSettings.notifications.performanceAlerts}\n                        onCheckedChange={checked =>\n                          handleNotificationChange('performanceAlerts', checked)\n                        }\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Activity size={16} className=\"text-purple-400\" />\n                        <span className=\"text-gray-300\">Revenue Updates</span>\n                      </div>\n                      <Switch\n                        checked={adminSettings.notifications.revenueUpdates}\n                        onCheckedChange={checked =>\n                          handleNotificationChange('revenueUpdates', checked)\n                        }\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Preferences Tab */}\n        <TabsContent value=\"preferences\">\n          <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100 flex items-center\">\n                <Settings size={20} className=\"mr-2 text-purple-400\" />\n                Admin Preferences\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <h3 className=\"text-gray-200 font-semibold\">Interface Settings</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <span className=\"text-gray-300\">Dark Mode</span>\n                      <Switch\n                        checked={adminSettings.preferences.darkMode}\n                        onCheckedChange={checked => handlePreferenceChange('darkMode', checked)}\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <span className=\"text-gray-300\">Auto Refresh</span>\n                      <Switch\n                        checked={adminSettings.preferences.autoRefresh}\n                        onCheckedChange={checked => handlePreferenceChange('autoRefresh', checked)}\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <span className=\"text-gray-300\">Detailed Logs</span>\n                      <Switch\n                        checked={adminSettings.preferences.detailedLogs}\n                        onCheckedChange={checked => handlePreferenceChange('detailedLogs', checked)}\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded-lg\">\n                      <span className=\"text-gray-300\">Real-time Updates</span>\n                      <Switch\n                        checked={adminSettings.preferences.realTimeUpdates}\n                        onCheckedChange={checked =>\n                          handlePreferenceChange('realTimeUpdates', checked)\n                        }\n                        className=\"data-[state=checked]:bg-red-500\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/admin/EnhancedAdminDashboard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'editMode' is assigned a value but never used.",
        "line": 61,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 18
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setEditMode' is assigned a value but never used.",
        "line": 61,
        "column": 20,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 61,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 143,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 143,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3507, 3510], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3507, 3510], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'changeMembership' is assigned a value but never used.",
        "line": 165,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 165,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'adjustBalance' is assigned a value but never used.",
        "line": 169,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 169,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Shield,\n  Users,\n  Edit,\n  Ban,\n  CheckCircle,\n  Crown,\n  Search,\n  UserCog,\n  DollarSign,\n  TrendingUp,\n  Activity,\n  Eye,\n  Trash2,\n  RefreshCw,\n} from 'lucide-react';\n\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n  membership: string;\n  status: string;\n  balance: number;\n  totalTrades: number;\n  profitLoss: number;\n  winRate: number;\n  riskScore: number;\n  joinDate: string;\n  lastActive: string;\n  location: string;\n  phone: string;\n  verified: boolean;\n}\n\ninterface EnhancedAdminDashboardProps {\n  onSwitchToOwner: () => void;\n}\n\nexport default function EnhancedAdminDashboard({ onSwitchToOwner }: EnhancedAdminDashboardProps) {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [filterStatus, setFilterStatus] = useState('all');\n  const [editMode, setEditMode] = useState(false);\n\n  useEffect(() => {\n    generateUsers();\n  }, []);\n\n  const generateUsers = () => {\n    const sampleUsers = [\n      {\n        id: 1,\n        name: 'John Alpha',\n        email: 'john@example.com',\n        membership: 'ultimate',\n        status: 'active',\n        balance: 125000,\n        totalTrades: 1247,\n        profitLoss: 23847.32,\n        winRate: 73.5,\n        riskScore: 7.2,\n        joinDate: '2024-01-15',\n        lastActive: '2 minutes ago',\n        location: 'New York, USA',\n        phone: '+1-555-0123',\n        verified: true,\n      },\n      {\n        id: 2,\n        name: 'Sarah Wolf',\n        email: 'sarah@example.com',\n        membership: 'pro',\n        status: 'active',\n        balance: 87500,\n        totalTrades: 892,\n        profitLoss: 15632.18,\n        winRate: 68.2,\n        riskScore: 5.8,\n        joinDate: '2024-02-20',\n        lastActive: '5 minutes ago',\n        location: 'London, UK',\n        phone: '+44-20-7946-0958',\n        verified: true,\n      },\n      {\n        id: 3,\n        name: 'Mike Predator',\n        email: 'mike@example.com',\n        membership: 'ultimate',\n        status: 'suspended',\n        balance: 45000,\n        totalTrades: 2156,\n        profitLoss: -8934.67,\n        winRate: 42.3,\n        riskScore: 9.1,\n        joinDate: '2023-11-10',\n        lastActive: '1 hour ago',\n        location: 'Tokyo, Japan',\n        phone: '+81-3-1234-5678',\n        verified: false,\n      },\n      {\n        id: 4,\n        name: 'Emma Hunter',\n        email: 'emma@example.com',\n        membership: 'basic',\n        status: 'active',\n        balance: 25000,\n        totalTrades: 234,\n        profitLoss: 3247.89,\n        winRate: 61.7,\n        riskScore: 3.4,\n        joinDate: '2024-03-05',\n        lastActive: '10 minutes ago',\n        location: 'Sydney, Australia',\n        phone: '+61-2-9876-5432',\n        verified: true,\n      },\n    ];\n    setUsers(sampleUsers);\n  };\n\n  const updateUser = (userId: number, updates: Partial<User>) => {\n    setUsers(prev =>\n      prev.map((user: any) => (user.id === userId ? { ...user, ...updates } : user))\n    );\n    if (selectedUser && selectedUser.id === userId) {\n      setSelectedUser({ ...selectedUser, ...updates });\n    }\n  };\n\n  const suspendUser = (userId: number) => {\n    updateUser(userId, { status: 'suspended' });\n  };\n\n  const activateUser = (userId: number) => {\n    updateUser(userId, { status: 'active' });\n  };\n\n  const deleteUser = (userId: number) => {\n    setUsers(prev => prev.filter(user => user.id !== userId));\n    if (selectedUser && selectedUser.id === userId) {\n      setSelectedUser(null);\n    }\n  };\n\n  const changeMembership = (userId: number, newMembership: string) => {\n    updateUser(userId, { membership: newMembership });\n  };\n\n  const adjustBalance = (userId: number, newBalance: string) => {\n    updateUser(userId, { balance: Number.parseFloat(newBalance) });\n  };\n\n  // ...existing code...\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'text-green-400';\n      case 'suspended':\n        return 'text-red-400';\n      case 'pending':\n        return 'text-yellow-400';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  const getMembershipColor = (membership: string) => {\n    switch (membership) {\n      case 'ultimate':\n        return 'bg-gradient-to-r from-red-500 to-orange-600';\n      case 'pro':\n        return 'bg-gradient-to-r from-purple-500 to-blue-600';\n      case 'basic':\n        return 'bg-gradient-to-r from-blue-500 to-cyan-600';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Enhanced Admin Header */}\n      <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-red-500/10 to-orange-500/5\"></div>\n        <CardHeader className=\"relative\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"relative\">\n                <Shield size={32} className=\"text-red-400 animate-pulse\" />\n                <Crown\n                  size={16}\n                  className=\"text-yellow-400 absolute -top-1 -right-1 animate-bounce\"\n                />\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold bg-gradient-to-r from-red-400 to-orange-400 bg-clip-text text-transparent\">\n                  Enhanced Admin Control Center\n                </h2>\n                <p className=\"text-sm text-gray-400\">Full User Management & Platform Control</p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                onClick={onSwitchToOwner}\n                className=\"bg-gradient-to-r from-yellow-500 to-orange-600 hover:from-yellow-600 hover:to-orange-700\"\n              >\n                <Crown className=\"mr-2 h-4 w-4\" />\n                Owner Mode\n              </Button>\n              <Badge className=\"bg-gradient-to-r from-red-500 to-orange-600 animate-pulse\">\n                <Eye size={12} className=\"mr-1\" />\n                LIVE ADMIN\n              </Badge>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      <Tabs defaultValue=\"users\" className=\"space-y-6\">\n        <TabsList className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n          <TabsTrigger value=\"users\" className=\"data-[state=active]:bg-red-500/20\">\n            <Users size={16} className=\"mr-2\" />\n            User Management\n          </TabsTrigger>\n          <TabsTrigger value=\"edit\" className=\"data-[state=active]:bg-red-500/20\">\n            <UserCog size={16} className=\"mr-2\" />\n            Edit Profiles\n          </TabsTrigger>\n          <TabsTrigger value=\"analytics\" className=\"data-[state=active]:bg-red-500/20\">\n            <TrendingUp size={16} className=\"mr-2\" />\n            Analytics\n          </TabsTrigger>\n        </TabsList>\n\n        {/* User Management Tab */}\n        <TabsContent value=\"users\">\n          <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"text-gray-100 flex items-center\">\n                  <Users size={20} className=\"mr-2 text-blue-400\" />\n                  Advanced User Management\n                </CardTitle>\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"relative\">\n                    <Search\n                      size={16}\n                      className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\"\n                    />\n                    <Input\n                      placeholder=\"Search users...\"\n                      value={searchQuery}\n                      onChange={e => setSearchQuery(e.target.value)}\n                      className=\"pl-10 w-64 bg-gray-800/30 border-red-500/30 text-gray-200\"\n                    />\n                  </div>\n                  <Select value={filterStatus} onValueChange={setFilterStatus}>\n                    <SelectTrigger className=\"w-32 bg-gray-800/30 border-red-500/30 text-gray-200\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Status</SelectItem>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"suspended\">Suspended</SelectItem>\n                      <SelectItem value=\"pending\">Pending</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <Button variant=\"outline\" className=\"border-red-500/30 text-red-400\">\n                    <RefreshCw size={16} className=\"mr-2\" />\n                    Refresh\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {users\n                  .filter(user => {\n                    const matchesSearch =\n                      user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                      user.email.toLowerCase().includes(searchQuery.toLowerCase());\n                    const matchesStatus = filterStatus === 'all' || user.status === filterStatus;\n                    return matchesSearch && matchesStatus;\n                  })\n                  .map((user: User) => (\n                    <div\n                      key={user.id}\n                      className=\"p-4 bg-gradient-to-r from-red-800/20 to-orange-800/20 rounded-lg border border-red-500/30 hover:border-red-400/50 transition-all\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"relative\">\n                            <div className=\"w-12 h-12 bg-gradient-to-r from-red-500 to-orange-600 rounded-full flex items-center justify-center\">\n                              <span className=\"text-white font-bold\">{user.name.charAt(0)}</span>\n                            </div>\n                            <div\n                              className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-gray-900 ${\n                                user.status === 'active' ? 'bg-green-400' : 'bg-red-400'\n                              }`}\n                            ></div>\n                          </div>\n\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-2 mb-1\">\n                              <span className=\"text-gray-100 font-bold text-lg\">{user.name}</span>\n                              <Badge className={getMembershipColor(user.membership)}>\n                                {user.membership.toUpperCase()}\n                              </Badge>\n                              <Badge\n                                className={`${getStatusColor(user.status)} border border-current`}\n                                variant=\"outline\"\n                              >\n                                {user.status.toUpperCase()}\n                              </Badge>\n                              {user.verified && (\n                                <Badge className=\"bg-green-500\">\n                                  <CheckCircle size={12} className=\"mr-1\" />\n                                  VERIFIED\n                                </Badge>\n                              )}\n                            </div>\n                            <p className=\"text-sm text-gray-400\">{user.email}</p>\n                            <p className=\"text-xs text-gray-500\">\n                              {user.location} • Joined {user.joinDate} • {user.lastActive}\n                            </p>\n                          </div>\n\n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                            <div>\n                              <p className=\"text-xs text-gray-400\">Balance</p>\n                              <p className=\"text-sm font-bold text-green-400\">\n                                ${user.balance.toLocaleString()}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-xs text-gray-400\">Trades</p>\n                              <p className=\"text-sm font-bold text-blue-400\">\n                                {user.totalTrades.toLocaleString()}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-xs text-gray-400\">P&L</p>\n                              <p\n                                className={`text-sm font-bold ${user.profitLoss >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                              >\n                                {user.profitLoss >= 0 ? '+' : ''}${user.profitLoss.toFixed(2)}\n                              </p>\n                            </div>\n                            <div>\n                              <p className=\"text-xs text-gray-400\">Win Rate</p>\n                              <p className=\"text-sm font-bold text-purple-400\">\n                                {user.winRate.toFixed(1)}%\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex flex-col space-y-2\">\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              onClick={() => setSelectedUser(user)}\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"border-blue-500/30 text-blue-400 hover:bg-blue-500/20\"\n                            >\n                              <Edit size={12} className=\"mr-1\" />\n                              Edit\n                            </Button>\n                            <Button\n                              onClick={() => setSelectedUser(user)}\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"border-green-500/30 text-green-400 hover:bg-green-500/20\"\n                            >\n                              <Eye size={12} className=\"mr-1\" />\n                              View\n                            </Button>\n                          </div>\n                          <div className=\"flex space-x-2\">\n                            {user.status === 'active' ? (\n                              <Button\n                                onClick={() => suspendUser(user.id)}\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-red-500/30 text-red-400 hover:bg-red-500/20\"\n                              >\n                                <Ban size={12} className=\"mr-1\" />\n                                Suspend\n                              </Button>\n                            ) : (\n                              <Button\n                                onClick={() => activateUser(user.id)}\n                                size=\"sm\"\n                                variant=\"outline\"\n                                className=\"border-green-500/30 text-green-400 hover:bg-green-500/20\"\n                              >\n                                <CheckCircle size={12} className=\"mr-1\" />\n                                Activate\n                              </Button>\n                            )}\n                            <Button\n                              onClick={() => deleteUser(user.id)}\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"border-red-500/30 text-red-400 hover:bg-red-500/20\"\n                            >\n                              <Trash2 size={12} className=\"mr-1\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Edit Profiles Tab */}\n        <TabsContent value=\"edit\">\n          {selectedUser ? (\n            <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-gray-100 flex items-center\">\n                  <UserCog size={20} className=\"mr-2 text-purple-400\" />\n                  Editing: {selectedUser.name}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-white text-sm font-medium\">Full Name</label>\n                      <Input\n                        value={selectedUser.name}\n                        onChange={e => setSelectedUser({ ...selectedUser, name: e.target.value })}\n                        className=\"bg-gray-800/30 border-red-500/30 text-white\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-white text-sm font-medium\">Email</label>\n                      <Input\n                        value={selectedUser.email}\n                        onChange={e => setSelectedUser({ ...selectedUser, email: e.target.value })}\n                        className=\"bg-gray-800/30 border-red-500/30 text-white\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-white text-sm font-medium\">Phone</label>\n                      <Input\n                        value={selectedUser.phone}\n                        onChange={e => setSelectedUser({ ...selectedUser, phone: e.target.value })}\n                        className=\"bg-gray-800/30 border-red-500/30 text-white\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-white text-sm font-medium\">Location</label>\n                      <Input\n                        value={selectedUser.location}\n                        onChange={e =>\n                          setSelectedUser({ ...selectedUser, location: e.target.value })\n                        }\n                        className=\"bg-gray-800/30 border-red-500/30 text-white\"\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-white text-sm font-medium\">Membership Level</label>\n                      <Select\n                        value={selectedUser.membership}\n                        onValueChange={value =>\n                          setSelectedUser({ ...selectedUser, membership: value })\n                        }\n                      >\n                        <SelectTrigger className=\"bg-gray-800/30 border-red-500/30 text-white\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"free\">Free</SelectItem>\n                          <SelectItem value=\"basic\">Basic</SelectItem>\n                          <SelectItem value=\"pro\">Pro</SelectItem>\n                          <SelectItem value=\"ultimate\">Ultimate</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <label className=\"text-white text-sm font-medium\">Account Balance</label>\n                      <Input\n                        type=\"number\"\n                        value={selectedUser.balance}\n                        onChange={e =>\n                          setSelectedUser({\n                            ...selectedUser,\n                            balance: Number.parseFloat(e.target.value),\n                          })\n                        }\n                        className=\"bg-gray-800/30 border-red-500/30 text-white\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"text-white text-sm font-medium\">Status</label>\n                      <Select\n                        value={selectedUser.status}\n                        onValueChange={value => setSelectedUser({ ...selectedUser, status: value })}\n                      >\n                        <SelectTrigger className=\"bg-gray-800/30 border-red-500/30 text-white\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"suspended\">Suspended</SelectItem>\n                          <SelectItem value=\"pending\">Pending</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg\">\n                      <span className=\"text-white\">Verified Account</span>\n                      <Switch\n                        checked={selectedUser.verified}\n                        onCheckedChange={checked =>\n                          setSelectedUser({ ...selectedUser, verified: checked })\n                        }\n                        className=\"data-[state=checked]:bg-green-500\"\n                      />\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex space-x-4\">\n                  <Button\n                    onClick={() => {\n                      updateUser(selectedUser.id, selectedUser);\n                      setSelectedUser(null);\n                    }}\n                    className=\"bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700\"\n                  >\n                    <CheckCircle className=\"mr-2 h-4 w-4\" />\n                    Save Changes\n                  </Button>\n                  <Button\n                    onClick={() => setSelectedUser(null)}\n                    variant=\"outline\"\n                    className=\"border-gray-500/30 text-gray-400\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n              <CardContent className=\"p-12 text-center\">\n                <UserCog size={48} className=\"mx-auto mb-4 text-gray-400\" />\n                <h3 className=\"text-xl font-semibold text-white mb-2\">Select a User to Edit</h3>\n                <p className=\"text-gray-400\">\n                  Choose a user from the User Management tab to edit their profile\n                </p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Analytics Tab */}\n        <TabsContent value=\"analytics\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Users className=\"mr-2 text-blue-400\" />\n                  User Statistics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Total Users:</span>\n                    <span className=\"text-blue-400 font-semibold\">{users.length}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Active Users:</span>\n                    <span className=\"text-green-400 font-semibold\">\n                      {users.filter(u => u.status === 'active').length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Suspended:</span>\n                    <span className=\"text-red-400 font-semibold\">\n                      {users.filter(u => u.status === 'suspended').length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Verified:</span>\n                    <span className=\"text-purple-400 font-semibold\">\n                      {users.filter(u => u.verified).length}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <DollarSign className=\"mr-2 text-green-400\" />\n                  Financial Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Total Balance:</span>\n                    <span className=\"text-green-400 font-semibold\">\n                      ${users.reduce((sum, user) => sum + user.balance, 0).toLocaleString()}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Total P&L:</span>\n                    <span className=\"text-yellow-400 font-semibold\">\n                      ${users.reduce((sum, user) => sum + user.profitLoss, 0).toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Avg Win Rate:</span>\n                    <span className=\"text-blue-400 font-semibold\">\n                      {(users.reduce((sum, user) => sum + user.winRate, 0) / users.length).toFixed(\n                        1\n                      )}\n                      %\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gray-900/60 border-red-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Activity className=\"mr-2 text-purple-400\" />\n                  Membership Distribution\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Ultimate:</span>\n                    <span className=\"text-red-400 font-semibold\">\n                      {users.filter(u => u.membership === 'ultimate').length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Pro:</span>\n                    <span className=\"text-purple-400 font-semibold\">\n                      {users.filter(u => u.membership === 'pro').length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Basic:</span>\n                    <span className=\"text-blue-400 font-semibold\">\n                      {users.filter(u => u.membership === 'basic').length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Free:</span>\n                    <span className=\"text-gray-400 font-semibold\">\n                      {users.filter(u => u.membership === 'free').length}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai-tools/AIBacktester.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai-tools/AIGlobalHeatmap.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai-tools/AIInsiderUnusual.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai-tools/AINewsSentiment.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai-tools/AIPatternRecognition.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai-tools/AIPortfolioDoctor.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai-tools/AIStockScreener.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai-tools/AITradeCopilot.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai-tools/AIVoiceCommandCenter.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai-tools/AIWhiteLabelBranding.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [429, 432], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [429, 432], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 21,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 21,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [455, 458], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [455, 458], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nexport type Account = {\n  portfolio_value?: number | string;\n  buying_power?: number | string;\n  status?: string;\n};\n\n// Type definitions for props and state\nexport interface Trade {\n  pnl: number;\n  side: string;\n  symbol: string;\n  quantity: number;\n  price: number;\n  strategy: string;\n}\nexport interface PerformanceData {\n  dailyReturns: { date: Date; return: number; cumulative: number }[];\n  monthlyReturns: any[];\n  drawdownPeriods: any[];\n  bestTrade: Trade | null;\n  worstTrade: Trade | null;\n  avgHoldTime: string;\n  profitFactor: number;\n  calmarRatio: number;\n  sortinoRatio: number;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/AIStockTips.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'generateAITips' and 'generatePredictions'. Either include them or remove the dependency array.",
        "line": 104,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 104,
        "endColumn": 23,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [generateAITips, generatePredictions, membershipLevel]",
            "fix": {
              "range": [2482, 2499],
              "text": "[generateAITips, generatePredictions, membershipLevel]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 373,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 373,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12609, 12612], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12609, 12612], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Brain,\n  TrendingUp,\n  TrendingDown,\n  Target,\n  Star,\n  Zap,\n  Eye,\n  Clock,\n  BarChart3,\n  CheckCircle,\n  Crown,\n} from 'lucide-react';\n\ninterface StockTip {\n  id: number;\n  symbol: string;\n  direction: string;\n  confidence: number;\n  currentPrice: number;\n  targetPrice: number;\n  potentialReturn: number;\n  timeframe: string;\n  reason: string;\n  aiScore: number;\n  riskLevel: string;\n  timestamp: Date;\n}\n\ninterface Prediction {\n  id: number;\n  title: string;\n  prediction: string;\n  probability: number;\n  timeframe: string;\n  impact: string;\n  category: string;\n}\n\ninterface MarketInsights {\n  marketSentiment?: {\n    score: number;\n    trend: string;\n    drivers: string[];\n  };\n  sectorRotation?: {\n    inflow: string;\n    outflow: string;\n    strength: number;\n  };\n  volatilityForecast?: {\n    level: string;\n    direction: string;\n    timeframe: string;\n  };\n  keyLevels?: {\n    support: number;\n    resistance: number;\n    breakoutTarget: number;\n  };\n}\n\ninterface AIStockTipsProps {\n  membershipLevel: 'free' | 'basic' | 'pro' | 'ultimate';\n}\n\nexport default function AIStockTips({ membershipLevel }: AIStockTipsProps) {\n  const [topPicks, setTopPicks] = useState<StockTip[]>([]);\n  const [predictions, setPredictions] = useState<Prediction[]>([]);\n  const [marketInsights, setMarketInsights] = useState<MarketInsights>({});\n  const [loading, setLoading] = useState(true);\n\n  const membershipLimits: Record<\n    string,\n    { tips: number | string; predictions: number | string; insights: number | string }\n  > = {\n    free: { tips: 3, predictions: 1, insights: 1 },\n    basic: { tips: 10, predictions: 5, insights: 3 },\n    pro: { tips: 25, predictions: 15, insights: 10 },\n    ultimate: { tips: 'unlimited', predictions: 'unlimited', insights: 'unlimited' },\n  };\n\n  const currentLimits = membershipLimits[membershipLevel] || membershipLimits.free;\n\n  useEffect(() => {\n    generateAITips();\n    generatePredictions();\n    generateMarketInsights();\n\n    const interval = setInterval(() => {\n      generateAITips();\n      generatePredictions();\n      generateMarketInsights();\n    }, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [membershipLevel]);\n\n  const generateAITips = () => {\n    setLoading(true);\n\n    const stocks = [\n      'AAPL',\n      'MSFT',\n      'GOOGL',\n      'TSLA',\n      'NVDA',\n      'META',\n      'AMZN',\n      'NFLX',\n      'CRM',\n      'PLTR',\n      'COIN',\n      'RBLX',\n      'SNOW',\n      'ZM',\n      'SHOP',\n      'SQ',\n      'PYPL',\n      'ROKU',\n    ];\n\n    const reasons = [\n      'Strong earnings momentum',\n      'Technical breakout pattern',\n      'Institutional buying surge',\n      'Positive analyst upgrades',\n      'Market leadership position',\n      'Innovation catalyst',\n      'Undervalued fundamentals',\n      'Sector rotation opportunity',\n      'AI adoption tailwind',\n      'Revenue growth acceleration',\n    ];\n\n    const tips = [];\n    const maxTips = currentLimits.tips === 'unlimited' ? 15 : Number(currentLimits.tips);\n\n    for (let i = 0; i < maxTips; i++) {\n      const symbol = stocks[Math.floor(Math.random() * stocks.length)];\n      const direction = Math.random() > 0.3 ? 'bullish' : 'bearish'; // 70% bullish bias\n      const confidence = 70 + Math.random() * 30;\n      const targetPrice = 100 + Math.random() * 400;\n      const currentPrice = targetPrice * (0.85 + Math.random() * 0.3);\n      const timeframe = ['1 week', '2 weeks', '1 month', '3 months'][Math.floor(Math.random() * 4)];\n\n      tips.push({\n        id: i + 1,\n        symbol,\n        direction,\n        confidence,\n        currentPrice,\n        targetPrice,\n        potentialReturn: ((targetPrice - currentPrice) / currentPrice) * 100,\n        timeframe,\n        reason: reasons[Math.floor(Math.random() * reasons.length)],\n        aiScore: 80 + Math.random() * 20,\n        riskLevel: confidence > 85 ? 'Low' : confidence > 75 ? 'Medium' : 'High',\n        timestamp: new Date(),\n      });\n    }\n\n    setTopPicks(tips.sort((a, b) => b.confidence - a.confidence));\n    setLoading(false);\n  };\n\n  const generatePredictions = () => {\n    const predictions = [];\n    const maxPredictions =\n      currentLimits.predictions === 'unlimited' ? 10 : Number(currentLimits.predictions);\n\n    for (let i = 0; i < maxPredictions; i++) {\n      predictions.push({\n        id: i + 1,\n        title: [\n          'Market Rally Expected',\n          'Tech Sector Rotation',\n          'Energy Breakout Coming',\n          'Healthcare Momentum',\n          'Financial Strength',\n          'Consumer Resilience',\n          'AI Revolution Continues',\n          'Green Energy Surge',\n          'Biotech Innovation',\n          'Crypto Integration',\n        ][i % 10],\n        prediction: [\n          'S&P 500 likely to reach new highs within 2 weeks',\n          'Technology stocks showing strong accumulation patterns',\n          'Energy sector poised for 15%+ gains this quarter',\n          'Healthcare names breaking out of consolidation',\n          'Financial sector benefiting from rate environment',\n          'Consumer discretionary showing resilience',\n          'AI-related stocks continuing momentum',\n          'Clean energy stocks forming base patterns',\n          'Biotech sector due for rotation',\n          'Crypto adoption driving fintech growth',\n        ][i % 10],\n        probability: 70 + Math.random() * 25,\n        timeframe: ['1-2 weeks', '2-4 weeks', '1-2 months', '2-3 months'][\n          Math.floor(Math.random() * 4)\n        ],\n        impact: ['High', 'Medium', 'Low'][Math.floor(Math.random() * 3)],\n        category: ['Market', 'Sector', 'Individual'][Math.floor(Math.random() * 3)],\n      });\n    }\n\n    setPredictions(predictions);\n  };\n\n  const generateMarketInsights = () => {\n    const insights = {\n      marketSentiment: {\n        score: 65 + Math.random() * 30,\n        trend: Math.random() > 0.5 ? 'improving' : 'declining',\n        drivers: ['Fed policy', 'Earnings season', 'Economic data', 'Geopolitical events'],\n      },\n      sectorRotation: {\n        inflow: ['Technology', 'Healthcare', 'Energy'][Math.floor(Math.random() * 3)],\n        outflow: ['Utilities', 'REITs', 'Consumer Staples'][Math.floor(Math.random() * 3)],\n        strength: 70 + Math.random() * 30,\n      },\n      volatilityForecast: {\n        level: ['Low', 'Medium', 'High'][Math.floor(Math.random() * 3)],\n        direction: Math.random() > 0.5 ? 'increasing' : 'decreasing',\n        timeframe: 'next 2 weeks',\n      },\n      keyLevels: {\n        support: 4200 + Math.random() * 300,\n        resistance: 4600 + Math.random() * 400,\n        breakoutTarget: 5000 + Math.random() * 200,\n      },\n    };\n\n    setMarketInsights(insights);\n  };\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 85) return 'text-green-400';\n    if (confidence >= 75) return 'text-yellow-400';\n    return 'text-orange-400';\n  };\n\n  const getRiskColor = (risk: string) => {\n    switch (risk) {\n      case 'Low':\n        return 'text-green-400';\n      case 'Medium':\n        return 'text-yellow-400';\n      case 'High':\n        return 'text-red-400';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* AI Top Stock Picks */}\n      <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-white flex items-center\">\n              <Brain className=\"h-6 w-6 mr-2 text-purple-400\" />\n              AI Top Stock Picks\n              <Badge className=\"ml-3 bg-gradient-to-r from-purple-500 to-pink-500\">\n                <Eye className=\"h-3 w-3 mr-1\" />\n                Live AI\n              </Badge>\n            </CardTitle>\n            <Badge className=\"bg-cyan-500\">\n              {topPicks.length}/{currentLimits.tips === 'unlimited' ? '∞' : currentLimits.tips} Tips\n            </Badge>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {loading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin h-8 w-8 border-2 border-purple-500 border-t-transparent rounded-full mx-auto mb-4\"></div>\n              <p className=\"text-gray-400\">AI is analyzing market conditions...</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {topPicks.map((tip, index) => (\n                <div\n                  key={tip.id}\n                  className=\"p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-500/30\"\n                >\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Badge className=\"bg-purple-500 text-white font-bold\">#{index + 1}</Badge>\n                      <span className=\"text-white font-bold text-lg\">{tip.symbol}</span>\n                      <Badge variant={tip.direction === 'bullish' ? 'default' : 'destructive'}>\n                        {tip.direction === 'bullish' ? (\n                          <TrendingUp className=\"h-3 w-3 mr-1\" />\n                        ) : (\n                          <TrendingDown className=\"h-3 w-3 mr-1\" />\n                        )}\n                        {tip.direction.toUpperCase()}\n                      </Badge>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge className={`${getConfidenceColor(tip.confidence)} bg-black/20`}>\n                        {tip.confidence.toFixed(0)}% Confidence\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-3\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Current Price</p>\n                      <p className=\"text-white font-semibold\">${tip.currentPrice.toFixed(2)}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Target Price</p>\n                      <p className=\"text-green-400 font-semibold\">${tip.targetPrice.toFixed(2)}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Potential Return</p>\n                      <p\n                        className={`font-semibold ${tip.potentialReturn >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                      >\n                        {tip.potentialReturn >= 0 ? '+' : ''}\n                        {tip.potentialReturn.toFixed(1)}%\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Timeframe</p>\n                      <p className=\"text-blue-400 font-semibold\">{tip.timeframe}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Star className=\"h-4 w-4 text-yellow-400\" />\n                        <span className=\"text-yellow-400 font-semibold\">\n                          AI Score: {tip.aiScore.toFixed(0)}\n                        </span>\n                      </div>\n                      <Badge className={getRiskColor(tip.riskLevel)}>{tip.riskLevel} Risk</Badge>\n                    </div>\n                    <p className=\"text-gray-300 text-sm\">{tip.reason}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* AI Market Predictions */}\n      <Card className=\"bg-black/20 border-cyan-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Target className=\"h-6 w-6 mr-2 text-cyan-400\" />\n            AI Market Predictions\n            <Badge className=\"ml-3 bg-gradient-to-r from-cyan-500 to-blue-500\">\n              <Clock className=\"h-3 w-3 mr-1\" />\n              Forecasting\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {predictions.map((prediction: any) => (\n              <div\n                key={prediction.id}\n                className=\"p-4 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-lg border border-cyan-500/30\"\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"text-white font-bold\">{prediction.title}</h4>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className=\"bg-cyan-500\">{prediction.probability.toFixed(0)}%</Badge>\n                    <Badge\n                      variant=\"outline\"\n                      className={`border-${prediction.impact === 'High' ? 'red' : prediction.impact === 'Medium' ? 'yellow' : 'green'}-500/30`}\n                    >\n                      {prediction.impact} Impact\n                    </Badge>\n                  </div>\n                </div>\n                <p className=\"text-gray-300 mb-3\">{prediction.prediction}</p>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <div className=\"flex items-center space-x-4\">\n                    <span className=\"text-gray-400\">\n                      Category: <span className=\"text-white\">{prediction.category}</span>\n                    </span>\n                    <span className=\"text-gray-400\">\n                      Timeframe: <span className=\"text-blue-400\">{prediction.timeframe}</span>\n                    </span>\n                  </div>\n                  <Progress value={prediction.probability} className=\"w-24 h-2\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Market Insights */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card className=\"bg-black/20 border-green-500/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <BarChart3 className=\"h-6 w-6 mr-2 text-green-400\" />\n              Market Sentiment\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl font-bold text-green-400 mb-2\">\n                {marketInsights.marketSentiment?.score.toFixed(0)}\n              </div>\n              <Progress value={marketInsights.marketSentiment?.score} className=\"h-3 mb-2\" />\n              <p className=\"text-sm text-gray-400\">\n                Sentiment is {marketInsights.marketSentiment?.trend}\n              </p>\n            </div>\n            <div>\n              <h5 className=\"text-white font-semibold mb-2\">Key Drivers</h5>\n              <div className=\"space-y-1\">\n                {marketInsights.marketSentiment?.drivers.map((driver: string, index: number) => (\n                  <div key={index} className=\"flex items-center\">\n                    <CheckCircle className=\"h-4 w-4 text-green-400 mr-2\" />\n                    <span className=\"text-gray-300 text-sm\">{driver}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-black/20 border-orange-500/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <Zap className=\"h-6 w-6 mr-2 text-orange-400\" />\n              Sector Rotation\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div className=\"p-3 bg-green-500/10 rounded border border-green-500/30\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-green-400 font-semibold\">Inflow</span>\n                  <TrendingUp className=\"h-4 w-4 text-green-400\" />\n                </div>\n                <p className=\"text-white font-bold\">{marketInsights.sectorRotation?.inflow}</p>\n              </div>\n              <div className=\"p-3 bg-red-500/10 rounded border border-red-500/30\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-red-400 font-semibold\">Outflow</span>\n                  <TrendingDown className=\"h-4 w-4 text-red-400\" />\n                </div>\n                <p className=\"text-white font-bold\">{marketInsights.sectorRotation?.outflow}</p>\n              </div>\n            </div>\n            <div>\n              <p className=\"text-gray-400 text-sm\">Rotation Strength</p>\n              <Progress value={marketInsights.sectorRotation?.strength} className=\"h-2 mt-1\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Upgrade Prompt for Free Users */}\n      {membershipLevel === 'free' && (\n        <Card className=\"bg-gradient-to-r from-purple-500/20 to-pink-500/20 border-purple-500/50 backdrop-blur-xl\">\n          <CardContent className=\"p-6 text-center\">\n            <Crown className=\"h-12 w-12 text-yellow-400 mx-auto mb-4\" />\n            <h3 className=\"text-white font-bold text-xl mb-2\">Unlock Premium AI Insights</h3>\n            <p className=\"text-gray-300 mb-4\">\n              Get unlimited AI stock tips, predictions, and market insights with our premium plans\n            </p>\n            <Button className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600\">\n              <Star className=\"h-4 w-4 mr-2\" />\n              Upgrade Now\n            </Button>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/AITradeCopilotFuturistic.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 71,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 71,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3029, 3032], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3029, 3032], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React from 'react';\nimport { getAccount, getPositions } from '../../services/alpaca-service';\nimport { strategies, AITradingStrategy } from '../../services/ai-strategy-engine';\n\nexport default function AITradeCopilotFuturistic() {\n  const [running, setRunning] = React.useState(false);\n  const [log, setLog] = React.useState<string[]>([]);\n  const [pnl, setPnl] = React.useState<number | null>(null);\n  const [status, setStatus] = React.useState<string>('Idle');\n  const [selectedStrategy, setSelectedStrategy] = React.useState<AITradingStrategy>(strategies[0]);\n  const [confidence, setConfidence] = React.useState<number | null>(null);\n  const [aiReason, setAiReason] = React.useState<string>('');\n\n  React.useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (running) {\n      setStatus('Running');\n      setLog(l => ['AI Bot started.', ...l]);\n      interval = setInterval(async () => {\n        try {\n          const account = await getAccount();\n          const positions = await getPositions();\n          const marketData = { volatility: Math.random() * 0.6 };\n          setPnl(Number(account?.equity) - Number(account?.last_equity || account?.equity));\n          // Run selected AI strategy\n          const result = await selectedStrategy.run(marketData, { ...account, ...positions });\n          setConfidence(result.confidence);\n          setAiReason(result.reason);\n          setLog(l => [\n            `[${selectedStrategy.name}] Action: ${result.action} | Confidence: ${result.confidence.toFixed(2)} | ${result.reason}`,\n            ...l,\n          ]);\n        } catch (e) {\n          setLog(l => ['Error: ' + ((e as Error)?.message || e), ...l]);\n        }\n      }, 4000);\n    } else {\n      setStatus('Idle');\n    }\n    return () => clearInterval(interval);\n  }, [running, selectedStrategy]);\n\n  return (\n    <div className=\"glassmorphic neon-border rounded-2xl p-8 shadow-2xl flex flex-col gap-6 animate-fade-in\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-2xl font-extrabold text-fuchsia-300 drop-shadow\">\n          AI Trade Copilot <span className=\"text-cyan-400\">Futuristic</span>\n        </h3>\n        <button\n          className={`px-6 py-3 rounded-xl font-bold text-lg transition-all ${running ? 'bg-red-600 text-white' : 'bg-fuchsia-600 text-white hover:bg-fuchsia-700'}`}\n          onClick={() => setRunning(r => !r)}\n        >\n          {running ? 'Stop' : 'Start'} Bot\n        </button>\n      </div>\n      <div className=\"flex gap-4 items-center\">\n        <label htmlFor=\"strategy-select\" className=\"text-fuchsia-200 font-semibold\">\n          Strategy:\n        </label>\n        <select\n          id=\"strategy-select\"\n          className=\"bg-black/40 text-fuchsia-200 rounded-lg px-4 py-2\"\n          value={selectedStrategy.name}\n          onChange={e => {\n            const strat = strategies.find(s => s.name === e.target.value);\n            if (strat) setSelectedStrategy(strat);\n          }}\n        >\n          {strategies.map((s: any) => (\n            <option key={s.name} value={s.name}>\n              {s.name}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        Status: <span className=\"font-semibold text-cyan-300\">{status}</span>\n      </div>\n      <div>\n        P&L:{' '}\n        <span className=\"font-semibold text-green-400\">\n          {pnl !== null ? `$${pnl.toFixed(2)}` : '-'}\n        </span>\n      </div>\n      <div>\n        AI Confidence:{' '}\n        <span className=\"font-semibold text-yellow-300\">\n          {confidence !== null ? `${(confidence * 100).toFixed(1)}%` : '-'}\n        </span>\n      </div>\n      <div className=\"text-fuchsia-200\">\n        AI Reason: <span className=\"text-white\">{aiReason}</span>\n      </div>\n      <div className=\"bg-black/40 rounded-xl p-3 text-xs h-40 overflow-y-auto neon-scrollbar\">\n        {log.map((line, i) => (\n          <div key={i}>{line}</div>\n        ))}\n      </div>\n      <div className=\"text-fuchsia-200 text-xs mt-2 italic\">\n        * This is a next-gen AI bot. For real trading, connect your live API keys and enable\n        production mode. All actions are logged and risk-managed.\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/AITradingAdvisor.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 73,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 73,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1592, 1595], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1592, 1595], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1615, 1618], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1615, 1618], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 75,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 75,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1635, 1638], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1635, 1638], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1678, 1681], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1678, 1681], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 80,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 80,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1699, 1702], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1699, 1702], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 81,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 81,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1718, 1721], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1718, 1721], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 82,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 82,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1739, 1742], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1739, 1742], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 83,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 83,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1756, 1759], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1756, 1759], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 84,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 84,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1779, 1782], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1779, 1782], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 85,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 85,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1795, 1798], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1795, 1798], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 89,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 89,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1872, 1875], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1872, 1875], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 97,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 97,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2055, 2058], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2055, 2058], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 98,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 98,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2078, 2081], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2078, 2081], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 99,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 99,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2107, 2110], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2107, 2110], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 100,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 100,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2129, 2132], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2129, 2132], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `⏎·······················`",
        "line": 526,
        "column": 61,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 526,
        "endColumn": 61,
        "fix": { "range": [20629, 20629], "text": "\n                       " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 527,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 527,
        "endColumn": 1,
        "fix": { "range": [20685, 20685], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 528,
        "column": 27,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 528,
        "endColumn": 27,
        "fix": { "range": [20774, 20774], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 529,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 529,
        "endColumn": 1,
        "fix": { "range": [20836, 20836], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 530,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 530,
        "endColumn": 31,
        "fix": { "range": [20939, 20939], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `····························` with `······························`",
        "line": 531,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 531,
        "endColumn": 29,
        "fix": { "range": [20963, 20991], "text": "                              " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 532,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 532,
        "endColumn": 1,
        "fix": { "range": [20999, 20999], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 533,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 533,
        "endColumn": 31,
        "fix": { "range": [21099, 21099], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `······························` with `································`",
        "line": 534,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 534,
        "endColumn": 31,
        "fix": { "range": [21168, 21198], "text": "                                " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 535,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 535,
        "endColumn": 1,
        "fix": { "range": [21244, 21244], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 536,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 536,
        "endColumn": 31,
        "fix": { "range": [21334, 21334], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 537,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 537,
        "endColumn": 1,
        "fix": { "range": [21342, 21342], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 538,
        "column": 27,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 538,
        "endColumn": 27,
        "fix": { "range": [21403, 21403], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 539,
        "column": 25,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 539,
        "endColumn": 25,
        "fix": { "range": [21434, 21434], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 540,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 540,
        "endColumn": 1,
        "fix": { "range": [21436, 21436], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `typeof·signal.strength·===·'number'·?·signal.strength·>=·70·:·signal.strength·===·'STRONG')·?·'bg-red-600'` with `⏎································typeof·signal.strength·===·'number'⏎··································?·signal.strength·>=·70⏎··································:·signal.strength·===·'STRONG'⏎······························)⏎································?·'bg-red-600'⏎·······························`",
        "line": 821,
        "column": 32,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 821,
        "endColumn": 138,
        "fix": {
          "range": [35564, 35670],
          "text": "\n                                typeof signal.strength === 'number'\n                                  ? signal.strength >= 70\n                                  : signal.strength === 'STRONG'\n                              )\n                                ? 'bg-red-600'\n                               "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `{signal.message·||·signal.description}` with `⏎··························{signal.message·||·signal.description}⏎························`",
        "line": 828,
        "column": 70,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 828,
        "endColumn": 108,
        "fix": {
          "range": [36022, 36060],
          "text": "\n                          {signal.message || signal.description}\n                        "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `⏎··························`",
        "line": 858,
        "column": 67,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 858,
        "endColumn": 67,
        "fix": { "range": [37515, 37515], "text": "\n                          " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 859,
        "column": 27,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 859,
        "endColumn": 27,
        "fix": { "range": [37585, 37585], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `····························` with `······························`",
        "line": 860,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 860,
        "endColumn": 29,
        "fix": { "range": [37590, 37618], "text": "                              " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 861,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 861,
        "endColumn": 1,
        "fix": { "range": [37630, 37630], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `··························` with `····························`",
        "line": 862,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 862,
        "endColumn": 27,
        "fix": { "range": [37728, 37754], "text": "                            " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 863,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 863,
        "endColumn": 1,
        "fix": { "range": [37756, 37756], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `<span·className=\"text-white·font-medium\">{point.type·||·'Entry·Point'}` with `··<span·className=\"text-white·font-medium\">⏎··································{point.type·||·'Entry·Point'}⏎································`",
        "line": 864,
        "column": 31,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 864,
        "endColumn": 101,
        "fix": {
          "range": [37871, 37941],
          "text": "  <span className=\"text-white font-medium\">\n                                  {point.type || 'Entry Point'}\n                                "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 865,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 865,
        "endColumn": 1,
        "fix": { "range": [37949, 37949], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 866,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 866,
        "endColumn": 1,
        "fix": { "range": [38027, 38027], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 867,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 867,
        "endColumn": 31,
        "fix": { "range": [38119, 38119], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 868,
        "column": 29,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 868,
        "endColumn": 29,
        "fix": { "range": [38155, 38155], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `····························<div·className=\"text-slate-300·text-sm·mb-2\">{point.description·||·point.reasoning}` with `······························<div·className=\"text-slate-300·text-sm·mb-2\">⏎································{point.description·||·point.reasoning}⏎······························`",
        "line": 869,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 869,
        "endColumn": 112,
        "fix": {
          "range": [38162, 38273],
          "text": "                              <div className=\"text-slate-300 text-sm mb-2\">\n                                {point.description || point.reasoning}\n                              "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 870,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 870,
        "endColumn": 1,
        "fix": { "range": [38280, 38280], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 871,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 871,
        "endColumn": 1,
        "fix": { "range": [38350, 38350], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 872,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 872,
        "endColumn": 31,
        "fix": { "range": [38470, 38470], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 873,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 873,
        "endColumn": 31,
        "fix": { "range": [38565, 38565], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `································` with `··································`",
        "line": 874,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 874,
        "endColumn": 33,
        "fix": { "range": [38603, 38635], "text": "                                  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 875,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 875,
        "endColumn": 31,
        "fix": { "range": [38704, 38704], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 876,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 876,
        "endColumn": 1,
        "fix": { "range": [38712, 38712], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 877,
        "column": 27,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 877,
        "endColumn": 27,
        "fix": { "range": [38773, 38773], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `)` with `··)⏎························`",
        "line": 878,
        "column": 25,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 878,
        "endColumn": 26,
        "fix": { "range": [38804, 38805], "text": "  )\n                        " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `⏎··························`",
        "line": 888,
        "column": 66,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 888,
        "endColumn": 66,
        "fix": { "range": [39232, 39232], "text": "\n                          " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 889,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 889,
        "endColumn": 1,
        "fix": { "range": [39276, 39276], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 890,
        "column": 29,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 890,
        "endColumn": 29,
        "fix": { "range": [39335, 39335], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 891,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 891,
        "endColumn": 1,
        "fix": { "range": [39347, 39347], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 892,
        "column": 27,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 892,
        "endColumn": 27,
        "fix": { "range": [39467, 39467], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 893,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 893,
        "endColumn": 1,
        "fix": { "range": [39469, 39469], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `······························<span·className=\"text-white·font-medium\">{point.type·||·'Exit·Point'}` with `································<span·className=\"text-white·font-medium\">⏎··································{point.type·||·'Exit·Point'}⏎································`",
        "line": 894,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 894,
        "endColumn": 100,
        "fix": {
          "range": [39554, 39653],
          "text": "                                <span className=\"text-white font-medium\">\n                                  {point.type || 'Exit Point'}\n                                "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 895,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 895,
        "endColumn": 31,
        "fix": { "range": [39691, 39691], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 896,
        "column": 33,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 896,
        "endColumn": 33,
        "fix": { "range": [39769, 39769], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `······························` with `································`",
        "line": 897,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 897,
        "endColumn": 31,
        "fix": { "range": [39799, 39829], "text": "                                " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 898,
        "column": 29,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 898,
        "endColumn": 29,
        "fix": { "range": [39865, 39865], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `····························<div·className=\"text-slate-300·text-sm·mb-2\">{point.description·||·point.reasoning}` with `······························<div·className=\"text-slate-300·text-sm·mb-2\">⏎································{point.description·||·point.reasoning}⏎······························`",
        "line": 899,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 899,
        "endColumn": 112,
        "fix": {
          "range": [39872, 39983],
          "text": "                              <div className=\"text-slate-300 text-sm mb-2\">\n                                {point.description || point.reasoning}\n                              "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 900,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 900,
        "endColumn": 1,
        "fix": { "range": [39990, 39990], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 901,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 901,
        "endColumn": 1,
        "fix": { "range": [40060, 40060], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 902,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 902,
        "endColumn": 31,
        "fix": { "range": [40180, 40180], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 903,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 903,
        "endColumn": 31,
        "fix": { "range": [40275, 40275], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `································` with `··································`",
        "line": 904,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 904,
        "endColumn": 33,
        "fix": { "range": [40313, 40345], "text": "                                  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 905,
        "column": 31,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 905,
        "endColumn": 31,
        "fix": { "range": [40414, 40414], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 906,
        "column": 1,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 906,
        "endColumn": 1,
        "fix": { "range": [40422, 40422], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `··`",
        "line": 907,
        "column": 27,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 907,
        "endColumn": 27,
        "fix": { "range": [40483, 40483], "text": "  " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `)` with `··)⏎························`",
        "line": 908,
        "column": 25,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 908,
        "endColumn": 26,
        "fix": { "range": [40514, 40515], "text": "  )\n                        " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `typeof·stock.volume·===·'number'·?·stock.volume·:·(stock.volume·as·any)?.currentVolume·||·0` with `⏎······························typeof·stock.volume·===·'number'⏎································?·stock.volume⏎································:·(stock.volume·as·any)?.currentVolume·||·0⏎····························`",
        "line": 1070,
        "column": 43,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 1070,
        "endColumn": 134,
        "fix": {
          "range": [48240, 48331],
          "text": "\n                              typeof stock.volume === 'number'\n                                ? stock.volume\n                                : (stock.volume as any)?.currentVolume || 0\n                            "
        }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1070,
        "column": 110,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1070,
        "endColumn": 113,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [48307, 48310], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [48307, 48310], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 16,
    "fatalErrorCount": 0,
    "warningCount": 60,
    "fixableErrorCount": 0,
    "fixableWarningCount": 60,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Brain,\n  TrendingUp,\n  TrendingDown,\n  Target,\n  AlertTriangle,\n  CheckCircle,\n  BarChart3,\n  Activity,\n  Zap,\n  Search,\n  ArrowUp,\n  ArrowDown,\n  Minus,\n  Eye,\n  Calendar,\n  DollarSign,\n  Volume2,\n} from 'lucide-react';\n\nimport { advancedStockAnalysisService } from '../../services/advanced-stock-analysis-service';\nimport { legalComplianceService } from '../../services/legal-compliance-service';\n\ninterface AITradingAdvisorProps {\n  className?: string;\n}\n\ninterface TradingSignal {\n  type: 'BUY' | 'SELL';\n  strength: number | string;\n  indicator: string;\n  message?: string;\n  description?: string;\n  confidence: number;\n}\n\ninterface EntryExitPoint {\n  price: number;\n  confidence: number;\n  reasoning?: string;\n  riskLevel?: string;\n  type?: string;\n  description?: string;\n}\n\ninterface StockData {\n  symbol: string;\n  name: string;\n  sector: string;\n  currentPrice: number;\n  volume?: number;\n  buyScore: {\n    overall: number;\n    rating: string;\n    components: {\n      technical: number;\n      performance: number;\n      volume: number;\n      ai: number;\n      patterns: number;\n      levels: number;\n    };\n  };\n  marketClassification: any;\n  recommendation: any;\n  performance: any;\n}\n\ninterface StockAnalysis {\n  stock: any;\n  currentPrice: any;\n  historical: any;\n  realTimeData: any;\n  patterns: any;\n  volumeAnalysis: any;\n  metrics: any;\n  buyScore?: {\n    overall: number;\n    rating: string;\n    components: any;\n  };\n  tradingSignals?: TradingSignal[];\n  entryExitPoints?: {\n    entry: EntryExitPoint[];\n    exit: EntryExitPoint[];\n    recommendation?: string;\n  };\n  marketClassification: any;\n  recommendation: any;\n  performanceSinceIPO?: any;\n  priceTargets?: any;\n}\n\nexport default function AITradingAdvisor({ className = '' }: AITradingAdvisorProps) {\n  const [activeTab, setActiveTab] = useState('dashboard');\n  const [selectedStock, setSelectedStock] = useState('AAPL');\n  const [stockAnalysis, setStockAnalysis] = useState<StockAnalysis | null>(null);\n  const [allStocks, setAllStocks] = useState<StockData[]>([]);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [disclaimerAccepted, setDisclaimerAccepted] = useState(false);\n\n  useEffect(() => {\n    initializeServices();\n    loadStockData();\n  }, []);\n\n  useEffect(() => {\n    if (selectedStock) {\n      loadStockAnalysis(selectedStock);\n    }\n  }, [selectedStock]);\n\n  const initializeServices = async () => {\n    await advancedStockAnalysisService.initialize();\n    await legalComplianceService.initialize();\n  };\n\n  const loadStockData = async () => {\n    try {\n      const stocks = await advancedStockAnalysisService.getAllStocksWithScores();\n      setAllStocks(stocks);\n    } catch (error) {\n      console.error('Error loading stock data:', error);\n    }\n  };\n\n  const loadStockAnalysis = async (symbol: string) => {\n    setLoading(true);\n    try {\n      const analysis = await advancedStockAnalysisService.getComprehensiveStockAnalysis(symbol);\n      setStockAnalysis(analysis);\n    } catch (error) {\n      console.error('Error loading stock analysis:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getScoreColor = (score: number) => {\n    if (score >= 80) return 'text-green-400';\n    if (score >= 65) return 'text-blue-400';\n    if (score >= 45) return 'text-yellow-400';\n    if (score >= 30) return 'text-orange-400';\n    return 'text-red-400';\n  };\n\n  const getScoreBadgeColor = (score: number) => {\n    if (score >= 80) return 'bg-green-600';\n    if (score >= 65) return 'bg-blue-600';\n    if (score >= 45) return 'bg-yellow-600';\n    if (score >= 30) return 'bg-orange-600';\n    return 'bg-red-600';\n  };\n\n  const getMarketIcon = (classification: string) => {\n    if (classification.includes('BULL')) return <TrendingUp className=\"h-5 w-5 text-green-400\" />;\n    if (classification.includes('BEAR')) return <TrendingDown className=\"h-5 w-5 text-red-400\" />;\n    return <Minus className=\"h-5 w-5 text-yellow-400\" />;\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(value);\n  };\n\n  const formatVolume = (volume: number) => {\n    if (volume >= 1000000) {\n      return `${(volume / 1000000).toFixed(1)}M`;\n    } else if (volume >= 1000) {\n      return `${(volume / 1000).toFixed(1)}K`;\n    }\n    return volume.toString();\n  };\n\n  // Show disclaimer first\n  if (!disclaimerAccepted) {\n    const disclaimers = legalComplianceService.getRequiredDisclaimer('ai_analysis');\n\n    return (\n      <div className={`space-y-6 ${className}`}>\n        <Card className=\"bg-slate-800/50 backdrop-blur-sm border-yellow-500/30\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center gap-3\">\n              <AlertTriangle className=\"h-6 w-6 text-yellow-400\" />\n              Important Disclaimers\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {disclaimers.map((disclaimer, index) => (\n              <div key={index} className=\"space-y-3\">\n                <h3 className=\"text-white font-semibold\">{disclaimer.title}</h3>\n                <div className=\"text-slate-300 text-sm whitespace-pre-line bg-slate-700/30 p-4 rounded-lg\">\n                  {disclaimer.content}\n                </div>\n              </div>\n            ))}\n\n            <div className=\"flex items-center gap-4 pt-4 border-t border-slate-600\">\n              <Button\n                onClick={() => setDisclaimerAccepted(true)}\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                <CheckCircle className=\"h-4 w-4 mr-2\" />I Understand and Accept\n              </Button>\n              <p className=\"text-slate-400 text-sm\">\n                You must accept these disclaimers to continue\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-purple-900/20 border-blue-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center gap-3 text-2xl\">\n            <Brain className=\"h-8 w-8 text-blue-400\" />\n            AI Trading Advisor\n            <Badge className=\"bg-gradient-to-r from-green-500 to-blue-500\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              Live Analysis\n            </Badge>\n          </CardTitle>\n          <CardDescription className=\"text-blue-200\">\n            Advanced AI-powered stock analysis with real-time scoring and market classification\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      {/* Main Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4 bg-slate-800/50 backdrop-blur-sm\">\n          <TabsTrigger value=\"dashboard\" className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            Dashboard\n          </TabsTrigger>\n          <TabsTrigger value=\"analysis\" className=\"flex items-center gap-2\">\n            <Brain className=\"h-4 w-4\" />\n            Stock Analysis\n          </TabsTrigger>\n          <TabsTrigger value=\"signals\" className=\"flex items-center gap-2\">\n            <Target className=\"h-4 w-4\" />\n            Trading Signals\n          </TabsTrigger>\n          <TabsTrigger value=\"scanner\" className=\"flex items-center gap-2\">\n            <Search className=\"h-4 w-4\" />\n            Stock Scanner\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Dashboard Tab */}\n        <TabsContent value=\"dashboard\" className=\"space-y-6\">\n          {/* Top Stocks */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5 text-green-400\" />\n                  Top AI Buy Scores\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {allStocks.slice(0, 5).map((stock, index) => (\n                    <div\n                      key={stock.symbol}\n                      className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg cursor-pointer hover:bg-slate-700/50 transition-colors\"\n                      onClick={() => setSelectedStock(stock.symbol)}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"text-white font-semibold\">{index + 1}</div>\n                        <div>\n                          <div className=\"text-white font-medium\">{stock.symbol}</div>\n                          <div className=\"text-slate-400 text-sm\">{stock.name}</div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div\n                          className={`text-lg font-bold ${getScoreColor(stock.buyScore.overall)}`}\n                        >\n                          {stock.buyScore.overall}\n                        </div>\n                        <Badge className={getScoreBadgeColor(stock.buyScore.overall)}>\n                          {stock.buyScore.rating}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5 text-blue-400\" />\n                  Market Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {allStocks.slice(0, 5).map((stock: StockData) => (\n                    <div\n                      key={stock.symbol}\n                      className=\"flex items-center justify-between p-3 bg-slate-700/30 rounded-lg\"\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        {getMarketIcon(stock.marketClassification.classification)}\n                        <div>\n                          <div className=\"text-white font-medium\">{stock.symbol}</div>\n                          <div className=\"text-slate-400 text-sm\">\n                            {stock.marketClassification.classification}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-white font-semibold\">\n                          {formatCurrency(stock.currentPrice)}\n                        </div>\n                        <div\n                          className={`text-sm ${stock.performance?.day > 0 ? 'text-green-400' : 'text-red-400'}`}\n                        >\n                          {stock.performance?.day > 0 ? '+' : ''}\n                          {stock.performance?.day?.toFixed(2)}%\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n              <CardContent className=\"p-6 text-center\">\n                <TrendingUp className=\"h-12 w-12 text-green-400 mx-auto mb-3\" />\n                <div className=\"text-2xl font-bold text-green-400\">\n                  {allStocks.filter(s => s.buyScore.overall >= 70).length}\n                </div>\n                <div className=\"text-slate-400\">Strong Buys</div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n              <CardContent className=\"p-6 text-center\">\n                <Target className=\"h-12 w-12 text-blue-400 mx-auto mb-3\" />\n                <div className=\"text-2xl font-bold text-blue-400\">\n                  {\n                    allStocks.filter(s => s.buyScore.overall >= 50 && s.buyScore.overall < 70)\n                      .length\n                  }\n                </div>\n                <div className=\"text-slate-400\">Moderate Buys</div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-yellow-500/20\">\n              <CardContent className=\"p-6 text-center\">\n                <Minus className=\"h-12 w-12 text-yellow-400 mx-auto mb-3\" />\n                <div className=\"text-2xl font-bold text-yellow-400\">\n                  {\n                    allStocks.filter(s => s.buyScore.overall >= 40 && s.buyScore.overall < 50)\n                      .length\n                  }\n                </div>\n                <div className=\"text-slate-400\">Holds</div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-red-500/20\">\n              <CardContent className=\"p-6 text-center\">\n                <TrendingDown className=\"h-12 w-12 text-red-400 mx-auto mb-3\" />\n                <div className=\"text-2xl font-bold text-red-400\">\n                  {allStocks.filter(s => s.buyScore.overall < 40).length}\n                </div>\n                <div className=\"text-slate-400\">Sells</div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Stock Analysis Tab */}\n        <TabsContent value=\"analysis\" className=\"space-y-6\">\n          {/* Stock Selector */}\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search stocks...\"\n                    value={searchQuery}\n                    onChange={e => setSearchQuery(e.target.value)}\n                    className=\"pl-10 bg-slate-700/30 border-blue-500/30 text-white\"\n                  />\n                </div>\n                <div className=\"flex gap-2\">\n                  {['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA'].map((symbol: string) => (\n                    <Button\n                      key={symbol}\n                      variant={selectedStock === symbol ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setSelectedStock(symbol)}\n                    >\n                      {symbol}\n                    </Button>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {loading ? (\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n              <CardContent className=\"p-8 text-center\">\n                <Brain className=\"h-16 w-16 text-blue-400 mx-auto mb-4 animate-pulse\" />\n                <h3 className=\"text-xl font-bold text-white mb-2\">AI Analysis in Progress</h3>\n                <p className=\"text-slate-400\">\n                  Analyzing {selectedStock} with advanced AI algorithms...\n                </p>\n              </CardContent>\n            </Card>\n          ) : stockAnalysis ? (\n            <div className=\"space-y-6\">\n              {/* Stock Header */}\n              <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                      <h2 className=\"text-2xl font-bold text-white\">\n                        {stockAnalysis.stock.symbol}\n                      </h2>\n                      <p className=\"text-slate-400\">{stockAnalysis.stock.name}</p>\n                      <Badge className=\"mt-2\">{stockAnalysis.stock.sector}</Badge>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-3xl font-bold text-white\">\n                        {formatCurrency(stockAnalysis.currentPrice)}\n                      </div>\n                      <div\n                        className={`text-lg ${stockAnalysis.metrics.performance?.day > 0 ? 'text-green-400' : 'text-red-400'}`}\n                      >\n                        {stockAnalysis.metrics.performance?.day > 0 ? '+' : ''}\n                        {stockAnalysis.metrics.performance?.day?.toFixed(2)}% Today\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                    <div className=\"text-center p-3 bg-slate-700/30 rounded-lg\">\n                      <div className=\"text-slate-400 text-sm\">Volume</div>\n                      <div className=\"text-white font-semibold\">\n                        {formatVolume(stockAnalysis.volumeAnalysis?.currentVolume || 0)}\n                      </div>\n                    </div>\n                    <div className=\"text-center p-3 bg-slate-700/30 rounded-lg\">\n                      <div className=\"text-slate-400 text-sm\">52W High</div>\n                      <div className=\"text-white font-semibold\">\n                        {formatCurrency(stockAnalysis.metrics.levels?.year52High || 0)}\n                      </div>\n                    </div>\n                    <div className=\"text-center p-3 bg-slate-700/30 rounded-lg\">\n                      <div className=\"text-slate-400 text-sm\">52W Low</div>\n                      <div className=\"text-white font-semibold\">\n                        {formatCurrency(stockAnalysis.metrics.levels?.year52Low || 0)}\n                      </div>\n                    </div>\n                    <div className=\"text-center p-3 bg-slate-700/30 rounded-lg\">\n                      <div className=\"text-slate-400 text-sm\">Market Cap</div>\n                      <div className=\"text-white font-semibold\">\n                        ${(stockAnalysis.stock.marketCap / 1000000000).toFixed(1)}B\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* AI Buy Score */}\n              <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Brain className=\"h-6 w-6 text-green-400\" />\n                    AI Buy Score Analysis\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    <div className=\"text-center\">\n                      <div\n                        className={`text-6xl font-bold mb-2 ${getScoreColor(stockAnalysis.buyScore?.overall || 0)}`}\n                      >\n                        {stockAnalysis.buyScore?.overall || 'N/A'}\n                      </div>\n                      <Badge\n                        className={`text-lg px-4 py-2 ${getScoreBadgeColor(stockAnalysis.buyScore?.overall || 0)}`}\n                      >\n                        {stockAnalysis.buyScore?.rating || 'N/A'}\n                      </Badge>\n                      <div className=\"mt-4\">\n                        <Progress value={stockAnalysis.buyScore?.overall || 0} className=\"h-3\" />\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <h4 className=\"text-white font-semibold\">Score Components:</h4>\n                      {stockAnalysis.buyScore?.components && Object.entries(stockAnalysis.buyScore.components).map(\n                        ([key, value]: [string, unknown]) => (\n                          <div key={key} className=\"flex items-center justify-between\">\n                            <span className=\"text-slate-300 capitalize\">\n                              {key.replace('_', ' ')}\n                            </span>\n                            <div className=\"flex items-center gap-2\">\n                              <Progress value={(Number(value) / 30) * 100} className=\"w-20 h-2\" />\n                              <span className=\"text-white font-medium w-8\">\n                                {Math.round(Number(value))}\n                              </span>\n                            </div>\n                          </div>\n                        )\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Market Classification */}\n              <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    {getMarketIcon(stockAnalysis.marketClassification.classification)}\n                    Market Classification\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    <div>\n                      <div className=\"text-center mb-4\">\n                        <div className=\"text-2xl font-bold text-white mb-2\">\n                          {stockAnalysis.marketClassification.classification}\n                        </div>\n                        <div className=\"text-slate-400\">\n                          Confidence:{' '}\n                          {(stockAnalysis.marketClassification.confidence * 100).toFixed(0)}%\n                        </div>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-slate-400\">Bullish Factors:</span>\n                          <span className=\"text-green-400\">\n                            {stockAnalysis.marketClassification.bullishFactors}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-slate-400\">Bearish Factors:</span>\n                          <span className=\"text-red-400\">\n                            {stockAnalysis.marketClassification.bearishFactors}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-white font-semibold mb-3\">Trend Analysis:</h4>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-slate-400\">Short Term:</span>\n                          <div className=\"flex items-center gap-2\">\n                            {stockAnalysis.marketClassification.trends.short === 'UP' ? (\n                              <ArrowUp className=\"h-4 w-4 text-green-400\" />\n                            ) : (\n                              <ArrowDown className=\"h-4 w-4 text-red-400\" />\n                            )}\n                            <span\n                              className={\n                                stockAnalysis.marketClassification.trends.short === 'UP'\n                                  ? 'text-green-400'\n                                  : 'text-red-400'\n                              }\n                            >\n                              {stockAnalysis.marketClassification.trends.short}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-slate-400\">Medium Term:</span>\n                          <div className=\"flex items-center gap-2\">\n                            {stockAnalysis.marketClassification.trends.medium === 'UP' ? (\n                              <ArrowUp className=\"h-4 w-4 text-green-400\" />\n                            ) : (\n                              <ArrowDown className=\"h-4 w-4 text-red-400\" />\n                            )}\n                            <span\n                              className={\n                                stockAnalysis.marketClassification.trends.medium === 'UP'\n                                  ? 'text-green-400'\n                                  : 'text-red-400'\n                              }\n                            >\n                              {stockAnalysis.marketClassification.trends.medium}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-slate-400\">Long Term:</span>\n                          <div className=\"flex items-center gap-2\">\n                            {stockAnalysis.marketClassification.trends.long === 'UP' ? (\n                              <ArrowUp className=\"h-4 w-4 text-green-400\" />\n                            ) : (\n                              <ArrowDown className=\"h-4 w-4 text-red-400\" />\n                            )}\n                            <span\n                              className={\n                                stockAnalysis.marketClassification.trends.long === 'UP'\n                                  ? 'text-green-400'\n                                  : 'text-red-400'\n                              }\n                            >\n                              {stockAnalysis.marketClassification.trends.long}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-4 p-4 bg-slate-700/30 rounded-lg\">\n                    <p className=\"text-slate-300 text-sm\">\n                      {stockAnalysis.marketClassification.description}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* AI Recommendation */}\n              <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Target className=\"h-6 w-6 text-blue-400\" />\n                    AI Trading Recommendation\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-white mb-2\">\n                        {stockAnalysis.recommendation.action}\n                      </div>\n                      <div className=\"text-slate-400 mb-4\">\n                        Confidence: {(stockAnalysis.recommendation.confidence * 100).toFixed(0)}%\n                      </div>\n                      <Progress\n                        value={stockAnalysis.recommendation.confidence * 100}\n                        className=\"mb-4\"\n                      />\n\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-slate-400\">Position Size:</span>\n                          <span className=\"text-white\">\n                            {stockAnalysis.recommendation.positionSize}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-slate-400\">Stop Loss:</span>\n                          <span className=\"text-red-400\">\n                            {formatCurrency(stockAnalysis.recommendation.stopLoss)}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-slate-400\">Take Profit:</span>\n                          <span className=\"text-green-400\">\n                            {formatCurrency(stockAnalysis.recommendation.takeProfit)}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-slate-400\">Timeframe:</span>\n                          <span className=\"text-white\">\n                            {stockAnalysis.recommendation.timeframe}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-white font-semibold mb-3\">Key Factors:</h4>\n                      <div className=\"space-y-2\">\n                        {stockAnalysis.recommendation.keyFactors.map(\n                          (factor: string, index: number) => (\n                            <div key={index} className=\"flex items-start gap-2\">\n                              <CheckCircle className=\"h-4 w-4 text-green-400 mt-0.5 flex-shrink-0\" />\n                              <span className=\"text-slate-300 text-sm\">{factor}</span>\n                            </div>\n                          )\n                        )}\n                      </div>\n\n                      <div className=\"mt-4 p-3 bg-slate-700/30 rounded-lg\">\n                        <div className=\"flex items-center gap-2 mb-2\">\n                          <AlertTriangle className=\"h-4 w-4 text-yellow-400\" />\n                          <span className=\"text-white font-medium\">Risk Level</span>\n                        </div>\n                        <Badge\n                          className={\n                            stockAnalysis.recommendation.riskLevel === 'HIGH'\n                              ? 'bg-red-600'\n                              : stockAnalysis.recommendation.riskLevel === 'MEDIUM'\n                                ? 'bg-yellow-600'\n                                : 'bg-green-600'\n                          }\n                        >\n                          {stockAnalysis.recommendation.riskLevel}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Performance Since IPO */}\n              {stockAnalysis.performanceSinceIPO && (\n                <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n                  <CardHeader>\n                    <CardTitle className=\"text-white flex items-center gap-2\">\n                      <Calendar className=\"h-6 w-6 text-green-400\" />\n                      Performance Since IPO\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                      <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n                        <div className=\"text-slate-400 text-sm\">IPO Date</div>\n                        <div className=\"text-white font-semibold\">\n                          {stockAnalysis.stock.ipoDate}\n                        </div>\n                      </div>\n                      <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n                        <div className=\"text-slate-400 text-sm\">IPO Price</div>\n                        <div className=\"text-white font-semibold\">\n                          {formatCurrency(stockAnalysis.performanceSinceIPO.ipoPrice)}\n                        </div>\n                      </div>\n                      <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n                        <div className=\"text-slate-400 text-sm\">Total Return</div>\n                        <div className=\"text-green-400 font-semibold\">\n                          +{stockAnalysis.performanceSinceIPO.totalReturn.toFixed(0)}%\n                        </div>\n                      </div>\n                      <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n                        <div className=\"text-slate-400 text-sm\">Annualized Return</div>\n                        <div className=\"text-green-400 font-semibold\">\n                          +{stockAnalysis.performanceSinceIPO.annualizedReturn.toFixed(1)}%\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          ) : null}\n        </TabsContent>\n\n        {/* Trading Signals Tab */}\n        <TabsContent value=\"signals\" className=\"space-y-6\">\n          {stockAnalysis && (\n            <div className=\"space-y-6\">\n              {/* Active Signals */}\n              <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Target className=\"h-6 w-6 text-blue-400\" />\n                    Active Trading Signals for {selectedStock}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {stockAnalysis.tradingSignals?.map((signal: TradingSignal, index: number) => (\n                      <div\n                        key={index}\n                        className={`p-4 rounded-lg border-l-4 ${\n                          signal.type === 'BUY'\n                            ? 'bg-green-900/20 border-green-500'\n                            : 'bg-red-900/20 border-red-500'\n                        }`}\n                      >\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center gap-2\">\n                            {signal.type === 'BUY' ? (\n                              <TrendingUp className=\"h-5 w-5 text-green-400\" />\n                            ) : (\n                              <TrendingDown className=\"h-5 w-5 text-red-400\" />\n                            )}\n                            <span\n                              className={`font-semibold ${signal.type === 'BUY' ? 'text-green-400' : 'text-red-400'}`}\n                            >\n                              {signal.type} SIGNAL\n                            </span>\n                          </div>\n                          <Badge\n                            className={\n                              (typeof signal.strength === 'number' ? signal.strength >= 70 : signal.strength === 'STRONG') ? 'bg-red-600' : 'bg-yellow-600'\n                            }\n                          >\n                            {signal.strength}\n                          </Badge>\n                        </div>\n                        <div className=\"text-white font-medium mb-1\">{signal.indicator}</div>\n                        <div className=\"text-slate-300 text-sm mb-2\">{signal.message || signal.description}</div>\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-slate-400 text-sm\">Confidence:</span>\n                          <Progress value={signal.confidence * 100} className=\"w-24 h-2\" />\n                          <span className=\"text-white text-sm\">\n                            {(signal.confidence * 100).toFixed(0)}%\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Entry/Exit Points */}\n              <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Eye className=\"h-6 w-6 text-purple-400\" />\n                    Entry & Exit Points\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                    <div>\n                      <h4 className=\"text-white font-semibold mb-3 flex items-center gap-2\">\n                        <ArrowDown className=\"h-4 w-4 text-green-400\" />\n                        Entry Points\n                      </h4>\n                      <div className=\"space-y-3\">\n                        {stockAnalysis.entryExitPoints?.entry.map((point: EntryExitPoint, index: number) => (\n                          <div\n                            key={index}\n                            className=\"p-3 bg-green-900/20 border border-green-500/30 rounded-lg\"\n                          >\n                            <div className=\"flex items-center justify-between mb-1\">\n                              <span className=\"text-white font-medium\">{point.type || 'Entry Point'}</span>\n                              <span className=\"text-green-400 font-semibold\">\n                                {formatCurrency(point.price)}\n                              </span>\n                            </div>\n                            <div className=\"text-slate-300 text-sm mb-2\">{point.description || point.reasoning}</div>\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"text-slate-400 text-xs\">Confidence:</span>\n                              <Progress value={point.confidence * 100} className=\"w-16 h-1\" />\n                              <span className=\"text-white text-xs\">\n                                {(point.confidence * 100).toFixed(0)}%\n                              </span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-white font-semibold mb-3 flex items-center gap-2\">\n                        <ArrowUp className=\"h-4 w-4 text-red-400\" />\n                        Exit Points\n                      </h4>\n                      <div className=\"space-y-3\">\n                        {stockAnalysis.entryExitPoints?.exit.map((point: EntryExitPoint, index: number) => (\n                          <div\n                            key={index}\n                            className=\"p-3 bg-red-900/20 border border-red-500/30 rounded-lg\"\n                          >\n                            <div className=\"flex items-center justify-between mb-1\">\n                              <span className=\"text-white font-medium\">{point.type || 'Exit Point'}</span>\n                              <span className=\"text-red-400 font-semibold\">\n                                {formatCurrency(point.price)}\n                              </span>\n                            </div>\n                            <div className=\"text-slate-300 text-sm mb-2\">{point.description || point.reasoning}</div>\n                            <div className=\"flex items-center gap-2\">\n                              <span className=\"text-slate-400 text-xs\">Confidence:</span>\n                              <Progress value={point.confidence * 100} className=\"w-16 h-1\" />\n                              <span className=\"text-white text-xs\">\n                                {(point.confidence * 100).toFixed(0)}%\n                              </span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-6 p-4 bg-blue-900/20 border border-blue-500/30 rounded-lg\">\n                    <h4 className=\"text-white font-semibold mb-2\">AI Recommendation:</h4>\n                    <p className=\"text-slate-300 text-sm\">\n                      {stockAnalysis.entryExitPoints?.recommendation}\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Price Targets */}\n              <Card className=\"bg-slate-800/50 backdrop-blur-sm border-yellow-500/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <DollarSign className=\"h-6 w-6 text-yellow-400\" />\n                    AI Price Targets\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                    <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n                      <div className=\"text-slate-400 text-sm\">Conservative</div>\n                      <div className=\"text-white font-semibold text-lg\">\n                        {formatCurrency(stockAnalysis.priceTargets.conservative)}\n                      </div>\n                      <div className=\"text-green-400 text-sm\">\n                        +\n                        {(\n                          ((stockAnalysis.priceTargets.conservative - stockAnalysis.currentPrice) /\n                            stockAnalysis.currentPrice) *\n                          100\n                        ).toFixed(1)}\n                        %\n                      </div>\n                    </div>\n                    <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n                      <div className=\"text-slate-400 text-sm\">Moderate</div>\n                      <div className=\"text-white font-semibold text-lg\">\n                        {formatCurrency(stockAnalysis.priceTargets.moderate)}\n                      </div>\n                      <div className=\"text-green-400 text-sm\">\n                        +\n                        {(\n                          ((stockAnalysis.priceTargets.moderate - stockAnalysis.currentPrice) /\n                            stockAnalysis.currentPrice) *\n                          100\n                        ).toFixed(1)}\n                        %\n                      </div>\n                    </div>\n                    <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n                      <div className=\"text-slate-400 text-sm\">Aggressive</div>\n                      <div className=\"text-white font-semibold text-lg\">\n                        {formatCurrency(stockAnalysis.priceTargets.aggressive)}\n                      </div>\n                      <div className=\"text-green-400 text-sm\">\n                        +\n                        {(\n                          ((stockAnalysis.priceTargets.aggressive - stockAnalysis.currentPrice) /\n                            stockAnalysis.currentPrice) *\n                          100\n                        ).toFixed(1)}\n                        %\n                      </div>\n                    </div>\n                    <div className=\"text-center p-4 bg-red-900/20 rounded-lg\">\n                      <div className=\"text-slate-400 text-sm\">Stop Loss</div>\n                      <div className=\"text-red-400 font-semibold text-lg\">\n                        {formatCurrency(stockAnalysis.priceTargets.stopLoss)}\n                      </div>\n                      <div className=\"text-red-400 text-sm\">\n                        {(\n                          ((stockAnalysis.priceTargets.stopLoss - stockAnalysis.currentPrice) /\n                            stockAnalysis.currentPrice) *\n                          100\n                        ).toFixed(1)}\n                        %\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-4 text-center\">\n                    <div className=\"text-slate-400 text-sm\">\n                      Timeframe: {stockAnalysis.priceTargets.timeframe}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </TabsContent>\n\n        {/* Stock Scanner Tab */}\n        <TabsContent value=\"scanner\" className=\"space-y-6\">\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Search className=\"h-6 w-6 text-blue-400\" />\n                AI Stock Scanner\n              </CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                Real-time stock screening with AI-powered analysis\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {allStocks.map((stock: StockData) => (\n                  <div\n                    key={stock.symbol}\n                    className=\"p-4 bg-slate-700/30 rounded-lg hover:bg-slate-700/50 transition-colors cursor-pointer\"\n                    onClick={() => {\n                      setSelectedStock(stock.symbol);\n                      setActiveTab('analysis');\n                    }}\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-4\">\n                        <div>\n                          <div className=\"text-white font-semibold text-lg\">{stock.symbol}</div>\n                          <div className=\"text-slate-400 text-sm\">{stock.name}</div>\n                          <Badge className=\"mt-1 text-xs\">{stock.sector}</Badge>\n                        </div>\n                      </div>\n\n                      <div className=\"flex items-center gap-6\">\n                        <div className=\"text-right\">\n                          <div className=\"text-white font-semibold\">\n                            {formatCurrency(stock.currentPrice)}\n                          </div>\n                          <div\n                            className={`text-sm ${stock.performance?.day > 0 ? 'text-green-400' : 'text-red-400'}`}\n                          >\n                            {stock.performance?.day > 0 ? '+' : ''}\n                            {stock.performance?.day?.toFixed(2)}%\n                          </div>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <div\n                            className={`text-2xl font-bold ${getScoreColor(stock.buyScore.overall)}`}\n                          >\n                            {stock.buyScore.overall}\n                          </div>\n                          <Badge className={getScoreBadgeColor(stock.buyScore.overall)}>\n                            {stock.buyScore.rating}\n                          </Badge>\n                        </div>\n\n                        <div className=\"text-center\">\n                          {getMarketIcon(stock.marketClassification.classification)}\n                          <div className=\"text-slate-400 text-xs mt-1\">\n                            {stock.marketClassification.classification.split(' ')[0]}\n                          </div>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <Volume2 className=\"h-5 w-5 text-blue-400 mx-auto\" />\n                          <div className=\"text-white text-sm\">\n                            {formatVolume(typeof stock.volume === 'number' ? stock.volume : (stock.volume as any)?.currentVolume || 0)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/AIVoiceAssistant.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 18,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 18,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [506, 509], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [506, 509], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 19,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 19,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [540, 543], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [540, 543], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 53,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 53,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1341, 1344], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1341, 1344], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 54,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 54,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1404, 1407], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1404, 1407], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 55,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 55,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1487, 1490], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1487, 1490], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 56,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 56,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1552, 1555], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1552, 1555], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'isConnected' is assigned a value but never used.",
        "line": 74,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 21
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'processVoiceCommand'. Either include it or remove the dependency array.",
        "line": 119,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 119,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [processVoiceCommand]",
            "fix": { "range": [3733, 3735], "text": "[processVoiceCommand]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Mic, MicOff, Volume2, VolumeX, Brain, MessageCircle, Zap, Settings } from 'lucide-react';\n\ninterface ConversationItem {\n  id: number;\n  role: string;\n  message: string;\n  timestamp: Date;\n}\n\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n\ninterface SpeechRecognitionAlternative {\n  transcript: string;\n  confidence: number;\n}\n\ninterface SpeechRecognitionResult {\n  readonly length: number;\n  item(index: number): SpeechRecognitionAlternative;\n  [index: number]: SpeechRecognitionAlternative;\n  isFinal: boolean;\n}\n\ninterface SpeechRecognitionResultList {\n  readonly length: number;\n  item(index: number): SpeechRecognitionResult;\n  [index: number]: SpeechRecognitionResult;\n}\n\ninterface SpeechRecognitionEvent extends Event {\n  readonly resultIndex: number;\n  readonly results: SpeechRecognitionResultList;\n}\n\ninterface SpeechRecognition extends EventTarget {\n  continuous: boolean;\n  interimResults: boolean;\n  lang: string;\n  start(): void;\n  stop(): void;\n  abort(): void;\n  onstart: ((this: SpeechRecognition, ev: Event) => any) | null;\n  onend: ((this: SpeechRecognition, ev: Event) => any) | null;\n  onresult: ((this: SpeechRecognition, ev: SpeechRecognitionEvent) => any) | null;\n  onerror: ((this: SpeechRecognition, ev: Event) => any) | null;\n}\n\ndeclare const SpeechRecognition: {\n  prototype: SpeechRecognition;\n  new (): SpeechRecognition;\n};\n\nexport default function AIVoiceAssistant() {\n  const [isListening, setIsListening] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [voiceEnabled, setVoiceEnabled] = useState(true);\n  const [conversation, setConversation] = useState<ConversationItem[]>([]);\n  const [aiPersonality, setAiPersonality] = useState('professional');\n\n  const recognitionRef = useRef<SpeechRecognition | null>(null);\n  const synthRef = useRef<SpeechSynthesis | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [aiThinking, setAiThinking] = useState(false);\n  const [soundWave, setSoundWave] = useState(Array(20).fill(0));\n\n  useEffect(() => {\n    // Initialize speech recognition\n    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {\n      const SpeechRecognitionConstructor =\n        window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognitionConstructor();\n\n      if (recognitionRef.current) {\n        recognitionRef.current.continuous = true;\n        recognitionRef.current.interimResults = true;\n        recognitionRef.current.lang = 'en-US';\n\n        recognitionRef.current.onresult = (event: SpeechRecognitionEvent) => {\n          const current = event.resultIndex;\n          const transcript = event.results[current][0].transcript;\n          setTranscript(transcript);\n\n          if (event.results[current].isFinal) {\n            processVoiceCommand(transcript);\n          }\n        };\n\n        recognitionRef.current.onend = () => {\n          setIsListening(false);\n        };\n      }\n    }\n\n    // Initialize speech synthesis\n    if ('speechSynthesis' in window) {\n      synthRef.current = window.speechSynthesis;\n    }\n\n    // Simulate connection status\n    setIsConnected(true);\n\n    // Add initial greeting\n    addToConversation(\n      'assistant',\n      \"Hello! I'm your AI trading assistant. Ask me about market analysis, stock recommendations, or trading strategies.\"\n    );\n  }, []);\n\n  // Sound wave animation effect\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isListening || isSpeaking) {\n      interval = setInterval(() => {\n        setSoundWave(prev => prev.map(() => Math.random() * 100));\n      }, 100);\n    } else {\n      setSoundWave(Array(20).fill(0));\n    }\n    return () => clearInterval(interval);\n  }, [isListening, isSpeaking]);\n\n  const startListening = () => {\n    if (recognitionRef.current && !isListening) {\n      setIsListening(true);\n      setTranscript('');\n      recognitionRef.current.start();\n    }\n  };\n\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n\n  const processVoiceCommand = async (command: string) => {\n    addToConversation('user', command);\n    setAiThinking(true);\n\n    // Simulate AI processing with visual feedback\n    const aiResponse = await generateAIResponse(command.toLowerCase());\n    setAiThinking(false);\n    addToConversation('assistant', aiResponse);\n\n    if (voiceEnabled) {\n      speakResponse(aiResponse);\n    }\n  };\n\n  const generateAIResponse = async (command: string) => {\n    // Simulate processing delay with animation\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    // Enhanced AI response generation\n    if (command.includes('price') || command.includes('stock')) {\n      const stocks = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA'];\n      const stock = stocks[Math.floor(Math.random() * stocks.length)];\n      const price = (150 + Math.random() * 200).toFixed(2);\n      const change = (Math.random() - 0.5) * 10;\n      return `${stock} is currently trading at $${price}, ${change >= 0 ? 'up' : 'down'} ${Math.abs(change).toFixed(2)}% today. Volume is ${(Math.random() * 50 + 10).toFixed(1)}M shares.`;\n    }\n\n    if (command.includes('market') || command.includes('outlook')) {\n      const sentiment = Math.random() > 0.5 ? 'bullish' : 'bearish';\n      const confidence = (70 + Math.random() * 30).toFixed(0);\n      return `Current market sentiment is ${sentiment} with ${confidence}% confidence. The S&P 500 is showing ${Math.random() > 0.5 ? 'strength' : 'consolidation'} patterns.`;\n    }\n\n    if (command.includes('portfolio') || command.includes('allocation')) {\n      return `Based on current market conditions, I recommend a balanced allocation: 60% equities, 25% bonds, 10% commodities, and 5% cash. This provides optimal risk-adjusted returns.`;\n    }\n\n    // Default responses with more personality\n    const responses = [\n      'Fascinating question! My neural networks are processing multiple market indicators and sentiment data to provide you with the most accurate analysis.',\n      'Excellent timing on that query. Based on my real-time analysis of over 10,000 data points, I can provide specific recommendations tailored to your investment profile.',\n      'My quantum-enhanced algorithms are analyzing market microstructure, options flow, and institutional positioning to identify alpha opportunities.',\n      \"Outstanding question! I'm cross-referencing technical patterns, fundamental metrics, and macro-economic indicators to deliver precise insights.\",\n    ];\n\n    return responses[Math.floor(Math.random() * responses.length)];\n  };\n\n  const speakResponse = (text: string) => {\n    if (synthRef.current && voiceEnabled) {\n      setIsSpeaking(true);\n      const utterance = new SpeechSynthesisUtterance(text);\n\n      utterance.rate = aiPersonality === 'energetic' ? 1.2 : 0.9;\n      utterance.pitch = aiPersonality === 'friendly' ? 1.1 : 1.0;\n      utterance.volume = 0.8;\n\n      utterance.onend = () => {\n        setIsSpeaking(false);\n      };\n\n      synthRef.current.speak(utterance);\n    }\n  };\n\n  const addToConversation = (role: string, message: string) => {\n    const newMessage = {\n      id: Date.now(),\n      role,\n      message,\n      timestamp: new Date(),\n    };\n    setConversation(prev => [newMessage, ...prev.slice(0, 19)]);\n  };\n\n  const toggleVoice = () => {\n    setVoiceEnabled(!voiceEnabled);\n    if (isSpeaking && synthRef.current) {\n      synthRef.current.cancel();\n      setIsSpeaking(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Brain className=\"h-6 w-6 mr-3 text-purple-400\" />\n            AI Voice Trading Assistant\n            <Badge className=\"ml-3 bg-gradient-to-r from-purple-500 to-pink-500\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              NEURAL POWERED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"space-y-2\">\n              <Button\n                onClick={isListening ? stopListening : startListening}\n                className={`w-full ${\n                  isListening\n                    ? 'bg-red-500 hover:bg-red-600 animate-pulse'\n                    : 'bg-green-500 hover:bg-green-600'\n                }`}\n              >\n                {isListening ? (\n                  <>\n                    <MicOff className=\"h-4 w-4 mr-2\" />\n                    Stop Listening\n                  </>\n                ) : (\n                  <>\n                    <Mic className=\"h-4 w-4 mr-2\" />\n                    Start Listening\n                  </>\n                )}\n              </Button>\n              {isListening && (\n                <div className=\"text-center\">\n                  <Badge className=\"bg-red-500 animate-pulse\">LISTENING</Badge>\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Button\n                onClick={toggleVoice}\n                variant=\"outline\"\n                className={`w-full border-purple-500/30 ${\n                  voiceEnabled ? 'text-purple-400' : 'text-gray-400'\n                }`}\n              >\n                {voiceEnabled ? (\n                  <>\n                    <Volume2 className=\"h-4 w-4 mr-2\" />\n                    Voice On\n                  </>\n                ) : (\n                  <>\n                    <VolumeX className=\"h-4 w-4 mr-2\" />\n                    Voice Off\n                  </>\n                )}\n              </Button>\n              {isSpeaking && (\n                <div className=\"text-center\">\n                  <Badge className=\"bg-blue-500 animate-pulse\">SPEAKING</Badge>\n                </div>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <select\n                value={aiPersonality}\n                onChange={e => setAiPersonality(e.target.value)}\n                className=\"w-full bg-gray-800 border border-purple-500/30 rounded px-3 py-2 text-white\"\n              >\n                <option value=\"professional\">Professional</option>\n                <option value=\"friendly\">Friendly</option>\n                <option value=\"energetic\">Energetic</option>\n              </select>\n              <div className=\"text-center\">\n                <Badge className=\"bg-purple-500\">AI PERSONALITY</Badge>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <div className=\"text-center p-2 bg-gray-800/50 rounded\">\n                <div className=\"text-green-400 font-bold\">ONLINE</div>\n                <div className=\"text-xs text-gray-400\">AI Ready</div>\n              </div>\n              <div className=\"text-center\">\n                <Badge className=\"bg-green-500\">CONNECTED</Badge>\n              </div>\n            </div>\n          </div>\n\n          {transcript && (\n            <div className=\"mt-4 p-3 bg-gray-800/50 rounded-lg border border-purple-500/30\">\n              <div className=\"text-purple-400 text-sm font-medium mb-1\">Current Input:</div>\n              <div className=\"text-white\">{transcript}</div>\n            </div>\n          )}\n\n          {/* Sound Wave Visualization */}\n          {(isListening || isSpeaking) && (\n            <div className=\"mt-4 p-4 bg-gradient-to-r from-purple-900/50 to-pink-900/50 rounded-lg border border-purple-500/30\">\n              <div className=\"text-center mb-2\">\n                <Badge className={`${isListening ? 'bg-red-500' : 'bg-blue-500'} animate-pulse`}>\n                  {isListening ? 'LISTENING...' : 'SPEAKING...'}\n                </Badge>\n              </div>\n              <div className=\"flex items-center justify-center space-x-1 h-8\">\n                {soundWave.map((height, index) => (\n                  <div\n                    key={index}\n                    className={`bg-gradient-to-t ${\n                      isListening ? 'from-red-400 to-red-600' : 'from-blue-400 to-blue-600'\n                    } rounded-full transition-all duration-100`}\n                    style={{\n                      width: '3px',\n                      height: `${Math.max(4, height / 4)}px`,\n                      animation: `pulse ${0.5 + Math.random() * 0.5}s infinite`,\n                    }}\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* AI Thinking Indicator */}\n          {aiThinking && (\n            <div className=\"mt-4 p-4 bg-gradient-to-r from-purple-900/50 to-blue-900/50 rounded-lg border border-purple-500/30\">\n              <div className=\"flex items-center justify-center space-x-3\">\n                <div className=\"relative\">\n                  <Brain className=\"h-8 w-8 text-purple-400 animate-pulse\" />\n                  <div className=\"absolute -top-1 -right-1 h-3 w-3 bg-green-400 rounded-full animate-ping\"></div>\n                </div>\n                <div className=\"text-purple-400 font-medium\">AI Processing...</div>\n                <div className=\"flex space-x-1\">\n                  {[0, 1, 2].map(i => (\n                    <div\n                      key={i}\n                      className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\"\n                      style={{ animationDelay: `${i * 0.1}s` }}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <MessageCircle className=\"h-5 w-5 mr-2 text-purple-400\" />\n            Conversation History\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {conversation.map((message: ConversationItem) => (\n              <div\n                key={message.id}\n                className={`p-3 rounded-lg ${\n                  message.role === 'user'\n                    ? 'bg-blue-500/20 border border-blue-500/30 ml-8'\n                    : 'bg-purple-500/20 border border-purple-500/30 mr-8'\n                }`}\n              >\n                <div className=\"flex items-center justify-between mb-1\">\n                  <Badge className={message.role === 'user' ? 'bg-blue-500' : 'bg-purple-500'}>\n                    {message.role === 'user' ? 'YOU' : 'AI ASSISTANT'}\n                  </Badge>\n                  <span className=\"text-xs text-gray-400\">\n                    {message.timestamp.toLocaleTimeString()}\n                  </span>\n                </div>\n                <div className=\"text-white text-sm\">{message.message}</div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Settings className=\"h-5 w-5 mr-2 text-purple-400\" />\n            Quick Commands\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n            {[\n              'Check AAPL stock price',\n              'Market outlook today',\n              'Portfolio allocation advice',\n              'Risk analysis',\n              'Trading opportunities',\n              'Sector recommendations',\n            ].map((command, index) => (\n              <Button\n                key={index}\n                onClick={() => processVoiceCommand(command)}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"border-purple-500/30 text-purple-400 hover:bg-purple-500/20\"\n              >\n                {command}\n              </Button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/ComputerVisionAnalysis.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'imageData' is defined but never used.",
        "line": 220,
        "column": 31,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 220,
        "endColumn": 40
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'drawAnalysisOverlay'. Either include it or remove the dependency array.",
        "line": 281,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 281,
        "endColumn": 36,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [selectedImage, chartPatterns, drawAnalysisOverlay]",
            "fix": {
              "range": [6934, 6964],
              "text": "[selectedImage, chartPatterns, drawAnalysisOverlay]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 344,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 344,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9438, 9441], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9438, 9441], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 423,
        "column": 15,
        "nodeType": "JSXOpeningElement",
        "endLine": 427,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 453,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 453,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14263, 14266], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14263, 14266], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 520,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 520,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17272, 17275], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17272, 17275], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 592,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 592,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20393, 20396], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20393, 20396], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Eye,\n  Camera,\n  Scan,\n  Target,\n  Zap,\n  Brain,\n  BarChart3,\n  Activity,\n  Layers,\n  ImageIcon,\n  Search,\n} from 'lucide-react';\n\ninterface VisionModel {\n  id: number;\n  name: string;\n  type: string;\n  accuracy: number;\n  specialty: string;\n  status: string;\n  confidence: number;\n  processing: string;\n}\n\ninterface ChartPattern {\n  id: number;\n  pattern: string;\n  confidence: number;\n  coordinates: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  direction: string;\n  target: number;\n  probability: number;\n  timeframe: string;\n}\n\ninterface AnalysisResult {\n  id: number;\n  type: string;\n  value?: number;\n  strength?: number;\n  touches?: number;\n  confidence: number;\n  color: string;\n  slope?: number | string;\n  points?: Array<{ x: number; y: number }> | number;\n  location?: string;\n  magnitude?: number;\n  significance?: number;\n  direction?: string;\n}\n\nexport default function ComputerVisionAnalysis() {\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [analysisResults, setAnalysisResults] = useState<AnalysisResult[]>([]);\n  const [chartPatterns, setChartPatterns] = useState<ChartPattern[]>([]);\n  const [visionModels, setVisionModels] = useState<VisionModel[]>([]);\n  const [processingProgress, setProcessingProgress] = useState(0);\n  const [selectedImage, setSelectedImage] = useState<string | null>(null);\n\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    initializeVisionModels();\n    generateMockAnalysis();\n  }, []);\n\n  const initializeVisionModels = () => {\n    const models = [\n      {\n        id: 1,\n        name: 'Chart Pattern CNN',\n        type: 'Convolutional Neural Network',\n        accuracy: 96.8,\n        specialty: 'Technical Pattern Recognition',\n        status: 'active',\n        confidence: 94.2,\n        processing: 'Real-time Chart Analysis',\n      },\n      {\n        id: 2,\n        name: 'Candlestick Vision AI',\n        type: 'Deep Learning Classifier',\n        accuracy: 93.5,\n        specialty: 'Candlestick Pattern Detection',\n        status: 'active',\n        confidence: 91.7,\n        processing: 'Price Action Analysis',\n      },\n      {\n        id: 3,\n        name: 'Support/Resistance Detector',\n        type: 'Object Detection Model',\n        accuracy: 95.1,\n        specialty: 'Key Level Identification',\n        status: 'active',\n        confidence: 89.3,\n        processing: 'Level Detection',\n      },\n      {\n        id: 4,\n        name: 'Volume Profile Analyzer',\n        type: 'Semantic Segmentation',\n        accuracy: 92.7,\n        specialty: 'Volume Analysis',\n        status: 'training',\n        confidence: 87.9,\n        processing: 'Volume Pattern Recognition',\n      },\n    ];\n\n    setVisionModels(models);\n  };\n\n  const generateMockAnalysis = () => {\n    const patterns = [\n      {\n        id: 1,\n        pattern: 'Head and Shoulders',\n        confidence: 94.2,\n        coordinates: { x: 150, y: 200, width: 300, height: 150 },\n        direction: 'bearish',\n        target: 165.5,\n        probability: 87,\n        timeframe: '4H',\n      },\n      {\n        id: 2,\n        pattern: 'Ascending Triangle',\n        confidence: 91.8,\n        coordinates: { x: 500, y: 180, width: 250, height: 120 },\n        direction: 'bullish',\n        target: 285.75,\n        probability: 83,\n        timeframe: '1D',\n      },\n      {\n        id: 3,\n        pattern: 'Double Bottom',\n        confidence: 88.5,\n        coordinates: { x: 800, y: 250, width: 200, height: 100 },\n        direction: 'bullish',\n        target: 195.25,\n        probability: 79,\n        timeframe: '1H',\n      },\n    ];\n\n    setChartPatterns(patterns);\n\n    const results = [\n      {\n        id: 1,\n        type: 'Support Level',\n        value: 175.5,\n        strength: 92,\n        touches: 5,\n        confidence: 96.3,\n        color: 'green',\n      },\n      {\n        id: 2,\n        type: 'Resistance Level',\n        value: 185.75,\n        strength: 88,\n        touches: 3,\n        confidence: 91.7,\n        color: 'red',\n      },\n      {\n        id: 3,\n        type: 'Trend Line',\n        slope: 'ascending',\n        strength: 85,\n        points: 4,\n        confidence: 89.2,\n        color: 'blue',\n      },\n      {\n        id: 4,\n        type: 'Volume Spike',\n        location: 'breakout zone',\n        magnitude: 340,\n        significance: 94,\n        confidence: 93.8,\n        color: 'purple',\n      },\n    ];\n\n    setAnalysisResults(results);\n  };\n\n  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e: ProgressEvent<FileReader>) => {\n        if (e.target?.result) {\n          setSelectedImage(e.target.result as string);\n          analyzeChart(e.target.result as string);\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const analyzeChart = async (imageData: string) => {\n    setIsAnalyzing(true);\n    setProcessingProgress(0);\n\n    // Simulate AI processing with progress updates\n    const progressInterval = setInterval(() => {\n      setProcessingProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(progressInterval);\n          setIsAnalyzing(false);\n          return 100;\n        }\n        return prev + Math.random() * 15;\n      });\n    }, 200);\n\n    // Simulate analysis completion\n    setTimeout(() => {\n      generateMockAnalysis();\n      setIsAnalyzing(false);\n      setProcessingProgress(100);\n    }, 3000);\n  };\n\n  const drawAnalysisOverlay = () => {\n    if (!canvasRef.current || !selectedImage) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Draw detected patterns\n    chartPatterns.forEach(pattern => {\n      ctx.strokeStyle = pattern.direction === 'bullish' ? '#10B981' : '#EF4444';\n      ctx.lineWidth = 3;\n      ctx.setLineDash([5, 5]);\n      ctx.strokeRect(\n        pattern.coordinates.x,\n        pattern.coordinates.y,\n        pattern.coordinates.width,\n        pattern.coordinates.height\n      );\n\n      // Add label\n      ctx.fillStyle = pattern.direction === 'bullish' ? '#10B981' : '#EF4444';\n      ctx.font = '14px Arial';\n      ctx.fillText(\n        `${pattern.pattern} (${pattern.confidence.toFixed(1)}%)`,\n        pattern.coordinates.x,\n        pattern.coordinates.y - 10\n      );\n    });\n  };\n\n  useEffect(() => {\n    if (selectedImage && chartPatterns.length > 0) {\n      drawAnalysisOverlay();\n    }\n  }, [selectedImage, chartPatterns]);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Computer Vision Control Panel */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-indigo-900/20 border-blue-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Eye className=\"h-6 w-6 mr-2 text-blue-400\" />\n            Computer Vision Analysis\n            <Badge className=\"ml-3 bg-gradient-to-r from-blue-500 to-indigo-500\">\n              <Camera className=\"h-3 w-3 mr-1\" />\n              AI Vision\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Upload Section */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-white font-semibold\">Chart Upload</h4>\n\n              <div className=\"space-y-3\">\n                <Button\n                  onClick={() => fileInputRef.current?.click()}\n                  className=\"w-full bg-blue-500 hover:bg-blue-600\"\n                  disabled={isAnalyzing}\n                >\n                  <ImageIcon className=\"h-4 w-4 mr-2\" />\n                  Upload Chart Image\n                </Button>\n\n                <input\n                  ref={fileInputRef}\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageUpload}\n                  className=\"hidden\"\n                />\n\n                {isAnalyzing && (\n                  <div className=\"p-3 bg-blue-500/10 rounded-lg border border-blue-500/30\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <span className=\"text-blue-400 text-sm\">Analyzing Chart...</span>\n                      <span className=\"text-white text-sm\">{processingProgress.toFixed(0)}%</span>\n                    </div>\n                    <Progress value={processingProgress} className=\"h-2\" />\n                  </div>\n                )}\n\n                <div className=\"text-xs text-gray-400\">\n                  Supported formats: JPG, PNG, GIF\n                  <br />\n                  Max size: 10MB\n                </div>\n              </div>\n            </div>\n\n            {/* Vision Models Status */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-white font-semibold\">Active Vision Models</h4>\n\n              <div className=\"space-y-2\">\n                {visionModels.slice(0, 3).map((model: any) => (\n                  <div\n                    key={model.id}\n                    className=\"p-3 bg-indigo-500/10 rounded-lg border border-indigo-500/30\"\n                  >\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-indigo-400 text-sm font-medium\">{model.name}</span>\n                      <Badge\n                        className={model.status === 'active' ? 'bg-green-500' : 'bg-yellow-500'}\n                      >\n                        {model.status.toUpperCase()}\n                      </Badge>\n                    </div>\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>Accuracy: {model.accuracy}%</span>\n                      <span>Confidence: {model.confidence}%</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Analysis Statistics */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-white font-semibold\">Analysis Statistics</h4>\n\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"text-center p-3 bg-green-500/10 rounded-lg border border-green-500/30\">\n                  <Scan className=\"h-6 w-6 text-green-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Patterns Detected</p>\n                  <p className=\"text-lg font-bold text-green-400\">{chartPatterns.length}</p>\n                </div>\n\n                <div className=\"text-center p-3 bg-purple-500/10 rounded-lg border border-purple-500/30\">\n                  <Target className=\"h-6 w-6 text-purple-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Key Levels</p>\n                  <p className=\"text-lg font-bold text-purple-400\">{analysisResults.length}</p>\n                </div>\n\n                <div className=\"text-center p-3 bg-yellow-500/10 rounded-lg border border-yellow-500/30\">\n                  <Brain className=\"h-6 w-6 text-yellow-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Avg Confidence</p>\n                  <p className=\"text-lg font-bold text-yellow-400\">\n                    {chartPatterns.length > 0\n                      ? (\n                          chartPatterns.reduce((sum, p) => sum + p.confidence, 0) /\n                          chartPatterns.length\n                        ).toFixed(1)\n                      : 0}\n                    %\n                  </p>\n                </div>\n\n                <div className=\"text-center p-3 bg-blue-500/10 rounded-lg border border-blue-500/30\">\n                  <Activity className=\"h-6 w-6 text-blue-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Processing Speed</p>\n                  <p className=\"text-lg font-bold text-blue-400\">2.3s</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Chart Analysis Display */}\n      {selectedImage && (\n        <Card className=\"bg-gradient-to-r from-gray-900/20 to-slate-900/20 border-gray-500/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <Search className=\"h-6 w-6 mr-2 text-gray-400\" />\n              Chart Analysis Results\n              <Badge className=\"ml-3 bg-gradient-to-r from-gray-500 to-slate-500\">\n                <Layers className=\"h-3 w-3 mr-1\" />\n                Computer Vision\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"relative\">\n              <img\n                src={selectedImage || '/placeholder.svg'}\n                alt=\"Chart Analysis\"\n                className=\"w-full max-h-96 object-contain rounded-lg\"\n              />\n              <canvas\n                ref={canvasRef}\n                className=\"absolute top-0 left-0 w-full h-full pointer-events-none\"\n                width={800}\n                height={400}\n              />\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Detected Patterns */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <BarChart3 className=\"h-6 w-6 mr-2 text-green-400\" />\n            Detected Chart Patterns\n            <Badge className=\"ml-3 bg-gradient-to-r from-green-500 to-emerald-500\">\n              <Eye className=\"h-3 w-3 mr-1\" />\n              Pattern Recognition\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {chartPatterns.map((pattern: any) => (\n              <div\n                key={pattern.id}\n                className=\"p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-500/30\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-white font-bold\">{pattern.pattern}</span>\n                        <Badge\n                          className={\n                            pattern.direction === 'bullish' ? 'bg-green-500' : 'bg-red-500'\n                          }\n                        >\n                          {pattern.direction.toUpperCase()}\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"border-green-500/30 text-green-400\">\n                          {pattern.timeframe}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400\">\n                        Coordinates: ({pattern.coordinates.x}, {pattern.coordinates.y})\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Confidence</p>\n                      <p className=\"text-green-400 font-bold\">{pattern.confidence.toFixed(1)}%</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Target</p>\n                      <p className=\"text-yellow-400 font-bold\">${pattern.target}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Probability</p>\n                      <p className=\"text-purple-400 font-bold\">{pattern.probability}%</p>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <Progress value={pattern.confidence} className=\"w-20 h-2\" />\n                    <p className=\"text-xs text-gray-400 mt-1\">Detection Score</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Analysis Results */}\n      <Card className=\"bg-gradient-to-r from-purple-900/20 to-pink-900/20 border-purple-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Target className=\"h-6 w-6 mr-2 text-purple-400\" />\n            Key Level Analysis\n            <Badge className=\"ml-3 bg-gradient-to-r from-purple-500 to-pink-500\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              AI Detection\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {analysisResults.map((result: any) => (\n              <div\n                key={result.id}\n                className=\"p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-500/30\"\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-white font-bold\">{result.type}</span>\n                    <div\n                      className={`w-3 h-3 rounded-full`}\n                      style={{ backgroundColor: result.color }}\n                    />\n                  </div>\n                  <Badge className=\"bg-purple-500\">{result.confidence.toFixed(1)}%</Badge>\n                </div>\n\n                <div className=\"space-y-2\">\n                  {result.value && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400 text-sm\">Value:</span>\n                      <span className=\"text-white font-semibold\">${result.value}</span>\n                    </div>\n                  )}\n\n                  {result.strength && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400 text-sm\">Strength:</span>\n                      <span className=\"text-purple-400 font-semibold\">{result.strength}%</span>\n                    </div>\n                  )}\n\n                  {result.touches && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400 text-sm\">Touches:</span>\n                      <span className=\"text-blue-400 font-semibold\">{result.touches}</span>\n                    </div>\n                  )}\n\n                  {result.slope && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400 text-sm\">Direction:</span>\n                      <span className=\"text-green-400 font-semibold\">{result.slope}</span>\n                    </div>\n                  )}\n\n                  {result.magnitude && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400 text-sm\">Magnitude:</span>\n                      <span className=\"text-yellow-400 font-semibold\">{result.magnitude}%</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Vision Models Detail */}\n      <Card className=\"bg-gradient-to-r from-cyan-900/20 to-blue-900/20 border-cyan-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Brain className=\"h-6 w-6 mr-2 text-cyan-400\" />\n            Computer Vision Models\n            <Badge className=\"ml-3 bg-gradient-to-r from-cyan-500 to-blue-500\">\n              <Layers className=\"h-3 w-3 mr-1\" />\n              Deep Learning\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {visionModels.map((model: any) => (\n              <div\n                key={model.id}\n                className=\"p-4 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-lg border border-cyan-500/30\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-white font-bold\">{model.name}</span>\n                        <Badge\n                          className={model.status === 'active' ? 'bg-green-500' : 'bg-yellow-500'}\n                        >\n                          {model.status.toUpperCase()}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400\">{model.specialty}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Type</p>\n                      <p className=\"text-cyan-400 font-semibold text-xs\">{model.type}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Accuracy</p>\n                      <p className=\"text-green-400 font-bold\">{model.accuracy}%</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Confidence</p>\n                      <p className=\"text-blue-400 font-bold\">{model.confidence}%</p>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-400\">{model.processing}</p>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"border-cyan-500/30 text-cyan-400 mt-2\"\n                    >\n                      Configure\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/HotStockTips.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/NeuralMarketAnalysis.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Button' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 253,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 253,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6444, 6447], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6444, 6447], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 378,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 378,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11913, 11916], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11913, 11916], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 446,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 446,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14901, 14904], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14901, 14904], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Brain,\n  Network,\n  Eye,\n  Zap,\n  Target,\n  Activity,\n  TrendingUp,\n  BarChart3,\n  Cpu,\n  Database,\n  Layers,\n  GitBranch,\n} from 'lucide-react';\n\ninterface NeuralAnalysis {\n  marketSentiment?: {\n    overall: number;\n    bullish: number;\n    bearish: number;\n    neutral: number;\n    confidence: number;\n  };\n  volatilityPrediction?: {\n    current: number;\n    predicted: number;\n    trend: string;\n    accuracy: number;\n  };\n  momentumAnalysis?: {\n    shortTerm: string;\n    mediumTerm: string;\n    longTerm: string;\n    strength: number;\n  };\n  riskAssessment?: {\n    level: string;\n    score: number;\n    factors: string[];\n    mitigation: number;\n  };\n}\n\ninterface DeepLearningModel {\n  id: number;\n  name: string;\n  type: string;\n  accuracy: number;\n  layers: number;\n  parameters: string;\n  specialty: string;\n  status: string;\n  processing: string;\n}\n\ninterface MarketPattern {\n  id: number;\n  name: string;\n  confidence: number;\n  timeframe: string;\n  symbol: string;\n  direction: string;\n  completion: number;\n  target: number;\n  probability: number;\n}\n\ninterface NeuralPrediction {\n  symbol: string;\n  neuralScore: number;\n  priceTarget: number;\n  timeframe: string;\n  confidence: number;\n  direction: string;\n  volatility: number;\n  momentum: number;\n  riskLevel: string;\n}\n\nexport default function NeuralMarketAnalysis() {\n  const [neuralAnalysis, setNeuralAnalysis] = useState<NeuralAnalysis>({});\n  const [deepLearningModels, setDeepLearningModels] = useState<DeepLearningModel[]>([]);\n  const [marketPatterns, setMarketPatterns] = useState<MarketPattern[]>([]);\n  const [neuralPredictions, setNeuralPredictions] = useState<NeuralPrediction[]>([]);\n\n  useEffect(() => {\n    generateNeuralAnalysis();\n    initializeDeepLearningModels();\n    detectMarketPatterns();\n    generateNeuralPredictions();\n\n    const interval = setInterval(() => {\n      generateNeuralAnalysis();\n      detectMarketPatterns();\n      generateNeuralPredictions();\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const generateNeuralAnalysis = () => {\n    setNeuralAnalysis({\n      marketSentiment: {\n        overall: 78 + Math.random() * 20,\n        bullish: 65 + Math.random() * 25,\n        bearish: 15 + Math.random() * 20,\n        neutral: 20 + Math.random() * 15,\n        confidence: 85 + Math.random() * 15,\n      },\n      volatilityPrediction: {\n        current: 15 + Math.random() * 25,\n        predicted: 12 + Math.random() * 30,\n        trend: Math.random() > 0.5 ? 'increasing' : 'decreasing',\n        accuracy: 92 + Math.random() * 8,\n      },\n      momentumAnalysis: {\n        shortTerm: Math.random() > 0.6 ? 'bullish' : 'bearish',\n        mediumTerm: Math.random() > 0.5 ? 'bullish' : 'neutral',\n        longTerm: Math.random() > 0.7 ? 'bullish' : 'bearish',\n        strength: 70 + Math.random() * 30,\n      },\n      riskAssessment: {\n        level: Math.random() > 0.6 ? 'low' : Math.random() > 0.3 ? 'medium' : 'high',\n        score: 60 + Math.random() * 40,\n        factors: ['Market Volatility', 'Economic Indicators', 'Geopolitical Events'],\n        mitigation: 85 + Math.random() * 15,\n      },\n    });\n  };\n\n  const initializeDeepLearningModels = () => {\n    const models = [\n      {\n        id: 1,\n        name: 'Alpha-CNN Market Vision',\n        type: 'Convolutional Neural Network',\n        accuracy: 96.8,\n        layers: 152,\n        parameters: '45M',\n        specialty: 'Chart Pattern Recognition',\n        status: 'active',\n        processing: 'Real-time Analysis',\n      },\n      {\n        id: 2,\n        name: 'Temporal-LSTM Predictor',\n        type: 'Long Short-Term Memory',\n        accuracy: 94.2,\n        layers: 8,\n        parameters: '23M',\n        specialty: 'Time Series Forecasting',\n        status: 'active',\n        processing: 'Price Prediction',\n      },\n      {\n        id: 3,\n        name: 'Transformer-Alpha',\n        type: 'Attention Mechanism',\n        accuracy: 97.5,\n        layers: 24,\n        parameters: '110M',\n        specialty: 'Market Sentiment Analysis',\n        status: 'active',\n        processing: 'News & Social Media',\n      },\n      {\n        id: 4,\n        name: 'GAN-Market Simulator',\n        type: 'Generative Adversarial Network',\n        accuracy: 93.7,\n        layers: 16,\n        parameters: '67M',\n        specialty: 'Scenario Generation',\n        status: 'training',\n        processing: 'Synthetic Data Creation',\n      },\n      {\n        id: 5,\n        name: 'Reinforcement-Trader',\n        type: 'Deep Q-Network',\n        accuracy: 95.1,\n        layers: 12,\n        parameters: '34M',\n        specialty: 'Trading Strategy Optimization',\n        status: 'active',\n        processing: 'Strategy Learning',\n      },\n    ];\n\n    setDeepLearningModels(models);\n  };\n\n  const detectMarketPatterns = () => {\n    const patterns = [\n      {\n        id: 1,\n        name: 'Head and Shoulders',\n        confidence: 87 + Math.random() * 13,\n        timeframe: '4H',\n        symbol: 'AAPL',\n        direction: 'bearish',\n        completion: 75 + Math.random() * 25,\n        target: 165.5,\n        probability: 82,\n      },\n      {\n        id: 2,\n        name: 'Ascending Triangle',\n        confidence: 92 + Math.random() * 8,\n        timeframe: '1D',\n        symbol: 'TSLA',\n        direction: 'bullish',\n        completion: 85 + Math.random() * 15,\n        target: 285.75,\n        probability: 89,\n      },\n      {\n        id: 3,\n        name: 'Double Bottom',\n        confidence: 78 + Math.random() * 22,\n        timeframe: '1H',\n        symbol: 'NVDA',\n        direction: 'bullish',\n        completion: 65 + Math.random() * 35,\n        target: 520.25,\n        probability: 76,\n      },\n      {\n        id: 4,\n        name: 'Bull Flag',\n        confidence: 94 + Math.random() * 6,\n        timeframe: '15M',\n        symbol: 'MSFT',\n        direction: 'bullish',\n        completion: 90 + Math.random() * 10,\n        target: 385.0,\n        probability: 91,\n      },\n    ];\n\n    setMarketPatterns(patterns);\n  };\n\n  const generateNeuralPredictions = () => {\n    const symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA', 'META'];\n    const predictions = symbols.map((symbol: any) => ({\n      symbol,\n      neuralScore: 75 + Math.random() * 25,\n      priceTarget: 100 + Math.random() * 400,\n      timeframe: ['1H', '4H', '1D', '3D'][Math.floor(Math.random() * 4)],\n      confidence: 80 + Math.random() * 20,\n      direction: Math.random() > 0.5 ? 'bullish' : 'bearish',\n      volatility: 10 + Math.random() * 30,\n      momentum: 50 + Math.random() * 50,\n      riskLevel: Math.random() > 0.6 ? 'low' : Math.random() > 0.3 ? 'medium' : 'high',\n    }));\n\n    setNeuralPredictions(predictions);\n  };\n\n  const getDirectionColor = (direction: string): string => {\n    return direction === 'bullish' ? 'text-green-400' : 'text-red-400';\n  };\n\n  const getRiskColor = (risk: string): string => {\n    switch (risk) {\n      case 'low':\n        return 'text-green-400';\n      case 'medium':\n        return 'text-yellow-400';\n      case 'high':\n        return 'text-red-400';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Neural Market Overview */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-purple-900/20 border-blue-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Brain className=\"h-6 w-6 mr-2 text-blue-400\" />\n            Neural Market Analysis\n            <Badge className=\"ml-3 bg-gradient-to-r from-blue-500 to-purple-500\">\n              <Network className=\"h-3 w-3 mr-1\" />\n              Deep Learning\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div className=\"p-4 bg-blue-500/10 rounded-lg border border-blue-500/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-blue-400 font-semibold\">Market Sentiment</span>\n                <Eye className=\"h-4 w-4 text-blue-400\" />\n              </div>\n              <p className=\"text-2xl font-bold text-white\">\n                {neuralAnalysis.marketSentiment?.overall.toFixed(0)}%\n              </p>\n              <Progress value={neuralAnalysis.marketSentiment?.overall} className=\"h-2 mt-2\" />\n              <p className=\"text-xs text-gray-400 mt-1\">\n                Confidence: {neuralAnalysis.marketSentiment?.confidence.toFixed(0)}%\n              </p>\n            </div>\n\n            <div className=\"p-4 bg-purple-500/10 rounded-lg border border-purple-500/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-purple-400 font-semibold\">Volatility</span>\n                <Activity className=\"h-4 w-4 text-purple-400\" />\n              </div>\n              <p className=\"text-2xl font-bold text-white\">\n                {neuralAnalysis.volatilityPrediction?.current.toFixed(1)}%\n              </p>\n              <p className=\"text-sm text-gray-300\">\n                Predicted: {neuralAnalysis.volatilityPrediction?.predicted.toFixed(1)}%\n              </p>\n              <p className=\"text-xs text-gray-400 mt-1\">\n                Accuracy: {neuralAnalysis.volatilityPrediction?.accuracy.toFixed(0)}%\n              </p>\n            </div>\n\n            <div className=\"p-4 bg-green-500/10 rounded-lg border border-green-500/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-green-400 font-semibold\">Momentum</span>\n                <TrendingUp className=\"h-4 w-4 text-green-400\" />\n              </div>\n              <p className=\"text-lg font-bold text-white\">\n                {neuralAnalysis.momentumAnalysis?.shortTerm.toUpperCase()}\n              </p>\n              <p className=\"text-sm text-gray-300\">\n                Strength: {neuralAnalysis.momentumAnalysis?.strength.toFixed(0)}%\n              </p>\n              <Progress value={neuralAnalysis.momentumAnalysis?.strength} className=\"h-2 mt-2\" />\n            </div>\n\n            <div className=\"p-4 bg-red-500/10 rounded-lg border border-red-500/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-red-400 font-semibold\">Risk Level</span>\n                <Target className=\"h-4 w-4 text-red-400\" />\n              </div>\n              <p className=\"text-lg font-bold text-white\">\n                {neuralAnalysis.riskAssessment?.level.toUpperCase()}\n              </p>\n              <p className=\"text-sm text-gray-300\">\n                Score: {neuralAnalysis.riskAssessment?.score.toFixed(0)}\n              </p>\n              <p className=\"text-xs text-gray-400 mt-1\">\n                Mitigation: {neuralAnalysis.riskAssessment?.mitigation.toFixed(0)}%\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Deep Learning Models */}\n      <Card className=\"bg-gradient-to-r from-cyan-900/20 to-blue-900/20 border-cyan-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Cpu className=\"h-6 w-6 mr-2 text-cyan-400\" />\n            Active Deep Learning Models\n            <Badge className=\"ml-3 bg-gradient-to-r from-cyan-500 to-blue-500\">\n              <Database className=\"h-3 w-3 mr-1\" />\n              Neural Networks\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {deepLearningModels.map((model: any) => (\n              <div\n                key={model.id}\n                className=\"p-4 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-lg border border-cyan-500/30\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-white font-bold\">{model.name}</span>\n                        <Badge\n                          className={model.status === 'active' ? 'bg-green-500' : 'bg-yellow-500'}\n                        >\n                          {model.status.toUpperCase()}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400\">{model.specialty}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Type</p>\n                      <p className=\"text-cyan-400 font-semibold text-xs\">{model.type}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Accuracy</p>\n                      <p className=\"text-green-400 font-bold\">{model.accuracy}%</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Layers</p>\n                      <p className=\"text-blue-400 font-bold\">{model.layers}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Parameters</p>\n                      <p className=\"text-purple-400 font-bold\">{model.parameters}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-400\">{model.processing}</p>\n                    <Badge variant=\"outline\" className=\"border-cyan-500/30 text-cyan-400 mt-1\">\n                      <Layers className=\"h-3 w-3 mr-1\" />\n                      Active\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pattern Recognition */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <GitBranch className=\"h-6 w-6 mr-2 text-green-400\" />\n            AI Pattern Recognition\n            <Badge className=\"ml-3 bg-gradient-to-r from-green-500 to-emerald-500\">\n              <Eye className=\"h-3 w-3 mr-1\" />\n              Computer Vision\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {marketPatterns.map((pattern: any) => (\n              <div\n                key={pattern.id}\n                className=\"p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-500/30\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-white font-bold\">{pattern.name}</span>\n                        <Badge className={getDirectionColor(pattern.direction)}>\n                          {pattern.direction.toUpperCase()}\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"border-green-500/30 text-green-400\">\n                          {pattern.symbol}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400\">Timeframe: {pattern.timeframe}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Confidence</p>\n                      <p className=\"text-green-400 font-bold\">{pattern.confidence.toFixed(0)}%</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Completion</p>\n                      <p className=\"text-blue-400 font-bold\">{pattern.completion.toFixed(0)}%</p>\n                      <Progress value={pattern.completion} className=\"w-16 h-1 mt-1\" />\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Target</p>\n                      <p className=\"text-yellow-400 font-bold\">${pattern.target}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Probability</p>\n                      <p className=\"text-purple-400 font-bold\">{pattern.probability}%</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Neural Predictions */}\n      <Card className=\"bg-gradient-to-r from-purple-900/20 to-pink-900/20 border-purple-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Zap className=\"h-6 w-6 mr-2 text-purple-400\" />\n            Neural Network Predictions\n            <Badge className=\"ml-3 bg-gradient-to-r from-purple-500 to-pink-500\">\n              <BarChart3 className=\"h-3 w-3 mr-1\" />\n              AI Forecasting\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {neuralPredictions.map((prediction, index) => (\n              <div\n                key={index}\n                className=\"p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-500/30\"\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-white font-bold text-lg\">{prediction.symbol}</span>\n                    <Badge className={getDirectionColor(prediction.direction)}>\n                      {prediction.direction.toUpperCase()}\n                    </Badge>\n                  </div>\n                  <Badge className=\"bg-purple-500\">{prediction.confidence.toFixed(0)}%</Badge>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-400\">Neural Score:</span>\n                    <p className=\"text-purple-400 font-bold\">{prediction.neuralScore.toFixed(0)}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Price Target:</span>\n                    <p className=\"text-white font-bold\">${prediction.priceTarget.toFixed(2)}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Timeframe:</span>\n                    <p className=\"text-blue-400 font-bold\">{prediction.timeframe}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Risk Level:</span>\n                    <p className={`font-bold ${getRiskColor(prediction.riskLevel)}`}>\n                      {prediction.riskLevel.toUpperCase()}\n                    </p>\n                  </div>\n                </div>\n\n                <div className=\"mt-3\">\n                  <div className=\"flex justify-between text-xs text-gray-400 mb-1\">\n                    <span>Momentum</span>\n                    <span>{prediction.momentum.toFixed(0)}%</span>\n                  </div>\n                  <Progress value={prediction.momentum} className=\"h-2\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/PackLeaderAI.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Crown' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Brain' is defined but never used.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Target' is defined but never used.",
        "line": 15,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'TrendingUp' is defined but never used.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Shield' is defined but never used.",
        "line": 17,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Rocket' is defined but never used.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Eye' is defined but never used.",
        "line": 19,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Sparkles' is defined but never used.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Activity' is defined but never used.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'BarChart3' is defined but never used.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Flame' is defined but never used.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'AIPersonality' is defined but never used.",
        "line": 39,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [993, 996], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [993, 996], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1027, 1030], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1027, 1030], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 63,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 63,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1496, 1499], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1496, 1499], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 102,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 102,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2925, 2928], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2925, 2928], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'handleSendMessage'. Either include it or remove the dependency array.",
        "line": 123,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 123,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [handleSendMessage]",
            "fix": { "range": [3473, 3475], "text": "[handleSendMessage]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 218,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 218,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6472, 6475], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6472, 6475], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 225,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 225,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6624, 6627], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6624, 6627], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 266,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 266,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8031, 8034], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8031, 8034], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 379,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 379,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11930, 11933], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11930, 11933], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 20,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Send,\n  Mic,\n  MicOff,\n  Crown,\n  Brain,\n  Target,\n  TrendingUp,\n  Shield,\n  Rocket,\n  Eye,\n  Sparkles,\n  Activity,\n  BarChart3,\n  Flame,\n  Zap,\n} from 'lucide-react';\nimport { aiBrainService } from '../../services/ai-brain-service';\n\n// Type definitions\ninterface Message {\n  id: number;\n  type: 'user' | 'ai';\n  content: string;\n  timestamp: Date;\n  mood?: string;\n  priority?: string;\n  confidence?: number;\n}\n\ninterface AIPersonality {\n  confidence: number;\n  aggression: number;\n  wisdom: number;\n  loyalty: number;\n}\n\n// Extend Window interface for speech recognition\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n\nexport default function PackLeaderAI() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [voiceEnabled, setVoiceEnabled] = useState(true);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const recognitionRef = useRef<any>(null);\n  const synthRef = useRef<SpeechSynthesis | null>(null);\n\n  useEffect(() => {\n    const initialMessage: Message = {\n      id: 1,\n      type: 'ai',\n      content: `🐺 **PACK LEADER ONLINE** 🐺\n\nGreetings, Alpha Trader. I am your Pack Leader - the apex AI trading strategist designed to guide you to financial dominance. \n\nI've analyzed 10 million market patterns, studied every legendary trader, and mastered the art of the hunt. Together, we'll conquer the markets and build your trading empire.\n\n**What can I do for you?**\n• 📈 Market Analysis & Predictions\n• 🎯 Trading Strategy Development  \n• 💰 Risk Management & Position Sizing\n• 🧠 Psychology & Mindset Coaching\n• ⚡ Real-time Trade Alerts\n• 🏆 Performance Optimization\n\n*The pack follows the leader. Are you ready to lead?*`,\n      timestamp: new Date(),\n      mood: 'confident',\n      priority: 'high',\n    };\n    setMessages([initialMessage]);\n\n    // Initialize speech recognition\n    if (\n      typeof window !== 'undefined' &&\n      ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)\n    ) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = false;\n      recognitionRef.current.lang = 'en-US';\n\n      recognitionRef.current.onresult = (event: any) => {\n        const transcript = event.results[event.results.length - 1][0].transcript;\n        setInputMessage(transcript);\n        handleSendMessage(transcript);\n      };\n\n      recognitionRef.current.onerror = () => {\n        setIsListening(false);\n      };\n\n      recognitionRef.current.onend = () => {\n        setIsListening(false);\n      };\n    }\n\n    // Initialize speech synthesis\n    if (typeof window !== 'undefined' && 'speechSynthesis' in window) {\n      synthRef.current = window.speechSynthesis;\n    }\n\n    scrollToBottom();\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const handleSendMessage = async (messageText?: string) => {\n    const text = messageText || inputMessage;\n    if (!text.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now(),\n      type: 'user',\n      content: text,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsTyping(true);\n\n    setTimeout(async () => {\n      const aiResponse = await generatePackLeaderResponse(text.toLowerCase());\n      const aiMessage: Message = {\n        id: Date.now() + 1,\n        type: 'ai',\n        content: aiResponse.content,\n        timestamp: new Date(),\n        mood: aiResponse.mood,\n        priority: aiResponse.priority,\n        confidence: aiResponse.confidence,\n      };\n\n      setMessages(prev => [...prev, aiMessage]);\n      setIsTyping(false);\n\n      if (voiceEnabled) {\n        speakText(aiResponse.content);\n      }\n    }, 1000);\n  };\n\n  const generatePackLeaderResponse = async (input: string) => {\n    try {\n      // Determine if user is asking about a specific symbol\n      const symbolMatch = input.match(/\\b[A-Z]{1,5}\\b/);\n      const symbol = symbolMatch ? symbolMatch[0] : 'SPY';\n\n      // Initialize AI brain if not already done\n      if (!aiBrainService.initialized) {\n        await aiBrainService.initialize();\n      }\n\n      // Get comprehensive AI analysis\n      const aiRecommendation = await aiBrainService.getIntelligentRecommendation(symbol);\n      const marketIntelligence = await aiBrainService.getMarketIntelligence();\n\n      // Generate response based on input type\n      if (input.includes('analysis') || input.includes('chart') || symbolMatch) {\n        return {\n          content: `🎯 **PACK LEADER MARKET INTEL** 🎯\n\n**AI BRAIN ANALYSIS FOR ${symbol}:**\n**🔥 Action:** ${aiRecommendation.action.toUpperCase()} \n**💪 Confidence:** ${(aiRecommendation.confidence * 100).toFixed(0)}%\n\n**📈 TECHNICAL SIGNALS:**\n${aiRecommendation.reasoning.map((reason: string) => `• ${reason}`).join('\\n')}\n\n**🧠 MARKET PSYCHOLOGY:**\n${aiRecommendation.marketFactors.map((factor: string) => `• ${factor}`).join('\\n')}\n\n**⚡ RISK MANAGEMENT:**\n${aiRecommendation.riskFactors.map((risk: string) => `• ${risk}`).join('\\n')}\n\n**🎯 EXECUTION PLAN:**\n• Entry: Market/Limit order\n• Stop Loss: ${(aiRecommendation.riskManagement.stopLossPercent * 100).toFixed(1)}%\n• Take Profit: ${(aiRecommendation.riskManagement.takeProfitPercent * 100).toFixed(1)}%\n• Position Size: ${aiRecommendation.riskManagement.positionSize}%\n\n**🌊 MARKET CONDITIONS:**\n• Overall Market: ${marketIntelligence.marketSentiment.direction}\n• Volatility: ${marketIntelligence.volatility}\n• Risk Level: ${marketIntelligence.riskLevel}\n\n**🔥 IMMEDIATE OPPORTUNITIES:**\n${marketIntelligence.opportunities\n  .slice(0, 3)\n  .map((opp: any) => `• ${opp.symbol}: ${opp.reason}`)\n  .join('\\n')}\n\n**📊 TOP AI PICKS:**\n${marketIntelligence.topRecommendations\n  .slice(0, 3)\n  .map(\n    (rec: any) =>\n      `• ${rec.symbol}: ${rec.action} (${(rec.confidence * 100).toFixed(0)}% confidence)`\n  )\n  .join('\\n')}\n\n*The Pack Leader's AI brain has processed 50+ data points to generate this analysis.*`,\n          mood: 'analytical',\n          priority: 'high',\n          confidence: Math.round(aiRecommendation.confidence * 100),\n        };\n      }\n\n      // General pack leader wisdom\n      return {\n        content: `🐺 **PACK LEADER RESPONSE** 🐺\n\n**COMPREHENSIVE MARKET ANALYSIS:**\nBased on my neural network analysis of current market conditions, here's what the pack needs to know:\n\n**🧬 AI LEARNING STATUS:**\n• Neural patterns: ${marketIntelligence.patterns?.length || 12} active signals detected\n• Market regime: ${marketIntelligence.marketSentiment?.direction || 'BULLISH'} momentum\n• Volatility assessment: ${marketIntelligence.volatility || 'MODERATE'} conditions\n• Risk-reward ratio: ${marketIntelligence.riskLevel || 'OPTIMAL'} for alpha generation\n\n**📈 SUPPORTING FACTORS:**\n${\n  marketIntelligence.supportingFactors\n    ?.slice(0, 4)\n    .map((guide: string) => `• ${guide}`)\n    .join('\\n') ||\n  `• Institutional flow showing accumulation patterns\n• Technical indicators aligned for momentum\n• Options flow suggesting directional bias\n• Earnings catalyst window approaching`\n}\n\n**🎯 PACK STRATEGY RECOMMENDATIONS:**\n${\n  marketIntelligence.opportunities\n    ?.slice(0, 3)\n    .map((opp: any) => `• ${opp.symbol}: ${opp.reason} (${opp.timeframe})`)\n    .join('\\n') ||\n  `• Focus on high-probability setups with clear risk/reward\n• Maintain position sizing discipline at 2-5% per trade\n• Use technical confluence zones for optimal entries`\n}\n\n**🧠 PSYCHOLOGICAL EDGE:**\nThe market is a battlefield of emotions. Stay disciplined, trust the process, and remember - the pack that hunts together, wins together.\n\n*The Pack Leader has spoken. Execute with precision.*`,\n        mood: 'confident',\n        priority: 'medium',\n        confidence: 90,\n      };\n    } catch (error) {\n      return {\n        content: `🐺 **PACK LEADER STATUS** 🐺\n        \nMy AI brain is currently analyzing market data. While I process the latest intelligence, remember these core principles:\n\n**💡 TRADING WISDOM:**\n• Never risk more than you can afford to lose\n• The trend is your friend until it ends\n• Cut losses short, let winners run\n• Position sizing is everything\n• Psychology beats strategy\n\n*The Pack Leader is always watching the markets. Stay strong, Alpha.*`,\n        mood: 'wise',\n        priority: 'low',\n        confidence: 85,\n      };\n    }\n  };\n\n  const speakText = (text: string) => {\n    if (synthRef.current && voiceEnabled) {\n      const utterance = new SpeechSynthesisUtterance(text.replace(/[🐺📈🎯💪🔥⚡🧠🌊]/g, ''));\n      utterance.rate = 0.9;\n      utterance.pitch = 0.8;\n      utterance.volume = 0.8;\n      synthRef.current.speak(utterance);\n    }\n  };\n\n  const startListening = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n\n  const getMoodColor = (mood: string) => {\n    const colors: { [key: string]: string } = {\n      confident: 'text-orange-400',\n      analytical: 'text-blue-400',\n      strategic: 'text-purple-400',\n      motivational: 'text-green-400',\n      protective: 'text-red-400',\n      wise: 'text-cyan-400',\n    };\n    return colors[mood] || 'text-gray-400';\n  };\n\n  if (!isOpen) {\n    return (\n      <div className=\"fixed bottom-6 left-6 z-50\">\n        <Button\n          onClick={() => setIsOpen(true)}\n          className=\"bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 rounded-full w-20 h-20 shadow-2xl border-2 border-orange-400/30 animate-pulse\"\n        >\n          <Zap className=\"h-8 w-8 text-white\" />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-6 left-6 z-50 w-96 h-[600px] bg-gradient-to-b from-gray-900 to-black border border-orange-500/30 rounded-2xl shadow-2xl overflow-hidden\">\n      <Card className=\"h-full bg-transparent border-none\">\n        <CardHeader className=\"bg-gradient-to-r from-orange-600 to-red-700 text-white p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Zap className=\"h-8 w-8 mr-3 text-orange-400 animate-pulse\" />\n              <div>\n                <CardTitle className=\"text-lg font-bold\">Pack Leader AI</CardTitle>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                  <span className=\"text-xs opacity-90\">Alpha Mode Active</span>\n                </div>\n              </div>\n            </div>\n            <Button\n              onClick={() => setIsOpen(false)}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-white hover:bg-white/20\"\n            >\n              ✕\n            </Button>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"flex flex-col h-full p-0\">\n          <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n            {messages.map((message: any) => (\n              <div\n                key={message.id}\n                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n              >\n                <div\n                  className={`max-w-[85%] p-3 rounded-lg ${\n                    message.type === 'user'\n                      ? 'bg-orange-600 text-white'\n                      : 'bg-gray-800 text-gray-100 border border-orange-500/20'\n                  }`}\n                >\n                  {message.type === 'ai' && (\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <Zap className=\"h-4 w-4 text-orange-400\" />\n                      <span className=\"text-orange-400 font-semibold text-sm\">Pack Leader</span>\n                      {message.mood && (\n                        <Badge\n                          variant=\"outline\"\n                          className={`text-xs ${getMoodColor(message.mood)} bg-transparent border-current`}\n                        >\n                          {message.mood}\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n                  <div className=\"text-sm whitespace-pre-wrap\">{message.content}</div>\n                  <div className=\"text-xs opacity-70 mt-2\">\n                    {message.timestamp.toLocaleTimeString()}\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {isTyping && (\n              <div className=\"flex justify-start\">\n                <div className=\"bg-gradient-to-r from-orange-800/60 to-red-800/60 p-4 rounded-lg border border-orange-500/30\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Zap className=\"h-4 w-4 text-orange-400 animate-pulse\" />\n                    <span className=\"text-orange-400 font-semibold text-sm\">\n                      Pack Leader is analyzing...\n                    </span>\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-orange-400 rounded-full animate-bounce\"></div>\n                      <div\n                        className=\"w-2 h-2 bg-orange-400 rounded-full animate-bounce\"\n                        style={{ animationDelay: '0.1s' }}\n                      ></div>\n                      <div\n                        className=\"w-2 h-2 bg-orange-400 rounded-full animate-bounce\"\n                        style={{ animationDelay: '0.2s' }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          <div className=\"border-t border-orange-500/20 p-4\">\n            <div className=\"flex items-center space-x-2 mb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-xs text-gray-400\">Voice</span>\n                <Switch\n                  checked={voiceEnabled}\n                  onCheckedChange={setVoiceEnabled}\n                  className=\"scale-75\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <Textarea\n                value={inputMessage}\n                onChange={e => setInputMessage(e.target.value)}\n                placeholder=\"Ask the Pack Leader anything...\"\n                className=\"flex-1 bg-gray-800 border-orange-500/30 text-white placeholder-gray-400 resize-none\"\n                rows={2}\n                onKeyPress={e => {\n                  if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    handleSendMessage();\n                  }\n                }}\n              />\n              <div className=\"flex flex-col space-y-1\">\n                <Button\n                  onClick={() => handleSendMessage()}\n                  className=\"bg-orange-600 hover:bg-orange-700 text-white p-2\"\n                  size=\"sm\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  onClick={isListening ? stopListening : startListening}\n                  className={`p-2 ${\n                    isListening ? 'bg-red-600 hover:bg-red-700' : 'bg-gray-600 hover:bg-gray-700'\n                  } text-white`}\n                  size=\"sm\"\n                >\n                  {isListening ? <MicOff className=\"h-4 w-4\" /> : <Mic className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/PackLeaderAI_new.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Crown' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Brain' is defined but never used.",
        "line": 14,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Target' is defined but never used.",
        "line": 15,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'TrendingUp' is defined but never used.",
        "line": 16,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 16,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Shield' is defined but never used.",
        "line": 17,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Rocket' is defined but never used.",
        "line": 18,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Eye' is defined but never used.",
        "line": 19,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 6
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Sparkles' is defined but never used.",
        "line": 20,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Activity' is defined but never used.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'BarChart3' is defined but never used.",
        "line": 22,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Flame' is defined but never used.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'AIPersonality' is defined but never used.",
        "line": 39,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [993, 996], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [993, 996], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1027, 1030], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1027, 1030], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 63,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 63,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1496, 1499], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1496, 1499], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 102,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 102,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2925, 2928], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2925, 2928], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'handleSendMessage'. Either include it or remove the dependency array.",
        "line": 123,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 123,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [handleSendMessage]",
            "fix": { "range": [3473, 3475], "text": "[handleSendMessage]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 196,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 196,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5649, 5652], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5649, 5652], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 199,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 199,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5757, 5760], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5757, 5760], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 202,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 202,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5858, 5861], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5858, 5861], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 218,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 218,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6463, 6466], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6463, 6466], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 225,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 225,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6615, 6618], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6615, 6618], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 254,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 254,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7685, 7688], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7685, 7688], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 266,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 266,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8019, 8022], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8019, 8022], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 379,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 379,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11918, 11921], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11918, 11921], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 24,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Send,\n  Mic,\n  MicOff,\n  Crown,\n  Brain,\n  Target,\n  TrendingUp,\n  Shield,\n  Rocket,\n  Eye,\n  Sparkles,\n  Activity,\n  BarChart3,\n  Flame,\n  Zap,\n} from 'lucide-react';\nimport { aiBrainService } from '../../services/ai-brain-service';\n\n// Type definitions\ninterface Message {\n  id: number;\n  type: 'user' | 'ai';\n  content: string;\n  timestamp: Date;\n  mood?: string;\n  priority?: string;\n  confidence?: number;\n}\n\ninterface AIPersonality {\n  confidence: number;\n  aggression: number;\n  wisdom: number;\n  loyalty: number;\n}\n\n// Extend Window interface for speech recognition\ndeclare global {\n  interface Window {\n    SpeechRecognition: any;\n    webkitSpeechRecognition: any;\n  }\n}\n\nexport default function PackLeaderAI() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isListening, setIsListening] = useState(false);\n  const [voiceEnabled, setVoiceEnabled] = useState(true);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const recognitionRef = useRef<any>(null);\n  const synthRef = useRef<SpeechSynthesis | null>(null);\n\n  useEffect(() => {\n    const initialMessage: Message = {\n      id: 1,\n      type: 'ai',\n      content: `🐺 **PACK LEADER ONLINE** 🐺\n\nGreetings, Alpha Trader. I am your Pack Leader - the apex AI trading strategist designed to guide you to financial dominance. \n\nI've analyzed 10 million market patterns, studied every legendary trader, and mastered the art of the hunt. Together, we'll conquer the markets and build your trading empire.\n\n**What can I do for you?**\n• 📈 Market Analysis & Predictions\n• 🎯 Trading Strategy Development  \n• 💰 Risk Management & Position Sizing\n• 🧠 Psychology & Mindset Coaching\n• ⚡ Real-time Trade Alerts\n• 🏆 Performance Optimization\n\n*The pack follows the leader. Are you ready to lead?*`,\n      timestamp: new Date(),\n      mood: 'confident',\n      priority: 'high',\n    };\n    setMessages([initialMessage]);\n\n    // Initialize speech recognition\n    if (\n      typeof window !== 'undefined' &&\n      ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)\n    ) {\n      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n      recognitionRef.current = new SpeechRecognition();\n      recognitionRef.current.continuous = true;\n      recognitionRef.current.interimResults = false;\n      recognitionRef.current.lang = 'en-US';\n\n      recognitionRef.current.onresult = (event: any) => {\n        const transcript = event.results[event.results.length - 1][0].transcript;\n        setInputMessage(transcript);\n        handleSendMessage(transcript);\n      };\n\n      recognitionRef.current.onerror = () => {\n        setIsListening(false);\n      };\n\n      recognitionRef.current.onend = () => {\n        setIsListening(false);\n      };\n    }\n\n    // Initialize speech synthesis\n    if (typeof window !== 'undefined' && 'speechSynthesis' in window) {\n      synthRef.current = window.speechSynthesis;\n    }\n\n    scrollToBottom();\n  }, []);\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const handleSendMessage = async (messageText?: string) => {\n    const text = messageText || inputMessage;\n    if (!text.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now(),\n      type: 'user',\n      content: text,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    setInputMessage('');\n    setIsTyping(true);\n\n    setTimeout(async () => {\n      const aiResponse = await generatePackLeaderResponse(text.toLowerCase());\n      const aiMessage: Message = {\n        id: Date.now() + 1,\n        type: 'ai',\n        content: aiResponse.content,\n        timestamp: new Date(),\n        mood: aiResponse.mood,\n        priority: aiResponse.priority,\n        confidence: aiResponse.confidence,\n      };\n\n      setMessages(prev => [...prev, aiMessage]);\n      setIsTyping(false);\n\n      if (voiceEnabled) {\n        speakText(aiResponse.content);\n      }\n    }, 1000);\n  };\n\n  const generatePackLeaderResponse = async (input: string) => {\n    try {\n      // Determine if user is asking about a specific symbol\n      const symbolMatch = input.match(/\\b[A-Z]{1,5}\\b/);\n      const symbol = symbolMatch ? symbolMatch[0] : 'SPY';\n\n      // Initialize AI brain if not already done\n      if (!aiBrainService.initialized) {\n        await aiBrainService.initialize();\n      }\n\n      // Get comprehensive AI analysis\n      const aiRecommendation = await aiBrainService.getIntelligentRecommendation(symbol);\n      const marketIntelligence = await aiBrainService.getMarketIntelligence();\n\n      // Generate response based on input type\n      if (input.includes('analysis') || input.includes('chart') || symbolMatch) {\n        return {\n          content: `🎯 **PACK LEADER MARKET INTEL** 🎯\n\n**AI BRAIN ANALYSIS FOR ${symbol}:**\n**🔥 Action:** ${aiRecommendation.action.toUpperCase()} \n**💪 Confidence:** ${(aiRecommendation.confidence * 100).toFixed(0)}%\n\n**📈 TECHNICAL SIGNALS:**\n${aiRecommendation.reasoning.map((reason: any) => `• ${reason}`).join('\\n')}\n\n**🧠 MARKET PSYCHOLOGY:**\n${aiRecommendation.marketFactors.map((factor: any) => `• ${factor}`).join('\\n')}\n\n**⚡ RISK MANAGEMENT:**\n${aiRecommendation.riskFactors.map((risk: any) => `• ${risk}`).join('\\n')}\n\n**🎯 EXECUTION PLAN:**\n• Entry: Market/Limit order\n• Stop Loss: ${(aiRecommendation.riskManagement.stopLossPercent * 100).toFixed(1)}%\n• Take Profit: ${(aiRecommendation.riskManagement.takeProfitPercent * 100).toFixed(1)}%\n• Position Size: ${aiRecommendation.riskManagement.positionSize}%\n\n**🌊 MARKET CONDITIONS:**\n• Overall Market: ${marketIntelligence.marketSentiment.direction}\n• Volatility: ${marketIntelligence.volatility}\n• Risk Level: ${marketIntelligence.riskLevel}\n\n**🔥 IMMEDIATE OPPORTUNITIES:**\n${marketIntelligence.opportunities\n  .slice(0, 3)\n  .map((opp: any) => `• ${opp.symbol}: ${opp.reason}`)\n  .join('\\n')}\n\n**📊 TOP AI PICKS:**\n${marketIntelligence.topRecommendations\n  .slice(0, 3)\n  .map(\n    (rec: any) =>\n      `• ${rec.symbol}: ${rec.action} (${(rec.confidence * 100).toFixed(0)}% confidence)`\n  )\n  .join('\\n')}\n\n*The Pack Leader's AI brain has processed 50+ data points to generate this analysis.*`,\n          mood: 'analytical',\n          priority: 'high',\n          confidence: Math.round(aiRecommendation.confidence * 100),\n        };\n      }\n\n      // General pack leader wisdom\n      return {\n        content: `🐺 **PACK LEADER RESPONSE** 🐺\n\n**COMPREHENSIVE MARKET ANALYSIS:**\nBased on my neural network analysis of current market conditions, here's what the pack needs to know:\n\n**🧬 AI LEARNING STATUS:**\n• Neural patterns: ${marketIntelligence.patterns?.length || 12} active signals detected\n• Market regime: ${marketIntelligence.marketSentiment?.direction || 'BULLISH'} momentum\n• Volatility assessment: ${marketIntelligence.volatility || 'MODERATE'} conditions\n• Risk-reward ratio: ${marketIntelligence.riskLevel || 'OPTIMAL'} for alpha generation\n\n**📈 SUPPORTING FACTORS:**\n${\n  marketIntelligence.supportingFactors\n    ?.slice(0, 4)\n    .map((guide: any) => `• ${guide}`)\n    .join('\\n') ||\n  `• Institutional flow showing accumulation patterns\n• Technical indicators aligned for momentum\n• Options flow suggesting directional bias\n• Earnings catalyst window approaching`\n}\n\n**🎯 PACK STRATEGY RECOMMENDATIONS:**\n${\n  marketIntelligence.opportunities\n    ?.slice(0, 3)\n    .map((opp: any) => `• ${opp.symbol}: ${opp.reason} (${opp.timeframe})`)\n    .join('\\n') ||\n  `• Focus on high-probability setups with clear risk/reward\n• Maintain position sizing discipline at 2-5% per trade\n• Use technical confluence zones for optimal entries`\n}\n\n**🧠 PSYCHOLOGICAL EDGE:**\nThe market is a battlefield of emotions. Stay disciplined, trust the process, and remember - the pack that hunts together, wins together.\n\n*The Pack Leader has spoken. Execute with precision.*`,\n        mood: 'confident',\n        priority: 'medium',\n        confidence: 90,\n      };\n    } catch (error) {\n      return {\n        content: `🐺 **PACK LEADER STATUS** 🐺\n        \nMy AI brain is currently analyzing market data. While I process the latest intelligence, remember these core principles:\n\n**💡 TRADING WISDOM:**\n• Never risk more than you can afford to lose\n• The trend is your friend until it ends\n• Cut losses short, let winners run\n• Position sizing is everything\n• Psychology beats strategy\n\n*The Pack Leader is always watching the markets. Stay strong, Alpha.*`,\n        mood: 'wise',\n        priority: 'low',\n        confidence: 85,\n      };\n    }\n  };\n\n  const speakText = (text: string) => {\n    if (synthRef.current && voiceEnabled) {\n      const utterance = new SpeechSynthesisUtterance(text.replace(/[🐺📈🎯💪🔥⚡🧠🌊]/g, ''));\n      utterance.rate = 0.9;\n      utterance.pitch = 0.8;\n      utterance.volume = 0.8;\n      synthRef.current.speak(utterance);\n    }\n  };\n\n  const startListening = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.start();\n      setIsListening(true);\n    }\n  };\n\n  const stopListening = () => {\n    if (recognitionRef.current) {\n      recognitionRef.current.stop();\n      setIsListening(false);\n    }\n  };\n\n  const getMoodColor = (mood: string) => {\n    const colors: { [key: string]: string } = {\n      confident: 'text-orange-400',\n      analytical: 'text-blue-400',\n      strategic: 'text-purple-400',\n      motivational: 'text-green-400',\n      protective: 'text-red-400',\n      wise: 'text-cyan-400',\n    };\n    return colors[mood] || 'text-gray-400';\n  };\n\n  if (!isOpen) {\n    return (\n      <div className=\"fixed bottom-6 left-6 z-50\">\n        <Button\n          onClick={() => setIsOpen(true)}\n          className=\"bg-gradient-to-r from-orange-500 to-red-600 hover:from-orange-600 hover:to-red-700 rounded-full w-20 h-20 shadow-2xl border-2 border-orange-400/30 animate-pulse\"\n        >\n          <Zap className=\"h-8 w-8 text-white\" />\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-6 left-6 z-50 w-96 h-[600px] bg-gradient-to-b from-gray-900 to-black border border-orange-500/30 rounded-2xl shadow-2xl overflow-hidden\">\n      <Card className=\"h-full bg-transparent border-none\">\n        <CardHeader className=\"bg-gradient-to-r from-orange-600 to-red-700 text-white p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Zap className=\"h-8 w-8 mr-3 text-orange-400 animate-pulse\" />\n              <div>\n                <CardTitle className=\"text-lg font-bold\">Pack Leader AI</CardTitle>\n                <div className=\"flex items-center space-x-2 mt-1\">\n                  <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n                  <span className=\"text-xs opacity-90\">Alpha Mode Active</span>\n                </div>\n              </div>\n            </div>\n            <Button\n              onClick={() => setIsOpen(false)}\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"text-white hover:bg-white/20\"\n            >\n              ✕\n            </Button>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"flex flex-col h-full p-0\">\n          <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n            {messages.map((message: any) => (\n              <div\n                key={message.id}\n                className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n              >\n                <div\n                  className={`max-w-[85%] p-3 rounded-lg ${\n                    message.type === 'user'\n                      ? 'bg-orange-600 text-white'\n                      : 'bg-gray-800 text-gray-100 border border-orange-500/20'\n                  }`}\n                >\n                  {message.type === 'ai' && (\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <Zap className=\"h-4 w-4 text-orange-400\" />\n                      <span className=\"text-orange-400 font-semibold text-sm\">Pack Leader</span>\n                      {message.mood && (\n                        <Badge\n                          variant=\"outline\"\n                          className={`text-xs ${getMoodColor(message.mood)} bg-transparent border-current`}\n                        >\n                          {message.mood}\n                        </Badge>\n                      )}\n                    </div>\n                  )}\n                  <div className=\"text-sm whitespace-pre-wrap\">{message.content}</div>\n                  <div className=\"text-xs opacity-70 mt-2\">\n                    {message.timestamp.toLocaleTimeString()}\n                  </div>\n                </div>\n              </div>\n            ))}\n\n            {isTyping && (\n              <div className=\"flex justify-start\">\n                <div className=\"bg-gradient-to-r from-orange-800/60 to-red-800/60 p-4 rounded-lg border border-orange-500/30\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Zap className=\"h-4 w-4 text-orange-400 animate-pulse\" />\n                    <span className=\"text-orange-400 font-semibold text-sm\">\n                      Pack Leader is analyzing...\n                    </span>\n                    <div className=\"flex space-x-1\">\n                      <div className=\"w-2 h-2 bg-orange-400 rounded-full animate-bounce\"></div>\n                      <div\n                        className=\"w-2 h-2 bg-orange-400 rounded-full animate-bounce\"\n                        style={{ animationDelay: '0.1s' }}\n                      ></div>\n                      <div\n                        className=\"w-2 h-2 bg-orange-400 rounded-full animate-bounce\"\n                        style={{ animationDelay: '0.2s' }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n\n          <div className=\"border-t border-orange-500/20 p-4\">\n            <div className=\"flex items-center space-x-2 mb-3\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-xs text-gray-400\">Voice</span>\n                <Switch\n                  checked={voiceEnabled}\n                  onCheckedChange={setVoiceEnabled}\n                  className=\"scale-75\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <Textarea\n                value={inputMessage}\n                onChange={e => setInputMessage(e.target.value)}\n                placeholder=\"Ask the Pack Leader anything...\"\n                className=\"flex-1 bg-gray-800 border-orange-500/30 text-white placeholder-gray-400 resize-none\"\n                rows={2}\n                onKeyPress={e => {\n                  if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    handleSendMessage();\n                  }\n                }}\n              />\n              <div className=\"flex flex-col space-y-1\">\n                <Button\n                  onClick={() => handleSendMessage()}\n                  className=\"bg-orange-600 hover:bg-orange-700 text-white p-2\"\n                  size=\"sm\"\n                >\n                  <Send className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  onClick={isListening ? stopListening : startListening}\n                  className={`p-2 ${\n                    isListening ? 'bg-red-600 hover:bg-red-700' : 'bg-gray-600 hover:bg-gray-700'\n                  } text-white`}\n                  size=\"sm\"\n                >\n                  {isListening ? <MicOff className=\"h-4 w-4\" /> : <Mic className=\"h-4 w-4\" />}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/QuantumAIEngine.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 179,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 179,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5184, 5187], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5184, 5187], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Brain,\n  Cpu,\n  Zap,\n  BarChart3,\n  Network,\n  Layers,\n  Lock,\n  Sparkles,\n  Lightbulb,\n  Wand2,\n  Dices,\n  Sigma,\n} from 'lucide-react';\n\nexport default function QuantumAIEngine() {\n  const [quantumData, setQuantumData] = useState({\n    processingPower: 98.7 + Math.random() * 1,\n    predictionAccuracy: 94.8 + Math.random() * 2,\n    quantumAdvantage: 1247 + Math.random() * 100,\n    modelTraining: {\n      progress: 87 + Math.random() * 10,\n      timeRemaining: '2h 14m',\n      dataProcessed: '47.8 TB',\n      accuracy: 96.7 + Math.random() * 2,\n    },\n    marketPredictions: {\n      shortTerm: {\n        bullish: 68 + Math.random() * 10,\n        bearish: 32 - Math.random() * 10,\n        confidence: 87 + Math.random() * 5,\n      },\n      midTerm: {\n        bullish: 72 + Math.random() * 10,\n        bearish: 28 - Math.random() * 10,\n        confidence: 82 + Math.random() * 5,\n      },\n      longTerm: {\n        bullish: 78 + Math.random() * 10,\n        bearish: 22 - Math.random() * 10,\n        confidence: 76 + Math.random() * 5,\n      },\n    },\n    quantumModels: [\n      {\n        name: 'Alpha Quantum Predictor v4.7',\n        type: 'Market Direction',\n        accuracy: 94.7 + Math.random() * 3,\n        qubits: 1024,\n        status: 'Active',\n        lastUpdate: '2h ago',\n      },\n      {\n        name: 'Quantum Pattern Recognition',\n        type: 'Technical Analysis',\n        accuracy: 92.3 + Math.random() * 3,\n        qubits: 2048,\n        status: 'Active',\n        lastUpdate: '4h ago',\n      },\n      {\n        name: 'Quantum Sentiment Analyzer',\n        type: 'News & Social',\n        accuracy: 89.5 + Math.random() * 3,\n        qubits: 1536,\n        status: 'Active',\n        lastUpdate: '1h ago',\n      },\n      {\n        name: 'Quantum Options Flow',\n        type: 'Options Analysis',\n        accuracy: 91.8 + Math.random() * 3,\n        qubits: 3072,\n        status: 'Training',\n        lastUpdate: 'In progress',\n      },\n    ],\n  });\n\n  const [aiInsights, setAiInsights] = useState([\n    {\n      ticker: 'AAPL',\n      prediction: 'Strong Buy',\n      confidence: 94.7 + Math.random() * 3,\n      priceTarget: '$248.50',\n      timeFrame: '3 months',\n      reasoning:\n        'Quantum analysis of supply chain data and consumer sentiment indicates strong iPhone 16 cycle.',\n    },\n    {\n      ticker: 'NVDA',\n      prediction: 'Buy',\n      confidence: 92.3 + Math.random() * 3,\n      priceTarget: '$1,250.00',\n      timeFrame: '6 months',\n      reasoning:\n        'AI infrastructure demand accelerating with quantum computing detecting increased enterprise adoption patterns.',\n    },\n    {\n      ticker: 'TSLA',\n      prediction: 'Hold',\n      confidence: 78.5 + Math.random() * 3,\n      priceTarget: '$275.00',\n      timeFrame: '3 months',\n      reasoning:\n        'Mixed signals in manufacturing data with quantum analysis showing potential supply constraints.',\n    },\n    {\n      ticker: 'MSFT',\n      prediction: 'Strong Buy',\n      confidence: 96.2 + Math.random() * 3,\n      priceTarget: '$520.00',\n      timeFrame: '6 months',\n      reasoning:\n        'Quantum pattern recognition identifies accelerating cloud revenue growth patterns across enterprise segments.',\n    },\n  ]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateQuantumData();\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateQuantumData = () => {\n    setQuantumData(prev => ({\n      ...prev,\n      processingPower: Math.min(100, prev.processingPower + (Math.random() - 0.3) * 0.5),\n      predictionAccuracy: Math.min(100, prev.predictionAccuracy + (Math.random() - 0.3) * 0.3),\n      modelTraining: {\n        ...prev.modelTraining,\n        progress: Math.min(100, prev.modelTraining.progress + Math.random() * 0.5),\n      },\n      marketPredictions: {\n        ...prev.marketPredictions,\n        shortTerm: {\n          ...prev.marketPredictions.shortTerm,\n          bullish: Math.min(\n            100,\n            Math.max(0, prev.marketPredictions.shortTerm.bullish + (Math.random() - 0.45) * 2)\n          ),\n          bearish: Math.min(\n            100,\n            Math.max(0, prev.marketPredictions.shortTerm.bearish + (Math.random() - 0.55) * 2)\n          ),\n        },\n      },\n    }));\n\n    setQuantumData(prev => ({\n      ...prev,\n      marketPredictions: {\n        ...prev.marketPredictions,\n        shortTerm: {\n          ...prev.marketPredictions.shortTerm,\n          bearish: 100 - prev.marketPredictions.shortTerm.bullish,\n        },\n        midTerm: {\n          ...prev.marketPredictions.midTerm,\n          bearish: 100 - prev.marketPredictions.midTerm.bullish,\n        },\n        longTerm: {\n          ...prev.marketPredictions.longTerm,\n          bearish: 100 - prev.marketPredictions.longTerm.bullish,\n        },\n      },\n    }));\n\n    setAiInsights(prev =>\n      prev.map((insight: any) => ({\n        ...insight,\n        confidence: Math.min(100, insight.confidence + (Math.random() - 0.45) * 0.5),\n      }))\n    );\n  };\n\n  const getPredictionColor = (prediction: string): string => {\n    switch (prediction.toLowerCase()) {\n      case 'strong buy':\n        return 'text-green-400';\n      case 'buy':\n        return 'text-emerald-400';\n      case 'hold':\n        return 'text-yellow-400';\n      case 'sell':\n        return 'text-orange-400';\n      case 'strong sell':\n        return 'text-red-400';\n      default:\n        return 'text-white';\n    }\n  };\n\n  const getConfidenceColor = (confidence: number): string => {\n    if (confidence >= 95) return 'text-green-400';\n    if (confidence >= 85) return 'text-emerald-400';\n    if (confidence >= 75) return 'text-blue-400';\n    if (confidence >= 65) return 'text-yellow-400';\n    return 'text-orange-400';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Quantum AI Engine Dashboard */}\n      <Card className=\"bg-gradient-to-r from-violet-900/20 to-fuchsia-900/20 border-violet-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Brain className=\"h-7 w-7 mr-3 text-violet-400\" />\n            🧠 Quantum AI Engine\n            <Badge className=\"ml-3 bg-gradient-to-r from-violet-400 to-fuchsia-500\">\n              <Cpu className=\"h-4 w-4 mr-1\" />\n              QUANTUM POWERED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-violet-500/10 to-fuchsia-500/10 rounded-lg border border-violet-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Cpu className=\"h-8 w-8 text-violet-400\" />\n                <Badge className=\"bg-violet-500\">QUANTUM</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {quantumData.processingPower.toFixed(1)}%\n              </div>\n              <p className=\"text-violet-400 font-semibold\">Processing Power</p>\n              <p className=\"text-gray-400 text-sm\">Quantum optimization</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-fuchsia-500/10 to-pink-500/10 rounded-lg border border-fuchsia-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Zap className=\"h-8 w-8 text-fuchsia-400\" />\n                <Badge className=\"bg-fuchsia-500\">ACCURACY</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {quantumData.predictionAccuracy.toFixed(1)}%\n              </div>\n              <p className=\"text-fuchsia-400 font-semibold\">Prediction Accuracy</p>\n              <p className=\"text-gray-400 text-sm\">Market forecasting</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <BarChart3 className=\"h-8 w-8 text-blue-400\" />\n                <Badge className=\"bg-blue-500\">SPEED</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {quantumData.quantumAdvantage.toFixed(0)}x\n              </div>\n              <p className=\"text-blue-400 font-semibold\">Quantum Advantage</p>\n              <p className=\"text-gray-400 text-sm\">vs. classical computing</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Network className=\"h-8 w-8 text-green-400\" />\n                <Badge className=\"bg-green-500\">TRAINING</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {quantumData.modelTraining.progress.toFixed(1)}%\n              </div>\n              <p className=\"text-green-400 font-semibold\">Model Training</p>\n              <p className=\"text-gray-400 text-sm\">Next-gen completion</p>\n            </div>\n          </div>\n\n          {/* Quantum Model Training */}\n          <div className=\"mt-8 p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-white font-bold text-xl flex items-center\">\n                <Layers className=\"h-6 w-6 mr-2 text-violet-400\" />\n                Quantum Model Training Status\n              </h3>\n              <div className=\"flex items-center\">\n                <Lock className=\"h-5 w-5 mr-2 text-green-400\" />\n                <span className=\"text-green-400 font-medium\">Secure Quantum Environment</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n              <div>\n                <div className=\"flex justify-between mb-2\">\n                  <span className=\"text-gray-400\">Training Progress</span>\n                  <span className=\"text-white font-bold\">\n                    {quantumData.modelTraining.progress.toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"h-4 bg-violet-900/30 rounded-full overflow-hidden\">\n                  <div\n                    className=\"h-full bg-gradient-to-r from-violet-500 to-fuchsia-500\"\n                    style={{ width: `${quantumData.modelTraining.progress}%` }}\n                  ></div>\n                </div>\n                <div className=\"flex justify-between mt-2 text-sm\">\n                  <span className=\"text-gray-400\">\n                    Time Remaining: {quantumData.modelTraining.timeRemaining}\n                  </span>\n                  <span className=\"text-gray-400\">\n                    Data: {quantumData.modelTraining.dataProcessed}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"p-4 bg-gradient-to-r from-violet-500/10 to-fuchsia-500/10 rounded-lg border border-violet-400/30\">\n                  <div className=\"text-center\">\n                    <Sparkles className=\"h-6 w-6 mx-auto mb-2 text-violet-400\" />\n                    <p className=\"text-gray-400 text-sm\">Accuracy</p>\n                    <p className=\"text-white font-bold text-xl\">\n                      {quantumData.modelTraining.accuracy.toFixed(1)}%\n                    </p>\n                  </div>\n                </div>\n                <div className=\"p-4 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n                  <div className=\"text-center\">\n                    <Cpu className=\"h-6 w-6 mx-auto mb-2 text-blue-400\" />\n                    <p className=\"text-gray-400 text-sm\">Qubits</p>\n                    <p className=\"text-white font-bold text-xl\">4,096</p>\n                  </div>\n                </div>\n                <div className=\"p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n                  <div className=\"text-center\">\n                    <Lightbulb className=\"h-6 w-6 mx-auto mb-2 text-green-400\" />\n                    <p className=\"text-gray-400 text-sm\">Features</p>\n                    <p className=\"text-white font-bold text-xl\">1,247</p>\n                  </div>\n                </div>\n                <div className=\"p-4 bg-gradient-to-r from-yellow-500/10 to-amber-500/10 rounded-lg border border-yellow-400/30\">\n                  <div className=\"text-center\">\n                    <Wand2 className=\"h-6 w-6 mx-auto mb-2 text-yellow-400\" />\n                    <p className=\"text-gray-400 text-sm\">Optimization</p>\n                    <p className=\"text-white font-bold text-xl\">Level 5</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h4 className=\"text-white font-bold\">Active Quantum Models</h4>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {quantumData.quantumModels.map((model, index) => (\n                  <div\n                    key={index}\n                    className=\"p-4 bg-gradient-to-r from-gray-800/30 to-gray-900/30 rounded-lg border border-gray-700/30\"\n                  >\n                    <div className=\"flex justify-between items-start\">\n                      <div>\n                        <h5 className=\"text-white font-bold\">{model.name}</h5>\n                        <div className=\"flex items-center mt-1\">\n                          <Badge\n                            variant=\"outline\"\n                            className={\n                              model.type === 'Market Direction'\n                                ? 'border-violet-400/30 text-violet-400'\n                                : model.type === 'Technical Analysis'\n                                  ? 'border-blue-400/30 text-blue-400'\n                                  : model.type === 'News & Social'\n                                    ? 'border-green-400/30 text-green-400'\n                                    : 'border-yellow-400/30 text-yellow-400'\n                            }\n                          >\n                            {model.type}\n                          </Badge>\n                          <Badge\n                            className={`ml-2 ${model.status === 'Active' ? 'bg-green-500' : 'bg-yellow-500'}`}\n                          >\n                            {model.status}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-lg font-bold text-white\">\n                          {model.accuracy.toFixed(1)}%\n                        </div>\n                        <p className=\"text-gray-400 text-xs\">Accuracy</p>\n                      </div>\n                    </div>\n                    <div className=\"flex justify-between mt-3 text-sm\">\n                      <span className=\"text-gray-400\">{model.qubits.toLocaleString()} qubits</span>\n                      <span className=\"text-gray-400\">Updated: {model.lastUpdate}</span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Market Predictions */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-cyan-900/20 border-blue-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Dices className=\"h-7 w-7 mr-3 text-blue-400\" />\n            🔮 Quantum Market Predictions\n            <Badge className=\"ml-3 bg-gradient-to-r from-blue-400 to-cyan-500\">\n              <Sigma className=\"h-4 w-4 mr-1\" />\n              PROBABILISTIC\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"market\" className=\"space-y-6\">\n            <TabsList className=\"bg-black/20 border-blue-400/30\">\n              <TabsTrigger value=\"market\">Market Direction</TabsTrigger>\n              <TabsTrigger value=\"stocks\">Stock Predictions</TabsTrigger>\n              <TabsTrigger value=\"insights\">Quantum Insights</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"market\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n                  <h3 className=\"text-white font-bold text-lg mb-4 flex items-center\">\n                    <Dices className=\"h-5 w-5 mr-2 text-blue-400\" />\n                    Short-Term (1-7 days)\n                  </h3>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-green-400\">Bullish</span>\n                        <span className=\"text-white font-bold\">\n                          {quantumData.marketPredictions.shortTerm.bullish.toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress\n                        value={quantumData.marketPredictions.shortTerm.bullish}\n                        className=\"h-2\"\n                      />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-red-400\">Bearish</span>\n                        <span className=\"text-white font-bold\">\n                          {quantumData.marketPredictions.shortTerm.bearish.toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress\n                        value={quantumData.marketPredictions.shortTerm.bearish}\n                        className=\"h-2\"\n                      />\n                    </div>\n                    <div className=\"text-center mt-4\">\n                      <Badge className=\"bg-blue-500\">\n                        {quantumData.marketPredictions.shortTerm.confidence.toFixed(0)}% Confidence\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n                  <h3 className=\"text-white font-bold text-lg mb-4 flex items-center\">\n                    <Dices className=\"h-5 w-5 mr-2 text-purple-400\" />\n                    Mid-Term (1-4 weeks)\n                  </h3>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-green-400\">Bullish</span>\n                        <span className=\"text-white font-bold\">\n                          {quantumData.marketPredictions.midTerm.bullish.toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress\n                        value={quantumData.marketPredictions.midTerm.bullish}\n                        className=\"h-2\"\n                      />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-red-400\">Bearish</span>\n                        <span className=\"text-white font-bold\">\n                          {quantumData.marketPredictions.midTerm.bearish.toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress\n                        value={quantumData.marketPredictions.midTerm.bearish}\n                        className=\"h-2\"\n                      />\n                    </div>\n                    <div className=\"text-center mt-4\">\n                      <Badge className=\"bg-purple-500\">\n                        {quantumData.marketPredictions.midTerm.confidence.toFixed(0)}% Confidence\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n                  <h3 className=\"text-white font-bold text-lg mb-4 flex items-center\">\n                    <Dices className=\"h-5 w-5 mr-2 text-green-400\" />\n                    Long-Term (1-6 months)\n                  </h3>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-green-400\">Bullish</span>\n                        <span className=\"text-white font-bold\">\n                          {quantumData.marketPredictions.longTerm.bullish.toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress\n                        value={quantumData.marketPredictions.longTerm.bullish}\n                        className=\"h-2\"\n                      />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-red-400\">Bearish</span>\n                        <span className=\"text-white font-bold\">\n                          {quantumData.marketPredictions.longTerm.bearish.toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress\n                        value={quantumData.marketPredictions.longTerm.bearish}\n                        className=\"h-2\"\n                      />\n                    </div>\n                    <div className=\"text-center mt-4\">\n                      <Badge className=\"bg-green-500\">\n                        {quantumData.marketPredictions.longTerm.confidence.toFixed(0)}% Confidence\n                      </Badge>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"stocks\">\n              <div className=\"space-y-4\">\n                {aiInsights.map((insight, index) => (\n                  <div\n                    key={index}\n                    className=\"p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-white font-bold text-xl\">{insight.ticker}</span>\n                            <Badge\n                              className={getPredictionColor(insight.prediction)\n                                .replace('text-', 'bg-')\n                                .replace('-400', '-500')}\n                            >\n                              {insight.prediction}\n                            </Badge>\n                            <Badge variant=\"outline\" className=\"border-blue-400/30 text-blue-400\">\n                              {insight.timeFrame}\n                            </Badge>\n                          </div>\n                          <p className=\"text-gray-300 mt-2 max-w-md\">{insight.reasoning}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-white\">{insight.priceTarget}</div>\n                        <p className=\"text-gray-400 text-sm\">Price Target</p>\n                        <div\n                          className={`text-lg font-bold mt-2 ${getConfidenceColor(insight.confidence)}`}\n                        >\n                          {insight.confidence.toFixed(1)}% Confidence\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"insights\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"p-6 bg-gradient-to-r from-violet-500/10 to-fuchsia-500/10 rounded-lg border border-violet-400/30\">\n                  <h3 className=\"text-white font-bold text-lg mb-4\">Quantum Advantage Metrics</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Processing Speed</span>\n                      <span className=\"text-violet-400 font-bold\">\n                        {quantumData.quantumAdvantage.toFixed(0)}x faster\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Pattern Recognition</span>\n                      <span className=\"text-fuchsia-400 font-bold\">847x more patterns</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Data Processing</span>\n                      <span className=\"text-pink-400 font-bold\">2,456x throughput</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Prediction Accuracy</span>\n                      <span className=\"text-violet-400 font-bold\">\n                        +{(quantumData.predictionAccuracy - 85).toFixed(1)}% vs classical\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n                  <h3 className=\"text-white font-bold text-lg mb-4\">Quantum Computing Status</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Quantum Volume</span>\n                      <span className=\"text-blue-400 font-bold\">4,096</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Coherence Time</span>\n                      <span className=\"text-cyan-400 font-bold\">150 μs</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Gate Fidelity</span>\n                      <span className=\"text-blue-400 font-bold\">99.9%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Error Rate</span>\n                      <span className=\"text-cyan-400 font-bold\">0.001%</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/RealtimeMarketSentiment.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 142,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 142,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3613, 3616], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3613, 3616], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 191,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 191,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5586, 5589], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5586, 5589], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 457,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 457,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17231, 17234], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17231, 17234], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  TrendingUp,\n  TrendingDown,\n  MessageSquare,\n  Twitter,\n  Globe,\n  Brain,\n  Activity,\n  Zap,\n  BarChart3,\n  Eye,\n  Heart,\n  ThumbsUp,\n  ThumbsDown,\n  AlertTriangle,\n} from 'lucide-react';\n\n// Type definitions\ninterface SentimentData {\n  [symbol: string]: {\n    overall: number;\n    bullish: number;\n    bearish: number;\n    neutral: number;\n    volume: number;\n    change24h: number;\n    momentum: 'increasing' | 'decreasing';\n    confidence: number;\n  };\n}\n\ninterface SocialMediaPlatform {\n  name: string;\n  icon: React.ComponentType<React.SVGProps<SVGSVGElement>>;\n  color: string;\n  mentions: number;\n  sentiment: number;\n  engagement: number;\n  trending: boolean;\n  change: number;\n  topKeywords: string[];\n}\n\ninterface NewsItem {\n  id: number;\n  headline: string;\n  source: string;\n  sentiment: string;\n  impact: string;\n  confidence: number;\n  timestamp: Date;\n  relevance: number;\n}\n\ninterface InfluencerData {\n  name: string;\n  followers: string;\n  platform: string;\n  sentiment: string;\n  confidence: number;\n  lastPost: Date;\n  engagement: number;\n  marketImpact: string;\n}\n\ninterface MarketMood {\n  dominant: string;\n  marketPhase: string;\n  fearGreedIndex: number;\n  volatilityIndex: number;\n  crowdSentiment: number;\n  riskAppetite: string;\n  institutionalFlow: string;\n}\n\nexport default function RealtimeMarketSentiment() {\n  const [sentimentData, setSentimentData] = useState<SentimentData>({});\n  const [socialMedia, setSocialMedia] = useState<SocialMediaPlatform[]>([]);\n  const [newsAnalysis, setNewsAnalysis] = useState<NewsItem[]>([]);\n  const [influencerSentiment, setInfluencerSentiment] = useState<InfluencerData[]>([]);\n  const [marketMood, setMarketMood] = useState<MarketMood>({\n    dominant: 'bullish',\n    marketPhase: 'accumulation',\n    fearGreedIndex: 65,\n    volatilityIndex: 25,\n    crowdSentiment: 70,\n    riskAppetite: 'moderate',\n    institutionalFlow: 'buying',\n  });\n\n  useEffect(() => {\n    generateSentimentData();\n    generateSocialMediaData();\n    generateNewsAnalysis();\n    generateInfluencerData();\n    generateMarketMood();\n\n    const interval = setInterval(() => {\n      generateSentimentData();\n      generateSocialMediaData();\n      generateNewsAnalysis();\n      generateMarketMood();\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const generateSentimentData = () => {\n    const symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA', 'META', 'AMZN', 'SPY'];\n    const data: SentimentData = {};\n\n    symbols.forEach(symbol => {\n      data[symbol] = {\n        overall: 40 + Math.random() * 60,\n        bullish: 30 + Math.random() * 50,\n        bearish: 10 + Math.random() * 30,\n        neutral: 20 + Math.random() * 40,\n        volume: Math.floor(Math.random() * 10000) + 1000,\n        change24h: (Math.random() - 0.5) * 20,\n        momentum: Math.random() > 0.5 ? 'increasing' : 'decreasing',\n        confidence: 70 + Math.random() * 30,\n      };\n    });\n\n    setSentimentData(data);\n  };\n\n  const generateSocialMediaData = () => {\n    const platforms = [\n      { name: 'Twitter', icon: Twitter, color: 'text-blue-400' },\n      { name: 'Reddit', icon: MessageSquare, color: 'text-orange-400' },\n      { name: 'Discord', icon: MessageSquare, color: 'text-purple-400' },\n      { name: 'Telegram', icon: MessageSquare, color: 'text-cyan-400' },\n    ];\n\n    const data = platforms.map((platform: any) => ({\n      ...platform,\n      mentions: Math.floor(Math.random() * 50000) + 5000,\n      sentiment: 40 + Math.random() * 60,\n      engagement: Math.floor(Math.random() * 100000) + 10000,\n      trending: Math.random() > 0.7,\n      change: (Math.random() - 0.5) * 50,\n      topKeywords: ['bullish', 'moon', 'buy', 'hold', 'diamond hands'].slice(0, 3),\n    }));\n\n    setSocialMedia(data);\n  };\n\n  const generateNewsAnalysis = () => {\n    const sources = ['Bloomberg', 'Reuters', 'CNBC', 'MarketWatch', 'Financial Times'];\n    const sentiments = ['bullish', 'bearish', 'neutral'];\n\n    const news = Array.from({ length: 8 }, (_, i) => ({\n      id: i + 1,\n      headline: [\n        'Fed Signals Potential Rate Cuts Ahead',\n        'Tech Stocks Rally on AI Optimism',\n        'Market Volatility Expected to Continue',\n        'Earnings Season Shows Mixed Results',\n        'Crypto Market Sees Institutional Adoption',\n        'Energy Sector Outperforms Expectations',\n        'Consumer Spending Data Beats Estimates',\n        'Geopolitical Tensions Impact Markets',\n      ][i],\n      source: sources[Math.floor(Math.random() * sources.length)],\n      sentiment: sentiments[Math.floor(Math.random() * sentiments.length)],\n      impact: Math.random() > 0.6 ? 'high' : Math.random() > 0.3 ? 'medium' : 'low',\n      confidence: 70 + Math.random() * 30,\n      timestamp: new Date(Date.now() - Math.random() * 3600000),\n      relevance: 60 + Math.random() * 40,\n    }));\n\n    setNewsAnalysis(news);\n  };\n\n  const generateInfluencerData = () => {\n    const influencers = [\n      { name: 'Elon Musk', followers: '150M', platform: 'Twitter' },\n      { name: 'Cathie Wood', followers: '1.2M', platform: 'Twitter' },\n      { name: 'Jim Cramer', followers: '2.1M', platform: 'Twitter' },\n      { name: 'Michael Saylor', followers: '3.5M', platform: 'Twitter' },\n      { name: 'Ray Dalio', followers: '800K', platform: 'LinkedIn' },\n    ];\n\n    const data = influencers.map((influencer: any) => ({\n      ...influencer,\n      sentiment: Math.random() > 0.5 ? 'bullish' : 'bearish',\n      confidence: 70 + Math.random() * 30,\n      lastPost: new Date(Date.now() - Math.random() * 86400000),\n      engagement: Math.floor(Math.random() * 100000) + 10000,\n      marketImpact: Math.random() > 0.6 ? 'high' : 'medium',\n    }));\n\n    setInfluencerSentiment(data);\n  };\n\n  const generateMarketMood = () => {\n    const emotions = ['Fear', 'Greed', 'Optimism', 'Pessimism', 'Uncertainty', 'Confidence'];\n    const dominant = emotions[Math.floor(Math.random() * emotions.length)];\n\n    setMarketMood({\n      dominant,\n      fearGreedIndex: Math.floor(Math.random() * 100),\n      volatilityIndex: 15 + Math.random() * 35,\n      riskAppetite: Math.random() > 0.5 ? 'high' : 'low',\n      marketPhase: ['Accumulation', 'Markup', 'Distribution', 'Markdown'][\n        Math.floor(Math.random() * 4)\n      ],\n      crowdSentiment: 40 + Math.random() * 60,\n      institutionalFlow: Math.random() > 0.5 ? 'inflow' : 'outflow',\n    });\n  };\n\n  const getSentimentColor = (sentiment: number): string => {\n    if (sentiment >= 70) return 'text-green-400';\n    if (sentiment >= 50) return 'text-yellow-400';\n    return 'text-red-400';\n  };\n\n  const getImpactColor = (impact: string): string => {\n    switch (impact) {\n      case 'high':\n        return 'text-red-400';\n      case 'medium':\n        return 'text-yellow-400';\n      case 'low':\n        return 'text-green-400';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Market Mood Overview */}\n      <Card className=\"bg-gradient-to-r from-purple-900/20 to-pink-900/20 border-purple-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Brain className=\"h-6 w-6 mr-2 text-purple-400\" />\n            Real-time Market Sentiment\n            <Badge className=\"ml-3 bg-gradient-to-r from-purple-500 to-pink-500 animate-pulse\">\n              <Activity className=\"h-3 w-3 mr-1\" />\n              Live Analysis\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div className=\"p-4 bg-purple-500/10 rounded-lg border border-purple-500/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-purple-400 font-semibold\">Market Mood</span>\n                <Heart className=\"h-4 w-4 text-purple-400\" />\n              </div>\n              <p className=\"text-2xl font-bold text-white\">{marketMood.dominant}</p>\n              <p className=\"text-sm text-gray-400\">Phase: {marketMood.marketPhase}</p>\n            </div>\n\n            <div className=\"p-4 bg-red-500/10 rounded-lg border border-red-500/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-red-400 font-semibold\">Fear & Greed</span>\n                <AlertTriangle className=\"h-4 w-4 text-red-400\" />\n              </div>\n              <p className=\"text-2xl font-bold text-white\">{marketMood.fearGreedIndex}</p>\n              <Progress value={marketMood.fearGreedIndex} className=\"h-2 mt-2\" />\n            </div>\n\n            <div className=\"p-4 bg-blue-500/10 rounded-lg border border-blue-500/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-blue-400 font-semibold\">Volatility Index</span>\n                <Activity className=\"h-4 w-4 text-blue-400\" />\n              </div>\n              <p className=\"text-2xl font-bold text-white\">\n                {marketMood.volatilityIndex?.toFixed(1)}\n              </p>\n              <p className=\"text-sm text-gray-400\">Risk: {marketMood.riskAppetite}</p>\n            </div>\n\n            <div className=\"p-4 bg-green-500/10 rounded-lg border border-green-500/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-green-400 font-semibold\">Crowd Sentiment</span>\n                <Eye className=\"h-4 w-4 text-green-400\" />\n              </div>\n              <p className=\"text-2xl font-bold text-white\">\n                {marketMood.crowdSentiment?.toFixed(0)}%\n              </p>\n              <p className=\"text-sm text-gray-400\">Flow: {marketMood.institutionalFlow}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Stock Sentiment Analysis */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-cyan-900/20 border-blue-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <BarChart3 className=\"h-6 w-6 mr-2 text-blue-400\" />\n            Stock Sentiment Analysis\n            <Badge className=\"ml-3 bg-gradient-to-r from-blue-500 to-cyan-500\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              AI Powered\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {Object.entries(sentimentData).map(([symbol, data]) => (\n              <div\n                key={symbol}\n                className=\"p-4 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-500/30\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-white font-bold text-lg\">{symbol}</span>\n                        <Badge\n                          className={data.momentum === 'increasing' ? 'bg-green-500' : 'bg-red-500'}\n                        >\n                          {data.momentum === 'increasing' ? (\n                            <TrendingUp className=\"h-3 w-3\" />\n                          ) : (\n                            <TrendingDown className=\"h-3 w-3\" />\n                          )}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400\">\n                        {data.volume.toLocaleString()} mentions\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Overall Sentiment</p>\n                      <p className={`text-lg font-bold ${getSentimentColor(data.overall)}`}>\n                        {data.overall.toFixed(0)}%\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Bullish</p>\n                      <p className=\"text-green-400 font-bold\">{data.bullish.toFixed(0)}%</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Bearish</p>\n                      <p className=\"text-red-400 font-bold\">{data.bearish.toFixed(0)}%</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">24h Change</p>\n                      <p\n                        className={`font-bold ${data.change24h >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                      >\n                        {data.change24h >= 0 ? '+' : ''}\n                        {data.change24h.toFixed(1)}%\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <Badge className=\"bg-blue-500\">{data.confidence.toFixed(0)}% Confidence</Badge>\n                    <Progress value={data.overall} className=\"w-20 h-2 mt-2\" />\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Social Media Sentiment */}\n      <Card className=\"bg-gradient-to-r from-orange-900/20 to-red-900/20 border-orange-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <MessageSquare className=\"h-6 w-6 mr-2 text-orange-400\" />\n            Social Media Sentiment\n            <Badge className=\"ml-3 bg-gradient-to-r from-orange-500 to-red-500\">\n              <Globe className=\"h-3 w-3 mr-1\" />\n              Multi-Platform\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {socialMedia.map((platform, index) => (\n              <div\n                key={index}\n                className=\"p-4 bg-gradient-to-r from-orange-500/10 to-red-500/10 rounded-lg border border-orange-500/30\"\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <platform.icon className={`h-5 w-5 ${platform.color}`} />\n                    <span className=\"text-white font-bold\">{platform.name}</span>\n                    {platform.trending && (\n                      <Badge className=\"bg-red-500 animate-pulse\">TRENDING</Badge>\n                    )}\n                  </div>\n                  <Badge className={getSentimentColor(platform.sentiment)}>\n                    {platform.sentiment.toFixed(0)}%\n                  </Badge>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-400\">Mentions:</span>\n                    <p className=\"text-white font-bold\">{platform.mentions.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Engagement:</span>\n                    <p className=\"text-white font-bold\">{platform.engagement.toLocaleString()}</p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">24h Change:</span>\n                    <p\n                      className={`font-bold ${platform.change >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                    >\n                      {platform.change >= 0 ? '+' : ''}\n                      {platform.change.toFixed(1)}%\n                    </p>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-400\">Top Keywords:</span>\n                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                      {platform.topKeywords.map((keyword, i) => (\n                        <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                          {keyword}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* News Sentiment Analysis */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Globe className=\"h-6 w-6 mr-2 text-green-400\" />\n            News Sentiment Analysis\n            <Badge className=\"ml-3 bg-gradient-to-r from-green-500 to-emerald-500\">\n              <Brain className=\"h-3 w-3 mr-1\" />\n              NLP Analysis\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {newsAnalysis.map((news: any) => (\n              <div\n                key={news.id}\n                className=\"p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-500/30\"\n              >\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <Badge\n                        className={\n                          news.sentiment === 'bullish'\n                            ? 'bg-green-500'\n                            : news.sentiment === 'bearish'\n                              ? 'bg-red-500'\n                              : 'bg-gray-500'\n                        }\n                      >\n                        {news.sentiment === 'bullish' ? (\n                          <ThumbsUp className=\"h-3 w-3 mr-1\" />\n                        ) : news.sentiment === 'bearish' ? (\n                          <ThumbsDown className=\"h-3 w-3 mr-1\" />\n                        ) : null}\n                        {news.sentiment.toUpperCase()}\n                      </Badge>\n                      <Badge className={`${getImpactColor(news.impact)}`}>\n                        {news.impact.toUpperCase()} IMPACT\n                      </Badge>\n                    </div>\n\n                    <h4 className=\"text-white font-semibold mb-1\">{news.headline}</h4>\n                    <div className=\"flex items-center space-x-4 text-sm text-gray-400\">\n                      <span>{news.source}</span>\n                      <span>{news.timestamp.toLocaleTimeString()}</span>\n                      <span>Relevance: {news.relevance.toFixed(0)}%</span>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right ml-4\">\n                    <Badge className=\"bg-green-500\">{news.confidence.toFixed(0)}%</Badge>\n                    <p className=\"text-xs text-gray-400 mt-1\">Confidence</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Influencer Sentiment */}\n      <Card className=\"bg-gradient-to-r from-indigo-900/20 to-purple-900/20 border-indigo-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Eye className=\"h-6 w-6 mr-2 text-indigo-400\" />\n            Influencer Sentiment Tracking\n            <Badge className=\"ml-3 bg-gradient-to-r from-indigo-500 to-purple-500\">\n              <Activity className=\"h-3 w-3 mr-1\" />\n              Key Voices\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {influencerSentiment.map((influencer, index) => (\n              <div\n                key={index}\n                className=\"p-4 bg-gradient-to-r from-indigo-500/10 to-purple-500/10 rounded-lg border border-indigo-500/30\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-white font-bold\">{influencer.name}</span>\n                        <Badge\n                          className={\n                            influencer.sentiment === 'bullish' ? 'bg-green-500' : 'bg-red-500'\n                          }\n                        >\n                          {influencer.sentiment === 'bullish' ? (\n                            <TrendingUp className=\"h-3 w-3\" />\n                          ) : (\n                            <TrendingDown className=\"h-3 w-3\" />\n                          )}\n                        </Badge>\n                        <Badge\n                          className={\n                            influencer.marketImpact === 'high' ? 'bg-red-500' : 'bg-yellow-500'\n                          }\n                        >\n                          {influencer.marketImpact.toUpperCase()}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400\">\n                        {influencer.followers} followers on {influencer.platform}\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Sentiment</p>\n                      <p\n                        className={`font-bold ${influencer.sentiment === 'bullish' ? 'text-green-400' : 'text-red-400'}`}\n                      >\n                        {influencer.sentiment.toUpperCase()}\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Confidence</p>\n                      <p className=\"text-indigo-400 font-bold\">\n                        {influencer.confidence.toFixed(0)}%\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Engagement</p>\n                      <p className=\"text-purple-400 font-bold\">\n                        {influencer.engagement.toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-gray-400\">\n                      Last post: {influencer.lastPost.toLocaleDateString()}\n                    </p>\n                    <Badge variant=\"outline\" className=\"border-indigo-500/30 text-indigo-400 mt-1\">\n                      Active\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ai/UltimateAIDashboard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 136,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 136,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2404, 2407], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2404, 2407], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 143,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 143,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2528, 2531], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2528, 2531], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_limit' is defined but never used.",
        "line": 159,
        "column": 22,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 159,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_assets' is defined but never used.",
        "line": 190,
        "column": 43,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 190,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_options' is defined but never used.",
        "line": 190,
        "column": 62,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 190,
        "endColumn": 70
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_symbol' is defined but never used.",
        "line": 238,
        "column": 43,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 238,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_agentName' is defined but never used.",
        "line": 300,
        "column": 30,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 300,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_options' is defined but never used.",
        "line": 300,
        "column": 50,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 300,
        "endColumn": 58
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Brain,\n  Zap,\n  TrendingUp,\n  Shield,\n  Cpu,\n  Satellite,\n  Activity,\n  Target,\n  Eye,\n  Globe,\n  BarChart3,\n  PieChart,\n  RefreshCw,\n  Users,\n  Database,\n  Network,\n  Layers,\n  Sparkles,\n  Atom,\n  Gauge,\n} from 'lucide-react';\n\n// Type definitions for dashboard data\ninterface Processor {\n  name: string;\n  qubits: number;\n  coherenceTime: string;\n  errorRate: number;\n  status: string;\n  gateSpeed: string;\n  type: string;\n}\n\ninterface Agent {\n  id: string;\n  name: string;\n  status: string;\n  performance: {\n    totalReturn: number;\n    sharpeRatio: number;\n    maxDrawdown: number;\n    winRate: number;\n  };\n  trades: number;\n  profit: number;\n  currentEpisode: number;\n  trainingEpisodes: number;\n}\n\ninterface Capability {\n  name: string;\n  accuracy: number;\n  speed: string;\n  description: string;\n}\n\ninterface Result {\n  type: string;\n  accuracy: number;\n  speed: string;\n  confidence: number;\n  expectedReturn: number;\n  risk: number;\n  sharpeRatio: number;\n  diversificationScore: number;\n}\n\ninterface Algorithm {\n  name: string;\n  type: string;\n  performance: number;\n  accuracy: number;\n  ordersPlaced: number;\n  ordersFilled: number;\n  currentPnl: number;\n}\n\ninterface Strategy {\n  name: string;\n  type: string;\n  performance: number;\n  winRate: number;\n  description?: string;\n  sharpeRatio?: number;\n  capacity?: number;\n}\n\ninterface DataSource {\n  name: string;\n  type: string;\n  status: string;\n  latency: string;\n  accuracy?: number;\n}\n\ninterface Model {\n  name: string;\n  type: string;\n  accuracy: number;\n  status: string;\n  actionSpace?: string;\n  performance?: {\n    winRate?: number;\n    avgReturn?: number;\n    sharpeRatio?: number;\n  };\n}\n\ninterface Environment {\n  name: string;\n  type: string;\n  status: string;\n  performance: number;\n  assets?: string[];\n  episodeLength?: number;\n  lookbackWindow?: number;\n  transactionCosts?: number;\n}\n\ninterface QuantumData {\n  processors?: Processor[];\n  capabilities?: Capability[];\n  results?: Result[];\n}\n\ninterface HFTData {\n  stats?: any;\n  algorithms?: Algorithm[];\n  strategies?: Strategy[];\n}\n\ninterface AltData {\n  sources?: DataSource[];\n  sampleData?: any;\n}\n\ninterface RLData {\n  agents?: Agent[];\n  models?: Model[];\n  environments?: Environment[];\n}\n\ninterface UltimateAIDashboardProps {\n  className?: string;\n}\n\n// Mock services for TypeScript compatibility\nconst quantumComputingService = {\n  initialize: async () => Promise.resolve(),\n  getRecentResults: (_limit: number) => [\n    {\n      type: 'portfolio_optimization',\n      accuracy: 0.94,\n      speed: '2.3ms',\n      confidence: 0.92,\n      expectedReturn: 0.18,\n      risk: 0.12,\n      sharpeRatio: 1.5,\n      diversificationScore: 85,\n    },\n  ],\n  getQuantumCapabilities: () => [\n    {\n      name: 'Portfolio Optimization',\n      accuracy: 0.95,\n      speed: '1.2ms',\n      description: 'Quantum-enhanced portfolio allocation',\n    },\n  ],\n  getQuantumProcessors: () => [\n    {\n      name: 'IBM Quantum Eagle',\n      qubits: 127,\n      coherenceTime: '100μs',\n      errorRate: 0.001,\n      status: 'operational',\n      gateSpeed: '100ns',\n      type: 'superconducting',\n    },\n  ],\n  runQuantumPortfolioOptimization: async (_assets: string[], _options: Record<string, unknown>) =>\n    Promise.resolve({}),\n};\n\nconst highFrequencyTradingService = {\n  initialize: async () => Promise.resolve(),\n  startHFTSystem: async () => Promise.resolve(),\n  getExecutionStats: () => ({\n    avgExecutionTime: 0.45,\n    successRate: 0.987,\n    dailyVolume: 15000000,\n    totalPnL: 125000,\n  }),\n  getActiveAlgorithms: () => [\n    {\n      name: 'Lightning Arbitrage',\n      type: 'arbitrage',\n      performance: 94.2,\n      accuracy: 0.96,\n      ordersPlaced: 1250,\n      ordersFilled: 1198,\n      currentPnl: 15420,\n    },\n  ],\n  getAvailableStrategies: () => [\n    {\n      name: 'Market Making',\n      type: 'market_making',\n      performance: 87.5,\n      winRate: 0.78,\n      description: 'Provides liquidity across multiple exchanges',\n      sharpeRatio: 2.1,\n      capacity: 5000000,\n    },\n  ],\n};\n\nconst alternativeDataService = {\n  initialize: async () => Promise.resolve(),\n  getDataSources: () => [\n    {\n      name: 'Satellite Imagery',\n      type: 'geospatial',\n      status: 'active',\n      latency: '15min',\n      accuracy: 0.88,\n    },\n  ],\n  getComprehensiveAlternativeData: async (_symbol: string) => Promise.resolve({}),\n};\n\nconst reinforcementLearningService = {\n  initialize: async () => Promise.resolve(),\n  getAgents: () => [\n    {\n      id: 'alpha_trader',\n      name: 'Alpha Trader',\n      status: 'trained',\n      performance: {\n        totalReturn: 0.85,\n        sharpeRatio: 2.9,\n        maxDrawdown: 0.25,\n        winRate: 0.63,\n      },\n      trades: 156,\n      profit: 127.5,\n      currentEpisode: 750,\n      trainingEpisodes: 1000,\n    },\n    {\n      id: 'gamma_learner',\n      name: 'Gamma Learner',\n      status: 'training',\n      performance: {\n        totalReturn: 0.42,\n        sharpeRatio: 1.8,\n        maxDrawdown: 0.18,\n        winRate: 0.58,\n      },\n      trades: 89,\n      profit: 68.2,\n      currentEpisode: 320,\n      trainingEpisodes: 500,\n    },\n  ],\n  getModels: () => [\n    {\n      name: 'Deep Q-Network',\n      type: 'DQN',\n      accuracy: 0.87,\n      status: 'deployed',\n      performance: {\n        winRate: 0.72,\n        avgReturn: 0.15,\n        sharpeRatio: 2.1,\n      },\n    },\n  ],\n  getEnvironments: () => [\n    {\n      name: 'Multi-Asset Trading',\n      type: 'continuous',\n      status: 'active',\n      performance: 92.5,\n      assets: ['AAPL', 'MSFT', 'GOOGL'],\n      episodeLength: 252,\n      lookbackWindow: 30,\n      transactionCosts: 0.001,\n    },\n  ],\n  getAgentPrediction: async (_agentName: string, _options: Record<string, unknown>) =>\n    Promise.resolve({}),\n};\n\nexport default function UltimateAIDashboard({ className = '' }: UltimateAIDashboardProps) {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [quantumData, setQuantumData] = useState<QuantumData | null>(null);\n  const [hftData, setHftData] = useState<HFTData | null>(null);\n  const [altData, setAltData] = useState<AltData | null>(null);\n  const [rlData, setRlData] = useState<RLData | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [systemStatus, setSystemStatus] = useState('initializing');\n\n  useEffect(() => {\n    const initializeServices = async () => {\n      try {\n        setSystemStatus('initializing');\n\n        // Initialize all advanced services\n        await Promise.all([\n          quantumComputingService.initialize(),\n          highFrequencyTradingService.initialize(),\n          alternativeDataService.initialize(),\n          reinforcementLearningService.initialize(),\n        ]);\n\n        // Start HFT system\n        await highFrequencyTradingService.startHFTSystem();\n\n        setSystemStatus('operational');\n        setIsLoading(false);\n\n        // Initial data load\n        updateDashboard();\n      } catch (error) {\n        console.error('Failed to initialize services:', error);\n        setSystemStatus('error');\n        setIsLoading(false);\n      }\n    };\n\n    initializeServices();\n    const interval = setInterval(updateDashboard, 5000); // Update every 5 seconds\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateDashboard = async () => {\n    try {\n      // Get quantum computing data\n      const quantumResults = quantumComputingService.getRecentResults(5);\n      const quantumCapabilities = quantumComputingService.getQuantumCapabilities();\n      const quantumProcessors = quantumComputingService.getQuantumProcessors();\n\n      setQuantumData({\n        results: quantumResults,\n        capabilities: quantumCapabilities,\n        processors: quantumProcessors,\n      });\n\n      // Get HFT data\n      const hftStats = highFrequencyTradingService.getExecutionStats();\n      const activeAlgorithms = highFrequencyTradingService.getActiveAlgorithms();\n      const availableStrategies = highFrequencyTradingService.getAvailableStrategies();\n\n      setHftData({\n        stats: hftStats,\n        algorithms: activeAlgorithms,\n        strategies: availableStrategies,\n      });\n\n      // Get alternative data\n      const dataSources = alternativeDataService.getDataSources();\n      const comprehensiveData =\n        await alternativeDataService.getComprehensiveAlternativeData('AAPL');\n\n      setAltData({\n        sources: dataSources,\n        sampleData: comprehensiveData,\n      });\n\n      // Get RL data\n      const agents = reinforcementLearningService.getAgents();\n      const models = reinforcementLearningService.getModels();\n      const environments = reinforcementLearningService.getEnvironments();\n\n      setRlData({\n        agents,\n        models,\n        environments,\n      });\n    } catch (error) {\n      console.error('Failed to update dashboard:', error);\n    }\n  };\n\n  const runQuantumOptimization = async () => {\n    try {\n      const assets = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA'];\n      const result = await quantumComputingService.runQuantumPortfolioOptimization(assets, {});\n      console.log('Quantum optimization result:', result);\n      updateDashboard();\n    } catch (error) {\n      console.error('Quantum optimization failed:', error);\n    }\n  };\n\n  const runRLPrediction = async () => {\n    try {\n      const prediction = await reinforcementLearningService.getAgentPrediction('alpha_trader', {});\n      console.log('RL prediction:', prediction);\n    } catch (error) {\n      console.error('RL prediction failed:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div\n        className={`min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6 ${className}`}\n      >\n        <div className=\"flex items-center justify-center h-full\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-purple-400 mx-auto mb-4\"></div>\n            <h2 className=\"text-2xl font-bold text-white mb-2\">Initializing Ultimate AI System</h2>\n            <p className=\"text-purple-300\">\n              Loading quantum processors, neural networks, and advanced algorithms...\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={`min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6 ${className}`}\n    >\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-4xl font-bold text-white mb-2 flex items-center gap-3\">\n              <Atom className=\"h-10 w-10 text-purple-400\" />\n              AlphaAI Ultimate Trading System\n            </h1>\n            <p className=\"text-purple-300 text-lg\">\n              Quantum-Enhanced AI Trading with Alternative Data Intelligence\n            </p>\n          </div>\n          <div className=\"flex items-center gap-4\">\n            <Badge\n              variant={\n                systemStatus === 'operational'\n                  ? 'default'\n                  : systemStatus === 'error'\n                    ? 'destructive'\n                    : 'secondary'\n              }\n              className=\"text-sm px-3 py-1\"\n            >\n              <div\n                className={`w-2 h-2 rounded-full mr-2 ${\n                  systemStatus === 'operational'\n                    ? 'bg-green-400'\n                    : systemStatus === 'error'\n                      ? 'bg-red-400'\n                      : 'bg-yellow-400'\n                }`}\n              ></div>\n              {systemStatus.toUpperCase()}\n            </Badge>\n            <Button onClick={updateDashboard} variant=\"outline\" size=\"sm\">\n              <RefreshCw className=\"h-4 w-4 mr-2\" />\n              Refresh\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Dashboard */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-6 bg-slate-800/50 backdrop-blur-sm\">\n          <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n            <Gauge className=\"h-4 w-4\" />\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"quantum\" className=\"flex items-center gap-2\">\n            <Atom className=\"h-4 w-4\" />\n            Quantum\n          </TabsTrigger>\n          <TabsTrigger value=\"hft\" className=\"flex items-center gap-2\">\n            <Zap className=\"h-4 w-4\" />\n            HFT\n          </TabsTrigger>\n          <TabsTrigger value=\"altdata\" className=\"flex items-center gap-2\">\n            <Satellite className=\"h-4 w-4\" />\n            Alt Data\n          </TabsTrigger>\n          <TabsTrigger value=\"rl\" className=\"flex items-center gap-2\">\n            <Brain className=\"h-4 w-4\" />\n            AI/ML\n          </TabsTrigger>\n          <TabsTrigger value=\"performance\" className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-4 w-4\" />\n            Performance\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {/* System Performance */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5 text-green-400\" />\n                  System Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Total Return</span>\n                    <span className=\"text-green-400 font-bold\">+127.5%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Sharpe Ratio</span>\n                    <span className=\"text-purple-400 font-bold\">4.2</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Max Drawdown</span>\n                    <span className=\"text-yellow-400 font-bold\">-3.2%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Win Rate</span>\n                    <span className=\"text-blue-400 font-bold\">78.5%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quantum Status */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Atom className=\"h-5 w-5 text-purple-400\" />\n                  Quantum Computing\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Processors</span>\n                    <span className=\"text-purple-400 font-bold\">\n                      {quantumData?.processors?.length || 0}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Qubits</span>\n                    <span className=\"text-purple-400 font-bold\">5,192</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Coherence</span>\n                    <span className=\"text-green-400 font-bold\">99.95%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Speedup</span>\n                    <span className=\"text-yellow-400 font-bold\">10^15x</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* HFT Status */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Zap className=\"h-5 w-5 text-yellow-400\" />\n                  High-Frequency Trading\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Latency</span>\n                    <span className=\"text-yellow-400 font-bold\">0.3ms</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Orders/sec</span>\n                    <span className=\"text-yellow-400 font-bold\">15,000</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Fill Rate</span>\n                    <span className=\"text-green-400 font-bold\">97.8%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Active Algos</span>\n                    <span className=\"text-blue-400 font-bold\">\n                      {hftData?.algorithms?.length || 0}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Alternative Data */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Satellite className=\"h-5 w-5 text-blue-400\" />\n                  Alternative Data\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Data Sources</span>\n                    <span className=\"text-blue-400 font-bold\">{altData?.sources?.length || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Satellite Images</span>\n                    <span className=\"text-blue-400 font-bold\">2.5M</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Social Signals</span>\n                    <span className=\"text-green-400 font-bold\">Real-time</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-300\">Accuracy</span>\n                    <span className=\"text-purple-400 font-bold\">94.2%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Agents Overview */}\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Brain className=\"h-5 w-5 text-purple-400\" />\n                AI Trading Agents\n              </CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                Advanced reinforcement learning agents managing your portfolio\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {rlData?.agents?.slice(0, 6).map((agent: Agent) => (\n                  <div key={agent.id} className=\"bg-slate-700/50 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"text-white font-semibold\">{agent.name}</h4>\n                      <Badge\n                        variant={agent.status === 'trained' ? 'default' : 'secondary'}\n                        className=\"text-xs\"\n                      >\n                        {agent.status}\n                      </Badge>\n                    </div>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">Performance</span>\n                        <span className=\"text-green-400\">\n                          {(agent.performance.totalReturn * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">Trades</span>\n                        <span className=\"text-blue-400\">{agent.trades}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">Profit</span>\n                        <span className=\"text-yellow-400\">${agent.profit.toFixed(2)}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Quick Actions */}\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Sparkles className=\"h-5 w-5 text-yellow-400\" />\n                Quick Actions\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <Button\n                  onClick={runQuantumOptimization}\n                  className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n                >\n                  <Atom className=\"h-4 w-4 mr-2\" />\n                  Quantum Optimize\n                </Button>\n                <Button\n                  onClick={runRLPrediction}\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                >\n                  <Brain className=\"h-4 w-4 mr-2\" />\n                  AI Predict\n                </Button>\n                <Button className=\"bg-yellow-600 hover:bg-yellow-700 text-white\">\n                  <Zap className=\"h-4 w-4 mr-2\" />\n                  HFT Boost\n                </Button>\n                <Button className=\"bg-green-600 hover:bg-green-700 text-white\">\n                  <Satellite className=\"h-4 w-4 mr-2\" />\n                  Alt Data Scan\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Quantum Computing Tab */}\n        <TabsContent value=\"quantum\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Quantum Processors */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Cpu className=\"h-5 w-5 text-purple-400\" />\n                  Quantum Processors\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {quantumData?.processors?.map((processor: Processor) => (\n                    <div key={processor.name} className=\"bg-slate-700/50 rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"text-white font-semibold\">{processor.name}</h4>\n                        <Badge className=\"bg-purple-600\">{processor.qubits} qubits</Badge>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-slate-400\">Error Rate:</span>\n                          <span className=\"text-green-400 ml-2\">\n                            {(processor.errorRate * 100).toFixed(3)}%\n                          </span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Coherence:</span>\n                          <span className=\"text-blue-400 ml-2\">{processor.coherenceTime}μs</span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Gate Speed:</span>\n                          <span className=\"text-yellow-400 ml-2\">{processor.gateSpeed}ns</span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Type:</span>\n                          <span className=\"text-purple-400 ml-2\">{processor.type}</span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quantum Algorithms */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Layers className=\"h-5 w-5 text-purple-400\" />\n                  Quantum Algorithms\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {quantumData?.capabilities?.map((capability: Capability) => (\n                    <div key={capability.name} className=\"bg-slate-700/50 rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-white capitalize\">\n                          {capability.name.replace(/_/g, ' ')}\n                        </span>\n                        <Badge variant=\"outline\" className=\"text-purple-400 border-purple-400\">\n                          Active\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quantum Results */}\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <BarChart3 className=\"h-5 w-5 text-purple-400\" />\n                Recent Quantum Computations\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {quantumData?.results?.map((result: Result, index: number) => (\n                  <div key={index} className=\"bg-slate-700/50 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"text-white font-semibold\">Portfolio Optimization</h4>\n                      <span className=\"text-slate-400 text-sm\">{result.speed}</span>\n                    </div>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-slate-400\">Expected Return:</span>\n                        <span className=\"text-green-400 ml-2\">\n                          {(result.expectedReturn * 100)?.toFixed(1)}%\n                        </span>\n                      </div>\n                      <div>\n                        <span className=\"text-slate-400\">Risk:</span>\n                        <span className=\"text-yellow-400 ml-2\">\n                          {(result.risk * 100)?.toFixed(1)}%\n                        </span>\n                      </div>\n                      <div>\n                        <span className=\"text-slate-400\">Sharpe Ratio:</span>\n                        <span className=\"text-purple-400 ml-2\">\n                          {result.sharpeRatio?.toFixed(2)}\n                        </span>\n                      </div>\n                      <div>\n                        <span className=\"text-slate-400\">Diversification:</span>\n                        <span className=\"text-blue-400 ml-2\">\n                          {(result.diversificationScore * 100)?.toFixed(0)}%\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* HFT Tab */}\n        <TabsContent value=\"hft\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* HFT Statistics */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-yellow-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Activity className=\"h-5 w-5 text-yellow-400\" />\n                  Execution Statistics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"bg-slate-700/50 rounded-lg p-3\">\n                      <div className=\"text-2xl font-bold text-yellow-400\">\n                        {hftData?.stats?.ordersPlaced?.toLocaleString() || '0'}\n                      </div>\n                      <div className=\"text-slate-400 text-sm\">Orders Placed</div>\n                    </div>\n                    <div className=\"bg-slate-700/50 rounded-lg p-3\">\n                      <div className=\"text-2xl font-bold text-green-400\">\n                        {hftData?.stats?.ordersFilled?.toLocaleString() || '0'}\n                      </div>\n                      <div className=\"text-slate-400 text-sm\">Orders Filled</div>\n                    </div>\n                    <div className=\"bg-slate-700/50 rounded-lg p-3\">\n                      <div className=\"text-2xl font-bold text-purple-400\">\n                        {hftData?.stats?.averageLatency?.toFixed(2) || '0.00'}ms\n                      </div>\n                      <div className=\"text-slate-400 text-sm\">Avg Latency</div>\n                    </div>\n                    <div className=\"bg-slate-700/50 rounded-lg p-3\">\n                      <div className=\"text-2xl font-bold text-blue-400\">\n                        ${hftData?.stats?.pnl?.toLocaleString() || '0'}\n                      </div>\n                      <div className=\"text-slate-400 text-sm\">P&L</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Active Algorithms */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-yellow-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Network className=\"h-5 w-5 text-yellow-400\" />\n                  Active Algorithms\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {hftData?.algorithms?.map((algo: Algorithm) => (\n                    <div key={algo.name} className=\"bg-slate-700/50 rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"text-white font-semibold\">{algo.name}</h4>\n                        <Badge className=\"bg-green-600\">Active</Badge>\n                      </div>\n                      <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                        <div>\n                          <span className=\"text-slate-400\">Orders:</span>\n                          <span className=\"text-yellow-400 ml-1\">{algo.ordersPlaced}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Filled:</span>\n                          <span className=\"text-green-400 ml-1\">{algo.ordersFilled}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">P&L:</span>\n                          <span\n                            className={`ml-1 ${algo.currentPnl >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                          >\n                            ${algo.currentPnl?.toFixed(0)}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* HFT Strategies */}\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-yellow-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Target className=\"h-5 w-5 text-yellow-400\" />\n                Available Strategies\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {hftData?.strategies?.map((strategy: Strategy) => (\n                  <div key={strategy.name} className=\"bg-slate-700/50 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"text-white font-semibold\">{strategy.name}</h4>\n                      <Badge variant=\"outline\" className=\"text-yellow-400 border-yellow-400\">\n                        {strategy.performance}ms\n                      </Badge>\n                    </div>\n                    <p className=\"text-slate-400 text-sm mb-3\">{strategy.description}</p>\n                    <div className=\"space-y-2 text-xs\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">Sharpe Ratio:</span>\n                        <span className=\"text-purple-400\">{strategy.sharpeRatio}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">Win Rate:</span>\n                        <span className=\"text-green-400\">\n                          {(strategy.winRate * 100).toFixed(0)}%\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">Capacity:</span>\n                        <span className=\"text-blue-400\">{strategy.capacity}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Alternative Data Tab */}\n        <TabsContent value=\"altdata\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Data Sources */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Database className=\"h-5 w-5 text-blue-400\" />\n                  Data Sources\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {altData?.sources?.map((source: DataSource) => (\n                    <div key={source.name} className=\"bg-slate-700/50 rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"text-white font-semibold\">{source.name}</h4>\n                        <Badge className=\"bg-green-600\">{source.status}</Badge>\n                      </div>\n                      <p className=\"text-slate-400 text-sm mb-2\">{source.type}</p>\n                      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                        <div>\n                          <span className=\"text-slate-400\">Latency:</span>\n                          <span className=\"text-yellow-400 ml-1\">{source.latency}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Accuracy:</span>\n                          <span className=\"text-green-400 ml-1\">\n                            {((source.accuracy || 0) * 100).toFixed(0)}%\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Sample Alternative Signal */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Eye className=\"h-5 w-5 text-blue-400\" />\n                  Alternative Signal (AAPL)\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {altData?.sampleData?.alternativeSignal && (\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center\">\n                      <div\n                        className={`text-3xl font-bold mb-2 ${\n                          altData.sampleData.alternativeSignal.direction === 'BULLISH'\n                            ? 'text-green-400'\n                            : altData.sampleData.alternativeSignal.direction === 'BEARISH'\n                              ? 'text-red-400'\n                              : 'text-yellow-400'\n                        }`}\n                      >\n                        {altData.sampleData.alternativeSignal.direction}\n                      </div>\n                      <div className=\"text-slate-400\">\n                        Signal Strength:{' '}\n                        {(altData.sampleData.alternativeSignal.strength * 100).toFixed(1)}%\n                      </div>\n                      <div className=\"text-slate-400\">\n                        Confidence:{' '}\n                        {(altData.sampleData.alternativeSignal.confidence * 100).toFixed(1)}%\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                      <div className=\"bg-slate-700/50 rounded p-2 text-center\">\n                        <div className=\"text-green-400 font-bold\">\n                          {altData.sampleData.alternativeSignal.bullishFactors}\n                        </div>\n                        <div className=\"text-slate-400 text-xs\">Bullish</div>\n                      </div>\n                      <div className=\"bg-slate-700/50 rounded p-2 text-center\">\n                        <div className=\"text-red-400 font-bold\">\n                          {altData.sampleData.alternativeSignal.bearishFactors}\n                        </div>\n                        <div className=\"text-slate-400 text-xs\">Bearish</div>\n                      </div>\n                      <div className=\"bg-slate-700/50 rounded p-2 text-center\">\n                        <div className=\"text-blue-400 font-bold\">\n                          {altData.sampleData.alternativeSignal.totalFactors}\n                        </div>\n                        <div className=\"text-slate-400 text-xs\">Total</div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Data Breakdown */}\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Globe className=\"h-5 w-5 text-blue-400\" />\n                Data Breakdown (AAPL)\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {/* Satellite Data */}\n                {altData?.sampleData?.satellite && (\n                  <div className=\"bg-slate-700/50 rounded-lg p-4\">\n                    <h4 className=\"text-white font-semibold mb-2 flex items-center gap-2\">\n                      <Satellite className=\"h-4 w-4\" />\n                      Satellite Data\n                    </h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">Occupancy:</span>\n                        <span className=\"text-blue-400\">\n                          {(altData.sampleData.satellite.parkingLotOccupancy * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">YoY Change:</span>\n                        <span\n                          className={\n                            altData.sampleData.satellite.yearOverYearChange >= 0\n                              ? 'text-green-400'\n                              : 'text-red-400'\n                          }\n                        >\n                          {(altData.sampleData.satellite.yearOverYearChange * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Social Sentiment */}\n                {altData?.sampleData?.socialSentiment && (\n                  <div className=\"bg-slate-700/50 rounded-lg p-4\">\n                    <h4 className=\"text-white font-semibold mb-2 flex items-center gap-2\">\n                      <Users className=\"h-4 w-4\" />\n                      Social Sentiment\n                    </h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">Overall:</span>\n                        <span\n                          className={\n                            altData.sampleData.socialSentiment.overallSentiment >= 0.5\n                              ? 'text-green-400'\n                              : 'text-red-400'\n                          }\n                        >\n                          {(altData.sampleData.socialSentiment.overallSentiment * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">Volume:</span>\n                        <span className=\"text-blue-400\">\n                          {altData.sampleData.socialSentiment.sentimentVolume.toLocaleString()}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {/* Web Traffic */}\n                {altData?.sampleData?.webTraffic && (\n                  <div className=\"bg-slate-700/50 rounded-lg p-4\">\n                    <h4 className=\"text-white font-semibold mb-2 flex items-center gap-2\">\n                      <Globe className=\"h-4 w-4\" />\n                      Web Traffic\n                    </h4>\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">Visitors:</span>\n                        <span className=\"text-blue-400\">\n                          {(altData.sampleData.webTraffic.visitors / 1000000).toFixed(1)}M\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-slate-400\">YoY Change:</span>\n                        <span\n                          className={\n                            altData.sampleData.webTraffic.yearOverYearChange >= 0\n                              ? 'text-green-400'\n                              : 'text-red-400'\n                          }\n                        >\n                          {(altData.sampleData.webTraffic.yearOverYearChange * 100).toFixed(1)}%\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* AI/ML Tab */}\n        <TabsContent value=\"rl\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* AI Models */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Brain className=\"h-5 w-5 text-green-400\" />\n                  AI Models\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {rlData?.models?.map((model: Model) => (\n                    <div key={model.name} className=\"bg-slate-700/50 rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"text-white font-semibold\">{model.name}</h4>\n                        <Badge className=\"bg-green-600\">{model.type}</Badge>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                        <div>\n                          <span className=\"text-slate-400\">Accuracy:</span>\n                          <span className=\"text-green-400 ml-1\">{model.accuracy}%</span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Actions:</span>\n                          <span className=\"text-blue-400 ml-1\">{model.actionSpace}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Sharpe:</span>\n                          <span className=\"text-purple-400 ml-1\">\n                            {model.performance?.sharpeRatio || 'N/A'}\n                          </span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Win Rate:</span>\n                          <span className=\"text-yellow-400 ml-1\">\n                            {model.performance?.winRate\n                              ? (model.performance.winRate * 100).toFixed(0) + '%'\n                              : 'N/A'}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Training Environments */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Layers className=\"h-5 w-5 text-green-400\" />\n                  Training Environments\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {rlData?.environments?.map((env: Environment) => (\n                    <div key={env.name} className=\"bg-slate-700/50 rounded-lg p-3\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"text-white font-semibold\">{env.name}</h4>\n                        <Badge variant=\"outline\" className=\"text-green-400 border-green-400\">\n                          {env.type}\n                        </Badge>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                        <div>\n                          <span className=\"text-slate-400\">Assets:</span>\n                          <span className=\"text-green-400 ml-1\">\n                            {Array.isArray(env.assets) ? env.assets.length : env.assets}\n                          </span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Episode:</span>\n                          <span className=\"text-blue-400 ml-1\">{env.episodeLength} days</span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Lookback:</span>\n                          <span className=\"text-purple-400 ml-1\">{env.lookbackWindow}</span>\n                        </div>\n                        <div>\n                          <span className=\"text-slate-400\">Costs:</span>\n                          <span className=\"text-yellow-400 ml-1\">\n                            {env.transactionCosts\n                              ? (env.transactionCosts * 100).toFixed(2) + '%'\n                              : 'N/A'}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* AI Agents Performance */}\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <TrendingUp className=\"h-5 w-5 text-green-400\" />\n                AI Agent Performance\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {rlData?.agents?.map((agent: Agent) => (\n                  <div key={agent.id} className=\"bg-slate-700/50 rounded-lg p-4\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"text-white font-semibold\">{agent.name}</h4>\n                      <Badge\n                        variant={\n                          agent.status === 'trained'\n                            ? 'default'\n                            : agent.status === 'training'\n                              ? 'secondary'\n                              : 'outline'\n                        }\n                        className={\n                          agent.status === 'trained'\n                            ? 'bg-green-600'\n                            : agent.status === 'training'\n                              ? 'bg-yellow-600'\n                              : ''\n                        }\n                      >\n                        {agent.status}\n                      </Badge>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-slate-400\">Total Return:</span>\n                        <span className=\"text-green-400 font-bold\">\n                          +{(agent.performance.totalReturn * 100).toFixed(1)}%\n                        </span>\n                      </div>\n\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-slate-400\">Sharpe Ratio:</span>\n                        <span className=\"text-purple-400 font-bold\">\n                          {agent.performance.sharpeRatio.toFixed(2)}\n                        </span>\n                      </div>\n\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-slate-400\">Max Drawdown:</span>\n                        <span className=\"text-yellow-400 font-bold\">\n                          -{(agent.performance.maxDrawdown * 100).toFixed(1)}%\n                        </span>\n                      </div>\n\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-slate-400\">Win Rate:</span>\n                        <span className=\"text-blue-400 font-bold\">\n                          {(agent.performance.winRate * 100).toFixed(1)}%\n                        </span>\n                      </div>\n\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-slate-400\">Episodes:</span>\n                        <span className=\"text-slate-300\">\n                          {agent.currentEpisode.toLocaleString()}\n                        </span>\n                      </div>\n\n                      {agent.status === 'training' && (\n                        <div className=\"mt-3\">\n                          <div className=\"flex justify-between text-xs mb-1\">\n                            <span className=\"text-slate-400\">Training Progress</span>\n                            <span className=\"text-slate-400\">\n                              {((agent.currentEpisode / agent.trainingEpisodes) * 100).toFixed(0)}%\n                            </span>\n                          </div>\n                          <Progress\n                            value={(agent.currentEpisode / agent.trainingEpisodes) * 100}\n                            className=\"h-2\"\n                          />\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Performance Tab */}\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Overall Performance */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <TrendingUp className=\"h-5 w-5 text-green-400\" />\n                  Overall Performance\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"bg-slate-700/50 rounded-lg p-4 text-center\">\n                      <div className=\"text-3xl font-bold text-green-400 mb-1\">+127.5%</div>\n                      <div className=\"text-slate-400 text-sm\">Total Return</div>\n                    </div>\n                    <div className=\"bg-slate-700/50 rounded-lg p-4 text-center\">\n                      <div className=\"text-3xl font-bold text-purple-400 mb-1\">4.2</div>\n                      <div className=\"text-slate-400 text-sm\">Sharpe Ratio</div>\n                    </div>\n                    <div className=\"bg-slate-700/50 rounded-lg p-4 text-center\">\n                      <div className=\"text-3xl font-bold text-yellow-400 mb-1\">-3.2%</div>\n                      <div className=\"text-slate-400 text-sm\">Max Drawdown</div>\n                    </div>\n                    <div className=\"bg-slate-700/50 rounded-lg p-4 text-center\">\n                      <div className=\"text-3xl font-bold text-blue-400 mb-1\">78.5%</div>\n                      <div className=\"text-slate-400 text-sm\">Win Rate</div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Risk Metrics */}\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-red-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <Shield className=\"h-5 w-5 text-red-400\" />\n                  Risk Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Value at Risk (95%)</span>\n                      <span className=\"text-red-400 font-bold\">-2.1%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Expected Shortfall</span>\n                      <span className=\"text-red-400 font-bold\">-3.8%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Beta</span>\n                      <span className=\"text-yellow-400 font-bold\">0.85</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Volatility</span>\n                      <span className=\"text-yellow-400 font-bold\">12.3%</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Correlation to SPY</span>\n                      <span className=\"text-blue-400 font-bold\">0.72</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Calmar Ratio</span>\n                      <span className=\"text-purple-400 font-bold\">3.98</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Performance Attribution */}\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <PieChart className=\"h-5 w-5 text-green-400\" />\n                Performance Attribution\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div className=\"bg-slate-700/50 rounded-lg p-4\">\n                  <h4 className=\"text-white font-semibold mb-2 flex items-center gap-2\">\n                    <Atom className=\"h-4 w-4 text-purple-400\" />\n                    Quantum Computing\n                  </h4>\n                  <div className=\"text-2xl font-bold text-purple-400 mb-1\">+42.3%</div>\n                  <div className=\"text-slate-400 text-sm\">\n                    Portfolio optimization and risk analysis\n                  </div>\n                </div>\n\n                <div className=\"bg-slate-700/50 rounded-lg p-4\">\n                  <h4 className=\"text-white font-semibold mb-2 flex items-center gap-2\">\n                    <Zap className=\"h-4 w-4 text-yellow-400\" />\n                    High-Frequency Trading\n                  </h4>\n                  <div className=\"text-2xl font-bold text-yellow-400 mb-1\">+31.7%</div>\n                  <div className=\"text-slate-400 text-sm\">Ultra-fast execution and arbitrage</div>\n                </div>\n\n                <div className=\"bg-slate-700/50 rounded-lg p-4\">\n                  <h4 className=\"text-white font-semibold mb-2 flex items-center gap-2\">\n                    <Brain className=\"h-4 w-4 text-green-400\" />\n                    AI/ML Models\n                  </h4>\n                  <div className=\"text-2xl font-bold text-green-400 mb-1\">+38.9%</div>\n                  <div className=\"text-slate-400 text-sm\">Reinforcement learning agents</div>\n                </div>\n\n                <div className=\"bg-slate-700/50 rounded-lg p-4\">\n                  <h4 className=\"text-white font-semibold mb-2 flex items-center gap-2\">\n                    <Satellite className=\"h-4 w-4 text-blue-400\" />\n                    Alternative Data\n                  </h4>\n                  <div className=\"text-2xl font-bold text-blue-400 mb-1\">+14.6%</div>\n                  <div className=\"text-slate-400 text-sm\">Satellite, social, and web data</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/alerts/RealTimeAlerts.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'customAlerts' is assigned a value but never used.",
        "line": 56,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 56,
        "endColumn": 22
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'generateNewAlert'. Either include it or remove the dependency array.",
        "line": 65,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 65,
        "endColumn": 21,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [alertSettings, generateNewAlert]",
            "fix": { "range": [1413, 1428], "text": "[alertSettings, generateNewAlert]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 164,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 164,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4673, 4676], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4673, 4676], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { Input } from '@/components/ui/input';\nimport {\n  Bell,\n  AlertTriangle,\n  TrendingUp,\n  Volume2,\n  Target,\n  Brain,\n  Zap,\n  Settings,\n  X,\n  Plus,\n} from 'lucide-react';\n\nimport { LucideIcon } from 'lucide-react';\n\ninterface Alert {\n  id: number;\n  type: string;\n  icon: LucideIcon;\n  color: string;\n  title: string;\n  symbol: string;\n  message: string;\n  timestamp: Date;\n  priority: string;\n  read: boolean;\n}\n\ninterface AlertSettings {\n  priceAlerts: boolean;\n  volumeAlerts: boolean;\n  newsAlerts: boolean;\n  aiSignals: boolean;\n  optionsFlow: boolean;\n  earnings: boolean;\n}\n\nexport default function RealTimeAlerts() {\n  const [alerts, setAlerts] = useState<Alert[]>([]);\n  const [alertSettings, setAlertSettings] = useState<AlertSettings>({\n    priceAlerts: true,\n    volumeAlerts: true,\n    newsAlerts: true,\n    aiSignals: true,\n    optionsFlow: true,\n    earnings: true,\n  });\n  const [customAlerts] = useState<Alert[]>([]);\n\n  useEffect(() => {\n    // Simulate real-time alerts\n    const interval = setInterval(() => {\n      generateNewAlert();\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [alertSettings]);\n\n  const generateNewAlert = () => {\n    const alertTypes = [\n      {\n        type: 'price_breakout',\n        icon: TrendingUp,\n        color: 'text-emerald-400',\n        title: 'Price Breakout',\n        enabled: alertSettings.priceAlerts,\n      },\n      {\n        type: 'volume_spike',\n        icon: Volume2,\n        color: 'text-blue-400',\n        title: 'Volume Spike',\n        enabled: alertSettings.volumeAlerts,\n      },\n      {\n        type: 'ai_signal',\n        icon: Brain,\n        color: 'text-purple-400',\n        title: 'AI Signal',\n        enabled: alertSettings.aiSignals,\n      },\n      {\n        type: 'news_impact',\n        icon: AlertTriangle,\n        color: 'text-amber-400',\n        title: 'News Impact',\n        enabled: alertSettings.newsAlerts,\n      },\n      {\n        type: 'options_flow',\n        icon: Target,\n        color: 'text-orange-400',\n        title: 'Options Flow',\n        enabled: alertSettings.optionsFlow,\n      },\n    ];\n\n    const enabledAlerts = alertTypes.filter(alert => alert.enabled);\n    if (enabledAlerts.length === 0) return;\n\n    const alertType = enabledAlerts[Math.floor(Math.random() * enabledAlerts.length)];\n    const symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA', 'META', 'AMZN', 'NFLX'];\n    const symbol = symbols[Math.floor(Math.random() * symbols.length)];\n\n    const messages: Record<string, string[]> = {\n      price_breakout: [\n        `${symbol} broke above resistance at $${(100 + Math.random() * 400).toFixed(2)}`,\n        `${symbol} bullish breakout with strong volume confirmation`,\n        `${symbol} breaking out of consolidation pattern`,\n      ],\n      volume_spike: [\n        `${symbol} volume spike: ${(Math.random() * 10 + 2).toFixed(1)}x average`,\n        `Unusual volume detected in ${symbol}`,\n        `${symbol} seeing heavy institutional activity`,\n      ],\n      ai_signal: [\n        `AI detected strong buy signal for ${symbol}`,\n        `${symbol} AI confidence score: ${(80 + Math.random() * 20).toFixed(0)}%`,\n        `Machine learning model flagged ${symbol} for momentum`,\n      ],\n      news_impact: [\n        `Breaking news affecting ${symbol} - positive sentiment`,\n        `${symbol} mentioned in major financial news`,\n        `Analyst upgrade for ${symbol} driving momentum`,\n      ],\n      options_flow: [\n        `Large call buying detected in ${symbol}`,\n        `${symbol} unusual options activity - bullish flow`,\n        `Whale options trade in ${symbol}: $${(Math.random() * 10 + 1).toFixed(1)}M`,\n      ],\n    };\n\n    const newAlert = {\n      id: Date.now(),\n      type: alertType.type,\n      icon: alertType.icon,\n      color: alertType.color,\n      title: alertType.title,\n      symbol,\n      message:\n        messages[alertType.type][Math.floor(Math.random() * messages[alertType.type].length)],\n      timestamp: new Date(),\n      priority: Math.random() > 0.7 ? 'high' : Math.random() > 0.4 ? 'medium' : 'low',\n      read: false,\n    };\n\n    setAlerts(prev => [newAlert, ...prev.slice(0, 19)]); // Keep last 20 alerts\n  };\n\n  const dismissAlert = (alertId: number) => {\n    setAlerts(prev => prev.filter(alert => alert.id !== alertId));\n  };\n\n  const markAsRead = (alertId: number) => {\n    setAlerts(prev =>\n      prev.map((alert: any) => (alert.id === alertId ? { ...alert, read: true } : alert))\n    );\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high':\n        return 'border-red-500/50 bg-red-500/10';\n      case 'medium':\n        return 'border-amber-500/50 bg-amber-500/10';\n      default:\n        return 'border-emerald-500/50 bg-emerald-500/10';\n    }\n  };\n\n  const unreadCount = alerts.filter(alert => !alert.read).length;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Alert Settings */}\n      <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-stone-100 flex items-center\">\n            <Settings className=\"h-6 w-6 mr-2 text-emerald-400\" />\n            Alert Settings\n            {unreadCount > 0 && <Badge className=\"ml-3 bg-red-500\">{unreadCount} new</Badge>}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n            {Object.entries(alertSettings).map(([key, enabled]) => (\n              <div\n                key={key}\n                className=\"flex items-center justify-between p-3 bg-stone-800/30 rounded-lg\"\n              >\n                <span className=\"text-stone-200 capitalize\">\n                  {key.replace(/([A-Z])/g, ' $1').trim()}\n                </span>\n                <Switch\n                  checked={enabled}\n                  onCheckedChange={checked =>\n                    setAlertSettings(prev => ({ ...prev, [key]: checked }))\n                  }\n                  className=\"data-[state=checked]:bg-emerald-500\"\n                />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Live Alerts Feed */}\n      <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-stone-100 flex items-center\">\n              <Bell className=\"h-6 w-6 mr-2 text-emerald-400\" />\n              Live Alerts Feed\n              <Badge className=\"ml-3 bg-gradient-to-r from-emerald-500 to-green-600\">\n                <Zap className=\"h-3 w-3 mr-1\" />\n                Real-time\n              </Badge>\n            </CardTitle>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"border-stone-600/30 text-stone-300\"\n              onClick={() => setAlerts([])}\n            >\n              Clear All\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {alerts.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Bell className=\"h-12 w-12 text-stone-400 mx-auto mb-4\" />\n              <p className=\"text-stone-400\">\n                No alerts yet. Configure your settings above to start receiving alerts.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n              {alerts.map(alert => {\n                const IconComponent = alert.icon;\n                return (\n                  <div\n                    key={alert.id}\n                    className={`p-4 rounded-lg border transition-all cursor-pointer ${\n                      alert.read\n                        ? 'bg-stone-800/20 border-stone-600/30'\n                        : getPriorityColor(alert.priority)\n                    }`}\n                    onClick={() => markAsRead(alert.id)}\n                  >\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className={`p-2 rounded-full bg-stone-800/50`}>\n                          <IconComponent className={`h-4 w-4 ${alert.color}`} />\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <span className=\"text-stone-100 font-semibold\">{alert.title}</span>\n                            <Badge variant=\"outline\" className=\"border-stone-600/30 text-stone-400\">\n                              {alert.symbol}\n                            </Badge>\n                            <Badge\n                              className={\n                                alert.priority === 'high'\n                                  ? 'bg-red-500'\n                                  : alert.priority === 'medium'\n                                    ? 'bg-amber-500'\n                                    : 'bg-emerald-500'\n                              }\n                            >\n                              {alert.priority}\n                            </Badge>\n                          </div>\n                          <p className=\"text-stone-300 text-sm\">{alert.message}</p>\n                          <p className=\"text-stone-500 text-xs mt-1\">\n                            {alert.timestamp.toLocaleTimeString()}\n                          </p>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={e => {\n                          e.stopPropagation();\n                          dismissAlert(alert.id);\n                        }}\n                        className=\"text-stone-400 hover:text-stone-200\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Custom Alert Builder */}\n      <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-stone-100 flex items-center\">\n            <Plus className=\"h-6 w-6 mr-2 text-blue-400\" />\n            Custom Alert Builder\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Input\n              placeholder=\"Symbol (e.g., AAPL)\"\n              className=\"bg-stone-800/30 border-stone-600/30 text-stone-200\"\n            />\n            <Input\n              placeholder=\"Price Target\"\n              type=\"number\"\n              className=\"bg-stone-800/30 border-stone-600/30 text-stone-200\"\n            />\n            <select className=\"bg-stone-800/30 border border-stone-600/30 rounded-md px-3 py-2 text-stone-200\">\n              <option>Price Above</option>\n              <option>Price Below</option>\n              <option>Volume Spike</option>\n              <option>RSI Oversold</option>\n              <option>RSI Overbought</option>\n            </select>\n            <Button className=\"bg-gradient-to-r from-emerald-600 to-green-700 hover:from-emerald-700 hover:to-green-800\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Alert\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/analytics/AdvancedAnalytics.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/auth/AuthModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/auth/ForgotPasswordForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/auth/SignInForm.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 179,
        "column": 14,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": { "range": [6131, 6164], "text": "\n          Don&apos;t have an account?" },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": { "range": [6131, 6164], "text": "\n          Don&lsquo;t have an account?" },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": { "range": [6131, 6164], "text": "\n          Don&#39;t have an account?" },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": { "range": [6131, 6164], "text": "\n          Don&rsquo;t have an account?" },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { LogIn, Mail, Lock, AlertCircle } from 'lucide-react';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\n\ninterface SignInFormProps {\n  onSignIn: (data: { email: string; name: string }) => void;\n  onSwitchToSignUp: () => void;\n  onForgotPassword: () => void;\n}\n\nexport default function SignInForm({\n  onSignIn,\n  onSwitchToSignUp,\n  onForgotPassword,\n}: SignInFormProps) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [rememberMe, setRememberMe] = useState(false);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n    setIsLoading(true);\n\n    try {\n      // Simulate authentication delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Simple validation\n      if (!email || !password) {\n        throw new Error('Please enter both email and password');\n      }\n\n      if (!email.includes('@')) {\n        throw new Error('Please enter a valid email address');\n      }\n\n      // In a real app, you would call an authentication API here\n      // For demo purposes, we'll accept any valid-looking input\n      onSignIn({ email, name: email.split('@')[0] });\n    } catch (err) {\n      const errorMessage =\n        err instanceof Error ? err.message : 'Failed to sign in. Please try again.';\n      setError(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md bg-black/40 border-purple-500/30 backdrop-blur-xl\">\n      <CardHeader>\n        <CardTitle className=\"text-white text-2xl\">Sign In</CardTitle>\n        <CardDescription className=\"text-gray-400\">\n          Access your AlphaAI StockX account\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {error && (\n            <Alert variant=\"destructive\" className=\"bg-red-900/20 border-red-500/50 text-red-300\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"email\" className=\"text-white\">\n              Email\n            </Label>\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"you@example.com\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                className=\"pl-10 bg-black/20 border-purple-500/30 text-white\"\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"password\" className=\"text-white\">\n                Password\n              </Label>\n              <Button\n                variant=\"link\"\n                className=\"text-purple-400 hover:text-purple-300 p-0 h-auto text-xs\"\n                onClick={onForgotPassword}\n                type=\"button\"\n              >\n                Forgot password?\n              </Button>\n            </div>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"••••••••\"\n                value={password}\n                onChange={e => setPassword(e.target.value)}\n                className=\"pl-10 bg-black/20 border-purple-500/30 text-white\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Checkbox\n              id=\"remember\"\n              checked={rememberMe}\n              onCheckedChange={(checked: boolean) => setRememberMe(!!checked)}\n              className=\"data-[state=checked]:bg-purple-500 data-[state=checked]:border-purple-500\"\n            />\n            <label htmlFor=\"remember\" className=\"text-sm text-gray-300 cursor-pointer\">\n              Remember me for 30 days\n            </label>\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600\"\n            disabled={isLoading}\n          >\n            {isLoading ? (\n              <span className=\"flex items-center\">\n                <svg\n                  className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  fill=\"none\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <circle\n                    className=\"opacity-25\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                  ></circle>\n                  <path\n                    className=\"opacity-75\"\n                    fill=\"currentColor\"\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n                  ></path>\n                </svg>\n                Signing in...\n              </span>\n            ) : (\n              <span className=\"flex items-center\">\n                <LogIn className=\"mr-2 h-4 w-4\" />\n                Sign In\n              </span>\n            )}\n          </Button>\n        </form>\n      </CardContent>\n      <CardFooter className=\"flex justify-center border-t border-purple-500/20 pt-4\">\n        <p className=\"text-sm text-gray-400\">\n          Don't have an account?{' '}\n          <Button\n            variant=\"link\"\n            className=\"text-purple-400 hover:text-purple-300 p-0 h-auto\"\n            onClick={onSwitchToSignUp}\n          >\n            Sign up\n          </Button>\n        </p>\n      </CardFooter>\n    </Card>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/auth/SignUpForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/backtesting/BacktestingEngine.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'generateBacktestResults'. Either include it or remove the dependency array.",
        "line": 137,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 137,
        "endColumn": 17,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [generateBacktestResults, isRunning]",
            "fix": { "range": [3997, 4008], "text": "[generateBacktestResults, isRunning]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 202,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 202,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6678, 6681], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6678, 6681], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 236,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 236,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8208, 8211], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8208, 8211], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport {\n  CalendarIcon,\n  Play,\n  BarChart3,\n  TrendingUp,\n  Target,\n  DollarSign,\n  Activity,\n  Zap,\n} from 'lucide-react';\nimport { format } from 'date-fns';\n\n// Type definitions for backtesting engine\ninterface BacktestResult {\n  strategy: string;\n  period: string;\n  initialCapital: number;\n  finalCapital: number;\n  totalReturn: number;\n  totalTrades: number;\n  winningTrades: number;\n  losingTrades: number;\n  winRate: number;\n  avgWin: number;\n  avgLoss: number;\n  sharpeRatio: number;\n  maxDrawdown: number;\n  calmarRatio: number;\n  sortinoRatio: number;\n  volatility: number;\n  beta: number;\n  alpha: number;\n  profitFactor: number;\n  maxConsecutiveWins: number;\n  maxConsecutiveLosses: number;\n  avgDaysInTrade: number;\n  totalCommissions: number;\n  netProfit: number;\n  grossProfit: number;\n  grossLoss: number;\n  equityCurve: number[];\n  largestWin: number;\n  largestLoss: number;\n  consecutiveWins: number;\n  consecutiveLosses: number;\n  tradingDays: number;\n  avgHoldingPeriod: number;\n}\n\ninterface BacktestSettings {\n  symbol?: string;\n  strategy: string;\n  startDate: Date;\n  endDate: Date;\n  initialCapital: number;\n  commissionPerTrade?: number;\n  slippagePercent?: number;\n  symbols?: string[];\n  timeframe?: string;\n  commission?: number;\n  slippage?: number;\n  maxPositionSize?: number;\n  riskPerTrade?: number;\n  stopLoss?: number;\n  takeProfit?: number;\n}\n\nexport default function BacktestingEngine() {\n  const [backtestResults, setBacktestResults] = useState<BacktestResult | null>(null);\n  const [isRunning, setIsRunning] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [backtestConfig, setBacktestConfig] = useState<BacktestSettings>({\n    strategy: 'ai-pattern-recognition',\n    startDate: new Date('2023-01-01'),\n    endDate: new Date('2024-01-01'),\n    initialCapital: 100000,\n    symbols: ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA'],\n    timeframe: '1D',\n    commission: 0.001,\n    slippage: 0.001,\n    maxPositionSize: 0.1,\n    riskPerTrade: 0.02,\n    stopLoss: 0.05,\n    takeProfit: 0.1,\n  });\n\n  const strategies = [\n    { id: 'ai-pattern-recognition', name: 'AI Pattern Recognition', type: 'AI', winRate: 73.5 },\n    { id: 'momentum-breakout', name: 'Momentum Breakout', type: 'Technical', winRate: 68.2 },\n    { id: 'mean-reversion', name: 'Mean Reversion', type: 'Statistical', winRate: 65.8 },\n    { id: 'rsi-divergence', name: 'RSI Divergence', type: 'Technical', winRate: 71.3 },\n    { id: 'bollinger-bands', name: 'Bollinger Bands', type: 'Technical', winRate: 64.7 },\n    { id: 'macd-crossover', name: 'MACD Crossover', type: 'Technical', winRate: 62.4 },\n    {\n      id: 'fibonacci-retracement',\n      name: 'Fibonacci Retracement',\n      type: 'Technical',\n      winRate: 69.1,\n    },\n    { id: 'support-resistance', name: 'Support/Resistance', type: 'Technical', winRate: 66.9 },\n    { id: 'harmonic-patterns', name: 'Harmonic Patterns', type: 'Advanced', winRate: 78.2 },\n    { id: 'elliott-wave', name: 'Elliott Wave', type: 'Advanced', winRate: 72.6 },\n  ];\n\n  useEffect(() => {\n    if (isRunning) {\n      const interval = setInterval(() => {\n        setProgress(prev => {\n          if (prev >= 100) {\n            setIsRunning(false);\n            generateBacktestResults();\n            return 100;\n          }\n          return prev + Math.random() * 10;\n        });\n      }, 500);\n\n      return () => clearInterval(interval);\n    }\n  }, [isRunning]);\n\n  const generateBacktestResults = () => {\n    const strategy = strategies.find(s => s.id === backtestConfig.strategy);\n    if (!strategy) return;\n\n    const totalTrades = Math.floor(Math.random() * 500) + 200;\n    const winningTrades = Math.floor(totalTrades * (strategy.winRate / 100));\n    const losingTrades = totalTrades - winningTrades;\n\n    const avgWin = 0.08 + Math.random() * 0.12; // 8-20% average win\n    const avgLoss = -(0.03 + Math.random() * 0.07); // 3-10% average loss\n\n    const totalReturn = winningTrades * avgWin + losingTrades * avgLoss;\n    const finalCapital = backtestConfig.initialCapital * (1 + totalReturn);\n\n    const results: BacktestResult = {\n      strategy: strategy.name,\n      period: `${format(backtestConfig.startDate, 'MMM dd, yyyy')} - ${format(backtestConfig.endDate, 'MMM dd, yyyy')}`,\n      initialCapital: backtestConfig.initialCapital,\n      finalCapital,\n      totalReturn: totalReturn * 100,\n      totalTrades,\n      winningTrades,\n      losingTrades,\n      winRate: (winningTrades / totalTrades) * 100,\n      avgWin: avgWin * 100,\n      avgLoss: avgLoss * 100,\n      profitFactor: Math.abs((winningTrades * avgWin) / (losingTrades * avgLoss)),\n      sharpeRatio: 1.2 + Math.random() * 1.8,\n      maxDrawdown: -(5 + Math.random() * 15),\n      calmarRatio: 0.8 + Math.random() * 1.2,\n      sortinoRatio: 1.5 + Math.random() * 2.0,\n      volatility: 15 + Math.random() * 25,\n      beta: 0.7 + Math.random() * 0.8,\n      alpha: -2 + Math.random() * 8,\n      maxConsecutiveWins: Math.floor(Math.random() * 8) + 3,\n      maxConsecutiveLosses: Math.floor(Math.random() * 5) + 2,\n      avgDaysInTrade: 3 + Math.random() * 12,\n      totalCommissions: totalTrades * 1.25,\n      netProfit: finalCapital - backtestConfig.initialCapital,\n      grossProfit: winningTrades * avgWin * backtestConfig.initialCapital,\n      grossLoss: losingTrades * Math.abs(avgLoss) * backtestConfig.initialCapital,\n      tradingDays: 252,\n      avgHoldingPeriod: 3 + Math.random() * 12,\n      largestWin: 15 + Math.random() * 25,\n      largestLoss: -(8 + Math.random() * 12),\n      consecutiveWins: Math.floor(Math.random() * 8) + 3,\n      consecutiveLosses: Math.floor(Math.random() * 5) + 2,\n      equityCurve: Array.from({ length: 252 }, (_, i) => {\n        const baseReturn = totalReturn / 252;\n        const dailyReturn = baseReturn + (Math.random() - 0.5) * 0.02;\n        return backtestConfig.initialCapital * Math.pow(1 + dailyReturn, i + 1);\n      }),\n    };\n\n    setBacktestResults(results);\n  };\n\n  const runBacktest = () => {\n    setIsRunning(true);\n    setProgress(0);\n    setBacktestResults(null);\n  };\n\n  const getReturnColor = (value: any) => {\n    return value >= 0 ? 'text-green-400' : 'text-red-400';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Backtesting Configuration */}\n      <Card className=\"bg-gray-900/90 border-red-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <BarChart3 className=\"h-6 w-6 mr-2 text-red-400\" />\n            Point-and-Click Backtesting Engine\n            <Badge className=\"ml-3 bg-gradient-to-r from-red-500 to-orange-600\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              Advanced Analytics\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Strategy Configuration */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-gray-200 font-semibold\">Strategy Configuration</h3>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-gray-200 text-sm font-medium\">Trading Strategy</label>\n                <Select\n                  value={backtestConfig.strategy}\n                  onValueChange={value => setBacktestConfig(prev => ({ ...prev, strategy: value }))}\n                >\n                  <SelectTrigger className=\"bg-gray-800/30 border-red-500/30 text-gray-200\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-gray-800 border-gray-600\">\n                    {strategies.map((strategy: any) => (\n                      <SelectItem key={strategy.id} value={strategy.id}>\n                        <div>\n                          <div className=\"font-medium\">{strategy.name}</div>\n                          <div className=\"text-xs text-gray-400\">\n                            {strategy.type} • Win Rate: {strategy.winRate}%\n                          </div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-gray-200 text-sm font-medium\">Timeframe</label>\n                <Select\n                  value={backtestConfig.timeframe}\n                  onValueChange={value =>\n                    setBacktestConfig(prev => ({ ...prev, timeframe: value }))\n                  }\n                >\n                  <SelectTrigger className=\"bg-gray-800/30 border-red-500/30 text-gray-200\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-gray-800 border-gray-600\">\n                    <SelectItem value=\"1M\">1 Minute</SelectItem>\n                    <SelectItem value=\"5M\">5 Minutes</SelectItem>\n                    <SelectItem value=\"15M\">15 Minutes</SelectItem>\n                    <SelectItem value=\"1H\">1 Hour</SelectItem>\n                    <SelectItem value=\"4H\">4 Hours</SelectItem>\n                    <SelectItem value=\"1D\">1 Day</SelectItem>\n                    <SelectItem value=\"1W\">1 Week</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-gray-200 text-sm font-medium\">Initial Capital</label>\n                <Input\n                  type=\"number\"\n                  value={backtestConfig.initialCapital}\n                  onChange={e =>\n                    setBacktestConfig(prev => ({\n                      ...prev,\n                      initialCapital: Number.parseInt(e.target.value),\n                    }))\n                  }\n                  className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                />\n              </div>\n            </div>\n\n            {/* Date Range */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-gray-200 font-semibold\">Backtest Period</h3>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-gray-200 text-sm font-medium\">Start Date</label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start text-left font-normal bg-gray-800/30 border-red-500/30 text-gray-200\"\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(backtestConfig.startDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0 bg-gray-800 border-gray-600\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={backtestConfig.startDate}\n                      onSelect={(date: Date | undefined) =>\n                        setBacktestConfig(prev => ({ ...prev, startDate: date || new Date() }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-gray-200 text-sm font-medium\">End Date</label>\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start text-left font-normal bg-gray-800/30 border-red-500/30 text-gray-200\"\n                    >\n                      <CalendarIcon className=\"mr-2 h-4 w-4\" />\n                      {format(backtestConfig.endDate, 'PPP')}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-auto p-0 bg-gray-800 border-gray-600\">\n                    <Calendar\n                      mode=\"single\"\n                      selected={backtestConfig.endDate}\n                      onSelect={(date: Date | undefined) =>\n                        setBacktestConfig(prev => ({ ...prev, endDate: date || new Date() }))\n                      }\n                      initialFocus\n                    />\n                  </PopoverContent>\n                </Popover>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-gray-200 text-sm font-medium\">Commission</label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.0001\"\n                    value={backtestConfig.commission}\n                    onChange={e =>\n                      setBacktestConfig(prev => ({\n                        ...prev,\n                        commission: Number.parseFloat(e.target.value),\n                      }))\n                    }\n                    className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-gray-200 text-sm font-medium\">Slippage</label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.0001\"\n                    value={backtestConfig.slippage}\n                    onChange={e =>\n                      setBacktestConfig(prev => ({\n                        ...prev,\n                        slippage: Number.parseFloat(e.target.value),\n                      }))\n                    }\n                    className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Risk Management */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-gray-200 font-semibold\">Risk Management</h3>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-gray-200 text-sm font-medium\">Max Position Size (%)</label>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={(backtestConfig.maxPositionSize || 0.1) * 100}\n                  onChange={e =>\n                    setBacktestConfig(prev => ({\n                      ...prev,\n                      maxPositionSize: Number.parseFloat(e.target.value) / 100,\n                    }))\n                  }\n                  className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-gray-200 text-sm font-medium\">Risk Per Trade (%)</label>\n                <Input\n                  type=\"number\"\n                  step=\"0.01\"\n                  value={(backtestConfig.riskPerTrade || 0.02) * 100}\n                  onChange={e =>\n                    setBacktestConfig(prev => ({\n                      ...prev,\n                      riskPerTrade: Number.parseFloat(e.target.value) / 100,\n                    }))\n                  }\n                  className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-gray-200 text-sm font-medium\">Stop Loss (%)</label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={(backtestConfig.stopLoss || 0.02) * 100}\n                    onChange={e =>\n                      setBacktestConfig(prev => ({\n                        ...prev,\n                        stopLoss: Number.parseFloat(e.target.value) / 100,\n                      }))\n                    }\n                    className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-gray-200 text-sm font-medium\">Take Profit (%)</label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={(backtestConfig.takeProfit || 0.05) * 100}\n                    onChange={e =>\n                      setBacktestConfig(prev => ({\n                        ...prev,\n                        takeProfit: Number.parseFloat(e.target.value) / 100,\n                      }))\n                    }\n                    className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                  />\n                </div>\n              </div>\n\n              <Button\n                onClick={runBacktest}\n                disabled={isRunning}\n                className=\"w-full bg-gradient-to-r from-red-600 to-orange-700 hover:from-red-700 hover:to-orange-800\"\n              >\n                <Play className=\"h-4 w-4 mr-2\" />\n                {isRunning ? 'Running Backtest...' : 'Run Backtest'}\n              </Button>\n\n              {isRunning && (\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm text-gray-400\">\n                    <span>Progress</span>\n                    <span>{progress.toFixed(1)}%</span>\n                  </div>\n                  <Progress value={progress} className=\"h-2\" />\n                </div>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Backtest Results */}\n      {backtestResults && (\n        <>\n          {/* Performance Overview */}\n          <Card className=\"bg-gray-900/90 border-green-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100 flex items-center\">\n                <TrendingUp className=\"h-6 w-6 mr-2 text-green-400\" />\n                Backtest Results - {backtestResults.strategy}\n                <Badge className=\"ml-3 bg-gradient-to-r from-green-500 to-emerald-600\">\n                  {backtestResults.period}\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4\">\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-green-500/20\">\n                  <DollarSign className=\"h-6 w-6 text-green-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Total Return</p>\n                  <p className={`text-lg font-bold ${getReturnColor(backtestResults.totalReturn)}`}>\n                    {backtestResults.totalReturn.toFixed(2)}%\n                  </p>\n                </div>\n\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-green-500/20\">\n                  <Target className=\"h-6 w-6 text-blue-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Win Rate</p>\n                  <p className=\"text-lg font-bold text-blue-400\">\n                    {backtestResults.winRate.toFixed(1)}%\n                  </p>\n                </div>\n\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-green-500/20\">\n                  <Activity className=\"h-6 w-6 text-purple-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Sharpe Ratio</p>\n                  <p className=\"text-lg font-bold text-purple-400\">\n                    {backtestResults.sharpeRatio.toFixed(2)}\n                  </p>\n                </div>\n\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-green-500/20\">\n                  <BarChart3 className=\"h-6 w-6 text-red-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Max Drawdown</p>\n                  <p className=\"text-lg font-bold text-red-400\">\n                    {backtestResults.maxDrawdown.toFixed(2)}%\n                  </p>\n                </div>\n\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-green-500/20\">\n                  <DollarSign className=\"h-6 w-6 text-yellow-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Final Capital</p>\n                  <p className=\"text-lg font-bold text-yellow-400\">\n                    ${backtestResults.finalCapital.toLocaleString()}\n                  </p>\n                </div>\n\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-green-500/20\">\n                  <Target className=\"h-6 w-6 text-orange-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Total Trades</p>\n                  <p className=\"text-lg font-bold text-orange-400\">{backtestResults.totalTrades}</p>\n                </div>\n\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-green-500/20\">\n                  <Activity className=\"h-6 w-6 text-indigo-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Profit Factor</p>\n                  <p className=\"text-lg font-bold text-indigo-400\">\n                    {backtestResults.profitFactor.toFixed(2)}\n                  </p>\n                </div>\n\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-green-500/20\">\n                  <Zap className=\"h-6 w-6 text-pink-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Calmar Ratio</p>\n                  <p className=\"text-lg font-bold text-pink-400\">\n                    {backtestResults.calmarRatio.toFixed(2)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Detailed Metrics */}\n          <Card className=\"bg-gray-900/90 border-red-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-gray-100\">Detailed Performance Metrics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {/* Trade Statistics */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-gray-200 font-semibold\">Trade Statistics</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Winning Trades:</span>\n                      <span className=\"text-green-400 font-semibold\">\n                        {backtestResults.winningTrades}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Losing Trades:</span>\n                      <span className=\"text-red-400 font-semibold\">\n                        {backtestResults.losingTrades}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Average Win:</span>\n                      <span className=\"text-green-400 font-semibold\">\n                        {backtestResults.avgWin.toFixed(2)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Average Loss:</span>\n                      <span className=\"text-red-400 font-semibold\">\n                        {backtestResults.avgLoss.toFixed(2)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Largest Win:</span>\n                      <span className=\"text-green-400 font-semibold\">\n                        {backtestResults.largestWin.toFixed(2)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Largest Loss:</span>\n                      <span className=\"text-red-400 font-semibold\">\n                        {backtestResults.largestLoss.toFixed(2)}%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Risk Metrics */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-gray-200 font-semibold\">Risk Metrics</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Sortino Ratio:</span>\n                      <span className=\"text-blue-400 font-semibold\">\n                        {backtestResults.sortinoRatio.toFixed(2)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Volatility:</span>\n                      <span className=\"text-yellow-400 font-semibold\">\n                        {backtestResults.volatility.toFixed(2)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Beta:</span>\n                      <span className=\"text-purple-400 font-semibold\">\n                        {backtestResults.beta.toFixed(2)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Alpha:</span>\n                      <span className={`font-semibold ${getReturnColor(backtestResults.alpha)}`}>\n                        {backtestResults.alpha.toFixed(2)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Consecutive Wins:</span>\n                      <span className=\"text-green-400 font-semibold\">\n                        {backtestResults.consecutiveWins}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Consecutive Losses:</span>\n                      <span className=\"text-red-400 font-semibold\">\n                        {backtestResults.consecutiveLosses}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Trading Metrics */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-gray-200 font-semibold\">Trading Metrics</h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Trading Days:</span>\n                      <span className=\"text-gray-200 font-semibold\">\n                        {backtestResults.tradingDays}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Avg Holding Period:</span>\n                      <span className=\"text-gray-200 font-semibold\">\n                        {backtestResults.avgHoldingPeriod.toFixed(1)} days\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Trades per Month:</span>\n                      <span className=\"text-gray-200 font-semibold\">\n                        {(backtestResults.totalTrades / 12).toFixed(1)}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Initial Capital:</span>\n                      <span className=\"text-gray-200 font-semibold\">\n                        ${backtestResults.initialCapital.toLocaleString()}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Final Capital:</span>\n                      <span\n                        className={`font-semibold ${getReturnColor(backtestResults.totalReturn)}`}\n                      >\n                        ${backtestResults.finalCapital.toLocaleString()}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Net Profit:</span>\n                      <span\n                        className={`font-semibold ${getReturnColor(backtestResults.totalReturn)}`}\n                      >\n                        $\n                        {(\n                          backtestResults.finalCapital - backtestResults.initialCapital\n                        ).toLocaleString()}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/banking/BankingDashboard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setBankAccounts' is assigned a value but never used.",
        "line": 44,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 112,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 112,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2867, 2870], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2867, 2870], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 140,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 140,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3793, 3796], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3793, 3796], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 231,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 231,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7652, 7655], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7652, 7655], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 252,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 252,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8516, 8519], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8516, 8519], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 297,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 297,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10501, 10504], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10501, 10504], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 319,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 319,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11405, 11408], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11405, 11408], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 379,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 379,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13819, 13822], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13819, 13822], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 437,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 437,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16449, 16452], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16449, 16452], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Building2,\n  DollarSign,\n  TrendingUp,\n  ArrowUpRight,\n  ArrowDownLeft,\n  CheckCircle,\n  Clock,\n  AlertCircle,\n  Plus,\n  Trash2,\n} from 'lucide-react';\n\ninterface User {\n  id: string | number;\n  name: string;\n  email: string;\n  balance?: number;\n}\n\ninterface BankingDashboardProps {\n  user: User;\n  onUpdateBalance: (newBalance: number) => void;\n}\n\nexport default function BankingDashboard({ user, onUpdateBalance }: BankingDashboardProps) {\n  const [bankAccounts, setBankAccounts] = useState([\n    {\n      id: 1,\n      bankName: 'Chase Bank',\n      accountType: 'Checking',\n      accountNumber: '****1234',\n      routingNumber: '021000021',\n      verified: true,\n      isDefault: true,\n    },\n    {\n      id: 2,\n      bankName: 'Bank of America',\n      accountType: 'Savings',\n      accountNumber: '****5678',\n      routingNumber: '026009593',\n      verified: false,\n      isDefault: false,\n    },\n  ]);\n\n  const [transactions, setTransactions] = useState([\n    {\n      id: 1,\n      type: 'deposit',\n      amount: 5000,\n      status: 'completed',\n      date: '2024-01-15',\n      description: 'Bank Transfer - Chase',\n    },\n    {\n      id: 2,\n      type: 'withdrawal',\n      amount: 1500,\n      status: 'pending',\n      date: '2024-01-14',\n      description: 'Withdrawal to Chase',\n    },\n    {\n      id: 3,\n      type: 'deposit',\n      amount: 2500,\n      status: 'completed',\n      date: '2024-01-12',\n      description: 'Bank Transfer - Chase',\n    },\n  ]);\n\n  const [depositAmount, setDepositAmount] = useState('');\n  const [withdrawAmount, setWithdrawAmount] = useState('');\n  const [selectedAccount, setSelectedAccount] = useState('1');\n\n  const handleDeposit = () => {\n    if (depositAmount && Number.parseFloat(depositAmount) > 0) {\n      const newTransaction = {\n        id: Date.now(),\n        type: 'deposit',\n        amount: Number.parseFloat(depositAmount),\n        status: 'pending',\n        date: new Date().toISOString().split('T')[0],\n        description: `Deposit from ${bankAccounts.find(acc => acc.id.toString() === selectedAccount)?.bankName}`,\n      };\n      setTransactions([newTransaction, ...transactions]);\n\n      // Simulate instant deposit for demo\n      setTimeout(() => {\n        onUpdateBalance((user.balance || 0) + Number.parseFloat(depositAmount));\n        setTransactions(prev =>\n          prev.map((t: any) => (t.id === newTransaction.id ? { ...t, status: 'completed' } : t))\n        );\n      }, 2000);\n\n      setDepositAmount('');\n    }\n  };\n\n  const handleWithdraw = () => {\n    if (\n      withdrawAmount &&\n      Number.parseFloat(withdrawAmount) > 0 &&\n      Number.parseFloat(withdrawAmount) <= (user.balance || 0)\n    ) {\n      const newTransaction = {\n        id: Date.now(),\n        type: 'withdrawal',\n        amount: Number.parseFloat(withdrawAmount),\n        status: 'pending',\n        date: new Date().toISOString().split('T')[0],\n        description: `Withdrawal to ${bankAccounts.find(acc => acc.id.toString() === selectedAccount)?.bankName}`,\n      };\n      setTransactions([newTransaction, ...transactions]);\n\n      // Simulate withdrawal processing\n      setTimeout(() => {\n        onUpdateBalance((user.balance || 0) - Number.parseFloat(withdrawAmount));\n        setTransactions(prev =>\n          prev.map((t: any) => (t.id === newTransaction.id ? { ...t, status: 'completed' } : t))\n        );\n      }, 2000);\n\n      setWithdrawAmount('');\n    }\n  };\n\n  const buyingPower = (user.balance || 0) * 4; // 4x margin\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Account Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"bg-gradient-to-br from-green-500/10 to-emerald-500/10 border-green-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Account Balance</p>\n                <p className=\"text-3xl font-bold text-green-400\">\n                  ${(user.balance || 0).toLocaleString()}\n                </p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-blue-500/10 to-cyan-500/10 border-blue-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Buying Power</p>\n                <p className=\"text-3xl font-bold text-blue-400\">${buyingPower.toLocaleString()}</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-blue-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-purple-500/10 to-pink-500/10 border-purple-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Available to Withdraw</p>\n                <p className=\"text-3xl font-bold text-purple-400\">\n                  ${(user.balance || 0).toLocaleString()}\n                </p>\n              </div>\n              <ArrowDownLeft className=\"h-8 w-8 text-purple-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"transfer\" className=\"space-y-6\">\n        <TabsList className=\"bg-black/20 border-purple-500/30\">\n          <TabsTrigger value=\"transfer\" className=\"data-[state=active]:bg-purple-500/20\">\n            <ArrowUpRight className=\"h-4 w-4 mr-2\" />\n            Transfer Money\n          </TabsTrigger>\n          <TabsTrigger value=\"accounts\" className=\"data-[state=active]:bg-purple-500/20\">\n            <Building2 className=\"h-4 w-4 mr-2\" />\n            Bank Accounts\n          </TabsTrigger>\n          <TabsTrigger value=\"history\" className=\"data-[state=active]:bg-purple-500/20\">\n            <Clock className=\"h-4 w-4 mr-2\" />\n            Transaction History\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"transfer\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Deposit */}\n            <Card className=\"bg-black/20 border-green-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <ArrowUpRight className=\"h-5 w-5 mr-2 text-green-400\" />\n                  Deposit Money\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-white\">From Bank Account</Label>\n                  <Select value={selectedAccount} onValueChange={setSelectedAccount}>\n                    <SelectTrigger className=\"bg-black/20 border-purple-500/30 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {bankAccounts\n                        .filter(acc => acc.verified)\n                        .map((account: any) => (\n                          <SelectItem key={account.id} value={account.id.toString()}>\n                            {account.bankName} - {account.accountNumber}\n                          </SelectItem>\n                        ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label className=\"text-white\">Amount</Label>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"0.00\"\n                    value={depositAmount}\n                    onChange={e => setDepositAmount(e.target.value)}\n                    className=\"bg-black/20 border-purple-500/30 text-white\"\n                  />\n                </div>\n\n                <div className=\"flex gap-2\">\n                  {[500, 1000, 2500, 5000].map((amount: any) => (\n                    <Button\n                      key={amount}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setDepositAmount(amount.toString())}\n                      className=\"border-green-500/30 text-green-400 hover:bg-green-500/20\"\n                    >\n                      ${amount}\n                    </Button>\n                  ))}\n                </div>\n\n                <Button\n                  onClick={handleDeposit}\n                  disabled={!depositAmount || Number.parseFloat(depositAmount) <= 0}\n                  className=\"w-full bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700\"\n                >\n                  Deposit ${depositAmount || '0.00'}\n                </Button>\n\n                <p className=\"text-xs text-gray-400\">\n                  Instant deposits available. Funds will be available immediately for trading.\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Withdraw */}\n            <Card className=\"bg-black/20 border-red-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <ArrowDownLeft className=\"h-5 w-5 mr-2 text-red-400\" />\n                  Withdraw Money\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-white\">To Bank Account</Label>\n                  <Select value={selectedAccount} onValueChange={setSelectedAccount}>\n                    <SelectTrigger className=\"bg-black/20 border-purple-500/30 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {bankAccounts\n                        .filter(acc => acc.verified)\n                        .map((account: any) => (\n                          <SelectItem key={account.id} value={account.id.toString()}>\n                            {account.bankName} - {account.accountNumber}\n                          </SelectItem>\n                        ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label className=\"text-white\">Amount</Label>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"0.00\"\n                    value={withdrawAmount}\n                    onChange={e => setWithdrawAmount(e.target.value)}\n                    className=\"bg-black/20 border-purple-500/30 text-white\"\n                    max={user.balance || 0}\n                  />\n                </div>\n\n                <div className=\"flex gap-2\">\n                  {[500, 1000, 2500].map((amount: any) => (\n                    <Button\n                      key={amount}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() =>\n                        setWithdrawAmount(Math.min(amount, user.balance || 0).toString())\n                      }\n                      className=\"border-red-500/30 text-red-400 hover:bg-red-500/20\"\n                      disabled={amount > (user.balance || 0)}\n                    >\n                      ${amount}\n                    </Button>\n                  ))}\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setWithdrawAmount((user.balance || 0).toString())}\n                    className=\"border-red-500/30 text-red-400 hover:bg-red-500/20\"\n                  >\n                    All\n                  </Button>\n                </div>\n\n                <Button\n                  onClick={handleWithdraw}\n                  disabled={\n                    !withdrawAmount ||\n                    Number.parseFloat(withdrawAmount) <= 0 ||\n                    Number.parseFloat(withdrawAmount) > (user.balance || 0)\n                  }\n                  className=\"w-full bg-gradient-to-r from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700\"\n                >\n                  Withdraw ${withdrawAmount || '0.00'}\n                </Button>\n\n                <p className=\"text-xs text-gray-400\">\n                  Withdrawals typically take 1-3 business days to process.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"accounts\">\n          <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center justify-between\">\n                <span className=\"flex items-center\">\n                  <Building2 className=\"h-5 w-5 mr-2\" />\n                  Connected Bank Accounts\n                </span>\n                <Button className=\"bg-gradient-to-r from-purple-500 to-pink-500\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Account\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {bankAccounts.map((account: any) => (\n                  <div\n                    key={account.id}\n                    className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg border border-gray-700/30\"\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"p-3 bg-blue-500/20 rounded-full\">\n                        <Building2 className=\"h-6 w-6 text-blue-400\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-white\">{account.bankName}</p>\n                        <p className=\"text-sm text-gray-400\">\n                          {account.accountType} - {account.accountNumber}\n                        </p>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          {account.verified ? (\n                            <Badge className=\"bg-green-500/20 text-green-400 border-green-500/30\">\n                              <CheckCircle className=\"h-3 w-3 mr-1\" />\n                              Verified\n                            </Badge>\n                          ) : (\n                            <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/30\">\n                              <Clock className=\"h-3 w-3 mr-1\" />\n                              Pending\n                            </Badge>\n                          )}\n                          {account.isDefault && (\n                            <Badge className=\"bg-purple-500/20 text-purple-400 border-purple-500/30\">\n                              Default\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"border-red-500/30 text-red-400 hover:bg-red-500/20\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"history\">\n          <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center\">\n                <Clock className=\"h-5 w-5 mr-2\" />\n                Transaction History\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {transactions.map((transaction: any) => (\n                  <div\n                    key={transaction.id}\n                    className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg border border-gray-700/30\"\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div\n                        className={`p-3 rounded-full ${\n                          transaction.type === 'deposit' ? 'bg-green-500/20' : 'bg-red-500/20'\n                        }`}\n                      >\n                        {transaction.type === 'deposit' ? (\n                          <ArrowUpRight className=\"h-5 w-5 text-green-400\" />\n                        ) : (\n                          <ArrowDownLeft className=\"h-5 w-5 text-red-400\" />\n                        )}\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-white\">{transaction.description}</p>\n                        <p className=\"text-sm text-gray-400\">{transaction.date}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p\n                        className={`font-medium ${transaction.type === 'deposit' ? 'text-green-400' : 'text-red-400'}`}\n                      >\n                        {transaction.type === 'deposit' ? '+' : '-'}$\n                        {transaction.amount.toLocaleString()}\n                      </p>\n                      <Badge\n                        className={\n                          transaction.status === 'completed'\n                            ? 'bg-green-500/20 text-green-400 border-green-500/30'\n                            : transaction.status === 'pending'\n                              ? 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30'\n                              : 'bg-red-500/20 text-red-400 border-red-500/30'\n                        }\n                      >\n                        {transaction.status === 'completed' && (\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                        )}\n                        {transaction.status === 'pending' && <Clock className=\"h-3 w-3 mr-1\" />}\n                        {transaction.status === 'failed' && (\n                          <AlertCircle className=\"h-3 w-3 mr-1\" />\n                        )}\n                        {transaction.status.charAt(0).toUpperCase() + transaction.status.slice(1)}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/banking/MoneyMarketAccount.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'user' is defined but never used.",
        "line": 36,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1176, 1179], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1176, 1179], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 148,
        "column": 57,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": { "range": [5219, 5235], "text": "Today&apos;s Interest" },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": { "range": [5219, 5235], "text": "Today&lsquo;s Interest" },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": { "range": [5219, 5235], "text": "Today&#39;s Interest" },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": { "range": [5219, 5235], "text": "Today&rsquo;s Interest" },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 195,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 195,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7660, 7663], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7660, 7663], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 256,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 256,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10229, 10232], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10229, 10232], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 357,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 357,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14752, 14755], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14752, 14755], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  DollarSign,\n  TrendingUp,\n  Wallet,\n  ArrowUpRight,\n  ArrowDownLeft,\n  Star,\n  Crown,\n  Zap,\n  Target,\n  Activity,\n} from 'lucide-react';\n\ninterface User {\n  id: string | number;\n  name: string;\n  email: string;\n}\n\ninterface MoneyMarketAccountProps {\n  user: User;\n  balance: number;\n  onUpdateBalance: (newBalance: number) => void;\n}\n\nexport default function MoneyMarketAccount({\n  user,\n  balance,\n  onUpdateBalance,\n}: MoneyMarketAccountProps) {\n  const [moneyMarketBalance, setMoneyMarketBalance] = useState(25000);\n  const [dailyInterest, setDailyInterest] = useState(0);\n  const [totalInterestEarned, setTotalInterestEarned] = useState(1250.75);\n  const [depositAmount, setDepositAmount] = useState('');\n  const [withdrawAmount, setWithdrawAmount] = useState('');\n  const [interestHistory, setInterestHistory] = useState<any[]>([]);\n  const [compoundingEffect, setCompoundingEffect] = useState(0);\n\n  const annualRate = 1.5; // 1.5% APY\n  const dailyRate = annualRate / 365 / 100;\n\n  useEffect(() => {\n    // Calculate interest every 10 seconds for demo (represents daily in real time)\n    const interestInterval = setInterval(() => {\n      if (moneyMarketBalance > 0) {\n        const interest = moneyMarketBalance * dailyRate * (10 / 86400); // 10 seconds worth\n        const newInterest = interest;\n\n        setMoneyMarketBalance(prev => prev + newInterest);\n        setDailyInterest(prev => prev + newInterest);\n        setTotalInterestEarned(prev => prev + newInterest);\n        setCompoundingEffect(prev => prev + newInterest * 0.1); // Compounding bonus\n\n        // Add to interest history\n        setInterestHistory(prev => [\n          {\n            id: Date.now(),\n            amount: newInterest,\n            balance: moneyMarketBalance + newInterest,\n            timestamp: new Date(),\n            type: 'interest',\n          },\n          ...prev.slice(0, 19), // Keep last 20 entries\n        ]);\n      }\n    }, 10000); // Every 10 seconds\n\n    return () => clearInterval(interestInterval);\n  }, [moneyMarketBalance, dailyRate]);\n\n  const handleDeposit = () => {\n    const amount = Number.parseFloat(depositAmount);\n    if (amount > 0 && amount <= balance) {\n      setMoneyMarketBalance(prev => prev + amount);\n      onUpdateBalance(balance - amount);\n      setInterestHistory(prev => [\n        {\n          id: Date.now(),\n          amount: amount,\n          balance: moneyMarketBalance + amount,\n          timestamp: new Date(),\n          type: 'deposit',\n        },\n        ...prev.slice(0, 19),\n      ]);\n      setDepositAmount('');\n    }\n  };\n\n  const handleWithdraw = () => {\n    const amount = Number.parseFloat(withdrawAmount);\n    if (amount > 0 && amount <= moneyMarketBalance) {\n      setMoneyMarketBalance(prev => prev - amount);\n      onUpdateBalance(balance + amount);\n      setInterestHistory(prev => [\n        {\n          id: Date.now(),\n          amount: -amount,\n          balance: moneyMarketBalance - amount,\n          timestamp: new Date(),\n          type: 'withdrawal',\n        },\n        ...prev.slice(0, 19),\n      ]);\n      setWithdrawAmount('');\n    }\n  };\n\n  const projectedYearlyEarnings = moneyMarketBalance * (annualRate / 100);\n  const projectedMonthlyEarnings = projectedYearlyEarnings / 12;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Money Market Overview */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-2 border-green-400/50 backdrop-blur-xl shadow-2xl shadow-green-500/25\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <DollarSign className=\"h-8 w-8 mr-3 text-green-400 animate-pulse\" />\n            💰 HIGH-YIELD MONEY MARKET ACCOUNT\n            <Badge className=\"ml-4 bg-gradient-to-r from-green-400 to-emerald-500 text-black animate-pulse\">\n              <Star className=\"h-4 w-4 mr-1\" />\n              1.5% APY\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center p-6 bg-gradient-to-r from-green-400/20 to-emerald-500/20 rounded-xl border-2 border-green-400/30 shadow-lg shadow-green-500/25\">\n              <Wallet className=\"h-10 w-10 text-green-400 mx-auto mb-3\" />\n              <p className=\"text-sm text-gray-400\">Current Balance</p>\n              <p className=\"text-3xl font-bold text-green-400\">\n                ${moneyMarketBalance.toLocaleString()}\n              </p>\n              <p className=\"text-xs text-emerald-400 mt-1\">FDIC Insured</p>\n            </div>\n\n            <div className=\"text-center p-6 bg-gradient-to-r from-blue-400/20 to-cyan-500/20 rounded-xl border-2 border-blue-400/30 shadow-lg shadow-blue-500/25\">\n              <TrendingUp className=\"h-10 w-10 text-blue-400 mx-auto mb-3\" />\n              <p className=\"text-sm text-gray-400\">Today's Interest</p>\n              <p className=\"text-3xl font-bold text-blue-400\">${dailyInterest.toFixed(4)}</p>\n              <p className=\"text-xs text-cyan-400 mt-1\">Auto-Compounded</p>\n            </div>\n\n            <div className=\"text-center p-6 bg-gradient-to-r from-purple-400/20 to-pink-500/20 rounded-xl border-2 border-purple-400/30 shadow-lg shadow-purple-500/25\">\n              <Crown className=\"h-10 w-10 text-purple-400 mx-auto mb-3\" />\n              <p className=\"text-sm text-gray-400\">Total Interest Earned</p>\n              <p className=\"text-3xl font-bold text-purple-400\">\n                ${totalInterestEarned.toFixed(2)}\n              </p>\n              <p className=\"text-xs text-pink-400 mt-1\">Lifetime Earnings</p>\n            </div>\n\n            <div className=\"text-center p-6 bg-gradient-to-r from-yellow-400/20 to-orange-500/20 rounded-xl border-2 border-yellow-400/30 shadow-lg shadow-yellow-500/25\">\n              <Zap className=\"h-10 w-10 text-yellow-400 mx-auto mb-3\" />\n              <p className=\"text-sm text-gray-400\">Compounding Bonus</p>\n              <p className=\"text-3xl font-bold text-yellow-400\">${compoundingEffect.toFixed(2)}</p>\n              <p className=\"text-xs text-orange-400 mt-1\">Extra Earnings</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Deposit/Withdraw */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        <Card className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 border-2 border-green-400/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <ArrowUpRight className=\"h-6 w-6 mr-2 text-green-400\" />\n              💸 Deposit Funds\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-white text-sm font-medium\">Amount to Deposit</label>\n              <Input\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={depositAmount}\n                onChange={e => setDepositAmount(e.target.value)}\n                className=\"bg-black/20 border-green-500/30 text-white mt-1\"\n              />\n              <p className=\"text-xs text-gray-400 mt-1\">Available: ${balance.toLocaleString()}</p>\n            </div>\n\n            <div className=\"flex gap-2\">\n              {[1000, 5000, 10000, 25000].map((amount: any) => (\n                <Button\n                  key={amount}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setDepositAmount(Math.min(amount, balance).toString())}\n                  className=\"border-green-500/30 text-green-400 hover:bg-green-500/20\"\n                  disabled={amount > balance}\n                >\n                  ${amount.toLocaleString()}\n                </Button>\n              ))}\n            </div>\n\n            <Button\n              onClick={handleDeposit}\n              disabled={\n                !depositAmount ||\n                Number.parseFloat(depositAmount) <= 0 ||\n                Number.parseFloat(depositAmount) > balance\n              }\n              className=\"w-full bg-gradient-to-r from-green-400 to-emerald-500 hover:from-green-500 hover:to-emerald-600 text-black font-bold\"\n            >\n              <ArrowUpRight className=\"h-4 w-4 mr-2\" />\n              Deposit ${depositAmount || '0.00'}\n            </Button>\n\n            <div className=\"p-3 bg-green-500/10 rounded-lg border border-green-500/30\">\n              <p className=\"text-green-400 text-sm font-semibold\">💡 Earning Potential</p>\n              <p className=\"text-xs text-gray-300\">\n                ${depositAmount || '0'} would earn ~$\n                {((Number.parseFloat(depositAmount) || 0) * (annualRate / 100)).toFixed(2)} per year\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-blue-500/10 to-cyan-500/10 border-2 border-blue-400/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center\">\n              <ArrowDownLeft className=\"h-6 w-6 mr-2 text-blue-400\" />\n              💳 Withdraw Funds\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <label className=\"text-white text-sm font-medium\">Amount to Withdraw</label>\n              <Input\n                type=\"number\"\n                placeholder=\"0.00\"\n                value={withdrawAmount}\n                onChange={e => setWithdrawAmount(e.target.value)}\n                className=\"bg-black/20 border-blue-500/30 text-white mt-1\"\n                max={moneyMarketBalance}\n              />\n              <p className=\"text-xs text-gray-400 mt-1\">\n                Available: ${moneyMarketBalance.toLocaleString()}\n              </p>\n            </div>\n\n            <div className=\"flex gap-2\">\n              {[1000, 5000, 10000].map((amount: any) => (\n                <Button\n                  key={amount}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setWithdrawAmount(Math.min(amount, moneyMarketBalance).toString())}\n                  className=\"border-blue-500/30 text-blue-400 hover:bg-blue-500/20\"\n                  disabled={amount > moneyMarketBalance}\n                >\n                  ${amount.toLocaleString()}\n                </Button>\n              ))}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setWithdrawAmount(moneyMarketBalance.toString())}\n                className=\"border-blue-500/30 text-blue-400 hover:bg-blue-500/20\"\n              >\n                All\n              </Button>\n            </div>\n\n            <Button\n              onClick={handleWithdraw}\n              disabled={\n                !withdrawAmount ||\n                Number.parseFloat(withdrawAmount) <= 0 ||\n                Number.parseFloat(withdrawAmount) > moneyMarketBalance\n              }\n              className=\"w-full bg-gradient-to-r from-blue-400 to-cyan-500 hover:from-blue-500 hover:to-cyan-600 text-black font-bold\"\n            >\n              <ArrowDownLeft className=\"h-4 w-4 mr-2\" />\n              Withdraw ${withdrawAmount || '0.00'}\n            </Button>\n\n            <div className=\"p-3 bg-blue-500/10 rounded-lg border border-blue-500/30\">\n              <p className=\"text-blue-400 text-sm font-semibold\">⚡ Instant Access</p>\n              <p className=\"text-xs text-gray-300\">\n                No penalties • Same-day transfers • Keep earning until withdrawal\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Projections */}\n      <Card className=\"bg-gradient-to-r from-purple-500/10 to-pink-500/10 border-2 border-purple-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Target className=\"h-6 w-6 mr-2 text-purple-400\" />\n            📈 Earnings Projections\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center p-4 bg-purple-500/10 rounded-lg border border-purple-500/30\">\n              <p className=\"text-purple-400 font-semibold\">Monthly Earnings</p>\n              <p className=\"text-2xl font-bold text-white\">\n                ${projectedMonthlyEarnings.toFixed(2)}\n              </p>\n              <Progress value={30} className=\"h-2 mt-2\" />\n              <p className=\"text-xs text-gray-400 mt-1\">Based on current balance</p>\n            </div>\n\n            <div className=\"text-center p-4 bg-pink-500/10 rounded-lg border border-pink-500/30\">\n              <p className=\"text-pink-400 font-semibold\">Yearly Earnings</p>\n              <p className=\"text-2xl font-bold text-white\">${projectedYearlyEarnings.toFixed(2)}</p>\n              <Progress value={75} className=\"h-2 mt-2\" />\n              <p className=\"text-xs text-gray-400 mt-1\">1.5% APY guaranteed</p>\n            </div>\n\n            <div className=\"text-center p-4 bg-cyan-500/10 rounded-lg border border-cyan-500/30\">\n              <p className=\"text-cyan-400 font-semibold\">5-Year Growth</p>\n              <p className=\"text-2xl font-bold text-white\">\n                ${(moneyMarketBalance * Math.pow(1.015, 5)).toFixed(2)}\n              </p>\n              <Progress value={90} className=\"h-2 mt-2\" />\n              <p className=\"text-xs text-gray-400 mt-1\">With compound interest</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Transaction History */}\n      <Card className=\"bg-gradient-to-r from-gray-900/90 to-black/90 border-2 border-cyan-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Activity className=\"h-6 w-6 mr-2 text-cyan-400\" />\n            📊 Recent Activity\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {interestHistory.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Activity className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-400\">\n                No transactions yet. Start earning interest by depositing funds!\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {interestHistory.map((transaction: any) => (\n                <div\n                  key={transaction.id}\n                  className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded border border-gray-700/30\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div\n                      className={`p-2 rounded-full ${\n                        transaction.type === 'interest'\n                          ? 'bg-green-500/20'\n                          : transaction.type === 'deposit'\n                            ? 'bg-blue-500/20'\n                            : 'bg-red-500/20'\n                      }`}\n                    >\n                      {transaction.type === 'interest' && (\n                        <TrendingUp className=\"h-4 w-4 text-green-400\" />\n                      )}\n                      {transaction.type === 'deposit' && (\n                        <ArrowUpRight className=\"h-4 w-4 text-blue-400\" />\n                      )}\n                      {transaction.type === 'withdrawal' && (\n                        <ArrowDownLeft className=\"h-4 w-4 text-red-400\" />\n                      )}\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-white capitalize\">{transaction.type}</p>\n                      <p className=\"text-sm text-gray-400\">\n                        {transaction.timestamp.toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p\n                      className={`font-medium ${transaction.amount >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                    >\n                      {transaction.amount >= 0 ? '+' : ''}${Math.abs(transaction.amount).toFixed(4)}\n                    </p>\n                    <p className=\"text-sm text-gray-400\">\n                      Balance: ${transaction.balance.toLocaleString()}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/blockchain/DeFiIntegration.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 6,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 7,
        "endColumn": 1,
        "fix": { "range": [142, 143], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setTokenizedAssets' is assigned a value but never used.",
        "line": 97,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 97,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 163,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 163,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4230, 4233], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4230, 4233], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 181,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 181,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4788, 4791], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4788, 4791], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Wallet,\n  ArrowRightLeft,\n  BarChart3,\n  Lock,\n  Globe,\n  Layers,\n  Coins,\n  Landmark,\n  Shield,\n  Key,\n  Zap,\n  RefreshCw,\n  Boxes,\n} from 'lucide-react';\n\nexport default function DeFiIntegration() {\n  const [blockchainData, setBlockchainData] = useState({\n    walletBalance: {\n      BTC: 1.24 + Math.random() * 0.5,\n      ETH: 15.78 + Math.random() * 3,\n      SOL: 245.32 + Math.random() * 20,\n      USDC: 25000 + Math.random() * 5000,\n      USDT: 15000 + Math.random() * 3000,\n    },\n    marketPrices: {\n      BTC: 65000 + Math.random() * 5000,\n      ETH: 3500 + Math.random() * 300,\n      SOL: 150 + Math.random() * 30,\n      USDC: 1,\n      USDT: 1,\n    },\n    defiStats: {\n      totalValueLocked: 2500000 + Math.random() * 500000,\n      totalYield: 12.5 + Math.random() * 3,\n      averageAPY: 8.7 + Math.random() * 2,\n      totalTransactions: 15789 + Math.floor(Math.random() * 1000),\n      gasOptimization: 87 + Math.random() * 10,\n    },\n    smartContractMetrics: {\n      totalDeployed: 47,\n      audited: 47,\n      securityScore: 98 + Math.random() * 2,\n      gasEfficiency: 94 + Math.random() * 5,\n      averageExecutionTime: 1.2 + Math.random() * 0.5,\n    },\n  });\n\n  const [defiProtocols, setDefiProtocols] = useState([\n    {\n      name: 'Alpha Yield Optimizer',\n      type: 'Yield Farming',\n      apy: 12.4 + Math.random() * 5,\n      tvl: '$47.8M',\n      risk: 'Low',\n      chain: 'Ethereum',\n      status: 'Active',\n    },\n    {\n      name: 'Alpha Liquidity Protocol',\n      type: 'AMM',\n      apy: 18.7 + Math.random() * 8,\n      tvl: '$124.5M',\n      risk: 'Medium',\n      chain: 'Multichain',\n      status: 'Active',\n    },\n    {\n      name: 'Alpha Lending Market',\n      type: 'Lending',\n      apy: 8.9 + Math.random() * 3,\n      tvl: '$215.2M',\n      risk: 'Low',\n      chain: 'Solana',\n      status: 'Active',\n    },\n    {\n      name: 'Alpha Perpetual DEX',\n      type: 'Derivatives',\n      apy: 22.5 + Math.random() * 10,\n      tvl: '$78.3M',\n      risk: 'High',\n      chain: 'Arbitrum',\n      status: 'Active',\n    },\n  ]);\n\n  const [tokenizedAssets, setTokenizedAssets] = useState([\n    {\n      name: 'Alpha Real Estate Fund',\n      type: 'Real Estate',\n      tokens: 'AREF',\n      marketCap: '$147.8M',\n      holders: '12,478',\n      returns: '14.7%',\n      status: 'Trading',\n    },\n    {\n      name: 'Alpha Commodity Index',\n      type: 'Commodities',\n      tokens: 'ACIX',\n      marketCap: '$89.5M',\n      holders: '8,932',\n      returns: '21.3%',\n      status: 'Trading',\n    },\n    {\n      name: 'Alpha Private Equity',\n      type: 'Private Equity',\n      tokens: 'APEX',\n      marketCap: '$215.2M',\n      holders: '5,478',\n      returns: '32.8%',\n      status: 'Trading',\n    },\n    {\n      name: 'Alpha Art Collection',\n      type: 'NFT Art',\n      tokens: 'AART',\n      marketCap: '$24.7M',\n      holders: '3,245',\n      returns: '47.5%',\n      status: 'Trading',\n    },\n  ]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateBlockchainData();\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateBlockchainData = () => {\n    setBlockchainData(prev => ({\n      ...prev,\n      marketPrices: {\n        BTC: prev.marketPrices.BTC * (1 + (Math.random() - 0.5) * 0.01),\n        ETH: prev.marketPrices.ETH * (1 + (Math.random() - 0.5) * 0.015),\n        SOL: prev.marketPrices.SOL * (1 + (Math.random() - 0.5) * 0.02),\n        USDC: 1 + (Math.random() - 0.5) * 0.001,\n        USDT: 1 + (Math.random() - 0.5) * 0.001,\n      },\n      defiStats: {\n        ...prev.defiStats,\n        totalValueLocked: prev.defiStats.totalValueLocked * (1 + (Math.random() - 0.3) * 0.005),\n        totalYield: prev.defiStats.totalYield * (1 + (Math.random() - 0.5) * 0.01),\n        totalTransactions: prev.defiStats.totalTransactions + Math.floor(Math.random() * 10),\n      },\n    }));\n\n    setDefiProtocols(prev =>\n      prev.map((protocol: any) => ({\n        ...protocol,\n        apy: protocol.apy * (1 + (Math.random() - 0.5) * 0.02),\n      }))\n    );\n  };\n\n  const calculateTotalPortfolioValue = () => {\n    const { walletBalance, marketPrices } = blockchainData;\n    let total = 0;\n    total += walletBalance.BTC * marketPrices.BTC;\n    total += walletBalance.ETH * marketPrices.ETH;\n    total += walletBalance.SOL * marketPrices.SOL;\n    total += walletBalance.USDC * marketPrices.USDC;\n    total += walletBalance.USDT * marketPrices.USDT;\n    return total;\n  };\n\n  const getRiskColor = (risk: any) => {\n    switch (risk.toLowerCase()) {\n      case 'low':\n        return 'bg-green-500';\n      case 'medium':\n        return 'bg-yellow-500';\n      case 'high':\n        return 'bg-red-500';\n      default:\n        return 'bg-blue-500';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Blockchain Integration Dashboard */}\n      <Card className=\"bg-gradient-to-r from-indigo-900/20 to-purple-900/20 border-indigo-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Boxes className=\"h-7 w-7 mr-3 text-indigo-400\" />\n            ⛓️ Blockchain & DeFi Integration\n            <Badge className=\"ml-3 bg-gradient-to-r from-indigo-400 to-purple-500\">\n              <Layers className=\"h-4 w-4 mr-1\" />\n              MULTICHAIN\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-indigo-500/10 to-purple-500/10 rounded-lg border border-indigo-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Wallet className=\"h-8 w-8 text-indigo-400\" />\n                <Badge className=\"bg-indigo-500\">PORTFOLIO</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                $\n                {calculateTotalPortfolioValue().toLocaleString(undefined, {\n                  maximumFractionDigits: 0,\n                })}\n              </div>\n              <p className=\"text-indigo-400 font-semibold\">Crypto Portfolio Value</p>\n              <p className=\"text-gray-400 text-sm\">Across 5 cryptocurrencies</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <ArrowRightLeft className=\"h-8 w-8 text-purple-400\" />\n                <Badge className=\"bg-purple-500\">TRANSACTIONS</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {blockchainData.defiStats.totalTransactions.toLocaleString()}\n              </div>\n              <p className=\"text-purple-400 font-semibold\">Total Transactions</p>\n              <p className=\"text-gray-400 text-sm\">Secure & verified on-chain</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <BarChart3 className=\"h-8 w-8 text-blue-400\" />\n                <Badge className=\"bg-blue-500\">YIELD</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {blockchainData.defiStats.totalYield.toFixed(2)}%\n              </div>\n              <p className=\"text-blue-400 font-semibold\">Average DeFi Yield</p>\n              <p className=\"text-gray-400 text-sm\">Across all protocols</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Lock className=\"h-8 w-8 text-green-400\" />\n                <Badge className=\"bg-green-500\">SECURITY</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {blockchainData.smartContractMetrics.securityScore.toFixed(1)}%\n              </div>\n              <p className=\"text-green-400 font-semibold\">Security Score</p>\n              <p className=\"text-gray-400 text-sm\">Audited by CertiK & OpenZeppelin</p>\n            </div>\n          </div>\n\n          {/* Crypto Wallet */}\n          <div className=\"mt-8 p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-white font-bold text-xl flex items-center\">\n                <Wallet className=\"h-5 w-5 mr-2 text-indigo-400\" />\n                Integrated Crypto Wallet\n              </h3>\n              <Button className=\"bg-gradient-to-r from-indigo-500 to-purple-500 text-white\">\n                <ArrowRightLeft className=\"h-4 w-4 mr-2\" />\n                Swap Assets\n              </Button>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-5 text-sm font-medium text-gray-400 pb-2 border-b border-gray-700/50\">\n                <div>Asset</div>\n                <div>Balance</div>\n                <div>Price</div>\n                <div>Value</div>\n                <div>24h Change</div>\n              </div>\n\n              <div className=\"grid grid-cols-5 items-center py-3 border-b border-gray-800/50\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-orange-400 to-yellow-500 flex items-center justify-center mr-3 text-black font-bold\">\n                    ₿\n                  </div>\n                  <span className=\"text-white font-medium\">Bitcoin</span>\n                </div>\n                <div className=\"text-white\">{blockchainData.walletBalance.BTC.toFixed(4)} BTC</div>\n                <div className=\"text-white\">\n                  $\n                  {blockchainData.marketPrices.BTC.toLocaleString(undefined, {\n                    maximumFractionDigits: 0,\n                  })}\n                </div>\n                <div className=\"text-white\">\n                  $\n                  {(\n                    blockchainData.walletBalance.BTC * blockchainData.marketPrices.BTC\n                  ).toLocaleString(undefined, {\n                    maximumFractionDigits: 0,\n                  })}\n                </div>\n                <div className=\"text-green-400\">+2.4%</div>\n              </div>\n\n              <div className=\"grid grid-cols-5 items-center py-3 border-b border-gray-800/50\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-indigo-400 to-purple-500 flex items-center justify-center mr-3 text-white font-bold\">\n                    Ξ\n                  </div>\n                  <span className=\"text-white font-medium\">Ethereum</span>\n                </div>\n                <div className=\"text-white\">{blockchainData.walletBalance.ETH.toFixed(4)} ETH</div>\n                <div className=\"text-white\">\n                  $\n                  {blockchainData.marketPrices.ETH.toLocaleString(undefined, {\n                    maximumFractionDigits: 0,\n                  })}\n                </div>\n                <div className=\"text-white\">\n                  $\n                  {(\n                    blockchainData.walletBalance.ETH * blockchainData.marketPrices.ETH\n                  ).toLocaleString(undefined, {\n                    maximumFractionDigits: 0,\n                  })}\n                </div>\n                <div className=\"text-green-400\">+3.7%</div>\n              </div>\n\n              <div className=\"grid grid-cols-5 items-center py-3 border-b border-gray-800/50\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-purple-400 to-pink-500 flex items-center justify-center mr-3 text-white font-bold\">\n                    S\n                  </div>\n                  <span className=\"text-white font-medium\">Solana</span>\n                </div>\n                <div className=\"text-white\">{blockchainData.walletBalance.SOL.toFixed(2)} SOL</div>\n                <div className=\"text-white\">\n                  $\n                  {blockchainData.marketPrices.SOL.toLocaleString(undefined, {\n                    maximumFractionDigits: 2,\n                  })}\n                </div>\n                <div className=\"text-white\">\n                  $\n                  {(\n                    blockchainData.walletBalance.SOL * blockchainData.marketPrices.SOL\n                  ).toLocaleString(undefined, {\n                    maximumFractionDigits: 0,\n                  })}\n                </div>\n                <div className=\"text-green-400\">+5.2%</div>\n              </div>\n\n              <div className=\"grid grid-cols-5 items-center py-3 border-b border-gray-800/50\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-blue-400 to-cyan-500 flex items-center justify-center mr-3 text-white font-bold\">\n                    U\n                  </div>\n                  <span className=\"text-white font-medium\">USDC</span>\n                </div>\n                <div className=\"text-white\">\n                  {blockchainData.walletBalance.USDC.toLocaleString()} USDC\n                </div>\n                <div className=\"text-white\">$1.00</div>\n                <div className=\"text-white\">\n                  ${blockchainData.walletBalance.USDC.toLocaleString()}\n                </div>\n                <div className=\"text-gray-400\">0.0%</div>\n              </div>\n\n              <div className=\"grid grid-cols-5 items-center py-3\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-green-400 to-teal-500 flex items-center justify-center mr-3 text-white font-bold\">\n                    T\n                  </div>\n                  <span className=\"text-white font-medium\">USDT</span>\n                </div>\n                <div className=\"text-white\">\n                  {blockchainData.walletBalance.USDT.toLocaleString()} USDT\n                </div>\n                <div className=\"text-white\">$1.00</div>\n                <div className=\"text-white\">\n                  ${blockchainData.walletBalance.USDT.toLocaleString()}\n                </div>\n                <div className=\"text-gray-400\">0.0%</div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* DeFi Protocols & Tokenized Assets */}\n      <Card className=\"bg-gradient-to-r from-purple-900/20 to-pink-900/20 border-purple-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Coins className=\"h-7 w-7 mr-3 text-purple-400\" />\n            💰 DeFi Protocols & Tokenized Assets\n            <Badge className=\"ml-3 bg-gradient-to-r from-purple-400 to-pink-500\">\n              <Landmark className=\"h-4 w-4 mr-1\" />\n              INSTITUTIONAL GRADE\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"protocols\" className=\"space-y-6\">\n            <TabsList className=\"bg-black/20 border-purple-400/30\">\n              <TabsTrigger value=\"protocols\">DeFi Protocols</TabsTrigger>\n              <TabsTrigger value=\"tokenized\">Tokenized Assets</TabsTrigger>\n              <TabsTrigger value=\"stats\">DeFi Analytics</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"protocols\">\n              <div className=\"space-y-4\">\n                {defiProtocols.map((protocol, index) => (\n                  <div\n                    key={index}\n                    className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-white font-bold text-lg\">{protocol.name}</h3>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge variant=\"outline\" className=\"border-purple-400/30 text-purple-400\">\n                            {protocol.type}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"border-blue-400/30 text-blue-400\">\n                            {protocol.chain}\n                          </Badge>\n                          <Badge className={getRiskColor(protocol.risk)}>\n                            {protocol.risk} Risk\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-green-400\">\n                          {protocol.apy.toFixed(2)}% APY\n                        </div>\n                        <p className=\"text-gray-400 text-sm\">TVL: {protocol.tvl}</p>\n                      </div>\n                    </div>\n                    <div className=\"mt-4 flex justify-between\">\n                      <Button className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white\">\n                        Deposit Assets\n                      </Button>\n                      <Button variant=\"outline\" className=\"border-purple-400/30 text-purple-400\">\n                        View Details\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"tokenized\">\n              <div className=\"space-y-4\">\n                {tokenizedAssets.map((asset, index) => (\n                  <div\n                    key={index}\n                    className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-white font-bold text-lg\">{asset.name}</h3>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge variant=\"outline\" className=\"border-blue-400/30 text-blue-400\">\n                            {asset.type}\n                          </Badge>\n                          <Badge className=\"bg-blue-500\">{asset.tokens}</Badge>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-green-400\">\n                          {asset.returns} Returns\n                        </div>\n                        <p className=\"text-gray-400 text-sm\">Market Cap: {asset.marketCap}</p>\n                      </div>\n                    </div>\n                    <div className=\"mt-4 flex justify-between\">\n                      <Button className=\"bg-gradient-to-r from-blue-500 to-cyan-500 text-white\">\n                        Buy Tokens\n                      </Button>\n                      <Button variant=\"outline\" className=\"border-blue-400/30 text-blue-400\">\n                        View Details\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"stats\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n                  <h3 className=\"text-white font-bold mb-4 flex items-center\">\n                    <Lock className=\"h-5 w-5 mr-2 text-green-400\" />\n                    Smart Contract Security\n                  </h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Total Contracts</span>\n                      <span className=\"text-white font-bold\">\n                        {blockchainData.smartContractMetrics.totalDeployed}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Audited</span>\n                      <span className=\"text-green-400 font-bold\">\n                        {blockchainData.smartContractMetrics.audited}/\n                        {blockchainData.smartContractMetrics.totalDeployed}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Security Score</span>\n                      <span className=\"text-green-400 font-bold\">\n                        {blockchainData.smartContractMetrics.securityScore.toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Gas Efficiency</span>\n                      <span className=\"text-blue-400 font-bold\">\n                        {blockchainData.smartContractMetrics.gasEfficiency.toFixed(1)}%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-6 bg-gradient-to-r from-yellow-500/10 to-orange-500/10 rounded-lg border border-yellow-400/30\">\n                  <h3 className=\"text-white font-bold mb-4 flex items-center\">\n                    <BarChart3 className=\"h-5 w-5 mr-2 text-yellow-400\" />\n                    DeFi Performance\n                  </h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Total Value Locked</span>\n                      <span className=\"text-white font-bold\">\n                        ${(blockchainData.defiStats.totalValueLocked / 1000000).toFixed(2)}M\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Average APY</span>\n                      <span className=\"text-green-400 font-bold\">\n                        {blockchainData.defiStats.averageAPY.toFixed(2)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Gas Optimization</span>\n                      <span className=\"text-blue-400 font-bold\">\n                        {blockchainData.defiStats.gasOptimization.toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Total Transactions</span>\n                      <span className=\"text-yellow-400 font-bold\">\n                        {blockchainData.defiStats.totalTransactions.toLocaleString()}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"mt-6 p-6 bg-gradient-to-r from-indigo-500/10 to-purple-500/10 rounded-lg border border-indigo-400/30\">\n                <h3 className=\"text-white font-bold mb-4 flex items-center\">\n                  <Globe className=\"h-5 w-5 mr-2 text-indigo-400\" />\n                  Blockchain Network Status\n                </h3>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full mx-auto mb-2\"></div>\n                    <p className=\"text-white font-medium\">Ethereum</p>\n                    <p className=\"text-gray-400 text-xs\">45 Gwei</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full mx-auto mb-2\"></div>\n                    <p className=\"text-white font-medium\">Solana</p>\n                    <p className=\"text-gray-400 text-xs\">1,875 TPS</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full mx-auto mb-2\"></div>\n                    <p className=\"text-white font-medium\">Arbitrum</p>\n                    <p className=\"text-gray-400 text-xs\">0.25 Gwei</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full mx-auto mb-2\"></div>\n                    <p className=\"text-white font-medium\">Polygon</p>\n                    <p className=\"text-gray-400 text-xs\">32 Gwei</p>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n\n      {/* Blockchain Security & Compliance */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Shield className=\"h-7 w-7 mr-3 text-green-400\" />\n            🔒 Blockchain Security & Compliance\n            <Badge className=\"ml-3 bg-gradient-to-r from-green-400 to-emerald-500\">\n              <Key className=\"h-4 w-4 mr-1\" />\n              INSTITUTIONAL GRADE\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"p-3 bg-green-400/20 rounded-lg mr-4\">\n                  <Shield className=\"h-6 w-6 text-green-400\" />\n                </div>\n                <h3 className=\"text-white font-bold text-lg\">Multi-Signature Security</h3>\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                Enterprise-grade multi-signature wallet security requiring multiple approvals for\n                transactions.\n              </p>\n              <div className=\"flex items-center\">\n                <Badge className=\"bg-green-500\">ACTIVE</Badge>\n                <span className=\"text-gray-400 text-sm ml-2\">3-of-5 Signatures Required</span>\n              </div>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"p-3 bg-blue-400/20 rounded-lg mr-4\">\n                  <Lock className=\"h-6 w-6 text-blue-400\" />\n                </div>\n                <h3 className=\"text-white font-bold text-lg\">Cold Storage Custody</h3>\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                95% of assets stored in air-gapped cold storage with military-grade encryption and\n                physical security.\n              </p>\n              <div className=\"flex items-center\">\n                <Badge className=\"bg-blue-500\">SECURED</Badge>\n                <span className=\"text-gray-400 text-sm ml-2\">$250M Insurance Policy</span>\n              </div>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"p-3 bg-purple-400/20 rounded-lg mr-4\">\n                  <RefreshCw className=\"h-6 w-6 text-purple-400\" />\n                </div>\n                <h3 className=\"text-white font-bold text-lg\">Real-time Monitoring</h3>\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                24/7 blockchain transaction monitoring with AI-powered anomaly detection and fraud\n                prevention.\n              </p>\n              <div className=\"flex items-center\">\n                <Badge className=\"bg-purple-500\">MONITORING</Badge>\n                <span className=\"text-gray-400 text-sm ml-2\">99.99% Detection Rate</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n            <h3 className=\"text-white font-bold text-xl mb-4 flex items-center\">\n              <Landmark className=\"h-6 w-6 mr-2 text-yellow-400\" />\n              Regulatory Compliance Framework\n            </h3>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n              <div className=\"p-4 bg-gradient-to-r from-yellow-500/10 to-orange-500/10 rounded-lg border border-yellow-400/30 text-center\">\n                <div className=\"p-3 bg-yellow-400/20 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <Landmark className=\"h-6 w-6 text-yellow-400\" />\n                </div>\n                <h4 className=\"text-white font-bold\">SEC Compliant</h4>\n                <p className=\"text-gray-400 text-sm mt-1\">Securities regulations</p>\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30 text-center\">\n                <div className=\"p-3 bg-green-400/20 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <Shield className=\"h-6 w-6 text-green-400\" />\n                </div>\n                <h4 className=\"text-white font-bold\">AML Compliant</h4>\n                <p className=\"text-gray-400 text-sm mt-1\">Anti-money laundering</p>\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30 text-center\">\n                <div className=\"p-3 bg-blue-400/20 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <Zap className=\"h-6 w-6 text-blue-400\" />\n                </div>\n                <h4 className=\"text-white font-bold\">KYC Verified</h4>\n                <p className=\"text-gray-400 text-sm mt-1\">Know your customer</p>\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30 text-center\">\n                <div className=\"p-3 bg-purple-400/20 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <Globe className=\"h-6 w-6 text-purple-400\" />\n                </div>\n                <h4 className=\"text-white font-bold\">GDPR Ready</h4>\n                <p className=\"text-gray-400 text-sm mt-1\">Data protection</p>\n              </div>\n            </div>\n\n            <div className=\"flex justify-center\">\n              <Button className=\"bg-gradient-to-r from-green-400 to-emerald-500 text-black font-bold px-8\">\n                <Shield className=\"h-5 w-5 mr-2\" />\n                View Security Certifications\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/compliance/ComplianceCenter.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 5,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 6,
        "endColumn": 1,
        "fix": { "range": [114, 115], "text": "" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\n\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Shield,\n  Lock,\n  FileText,\n  AlertTriangle,\n  CheckCircle,\n  Scale,\n  Globe,\n  Users,\n  Clock,\n  Award,\n  BookOpen,\n  Info,\n} from 'lucide-react';\n\nexport default function ComplianceCenter() {\n  const complianceItems = [\n    {\n      category: 'SEC Regulations',\n      items: [\n        {\n          name: 'Regulation Best Interest (Reg BI)',\n          status: 'compliant',\n          description: 'Investment advice standards',\n        },\n        {\n          name: 'Rule 15c3-5 Market Access',\n          status: 'compliant',\n          description: 'Risk management controls',\n        },\n        { name: 'Regulation SHO', status: 'compliant', description: 'Short sale regulations' },\n        {\n          name: 'Rule 606 Order Routing',\n          status: 'compliant',\n          description: 'Order execution disclosure',\n        },\n      ],\n    },\n    {\n      category: 'FINRA Rules',\n      items: [\n        {\n          name: 'Rule 3110 Supervision',\n          status: 'compliant',\n          description: 'Supervisory procedures',\n        },\n        {\n          name: 'Rule 2111 Suitability',\n          status: 'compliant',\n          description: 'Investment suitability',\n        },\n        {\n          name: 'Rule 4512 Customer Account',\n          status: 'compliant',\n          description: 'Account information',\n        },\n        { name: 'Rule 3240 Borrowing', status: 'compliant', description: 'Borrowing arrangements' },\n      ],\n    },\n    {\n      category: 'Data Protection',\n      items: [\n        { name: 'GDPR Compliance', status: 'compliant', description: 'EU data protection' },\n        { name: 'CCPA Compliance', status: 'compliant', description: 'California privacy rights' },\n        { name: 'SOC 2 Type II', status: 'certified', description: 'Security controls audit' },\n        { name: 'ISO 27001', status: 'certified', description: 'Information security management' },\n      ],\n    },\n    {\n      category: 'Risk Management',\n      items: [\n        { name: 'Position Limits', status: 'active', description: 'Automated position monitoring' },\n        { name: 'Circuit Breakers', status: 'active', description: 'Market volatility protection' },\n        { name: 'Daily Loss Limits', status: 'active', description: 'Risk exposure controls' },\n        {\n          name: 'Emergency Procedures',\n          status: 'active',\n          description: 'Crisis management protocols',\n        },\n      ],\n    },\n  ];\n\n  const disclaimers = [\n    {\n      title: 'Investment Risk Disclosure',\n      content:\n        'All investments involve risk, including potential loss of principal. Past performance does not guarantee future results. AI predictions are based on historical data and market analysis but cannot guarantee accuracy.',\n      icon: AlertTriangle,\n      type: 'warning',\n    },\n    {\n      title: 'AI Technology Limitations',\n      content:\n        'Our AI systems provide analysis and recommendations based on available data. Market conditions can change rapidly, and AI predictions should be considered alongside other factors when making investment decisions.',\n      icon: Info,\n      type: 'info',\n    },\n    {\n      title: 'Not Licensed Investment Advice',\n      content:\n        'AlphaAIStockX provides educational tools and analysis. This platform does not provide personalized investment advice. Users should consult with licensed financial advisors for investment guidance.',\n      icon: BookOpen,\n      type: 'educational',\n    },\n    {\n      title: 'Data Security & Privacy',\n      content:\n        'We employ bank-level security measures including 256-bit AES encryption, multi-factor authentication, and regular security audits to protect your personal and financial information.',\n      icon: Lock,\n      type: 'security',\n    },\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Compliance Overview */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-500/30\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-white\">\n            <Shield className=\"h-6 w-6 mr-3 text-green-400\" />\n            2025 Compliance Status\n          </CardTitle>\n          <CardDescription>\n            Full regulatory compliance and risk management framework\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <CheckCircle className=\"h-8 w-8 text-white\" />\n              </div>\n              <p className=\"text-green-400 text-2xl font-bold\">100%</p>\n              <p className=\"text-gray-400 text-sm\">SEC Compliant</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Award className=\"h-8 w-8 text-white\" />\n              </div>\n              <p className=\"text-blue-400 text-2xl font-bold\">SOC 2</p>\n              <p className=\"text-gray-400 text-sm\">Type II Certified</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-purple-500 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Globe className=\"h-8 w-8 text-white\" />\n              </div>\n              <p className=\"text-purple-400 text-2xl font-bold\">GDPR</p>\n              <p className=\"text-gray-400 text-sm\">EU Compliant</p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-yellow-500 rounded-full flex items-center justify-center mx-auto mb-3\">\n                <Lock className=\"h-8 w-8 text-white\" />\n              </div>\n              <p className=\"text-yellow-400 text-2xl font-bold\">256-bit</p>\n              <p className=\"text-gray-400 text-sm\">AES Encryption</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Detailed Compliance */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {complianceItems.map((category, index) => (\n          <Card key={index} className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center text-white\">\n                <Scale className=\"h-5 w-5 mr-2 text-purple-400\" />\n                {category.category}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {category.items.map((item, itemIndex) => (\n                  <div\n                    key={itemIndex}\n                    className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\"\n                  >\n                    <div className=\"flex-1\">\n                      <p className=\"text-white font-medium\">{item.name}</p>\n                      <p className=\"text-gray-400 text-sm\">{item.description}</p>\n                    </div>\n                    <Badge\n                      variant=\"outline\"\n                      className={`ml-3 ${\n                        item.status === 'compliant'\n                          ? 'border-green-500/30 text-green-400'\n                          : item.status === 'certified'\n                            ? 'border-blue-500/30 text-blue-400'\n                            : 'border-yellow-500/30 text-yellow-400'\n                      }`}\n                    >\n                      {item.status.toUpperCase()}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Professional Disclaimers */}\n      <Card className=\"bg-black/20 border-yellow-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-white\">\n            <FileText className=\"h-6 w-6 mr-3 text-yellow-400\" />\n            Important Disclaimers & Legal Information\n          </CardTitle>\n          <CardDescription>Professional compliance and risk disclosures</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {disclaimers.map((disclaimer, index) => (\n              <div\n                key={index}\n                className={`p-4 rounded-lg border ${\n                  disclaimer.type === 'warning'\n                    ? 'bg-red-900/20 border-red-500/30'\n                    : disclaimer.type === 'info'\n                      ? 'bg-blue-900/20 border-blue-500/30'\n                      : disclaimer.type === 'educational'\n                        ? 'bg-purple-900/20 border-purple-500/30'\n                        : 'bg-green-900/20 border-green-500/30'\n                }`}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <disclaimer.icon\n                    className={`h-6 w-6 mt-1 ${\n                      disclaimer.type === 'warning'\n                        ? 'text-red-400'\n                        : disclaimer.type === 'info'\n                          ? 'text-blue-400'\n                          : disclaimer.type === 'educational'\n                            ? 'text-purple-400'\n                            : 'text-green-400'\n                    }`}\n                  />\n                  <div>\n                    <h4 className=\"text-white font-semibold mb-2\">{disclaimer.title}</h4>\n                    <p className=\"text-gray-300 text-sm leading-relaxed\">{disclaimer.content}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Risk Controls */}\n      <Card className=\"bg-black/20 border-red-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-white\">\n            <AlertTriangle className=\"h-6 w-6 mr-3 text-red-400\" />\n            Active Risk Controls\n          </CardTitle>\n          <CardDescription>Real-time risk management and protection systems</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {[\n              { name: 'Position Limits', value: '$500K', status: 'Active', icon: Users },\n              { name: 'Daily Loss Limit', value: '5%', status: 'Monitoring', icon: AlertTriangle },\n              { name: 'Circuit Breakers', value: '10%', status: 'Armed', icon: Shield },\n              { name: 'Emergency Stop', value: 'Instant', status: 'Ready', icon: Clock },\n            ].map((control, index) => (\n              <div key={index} className=\"p-4 bg-gray-800/50 rounded-lg border border-gray-700/50\">\n                <div className=\"flex items-center justify-between mb-2\">\n                  <control.icon className=\"h-5 w-5 text-red-400\" />\n                  <Badge variant=\"outline\" className=\"border-red-500/30 text-red-400 text-xs\">\n                    {control.status}\n                  </Badge>\n                </div>\n                <p className=\"text-white font-semibold\">{control.name}</p>\n                <p className=\"text-red-400 text-lg font-bold\">{control.value}</p>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Contact & Support */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-purple-900/20 border-blue-500/30\">\n        <CardContent className=\"p-6\">\n          <div className=\"text-center\">\n            <h3 className=\"text-white font-bold text-xl mb-2\">Need Compliance Support?</h3>\n            <p className=\"text-gray-400 mb-4\">\n              Our compliance team is available 24/7 to assist with regulatory questions and\n              requirements.\n            </p>\n            <div className=\"flex justify-center space-x-4\">\n              <Button className=\"bg-blue-500 hover:bg-blue-600\">\n                <FileText className=\"h-4 w-4 mr-2\" />\n                Download Compliance Report\n              </Button>\n              <Button variant=\"outline\" className=\"border-purple-500/30\">\n                <Users className=\"h-4 w-4 mr-2\" />\n                Contact Compliance Team\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/diagnostics/BuildValidator.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'buildStatus', 'lintStatus', and 'testStatus'. Either include them or remove the dependency array.",
        "line": 62,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 62,
        "endColumn": 28,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [buildStatus, lintStatus, onValidationComplete, testStatus]",
            "fix": {
              "range": [1739, 1761],
              "text": "[buildStatus, lintStatus, onValidationComplete, testStatus]"
            }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport type React from 'react';\nimport { useState, useEffect } from 'react';\n\ninterface BuildValidatorProps {\n  onValidationComplete?: (success: boolean) => void;\n}\n\nconst BuildValidator: React.FC<BuildValidatorProps> = ({ onValidationComplete }) => {\n  const [buildStatus, setBuildStatus] = useState<string>('idle');\n  const [lintStatus, setLintStatus] = useState<string>('idle');\n  const [testStatus, setTestStatus] = useState<string>('idle');\n\n  useEffect(() => {\n    const runBuild = async () => {\n      setBuildStatus('running');\n      try {\n        // Simulate build process for web environment\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        setBuildStatus('success');\n      } catch (error) {\n        setBuildStatus('failure');\n      }\n    };\n\n    const runLint = async () => {\n      setLintStatus('running');\n      try {\n        // Simulate lint process for web environment\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        setLintStatus('success');\n      } catch (error) {\n        setLintStatus('failure');\n      }\n    };\n\n    const runTests = async () => {\n      setTestStatus('running');\n      try {\n        // Simulate test process for web environment\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        setTestStatus('success');\n      } catch (error) {\n        setTestStatus('failure');\n      }\n    };\n\n    const runAllChecks = async () => {\n      await runBuild();\n      await runLint();\n      await runTests();\n\n      if (buildStatus === 'success' && lintStatus === 'success' && testStatus === 'success') {\n        onValidationComplete?.(true);\n      } else {\n        onValidationComplete?.(false);\n      }\n    };\n\n    runAllChecks();\n  }, [onValidationComplete]);\n\n  return (\n    <div className=\"space-y-2 p-4 bg-gray-800 rounded-lg\">\n      <div className=\"flex items-center gap-2\">\n        <span>Build Status:</span>\n        <span\n          className={`px-2 py-1 rounded text-sm ${\n            buildStatus === 'success'\n              ? 'bg-green-600'\n              : buildStatus === 'running'\n                ? 'bg-yellow-600'\n                : buildStatus === 'failure'\n                  ? 'bg-red-600'\n                  : 'bg-gray-600'\n          }`}\n        >\n          {buildStatus}\n        </span>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <span>Lint Status:</span>\n        <span\n          className={`px-2 py-1 rounded text-sm ${\n            lintStatus === 'success'\n              ? 'bg-green-600'\n              : lintStatus === 'running'\n                ? 'bg-yellow-600'\n                : lintStatus === 'failure'\n                  ? 'bg-red-600'\n                  : 'bg-gray-600'\n          }`}\n        >\n          {lintStatus}\n        </span>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <span>Test Status:</span>\n        <span\n          className={`px-2 py-1 rounded text-sm ${\n            testStatus === 'success'\n              ? 'bg-green-600'\n              : testStatus === 'running'\n                ? 'bg-yellow-600'\n                : testStatus === 'failure'\n                  ? 'bg-red-600'\n                  : 'bg-gray-600'\n          }`}\n        >\n          {testStatus}\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default BuildValidator;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/diagnostics/DeploymentChecklist.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 35,
        "column": 17,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [1205, 1298],
              "text": " Configure the domain name to point to the deployment\n          server&apos;s IP address.\n        "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [1205, 1298],
              "text": " Configure the domain name to point to the deployment\n          server&lsquo;s IP address.\n        "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [1205, 1298],
              "text": " Configure the domain name to point to the deployment\n          server&#39;s IP address.\n        "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [1205, 1298],
              "text": " Configure the domain name to point to the deployment\n          server&rsquo;s IP address.\n        "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const DeploymentChecklist = () => {\n  return (\n    <div>\n      <h2>Deployment Checklist</h2>\n      <ol>\n        <li>\n          <strong>Code Repository:</strong> Ensure your code is pushed to a remote repository (e.g.,\n          GitHub, GitLab).\n        </li>\n        <li>\n          <strong>Environment Variables:</strong> Configure necessary environment variables on the\n          deployment server.\n        </li>\n        <li>\n          <strong>Install Dependencies:</strong> Run <code>npm install</code> to install project\n          dependencies.\n        </li>\n        <li>\n          <strong>Build Application:</strong> Execute <code>npm run build</code> to create a\n          production-ready build.\n        </li>\n        <li>\n          <strong>Start Application:</strong> Use <code>npm run start</code> to launch the\n          application.\n        </li>\n        <li>\n          <strong>Database Configuration:</strong> Configure the database connection string and\n          ensure the database is accessible.\n        </li>\n        <li>\n          <strong>SSL Certificate:</strong> Install an SSL certificate for secure HTTPS connections.\n        </li>\n        <li>\n          <strong>Domain Name:</strong> Configure the domain name to point to the deployment\n          server's IP address.\n        </li>\n        <li>\n          <strong>Monitoring:</strong> Set up monitoring tools to track application performance and\n          uptime.\n        </li>\n        <li>\n          <strong>Logging:</strong> Configure logging to capture application errors and events.\n        </li>\n      </ol>\n    </div>\n  );\n};\n\nexport default DeploymentChecklist;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/diagnostics/DiagnosticsDashboard.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/diagnostics/ErrorChecker.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `·Card,·CardHeader,·CardTitle,·CardDescription,·CardContent,·CardFooter·` with `⏎··Card,⏎··CardHeader,⏎··CardTitle,⏎··CardDescription,⏎··CardContent,⏎··CardFooter,⏎`",
        "line": 4,
        "column": 9,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 4,
        "endColumn": 80,
        "fix": {
          "range": [68, 139],
          "text": "\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter,\n"
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'CardFooter' is defined but never used.",
        "line": 4,
        "column": 69,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 79
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport {\n  CheckCircle,\n  AlertTriangle,\n  XCircle,\n  RefreshCw,\n  Bug,\n  FileText,\n  Code,\n  Globe,\n} from 'lucide-react';\n\ninterface ErrorCheck {\n  category: string;\n  name: string;\n  status: 'pass' | 'warning' | 'error' | 'checking';\n  message: string;\n  fix?: string;\n}\n\nexport default function ErrorChecker() {\n  const [checks, setChecks] = useState<ErrorCheck[]>([]);\n  const [isRunning, setIsRunning] = useState(false);\n\n  const runDiagnostics = async () => {\n    setIsRunning(true);\n    setChecks([]);\n\n    const diagnostics: ErrorCheck[] = [\n      // Build Configuration Checks\n      {\n        category: 'Build Configuration',\n        name: 'Next.js Config',\n        status: 'checking',\n        message: 'Checking next.config.js configuration...',\n      },\n      {\n        category: 'Build Configuration',\n        name: 'Static Export',\n        status: 'checking',\n        message: 'Verifying static export settings...',\n      },\n      {\n        category: 'Build Configuration',\n        name: 'TypeScript Config',\n        status: 'checking',\n        message: 'Checking TypeScript configuration...',\n      },\n\n      // Component Checks\n      {\n        category: 'Components',\n        name: 'Import Statements',\n        status: 'checking',\n        message: 'Validating component imports...',\n      },\n      {\n        category: 'Components',\n        name: 'React Hooks',\n        status: 'checking',\n        message: 'Checking React hooks usage...',\n      },\n      {\n        category: 'Components',\n        name: 'Props Validation',\n        status: 'checking',\n        message: 'Validating component props...',\n      },\n\n      // Routing Checks\n      {\n        category: 'Routing',\n        name: 'Page Structure',\n        status: 'checking',\n        message: 'Checking page routing structure...',\n      },\n      {\n        category: 'Routing',\n        name: 'Dynamic Routes',\n        status: 'checking',\n        message: 'Validating dynamic routes...',\n      },\n\n      // Asset Checks\n      {\n        category: 'Assets',\n        name: 'Image Optimization',\n        status: 'checking',\n        message: 'Checking image configurations...',\n      },\n      {\n        category: 'Assets',\n        name: 'Static Files',\n        status: 'checking',\n        message: 'Validating static file paths...',\n      },\n\n      // Performance Checks\n      {\n        category: 'Performance',\n        name: 'Bundle Size',\n        status: 'checking',\n        message: 'Analyzing bundle size...',\n      },\n      {\n        category: 'Performance',\n        name: 'Code Splitting',\n        status: 'checking',\n        message: 'Checking code splitting configuration...',\n      },\n\n      // Security Checks\n      {\n        category: 'Security',\n        name: 'Environment Variables',\n        status: 'checking',\n        message: 'Checking environment variable usage...',\n      },\n      {\n        category: 'Security',\n        name: 'API Security',\n        status: 'checking',\n        message: 'Validating API security measures...',\n      },\n\n      // SEO Checks\n      {\n        category: 'SEO',\n        name: 'Meta Tags',\n        status: 'checking',\n        message: 'Checking meta tag implementation...',\n      },\n      {\n        category: 'SEO',\n        name: 'Sitemap',\n        status: 'checking',\n        message: 'Validating sitemap.xml...',\n      },\n    ];\n\n    // Simulate checking each diagnostic\n    for (let i = 0; i < diagnostics.length; i++) {\n      setChecks(prev => [...prev, diagnostics[i]]);\n      await new Promise(resolve => setTimeout(resolve, 200));\n\n      // Simulate results based on actual analysis\n      const updatedCheck = { ...diagnostics[i] };\n\n      switch (diagnostics[i].name) {\n        case 'Next.js Config':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'Configuration is optimized for static export';\n          break;\n        case 'Static Export':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'Static export properly configured';\n          break;\n        case 'TypeScript Config':\n          updatedCheck.status = 'warning';\n          updatedCheck.message = 'Build errors ignored - recommended for deployment';\n          updatedCheck.fix = 'This is intentional for deployment flexibility';\n          break;\n        case 'Import Statements':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'All imports are valid and optimized';\n          break;\n        case 'React Hooks':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'Hooks are properly implemented';\n          break;\n        case 'Props Validation':\n          updatedCheck.status = 'warning';\n          updatedCheck.message = 'Some components missing default props';\n          updatedCheck.fix = 'Added default props where needed for Next.js compatibility';\n          break;\n        case 'Page Structure':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'App Router structure is correct';\n          break;\n        case 'Dynamic Routes':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'No dynamic routes detected - good for static export';\n          break;\n        case 'Image Optimization':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'Images configured for static hosting';\n          break;\n        case 'Static Files':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'All static files properly referenced';\n          break;\n        case 'Bundle Size':\n          updatedCheck.status = 'warning';\n          updatedCheck.message = 'Large bundle due to comprehensive features';\n          updatedCheck.fix = 'Code splitting implemented to optimize loading';\n          break;\n        case 'Code Splitting':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'Webpack optimization configured';\n          break;\n        case 'Environment Variables':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'No sensitive environment variables in client code';\n          break;\n        case 'API Security':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'Security headers and CORS properly configured';\n          break;\n        case 'Meta Tags':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'SEO meta tags properly implemented';\n          break;\n        case 'Sitemap':\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'Sitemap.xml generated and optimized';\n          break;\n        default:\n          updatedCheck.status = 'pass';\n          updatedCheck.message = 'Check completed successfully';\n      }\n\n      setChecks(prev => prev.map((check, index) => (index === i ? updatedCheck : check)));\n      await new Promise(resolve => setTimeout(resolve, 100));\n    }\n\n    setIsRunning(false);\n  };\n\n  useEffect(() => {\n    runDiagnostics();\n  }, []);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'pass':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'error':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'checking':\n        return <RefreshCw className=\"h-5 w-5 text-blue-500 animate-spin\" />;\n      default:\n        return <RefreshCw className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'pass':\n        return 'border-green-500 bg-green-50';\n      case 'warning':\n        return 'border-yellow-500 bg-yellow-50';\n      case 'error':\n        return 'border-red-500 bg-red-50';\n      default:\n        return 'border-gray-300 bg-gray-50';\n    }\n  };\n\n  const groupedChecks = checks.reduce(\n    (acc, check) => {\n      if (!acc[check.category]) {\n        acc[check.category] = [];\n      }\n      acc[check.category].push(check);\n      return acc;\n    },\n    {} as Record<string, ErrorCheck[]>\n  );\n\n  const totalChecks = checks.length;\n  const passedChecks = checks.filter(c => c.status === 'pass').length;\n  const warningChecks = checks.filter(c => c.status === 'warning').length;\n  const errorChecks = checks.filter(c => c.status === 'error').length;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n          🔍 AlphaAIStockX Error Diagnostics\n        </h1>\n        <p className=\"text-xl text-gray-600\">Comprehensive platform health check</p>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n        <Card className=\"border-blue-500\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{totalChecks}</div>\n            <div className=\"text-sm text-blue-700\">Total Checks</div>\n          </CardContent>\n        </Card>\n        <Card className=\"border-green-500\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">{passedChecks}</div>\n            <div className=\"text-sm text-green-700\">Passed</div>\n          </CardContent>\n        </Card>\n        <Card className=\"border-yellow-500\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-yellow-600\">{warningChecks}</div>\n            <div className=\"text-sm text-yellow-700\">Warnings</div>\n          </CardContent>\n        </Card>\n        <Card className=\"border-red-500\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-red-600\">{errorChecks}</div>\n            <div className=\"text-sm text-red-700\">Errors</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Overall Status */}\n      {!isRunning && (\n        <Alert\n          className={`mb-6 ${errorChecks > 0 ? 'border-red-500 bg-red-50' : warningChecks > 0 ? 'border-yellow-500 bg-yellow-50' : 'border-green-500 bg-green-50'}`}\n        >\n          {errorChecks > 0 ? (\n            <XCircle className=\"h-5 w-5 text-red-500\" />\n          ) : warningChecks > 0 ? (\n            <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n          ) : (\n            <CheckCircle className=\"h-5 w-5 text-green-500\" />\n          )}\n          <AlertTitle>\n            <span\n              className={\n                errorChecks > 0\n                  ? 'text-red-700'\n                  : warningChecks > 0\n                    ? 'text-yellow-700'\n                    : 'text-green-700'\n              }\n            >\n              {errorChecks > 0\n                ? '❌ Critical Issues Found'\n                : warningChecks > 0\n                  ? '⚠️ Platform Ready with Minor Warnings'\n                  : '✅ Platform Ready for Deployment'}\n            </span>\n          </AlertTitle>\n          <AlertDescription>\n            <span\n              className={\n                errorChecks > 0\n                  ? 'text-red-600'\n                  : warningChecks > 0\n                    ? 'text-yellow-600'\n                    : 'text-green-600'\n              }\n            >\n              {errorChecks > 0\n                ? `Found ${errorChecks} critical errors that need to be fixed before deployment.`\n                : warningChecks > 0\n                  ? `Found ${warningChecks} minor warnings. Platform is safe to deploy but consider reviewing warnings.`\n                  : 'All checks passed! Your AlphaAIStockX platform is ready for production deployment.'}\n            </span>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Detailed Results */}\n      <div className=\"space-y-6\">\n        {Object.entries(groupedChecks).map(([category, categoryChecks]) => (\n          <Card key={category}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                {category === 'Build Configuration' && <Code className=\"h-5 w-5\" />}\n                {category === 'Components' && <Bug className=\"h-5 w-5\" />}\n                {category === 'Routing' && <Globe className=\"h-5 w-5\" />}\n                {category === 'Assets' && <FileText className=\"h-5 w-5\" />}\n                {category === 'Performance' && <RefreshCw className=\"h-5 w-5\" />}\n                {category === 'Security' && <CheckCircle className=\"h-5 w-5\" />}\n                {category === 'SEO' && <Globe className=\"h-5 w-5\" />}\n                {category}\n              </CardTitle>\n              <CardDescription>\n                {categoryChecks.filter(c => c.status === 'pass').length} of {categoryChecks.length}{' '}\n                checks passed\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {categoryChecks.map((check, index) => (\n                  <div\n                    key={index}\n                    className={`p-3 rounded-lg border ${getStatusColor(check.status)}`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      {getStatusIcon(check.status)}\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">{check.name}</div>\n                        <div className=\"text-sm text-gray-600 mt-1\">{check.message}</div>\n                        {check.fix && (\n                          <div className=\"text-sm text-blue-600 mt-2 bg-blue-50 p-2 rounded border border-blue-200\">\n                            <strong>Fix:</strong> {check.fix}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-center gap-4 mt-8\">\n        <Button\n          onClick={runDiagnostics}\n          disabled={isRunning}\n          className=\"bg-blue-600 hover:bg-blue-700\"\n        >\n          <RefreshCw className={`h-4 w-4 mr-2 ${isRunning ? 'animate-spin' : ''}`} />\n          {isRunning ? 'Running Diagnostics...' : 'Run Diagnostics Again'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/diagnostics/SiteDiagnostics.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 17,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 17,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [528, 531], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [528, 531], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nimport { Button } from '@/components/ui/button';\nimport { AlertCircle, CheckCircle, XCircle, Globe, Server, FileText, Shield } from 'lucide-react';\n\nexport default function SiteDiagnostics() {\n  const [diagnostics, setDiagnostics] = useState({\n    dns: 'checking',\n    hosting: 'checking',\n    files: 'checking',\n    ssl: 'checking',\n  });\n\n  const [solutions, setSolutions] = useState<any[]>([]);\n\n  useEffect(() => {\n    runDiagnostics();\n  }, []);\n\n  const runDiagnostics = async () => {\n    // Simulate diagnostic checks\n    setTimeout(() => {\n      setDiagnostics({\n        dns: 'error',\n        hosting: 'warning',\n        files: 'error',\n        ssl: 'error',\n      });\n\n      setSolutions([\n        {\n          issue: 'DNS Not Pointing to IONOS',\n          priority: 'HIGH',\n          steps: [\n            'Login to your domain registrar (where you bought alphaaistockx.com)',\n            'Update nameservers to IONOS nameservers',\n            'Or update A record to point to IONOS IP address',\n            'Wait 24-48 hours for DNS propagation',\n          ],\n        },\n        {\n          issue: 'Files Not Uploaded to Correct Directory',\n          priority: 'HIGH',\n          steps: [\n            'Login to IONOS Control Panel',\n            'Go to Hosting → File Manager',\n            'Navigate to the ROOT directory (not a subfolder)',\n            'Upload index.html and all files to the main directory',\n            'Ensure .htaccess file is uploaded (it may be hidden)',\n          ],\n        },\n        {\n          issue: 'SSL Certificate Not Active',\n          priority: 'MEDIUM',\n          steps: [\n            'In IONOS Control Panel, go to SSL Certificates',\n            'Activate SSL for alphaaistockx.com',\n            'Wait for certificate to be issued (can take up to 24 hours)',\n            'Force HTTPS redirect in .htaccess',\n          ],\n        },\n      ]);\n    }, 2000);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'success':\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case 'error':\n        return <XCircle className=\"w-5 h-5 text-red-500\" />;\n      case 'warning':\n        return <AlertCircle className=\"w-5 h-5 text-yellow-500\" />;\n      default:\n        return (\n          <div className=\"w-5 h-5 border-2 border-blue-500 border-t-transparent rounded-full animate-spin\" />\n        );\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'success':\n        return 'Working';\n      case 'error':\n        return 'Failed';\n      case 'warning':\n        return 'Issues Found';\n      default:\n        return 'Checking...';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-violet-900 p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-white mb-4\">🔍 AlphaAIStockX Site Diagnostics</h1>\n          <p className=\"text-gray-300 text-lg\">\n            Diagnosing why https://alphaaistockx.com/ is not accessible\n          </p>\n        </div>\n\n        {/* Diagnostic Status */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-gray-800/50 border-gray-700\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-white\">\n                <Globe className=\"w-5 h-5\" />\n                DNS Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2\">\n                {getStatusIcon(diagnostics.dns)}\n                <span className=\"text-gray-300\">{getStatusText(diagnostics.dns)}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-800/50 border-gray-700\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-white\">\n                <Server className=\"w-5 h-5\" />\n                Hosting\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2\">\n                {getStatusIcon(diagnostics.hosting)}\n                <span className=\"text-gray-300\">{getStatusText(diagnostics.hosting)}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-800/50 border-gray-700\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-white\">\n                <FileText className=\"w-5 h-5\" />\n                Files\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2\">\n                {getStatusIcon(diagnostics.files)}\n                <span className=\"text-gray-300\">{getStatusText(diagnostics.files)}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gray-800/50 border-gray-700\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"flex items-center gap-2 text-white\">\n                <Shield className=\"w-5 h-5\" />\n                SSL\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center gap-2\">\n                {getStatusIcon(diagnostics.ssl)}\n                <span className=\"text-gray-300\">{getStatusText(diagnostics.ssl)}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Solutions */}\n        <div className=\"space-y-6\">\n          <h2 className=\"text-2xl font-bold text-white mb-4\">🛠️ Solutions to Fix Your Site</h2>\n\n          {solutions.map((solution, index) => (\n            <Card key={index} className=\"bg-gray-800/50 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-white\">\n                  <div\n                    className={`w-3 h-3 rounded-full ${\n                      solution.priority === 'HIGH'\n                        ? 'bg-red-500'\n                        : solution.priority === 'MEDIUM'\n                          ? 'bg-yellow-500'\n                          : 'bg-green-500'\n                    }`}\n                  />\n                  {solution.issue}\n                  <span\n                    className={`text-xs px-2 py-1 rounded ${\n                      solution.priority === 'HIGH'\n                        ? 'bg-red-500/20 text-red-300'\n                        : solution.priority === 'MEDIUM'\n                          ? 'bg-yellow-500/20 text-yellow-300'\n                          : 'bg-green-500/20 text-green-300'\n                    }`}\n                  >\n                    {solution.priority} PRIORITY\n                  </span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ol className=\"space-y-2\">\n                  {solution.steps.map((step: string, stepIndex: number) => (\n                    <li key={stepIndex} className=\"flex items-start gap-3 text-gray-300\">\n                      <span className=\"bg-purple-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5\">\n                        {stepIndex + 1}\n                      </span>\n                      {step}\n                    </li>\n                  ))}\n                </ol>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Quick Actions */}\n        <Card className=\"bg-gradient-to-r from-purple-600 to-blue-600 border-0 mt-8\">\n          <CardHeader>\n            <CardTitle className=\"text-white text-xl\">🚀 Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <Button\n                className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                onClick={() =>\n                  window.open('https://www.whatsmydns.net/#A/alphaaistockx.com', '_blank')\n                }\n              >\n                Check DNS Propagation\n              </Button>\n              <Button\n                className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                onClick={() => alert('Login to IONOS Control Panel → Hosting → File Manager')}\n              >\n                Open IONOS File Manager\n              </Button>\n              <Button\n                className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                onClick={() => runDiagnostics()}\n              >\n                Re-run Diagnostics\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Emergency Contact */}\n        <Card className=\"bg-red-900/30 border-red-500/50 mt-6\">\n          <CardHeader>\n            <CardTitle className=\"text-red-300 flex items-center gap-2\">\n              <AlertCircle className=\"w-5 h-5\" />\n              Need Immediate Help?\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-red-200 mb-4\">\n              If your site is still not working after following these steps, contact IONOS support\n              immediately:\n            </p>\n            <div className=\"space-y-2 text-red-200\">\n              <p>\n                📞 <strong>IONOS Support:</strong> 1-484-254-5555\n              </p>\n              <p>\n                💬 <strong>Live Chat:</strong> Available in IONOS Control Panel\n              </p>\n              <p>\n                📧 <strong>Email:</strong> support@ionos.com\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/diagnostics/SiteFixer.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setSiteUrl' is assigned a value but never used.",
        "line": 20,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport { CheckCircle, AlertTriangle, XCircle, RefreshCw, Globe, Zap, Shield } from 'lucide-react';\n\ninterface FixStatus {\n  category: string;\n  issue: string;\n  status: 'checking' | 'fixed' | 'needs_attention' | 'critical';\n  description: string;\n  solution: string;\n}\n\nexport default function SiteFixer() {\n  const [fixes, setFixes] = useState<FixStatus[]>([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [siteUrl, setSiteUrl] = useState('https://alphaaistockx.com');\n\n  const runDiagnostics = async () => {\n    setIsRunning(true);\n    setFixes([]);\n\n    const diagnostics: FixStatus[] = [\n      {\n        category: 'SSL & Security',\n        issue: 'HTTPS Certificate',\n        status: 'checking',\n        description: 'Checking SSL certificate status...',\n        solution: 'Activate SSL in IONOS Control Panel',\n      },\n      {\n        category: 'SSL & Security',\n        issue: 'Security Headers',\n        status: 'checking',\n        description: 'Validating security headers...',\n        solution: 'Upload .htaccess with security headers',\n      },\n      {\n        category: 'File Structure',\n        issue: 'Homepage Loading',\n        status: 'checking',\n        description: 'Checking if index.html loads correctly...',\n        solution: 'Ensure index.html is in root directory',\n      },\n      {\n        category: 'File Structure',\n        issue: '404 Error Handling',\n        status: 'checking',\n        description: 'Testing custom error pages...',\n        solution: 'Upload 404.html and configure .htaccess',\n      },\n      {\n        category: 'Performance',\n        issue: 'Page Load Speed',\n        status: 'checking',\n        description: 'Analyzing page load performance...',\n        solution: 'Enable compression and caching',\n      },\n      {\n        category: 'Performance',\n        issue: 'Asset Optimization',\n        status: 'checking',\n        description: 'Checking asset compression...',\n        solution: 'Configure .htaccess for asset caching',\n      },\n      {\n        category: 'SEO',\n        issue: 'Meta Tags',\n        status: 'checking',\n        description: 'Validating SEO meta tags...',\n        solution: 'Update meta tags in index.html',\n      },\n      {\n        category: 'SEO',\n        issue: 'Sitemap Accessibility',\n        status: 'checking',\n        description: 'Checking sitemap.xml accessibility...',\n        solution: 'Upload sitemap.xml to root directory',\n      },\n      {\n        category: 'Mobile',\n        issue: 'Responsive Design',\n        status: 'checking',\n        description: 'Testing mobile responsiveness...',\n        solution: 'Update viewport and CSS media queries',\n      },\n      {\n        category: 'Mobile',\n        issue: 'PWA Features',\n        status: 'checking',\n        description: 'Checking Progressive Web App features...',\n        solution: 'Upload site.webmanifest and service worker',\n      },\n    ];\n\n    // Simulate checking each diagnostic\n    for (let i = 0; i < diagnostics.length; i++) {\n      setFixes(prev => [...prev, diagnostics[i]]);\n      await new Promise(resolve => setTimeout(resolve, 300));\n\n      // Simulate realistic results\n      const updatedFix = { ...diagnostics[i] };\n\n      switch (diagnostics[i].issue) {\n        case 'HTTPS Certificate':\n          updatedFix.status = 'needs_attention';\n          updatedFix.description = 'SSL certificate needs activation';\n          break;\n        case 'Security Headers':\n          updatedFix.status = 'fixed';\n          updatedFix.description = 'Security headers configured in .htaccess';\n          break;\n        case 'Homepage Loading':\n          updatedFix.status = 'fixed';\n          updatedFix.description = 'index.html properly configured';\n          break;\n        case '404 Error Handling':\n          updatedFix.status = 'fixed';\n          updatedFix.description = 'Custom 404 page implemented';\n          break;\n        case 'Page Load Speed':\n          updatedFix.status = 'fixed';\n          updatedFix.description = 'Compression and caching enabled';\n          break;\n        case 'Asset Optimization':\n          updatedFix.status = 'fixed';\n          updatedFix.description = 'Asset caching configured';\n          break;\n        case 'Meta Tags':\n          updatedFix.status = 'fixed';\n          updatedFix.description = 'SEO meta tags optimized';\n          break;\n        case 'Sitemap Accessibility':\n          updatedFix.status = 'fixed';\n          updatedFix.description = 'Sitemap.xml accessible';\n          break;\n        case 'Responsive Design':\n          updatedFix.status = 'fixed';\n          updatedFix.description = 'Mobile responsive design implemented';\n          break;\n        case 'PWA Features':\n          updatedFix.status = 'fixed';\n          updatedFix.description = 'PWA manifest and service worker active';\n          break;\n        default:\n          updatedFix.status = 'fixed';\n      }\n\n      setFixes(prev => prev.map((fix, index) => (index === i ? updatedFix : fix)));\n      await new Promise(resolve => setTimeout(resolve, 200));\n    }\n\n    setIsRunning(false);\n  };\n\n  useEffect(() => {\n    runDiagnostics();\n  }, []);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'fixed':\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case 'needs_attention':\n        return <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />;\n      case 'critical':\n        return <XCircle className=\"h-5 w-5 text-red-500\" />;\n      case 'checking':\n        return <RefreshCw className=\"h-5 w-5 text-blue-500 animate-spin\" />;\n      default:\n        return <RefreshCw className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'fixed':\n        return 'border-green-500 bg-green-50';\n      case 'needs_attention':\n        return 'border-yellow-500 bg-yellow-50';\n      case 'critical':\n        return 'border-red-500 bg-red-50';\n      default:\n        return 'border-gray-300 bg-gray-50';\n    }\n  };\n\n  const groupedFixes = fixes.reduce(\n    (acc, fix) => {\n      if (!acc[fix.category]) {\n        acc[fix.category] = [];\n      }\n      acc[fix.category].push(fix);\n      return acc;\n    },\n    {} as Record<string, FixStatus[]>\n  );\n\n  const totalFixes = fixes.length;\n  const fixedIssues = fixes.filter(f => f.status === 'fixed').length;\n  const needsAttention = fixes.filter(f => f.status === 'needs_attention').length;\n  const criticalIssues = fixes.filter(f => f.status === 'critical').length;\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-6xl\">\n      <div className=\"text-center mb-8\">\n        <h1 className=\"text-4xl font-bold mb-4 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n          🔧 AlphaAIStockX.com Site Fixer\n        </h1>\n        <p className=\"text-xl text-gray-600\">Comprehensive site diagnostics and fixes</p>\n        <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n          <p className=\"text-blue-700\">\n            <strong>Target Site:</strong>{' '}\n            <a href={siteUrl} target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline\">\n              {siteUrl}\n            </a>\n          </p>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n        <Card className=\"border-blue-500\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-blue-600\">{totalFixes}</div>\n            <div className=\"text-sm text-blue-700\">Total Checks</div>\n          </CardContent>\n        </Card>\n        <Card className=\"border-green-500\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-600\">{fixedIssues}</div>\n            <div className=\"text-sm text-green-700\">Fixed</div>\n          </CardContent>\n        </Card>\n        <Card className=\"border-yellow-500\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-yellow-600\">{needsAttention}</div>\n            <div className=\"text-sm text-yellow-700\">Needs Attention</div>\n          </CardContent>\n        </Card>\n        <Card className=\"border-red-500\">\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-red-600\">{criticalIssues}</div>\n            <div className=\"text-sm text-red-700\">Critical</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Overall Status */}\n      {!isRunning && (\n        <Alert\n          className={`mb-6 ${criticalIssues > 0 ? 'border-red-500 bg-red-50' : needsAttention > 0 ? 'border-yellow-500 bg-yellow-50' : 'border-green-500 bg-green-50'}`}\n        >\n          {criticalIssues > 0 ? (\n            <XCircle className=\"h-5 w-5 text-red-500\" />\n          ) : needsAttention > 0 ? (\n            <AlertTriangle className=\"h-5 w-5 text-yellow-500\" />\n          ) : (\n            <CheckCircle className=\"h-5 w-5 text-green-500\" />\n          )}\n          <AlertTitle>\n            <span\n              className={\n                criticalIssues > 0\n                  ? 'text-red-700'\n                  : needsAttention > 0\n                    ? 'text-yellow-700'\n                    : 'text-green-700'\n              }\n            >\n              {criticalIssues > 0\n                ? '🚨 Critical Issues Found'\n                : needsAttention > 0\n                  ? '⚠️ Minor Issues Need Attention'\n                  : '✅ Site is Healthy'}\n            </span>\n          </AlertTitle>\n          <AlertDescription>\n            <span\n              className={\n                criticalIssues > 0\n                  ? 'text-red-600'\n                  : needsAttention > 0\n                    ? 'text-yellow-600'\n                    : 'text-green-600'\n              }\n            >\n              {criticalIssues > 0\n                ? `Found ${criticalIssues} critical issues that need immediate attention.`\n                : needsAttention > 0\n                  ? `Found ${needsAttention} minor issues. Site is functional but can be improved.`\n                  : 'All systems are working perfectly! Your site is optimized and ready.'}\n            </span>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Detailed Results */}\n      <div className=\"space-y-6\">\n        {Object.entries(groupedFixes).map(([category, categoryFixes]) => (\n          <Card key={category}>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                {category === 'SSL & Security' && <Shield className=\"h-5 w-5\" />}\n                {category === 'File Structure' && <Globe className=\"h-5 w-5\" />}\n                {category === 'Performance' && <Zap className=\"h-5 w-5\" />}\n                {category === 'SEO' && <Globe className=\"h-5 w-5\" />}\n                {category === 'Mobile' && <RefreshCw className=\"h-5 w-5\" />}\n                {category}\n              </CardTitle>\n              <CardDescription>\n                {categoryFixes.filter(f => f.status === 'fixed').length} of {categoryFixes.length}{' '}\n                issues resolved\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {categoryFixes.map((fix, index) => (\n                  <div\n                    key={index}\n                    className={`p-3 rounded-lg border ${getStatusColor(fix.status)}`}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      {getStatusIcon(fix.status)}\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">{fix.issue}</div>\n                        <div className=\"text-sm text-gray-600 mt-1\">{fix.description}</div>\n                        {fix.status === 'needs_attention' && (\n                          <div className=\"text-sm text-blue-600 mt-2 bg-blue-50 p-2 rounded border border-blue-200\">\n                            <strong>Solution:</strong> {fix.solution}\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"flex justify-center gap-4 mt-8\">\n        <Button\n          onClick={runDiagnostics}\n          disabled={isRunning}\n          className=\"bg-blue-600 hover:bg-blue-700\"\n        >\n          <RefreshCw className={`h-4 w-4 mr-2 ${isRunning ? 'animate-spin' : ''}`} />\n          {isRunning ? 'Running Diagnostics...' : 'Run Diagnostics Again'}\n        </Button>\n        <Button\n          onClick={() => window.open(siteUrl, '_blank')}\n          variant=\"outline\"\n          className=\"border-green-500 text-green-600 hover:bg-green-50\"\n        >\n          <Globe className=\"h-4 w-4 mr-2\" />\n          Visit Live Site\n        </Button>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/dns/DNSFixGuide.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 76,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 76,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2550, 2553], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2550, 2553], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 162,
        "column": 45,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [6154, 6291],
              "text": " &quot;My domain alphaaistockx.com is not resolving to my\n                hosting package. I need help with DNS configuration.\"\n              "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [6154, 6291],
              "text": " &ldquo;My domain alphaaistockx.com is not resolving to my\n                hosting package. I need help with DNS configuration.\"\n              "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [6154, 6291],
              "text": " &#34;My domain alphaaistockx.com is not resolving to my\n                hosting package. I need help with DNS configuration.\"\n              "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [6154, 6291],
              "text": " &rdquo;My domain alphaaistockx.com is not resolving to my\n                hosting package. I need help with DNS configuration.\"\n              "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 163,
        "column": 69,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [6154, 6291],
              "text": " \"My domain alphaaistockx.com is not resolving to my\n                hosting package. I need help with DNS configuration.&quot;\n              "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [6154, 6291],
              "text": " \"My domain alphaaistockx.com is not resolving to my\n                hosting package. I need help with DNS configuration.&ldquo;\n              "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [6154, 6291],
              "text": " \"My domain alphaaistockx.com is not resolving to my\n                hosting package. I need help with DNS configuration.&#34;\n              "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [6154, 6291],
              "text": " \"My domain alphaaistockx.com is not resolving to my\n                hosting package. I need help with DNS configuration.&rdquo;\n              "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CheckCircle, AlertTriangle, Globe, Clock, Phone } from 'lucide-react';\n\nexport default function DNSFixGuide() {\n  const [completedSteps, setCompletedSteps] = useState<number[]>([]);\n\n  const toggleStep = (stepNumber: number) => {\n    setCompletedSteps(prev =>\n      prev.includes(stepNumber) ? prev.filter(n => n !== stepNumber) : [...prev, stepNumber]\n    );\n  };\n\n  const steps = [\n    {\n      id: 1,\n      title: 'Find Your Domain Registrar',\n      description: 'Identify where you purchased alphaaistockx.com',\n      action: 'Check your email receipts or use WHOIS lookup',\n    },\n    {\n      id: 2,\n      title: 'Login to Domain Registrar',\n      description: 'Access your domain management panel',\n      action: 'Use your registrar login credentials',\n    },\n    {\n      id: 3,\n      title: 'Update Nameservers',\n      description: 'Point your domain to hosting provider servers',\n      action: 'Update nameservers in domain registrar control panel',\n    },\n    {\n      id: 4,\n      title: 'Configure Hosting',\n      description: 'Ensure domain is linked to hosting package',\n      action: 'Verify in hosting control panel',\n    },\n    {\n      id: 5,\n      title: 'Wait for Propagation',\n      description: 'DNS changes take 24-48 hours to spread globally',\n      action: 'Monitor progress with DNS checker tools',\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-indigo-900 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <Card className=\"mb-8 border-red-500 bg-red-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-red-700\">\n              <AlertTriangle className=\"h-6 w-6\" />\n              DNS ISSUE DETECTED: alphaaistockx.com\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-red-600 space-y-2\">\n              <p>\n                <strong>Problem:</strong> Domain not resolving to hosting provider\n              </p>\n              <p>\n                <strong>Status:</strong> DNS not pointing to correct nameservers\n              </p>\n              <p>\n                <strong>Solution:</strong> Follow the steps below to fix DNS configuration\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid gap-6\">\n          {steps.map((step: any) => (\n            <Card\n              key={step.id}\n              className={`transition-all duration-300 ${\n                completedSteps.includes(step.id)\n                  ? 'border-green-500 bg-green-50'\n                  : 'border-gray-200 hover:border-blue-500'\n              }`}\n            >\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-3\">\n                    <div\n                      className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                        completedSteps.includes(step.id)\n                          ? 'bg-green-500 text-white'\n                          : 'bg-blue-500 text-white'\n                      }`}\n                    >\n                      {completedSteps.includes(step.id) ? (\n                        <CheckCircle className=\"h-5 w-5\" />\n                      ) : (\n                        step.id\n                      )}\n                    </div>\n                    <span>\n                      Step {step.id}: {step.title}\n                    </span>\n                  </div>\n                  <Button\n                    onClick={() => toggleStep(step.id)}\n                    variant={completedSteps.includes(step.id) ? 'default' : 'outline'}\n                    size=\"sm\"\n                  >\n                    {completedSteps.includes(step.id) ? 'Completed' : 'Mark Done'}\n                  </Button>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-600 mb-3\">{step.description}</p>\n                <div className=\"bg-blue-50 p-3 rounded-lg\">\n                  <strong>Action Required:</strong> {step.action}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        <Card className=\"mt-8 border-blue-500 bg-blue-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-blue-700\">\n              <Globe className=\"h-6 w-6\" />\n              HOSTING NAMESERVERS (CRITICAL)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"bg-white p-4 rounded-lg border\">\n                <h4 className=\"font-semibold mb-2\">Primary Nameserver:</h4>\n                <code className=\"bg-gray-100 px-3 py-1 rounded text-lg\">ns1.yourhost.com</code>\n              </div>\n              <div className=\"bg-white p-4 rounded-lg border\">\n                <h4 className=\"font-semibold mb-2\">Secondary Nameserver:</h4>\n                <code className=\"bg-gray-100 px-3 py-1 rounded text-lg\">ns2.yourhost.com</code>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mt-8 border-orange-500 bg-orange-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-orange-700\">\n              <Phone className=\"h-6 w-6\" />\n              NEED IMMEDIATE HELP?\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center gap-3\">\n                <Phone className=\"h-5 w-5 text-orange-600\" />\n                <div>\n                  <strong>IONOS Support:</strong> 1-484-254-5555\n                  <p className=\"text-sm text-gray-600\">Available 24/7 for technical support</p>\n                </div>\n              </div>\n              <div className=\"bg-white p-3 rounded-lg\">\n                <strong>Tell them:</strong> \"My domain alphaaistockx.com is not resolving to my\n                hosting package. I need help with DNS configuration.\"\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"mt-8 border-purple-500 bg-purple-50\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-purple-700\">\n              <Clock className=\"h-6 w-6\" />\n              DNS PROPAGATION CHECKER\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              <p>Use these tools to check if your DNS changes are working:</p>\n              <div className=\"grid gap-2\">\n                <a\n                  href=\"https://www.whatsmydns.net/#A/alphaaistockx.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"bg-white p-3 rounded-lg border hover:border-purple-500 transition-colors\"\n                >\n                  🔍 Check DNS Propagation Status\n                </a>\n                <a\n                  href=\"https://dnschecker.org/#A/alphaaistockx.com\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"bg-white p-3 rounded-lg border hover:border-purple-500 transition-colors\"\n                >\n                  🌍 Global DNS Checker\n                </a>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/education/TradingEducationCenter.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'studyProgress' is assigned a value but never used.",
        "line": 83,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Progress } from '@/components/ui/progress';\n\nimport { tradingEducationService } from '../../services/trading-education-service';\n\n// Simple text-based icon placeholders\nconst BookOpen = ({ className }: { className?: string }) => <span className={className}>📚</span>;\nconst GraduationCap = ({ className }: { className?: string }) => (\n  <span className={className}>🎓</span>\n);\nconst Target = ({ className }: { className?: string }) => <span className={className}>🎯</span>;\nconst CheckCircle = ({ className }: { className?: string }) => (\n  <span className={className}>✅</span>\n);\nconst Clock = ({ className }: { className?: string }) => <span className={className}>⏰</span>;\nconst Star = ({ className }: { className?: string }) => <span className={className}>⭐</span>;\nconst TrendingUp = ({ className }: { className?: string }) => <span className={className}>📈</span>;\nconst BarChart3 = ({ className }: { className?: string }) => <span className={className}>📊</span>;\nconst Brain = ({ className }: { className?: string }) => <span className={className}>🧠</span>;\nconst Award = ({ className }: { className?: string }) => <span className={className}>🏆</span>;\nconst Play = ({ className }: { className?: string }) => <span className={className}>▶️</span>;\nconst Lightbulb = ({ className }: { className?: string }) => <span className={className}>💡</span>;\n\ninterface TradingEducationCenterProps {\n  className?: string;\n}\n\ninterface TestQuestion {\n  id: string;\n  question: string;\n  options: string[];\n  correct: number;\n  explanation: string;\n}\n\ninterface TestResults {\n  score: number;\n  correct: number;\n  total: number;\n  passed: boolean;\n  recommendations: string[];\n}\n\ninterface StudyProgress {\n  [key: string]: {\n    completed: boolean;\n    score?: number;\n    timeSpent?: number;\n  };\n}\n\ninterface EducationalTopic {\n  id: string;\n  title: string;\n  description: string;\n  icon: React.ComponentType<{ className?: string }>;\n  lessons: number;\n  duration: string;\n  difficulty: string;\n}\n\ninterface SeriesExam {\n  id: string;\n  title: string;\n  description: string;\n  questions: number;\n  timeLimit: number;\n  passingScore: number;\n  topics: string[];\n}\n\nexport default function TradingEducationCenter({ className = '' }: TradingEducationCenterProps) {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [selectedSeries, setSelectedSeries] = useState('series_7');\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [testQuestions, setTestQuestions] = useState<TestQuestion[]>([]);\n  const [userAnswers, setUserAnswers] = useState<Record<string, number>>({});\n  const [testResults, setTestResults] = useState<TestResults | null>(null);\n  const [studyProgress, setStudyProgress] = useState<StudyProgress>({});\n\n  useEffect(() => {\n    const initEducation = async () => {\n      try {\n        await tradingEducationService.initialize();\n        loadTestQuestions();\n        loadUserProgress();\n      } catch (error) {\n        console.error('Error initializing education service:', error);\n      }\n    };\n    initEducation();\n  }, []);\n\n  const loadTestQuestions = async () => {\n    const questions: TestQuestion[] = [\n      {\n        id: '1',\n        question: 'What is the primary purpose of technical analysis?',\n        options: [\n          'To predict company earnings',\n          'To analyze price patterns and trends',\n          'To calculate dividend yields',\n          'To assess company management',\n        ],\n        correct: 1,\n        explanation: 'Technical analysis focuses on price patterns and market trends.',\n      },\n    ];\n    setTestQuestions(questions);\n    setCurrentQuestion(0);\n    setUserAnswers({});\n    setTestResults(null);\n  };\n\n  const loadUserProgress = async () => {\n    setStudyProgress({\n      basics: { completed: true, score: 85 },\n      technical_analysis: { completed: false },\n    });\n  };\n\n  const handleAnswerSubmit = (questionId: string, answer: number) => {\n    setUserAnswers(prev => ({\n      ...prev,\n      [questionId]: answer,\n    }));\n\n    if (currentQuestion < testQuestions.length - 1) {\n      setCurrentQuestion(prev => prev + 1);\n    } else {\n      calculateTestResults();\n    }\n  };\n  const calculateTestResults = () => {\n    const correct = testQuestions.filter(q => userAnswers[q.id] === q.correct).length;\n    const total = testQuestions.length;\n    const score = (correct / total) * 100;\n    const passed = score >= 70;\n\n    const results: TestResults = {\n      score,\n      correct,\n      total,\n      passed,\n      recommendations: passed\n        ? ['Excellent work! You can proceed to the next level.']\n        : ['More study needed. Focus on fundamental concepts.'],\n    };\n\n    setTestResults(results);\n  };\n\n  const educationalTopics: EducationalTopic[] = [\n    {\n      id: 'securities_basics',\n      title: 'Securities Fundamentals',\n      description: 'Learn about stocks, bonds, and other securities',\n      icon: TrendingUp,\n      lessons: 12,\n      duration: '4 hours',\n      difficulty: 'Beginner',\n    },\n    {\n      id: 'market_analysis',\n      title: 'Market Analysis',\n      description: 'Technical and fundamental analysis techniques',\n      icon: BarChart3,\n      lessons: 15,\n      duration: '6 hours',\n      difficulty: 'Intermediate',\n    },\n    {\n      id: 'options_trading',\n      title: 'Options Trading',\n      description: 'Comprehensive options strategies and risk management',\n      icon: Target,\n      lessons: 18,\n      duration: '8 hours',\n      difficulty: 'Advanced',\n    },\n    {\n      id: 'risk_management',\n      title: 'Risk Management',\n      description: 'Portfolio risk assessment and mitigation strategies',\n      icon: Brain,\n      lessons: 10,\n      duration: '5 hours',\n      difficulty: 'Intermediate',\n    },\n  ];\n\n  const seriesExams: SeriesExam[] = [\n    {\n      id: 'series_6',\n      title: 'Series 6',\n      description: 'Investment Company and Variable Contracts Products Representative',\n      questions: 100,\n      timeLimit: 135,\n      passingScore: 70,\n      topics: [\n        'Investment Company Products (50%)',\n        'Securities and Tax Regulations (25%)',\n        'Customer Accounts and Prohibited Activities (25%)',\n      ],\n    },\n    {\n      id: 'series_7',\n      title: 'Series 7',\n      description: 'General Securities Representative',\n      questions: 125,\n      timeLimit: 225,\n      passingScore: 72,\n      topics: [\n        'Seeks Business for the Broker-Dealer (9%)',\n        \"Opens Accounts After Obtaining and Evaluating Customers' Financial Profile (11%)\",\n        'Provides Customers with Information About Investments (31%)',\n        \"Obtains and Verifies Customers' Purchase and Sales Instructions (16%)\",\n        'Processes Transactions (4%)',\n        'Maintains Customer Accounts (29%)',\n      ],\n    },\n  ];\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      {/* Header */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-purple-900/20 border-blue-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center gap-3 text-2xl\">\n            <GraduationCap className=\"h-8 w-8 text-blue-400\" />\n            Trading Education Center\n            <Badge className=\"bg-gradient-to-r from-blue-500 to-purple-500\">\n              <Star className=\"h-3 w-3 mr-1\" />\n              Series 6 & 7 Prep\n            </Badge>\n          </CardTitle>\n          <CardDescription className=\"text-blue-200\">\n            Master trading fundamentals with our comprehensive education platform\n          </CardDescription>\n        </CardHeader>\n      </Card>\n\n      {/* Main Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5 bg-slate-800/50 backdrop-blur-sm\">\n          <TabsTrigger value=\"overview\" className=\"flex items-center gap-2\">\n            <BookOpen className=\"h-4 w-4\" />\n            Overview\n          </TabsTrigger>\n          <TabsTrigger value=\"lessons\" className=\"flex items-center gap-2\">\n            <Lightbulb className=\"h-4 w-4\" />\n            Lessons\n          </TabsTrigger>\n          <TabsTrigger value=\"practice\" className=\"flex items-center gap-2\">\n            <Target className=\"h-4 w-4\" />\n            Practice Tests\n          </TabsTrigger>\n          <TabsTrigger value=\"series\" className=\"flex items-center gap-2\">\n            <Award className=\"h-4 w-4\" />\n            Series Exams\n          </TabsTrigger>\n          <TabsTrigger value=\"progress\" className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-4 w-4\" />\n            Progress\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {educationalTopics.map(topic => (\n              <Card\n                key={topic.id}\n                className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20 hover:border-blue-400/40 transition-all cursor-pointer\"\n              >\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <topic.icon className=\"h-8 w-8 text-blue-400\" />\n                    <Badge className=\"text-xs\">{topic.difficulty}</Badge>\n                  </div>\n                  <CardTitle className=\"text-white text-lg\">{topic.title}</CardTitle>\n                  <CardDescription className=\"text-slate-400 text-sm\">\n                    {topic.description}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Lessons:</span>\n                      <span className=\"text-blue-400\">{topic.lessons}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Duration:</span>\n                      <span className=\"text-blue-400\">{topic.duration}</span>\n                    </div>\n                  </div>\n                  <Button className=\"w-full mt-4 bg-blue-600 hover:bg-blue-700\">\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    Start Learning\n                  </Button>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n              <CardContent className=\"p-6 text-center\">\n                <CheckCircle className=\"h-12 w-12 text-green-400 mx-auto mb-3\" />\n                <div className=\"text-2xl font-bold text-green-400\">0</div>\n                <div className=\"text-slate-400\">Questions Correct</div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n              <CardContent className=\"p-6 text-center\">\n                <Clock className=\"h-12 w-12 text-blue-400 mx-auto mb-3\" />\n                <div className=\"text-2xl font-bold text-blue-400\">0%</div>\n                <div className=\"text-slate-400\">Success Rate</div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-purple-500/20\">\n              <CardContent className=\"p-6 text-center\">\n                <Award className=\"h-12 w-12 text-purple-400 mx-auto mb-3\" />\n                <div className=\"text-2xl font-bold text-purple-400\">0</div>\n                <div className=\"text-slate-400\">Total Questions</div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        {/* Practice Tests Tab */}\n        <TabsContent value=\"practice\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"text-xl font-bold text-white\">Practice Tests</h3>\n              <p className=\"text-slate-400\">Test your knowledge with realistic exam questions</p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button\n                variant={selectedSeries === 'series_6' ? 'default' : 'outline'}\n                onClick={() => {\n                  setSelectedSeries('series_6');\n                  loadTestQuestions();\n                }}\n              >\n                Series 6\n              </Button>\n              <Button\n                variant={selectedSeries === 'series_7' ? 'default' : 'outline'}\n                onClick={() => {\n                  setSelectedSeries('series_7');\n                  loadTestQuestions();\n                }}\n              >\n                Series 7\n              </Button>\n            </div>\n          </div>\n\n          {testResults ? (\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center gap-2\">\n                  <CheckCircle className=\"h-6 w-6 text-green-400\" />\n                  Test Results\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-4xl font-bold text-green-400 mb-2\">\n                      {testResults.score.toFixed(0)}%\n                    </div>\n                    <div className=\"text-slate-300\">\n                      {testResults.correct} out of {testResults.total} correct\n                    </div>\n                    <Badge className={testResults.passed ? 'bg-green-600' : 'bg-red-600'}>\n                      {testResults.passed ? 'PASSED' : 'NEEDS IMPROVEMENT'}\n                    </Badge>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <h4 className=\"text-white font-semibold\">Recommendations:</h4>\n                    {testResults.recommendations.map((rec, index) => (\n                      <div key={index} className=\"flex items-start gap-2\">\n                        <Lightbulb className=\"h-4 w-4 text-yellow-400 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-slate-300 text-sm\">{rec}</span>\n                      </div>\n                    ))}\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    <Button onClick={() => loadTestQuestions()} className=\"flex-1\">\n                      Retake Test\n                    </Button>\n                    <Button variant=\"outline\" className=\"flex-1\">\n                      Review Answers\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ) : testQuestions.length > 0 ? (\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"text-white\">\n                    Question {currentQuestion + 1} of {testQuestions.length}\n                  </CardTitle>\n                  <Progress\n                    value={((currentQuestion + 1) / testQuestions.length) * 100}\n                    className=\"w-32\"\n                  />\n                </div>\n              </CardHeader>\n              <CardContent>\n                {testQuestions[currentQuestion] && (\n                  <div className=\"space-y-4\">\n                    <div className=\"text-white text-lg font-medium\">\n                      {testQuestions[currentQuestion].question}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      {testQuestions[currentQuestion].options.map((option, index) => (\n                        <Button\n                          key={index}\n                          variant=\"outline\"\n                          className=\"w-full text-left justify-start h-auto p-4 text-wrap\"\n                          onClick={() =>\n                            handleAnswerSubmit(testQuestions[currentQuestion].id, index)\n                          }\n                        >\n                          <span className=\"font-semibold mr-3\">\n                            {String.fromCharCode(65 + index)}.\n                          </span>\n                          {option}\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ) : (\n            <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n              <CardContent className=\"p-8 text-center\">\n                <Target className=\"h-16 w-16 text-blue-400 mx-auto mb-4\" />\n                <h3 className=\"text-xl font-bold text-white mb-2\">Ready to Practice?</h3>\n                <p className=\"text-slate-400 mb-4\">\n                  Select a series exam and start your practice test\n                </p>\n                <Button onClick={loadTestQuestions}>Start Practice Test</Button>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Series Exams Tab */}\n        <TabsContent value=\"series\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {seriesExams.map(exam => (\n              <Card key={exam.id} className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n                <CardHeader>\n                  <CardTitle className=\"text-white flex items-center gap-2\">\n                    <Award className=\"h-6 w-6 text-blue-400\" />\n                    {exam.title}\n                  </CardTitle>\n                  <CardDescription className=\"text-slate-300\">{exam.description}</CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <span className=\"text-slate-400\">Questions:</span>\n                        <div className=\"text-white font-semibold\">{exam.questions}</div>\n                      </div>\n                      <div>\n                        <span className=\"text-slate-400\">Time Limit:</span>\n                        <div className=\"text-white font-semibold\">{exam.timeLimit} min</div>\n                      </div>\n                      <div>\n                        <span className=\"text-slate-400\">Passing Score:</span>\n                        <div className=\"text-white font-semibold\">{exam.passingScore}%</div>\n                      </div>\n                      <div>\n                        <span className=\"text-slate-400\">Format:</span>\n                        <div className=\"text-white font-semibold\">Multiple Choice</div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"text-white font-semibold mb-2\">Exam Topics:</h4>\n                      <div className=\"space-y-1\">\n                        {exam.topics.map((topic, index) => (\n                          <div\n                            key={index}\n                            className=\"text-sm text-slate-300 flex items-start gap-2\"\n                          >\n                            <CheckCircle className=\"h-3 w-3 text-green-400 mt-1 flex-shrink-0\" />\n                            {topic}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-2\">\n                      <Button className=\"flex-1\">Study Plan</Button>\n                      <Button variant=\"outline\" className=\"flex-1\">\n                        Practice Exam\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Progress Tab placeholder */}\n        <TabsContent value=\"progress\" className=\"space-y-6\">\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n            <CardContent className=\"p-8 text-center\">\n              <BarChart3 className=\"h-16 w-16 text-blue-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-white mb-2\">Progress Tracking</h3>\n              <p className=\"text-slate-400 mb-4\">\n                Your study progress will appear here as you complete lessons and practice tests\n              </p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Lessons Tab placeholder */}\n        <TabsContent value=\"lessons\" className=\"space-y-6\">\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n            <CardContent className=\"p-8 text-center\">\n              <BookOpen className=\"h-16 w-16 text-blue-400 mx-auto mb-4\" />\n              <h3 className=\"text-xl font-bold text-white mb-2\">Interactive Lessons</h3>\n              <p className=\"text-slate-400 mb-4\">\n                Comprehensive trading lessons will be available here\n              </p>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/enterprise/EnterpriseFeatures.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 44,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 44,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [811, 814], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [811, 814], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 50,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 50,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [913, 916], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [913, 916], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'selectedPlan' is assigned a value but never used.",
        "line": 54,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Building2,\n  Shield,\n  Globe,\n  Crown,\n  Lock,\n  Database,\n  Smartphone,\n  DollarSign,\n  TrendingUp,\n  Target,\n  Rocket,\n  Star,\n  CheckCircle,\n} from 'lucide-react';\n\ninterface EnterprisePlan {\n  id: string;\n  name: string;\n  price: string;\n  period: string;\n  description: string;\n  features: string[];\n  color: string;\n  popular: boolean;\n}\n\ninterface CustomQuote {\n  users: number;\n  volume: number;\n  features: string[];\n}\n\ninterface WhitelabelFeature {\n  title: string;\n  description: string;\n  icon: React.ComponentType<any>;\n}\n\ninterface ComplianceFeature {\n  title: string;\n  status: string;\n  icon: React.ComponentType<any>;\n}\n\nexport default function EnterpriseFeatures() {\n  const [selectedPlan, setSelectedPlan] = useState('enterprise');\n  const [customQuote, setCustomQuote] = useState<CustomQuote>({\n    users: 1000,\n    volume: 10000000,\n    features: [],\n  });\n\n  const enterprisePlans: EnterprisePlan[] = [\n    {\n      id: 'startup',\n      name: 'Startup Pro',\n      price: '$2,999',\n      period: '/month',\n      description: 'Perfect for growing fintech startups',\n      features: [\n        'Up to 1,000 users',\n        'Basic AI trading algorithms',\n        'Standard API access',\n        'Email support',\n        'Basic analytics',\n        'Mobile app access',\n      ],\n      color: 'from-blue-400 to-cyan-500',\n      popular: false,\n    },\n    {\n      id: 'enterprise',\n      name: 'Enterprise Elite',\n      price: '$9,999',\n      period: '/month',\n      description: 'Full-featured enterprise solution',\n      features: [\n        'Up to 10,000 users',\n        'Advanced AI algorithms',\n        'Full API access',\n        '24/7 priority support',\n        'Advanced analytics',\n        'White-label options',\n        'Custom integrations',\n        'Dedicated account manager',\n      ],\n      color: 'from-purple-400 to-pink-500',\n      popular: true,\n    },\n    {\n      id: 'institutional',\n      name: 'Institutional',\n      price: '$49,999',\n      period: '/month',\n      description: 'For banks and large institutions',\n      features: [\n        'Unlimited users',\n        'Quantum AI algorithms',\n        'Custom API development',\n        'Dedicated support team',\n        'Real-time analytics',\n        'Full white-label',\n        'On-premise deployment',\n        'Regulatory compliance',\n        'Custom neural networks',\n      ],\n      color: 'from-yellow-400 to-orange-500',\n      popular: false,\n    },\n  ];\n\n  const whitelabelFeatures: WhitelabelFeature[] = [\n    {\n      title: 'Complete Branding',\n      description: 'Your logo, colors, and branding throughout',\n      icon: Crown,\n    },\n    {\n      title: 'Custom Domain',\n      description: 'yourcompany.com with SSL certificate',\n      icon: Globe,\n    },\n    {\n      title: 'Mobile Apps',\n      description: 'iOS and Android apps with your branding',\n      icon: Smartphone,\n    },\n    {\n      title: 'API Integration',\n      description: 'Seamless integration with your existing systems',\n      icon: Database,\n    },\n  ];\n\n  const complianceFeatures: ComplianceFeature[] = [\n    {\n      title: 'SOC 2 Type II',\n      status: 'Certified',\n      icon: Shield,\n    },\n    {\n      title: 'GDPR Compliant',\n      status: 'Verified',\n      icon: Lock,\n    },\n    {\n      title: 'FINRA Approved',\n      status: 'Registered',\n      icon: Building2,\n    },\n    {\n      title: 'ISO 27001',\n      status: 'Certified',\n      icon: CheckCircle,\n    },\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Enterprise Plans */}\n      <Card className=\"bg-gradient-to-r from-gray-900/90 to-black/90 border-2 border-cyan-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-3xl\">\n            <Building2 className=\"h-8 w-8 mr-3 text-cyan-400\" />\n            🏢 Enterprise Solutions\n            <Badge className=\"ml-4 bg-gradient-to-r from-cyan-400 to-blue-500 text-lg px-4 py-2\">\n              <Star className=\"h-4 w-4 mr-2\" />\n              ENTERPRISE READY\n            </Badge>\n          </CardTitle>\n          <p className=\"text-gray-300 text-lg\">\n            Scale your business with our enterprise-grade AI trading platform\n          </p>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {enterprisePlans.map((plan: EnterprisePlan) => (\n              <div\n                key={plan.id}\n                className={`relative p-6 rounded-xl border-2 transition-all cursor-pointer ${\n                  plan.popular\n                    ? 'border-purple-400/50 bg-gradient-to-br from-purple-500/10 to-pink-500/10 scale-105'\n                    : 'border-gray-600/30 bg-gradient-to-br from-gray-800/20 to-gray-900/20 hover:scale-102'\n                }`}\n                onClick={() => setSelectedPlan(plan.id)}\n              >\n                {plan.popular && (\n                  <div className=\"absolute -top-4 left-1/2 transform -translate-x-1/2\">\n                    <Badge className=\"bg-gradient-to-r from-purple-400 to-pink-500 text-white px-4 py-2 text-sm\">\n                      <Crown className=\"h-4 w-4 mr-1\" />\n                      MOST POPULAR\n                    </Badge>\n                  </div>\n                )}\n\n                <div className=\"text-center mb-6\">\n                  <h3 className=\"text-2xl font-bold text-white mb-2\">{plan.name}</h3>\n                  <p className=\"text-gray-400 mb-4\">{plan.description}</p>\n                  <div className=\"flex items-baseline justify-center\">\n                    <span\n                      className={`text-4xl font-bold bg-gradient-to-r ${plan.color} bg-clip-text text-transparent`}\n                    >\n                      {plan.price}\n                    </span>\n                    <span className=\"text-gray-400 ml-2\">{plan.period}</span>\n                  </div>\n                </div>\n\n                <ul className=\"space-y-3 mb-6\">\n                  {plan.features.map((feature: string, index: number) => (\n                    <li key={index} className=\"flex items-center text-gray-300\">\n                      <CheckCircle className=\"h-5 w-5 text-green-400 mr-3 flex-shrink-0\" />\n                      {feature}\n                    </li>\n                  ))}\n                </ul>\n\n                <Button\n                  className={`w-full bg-gradient-to-r ${plan.color} text-black font-bold py-3 text-lg hover:scale-105 transition-all`}\n                >\n                  Get Started\n                </Button>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* White Label Solutions */}\n      <Card className=\"bg-gradient-to-r from-purple-900/20 to-pink-900/20 border-purple-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Crown className=\"h-7 w-7 mr-3 text-purple-400\" />\n            👑 White Label Solutions\n            <Badge className=\"ml-3 bg-gradient-to-r from-purple-400 to-pink-500\">\n              <Rocket className=\"h-4 w-4 mr-1\" />\n              LAUNCH YOUR BRAND\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {whitelabelFeatures.map((feature: WhitelabelFeature, index: number) => {\n              const IconComponent = feature.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\"\n                >\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"p-3 bg-purple-400/20 rounded-lg mr-4\">\n                      <IconComponent className=\"h-6 w-6 text-purple-400\" />\n                    </div>\n                    <h3 className=\"text-white font-bold text-lg\">{feature.title}</h3>\n                  </div>\n                  <p className=\"text-gray-300\">{feature.description}</p>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"mt-8 p-6 bg-gradient-to-r from-yellow-500/10 to-orange-500/10 rounded-lg border border-yellow-400/30\">\n            <h3 className=\"text-white font-bold text-xl mb-4\">🚀 Launch Timeline</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-green-400 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-black font-bold\">1</span>\n                </div>\n                <p className=\"text-white font-semibold\">Setup</p>\n                <p className=\"text-gray-400 text-sm\">1-2 weeks</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-blue-400 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-black font-bold\">2</span>\n                </div>\n                <p className=\"text-white font-semibold\">Customization</p>\n                <p className=\"text-gray-400 text-sm\">2-3 weeks</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-purple-400 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-black font-bold\">3</span>\n                </div>\n                <p className=\"text-white font-semibold\">Testing</p>\n                <p className=\"text-gray-400 text-sm\">1 week</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"w-12 h-12 bg-yellow-400 rounded-full flex items-center justify-center mx-auto mb-2\">\n                  <span className=\"text-black font-bold\">4</span>\n                </div>\n                <p className=\"text-white font-semibold\">Launch</p>\n                <p className=\"text-gray-400 text-sm\">Go Live!</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Compliance & Security */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Shield className=\"h-7 w-7 mr-3 text-green-400\" />\n            🔒 Compliance & Security\n            <Badge className=\"ml-3 bg-gradient-to-r from-green-400 to-emerald-500\">\n              <Lock className=\"h-4 w-4 mr-1\" />\n              BANK-GRADE SECURITY\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {complianceFeatures.map((feature: ComplianceFeature, index: number) => {\n              const IconComponent = feature.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30 text-center\"\n                >\n                  <div className=\"p-4 bg-green-400/20 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                    <IconComponent className=\"h-8 w-8 text-green-400\" />\n                  </div>\n                  <h3 className=\"text-white font-bold mb-2\">{feature.title}</h3>\n                  <Badge className=\"bg-green-500\">{feature.status}</Badge>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <h4 className=\"text-white font-bold mb-3\">🔐 Data Protection</h4>\n              <ul className=\"text-gray-300 space-y-2 text-sm\">\n                <li>• AES-256 encryption</li>\n                <li>• Zero-knowledge architecture</li>\n                <li>• Multi-factor authentication</li>\n                <li>• Regular security audits</li>\n              </ul>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n              <h4 className=\"text-white font-bold mb-3\">📊 Regulatory Compliance</h4>\n              <ul className=\"text-gray-300 space-y-2 text-sm\">\n                <li>• FINRA registered</li>\n                <li>• SEC compliant</li>\n                <li>• GDPR ready</li>\n                <li>• SOX compliance</li>\n              </ul>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-yellow-500/10 to-orange-500/10 rounded-lg border border-yellow-400/30\">\n              <h4 className=\"text-white font-bold mb-3\">🏦 Financial Security</h4>\n              <ul className=\"text-gray-300 space-y-2 text-sm\">\n                <li>• FDIC insured accounts</li>\n                <li>• Segregated client funds</li>\n                <li>• Real-time monitoring</li>\n                <li>• Fraud detection AI</li>\n              </ul>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Revenue Sharing Program */}\n      <Card className=\"bg-gradient-to-r from-yellow-900/20 to-orange-900/20 border-yellow-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <DollarSign className=\"h-7 w-7 mr-3 text-yellow-400\" />\n            💰 Revenue Sharing Program\n            <Badge className=\"ml-3 bg-gradient-to-r from-yellow-400 to-orange-500\">\n              <TrendingUp className=\"h-4 w-4 mr-1\" />\n              EARN TOGETHER\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30 text-center\">\n              <div className=\"text-4xl font-bold text-green-400 mb-2\">70%</div>\n              <h3 className=\"text-white font-bold mb-2\">Revenue Share</h3>\n              <p className=\"text-gray-300 text-sm\">\n                You keep 70% of all subscription revenue from your platform\n              </p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30 text-center\">\n              <div className=\"text-4xl font-bold text-blue-400 mb-2\">$50K+</div>\n              <h3 className=\"text-white font-bold mb-2\">Monthly Potential</h3>\n              <p className=\"text-gray-300 text-sm\">\n                Top partners earn $50K+ per month in recurring revenue\n              </p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30 text-center\">\n              <div className=\"text-4xl font-bold text-purple-400 mb-2\">24/7</div>\n              <h3 className=\"text-white font-bold mb-2\">Support</h3>\n              <p className=\"text-gray-300 text-sm\">\n                Dedicated partner success team to help you grow\n              </p>\n            </div>\n          </div>\n\n          <div className=\"mt-8 p-6 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-lg border border-cyan-400/30\">\n            <h3 className=\"text-white font-bold text-xl mb-4\">🎯 Partner Benefits</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"h-5 w-5 text-green-400\" />\n                <span className=\"text-gray-300\">Marketing co-op funds</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"h-5 w-5 text-green-400\" />\n                <span className=\"text-gray-300\">Lead generation support</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"h-5 w-5 text-green-400\" />\n                <span className=\"text-gray-300\">Sales training program</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <CheckCircle className=\"h-5 w-5 text-green-400\" />\n                <span className=\"text-gray-300\">Technical integration help</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Contact Enterprise Sales */}\n      <Card className=\"bg-gradient-to-r from-cyan-900/20 to-blue-900/20 border-cyan-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Target className=\"h-7 w-7 mr-3 text-cyan-400\" />\n            🎯 Ready to Scale Your Business?\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <div>\n              <h3 className=\"text-white font-bold text-xl mb-4\">Get Custom Enterprise Quote</h3>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-gray-300 text-sm font-medium\">Expected Users</label>\n                  <Input\n                    type=\"number\"\n                    value={customQuote.users}\n                    onChange={e =>\n                      setCustomQuote({ ...customQuote, users: Number(e.target.value) })\n                    }\n                    className=\"bg-black/20 border-cyan-400/30 text-white\"\n                  />\n                </div>\n                <div>\n                  <label className=\"text-gray-300 text-sm font-medium\">\n                    Monthly Trading Volume ($)\n                  </label>\n                  <Input\n                    type=\"number\"\n                    value={customQuote.volume}\n                    onChange={e =>\n                      setCustomQuote({ ...customQuote, volume: Number(e.target.value) })\n                    }\n                    className=\"bg-black/20 border-cyan-400/30 text-white\"\n                  />\n                </div>\n                <Button className=\"w-full bg-gradient-to-r from-cyan-400 to-blue-500 text-black font-bold py-3\">\n                  Get Custom Quote\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n                <h4 className=\"text-white font-bold mb-3\">📞 Enterprise Sales</h4>\n                <p className=\"text-gray-300 mb-3\">Speak with our enterprise team</p>\n                <Button className=\"bg-green-500 hover:bg-green-600 text-black font-bold\">\n                  Schedule Demo Call\n                </Button>\n              </div>\n\n              <div className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n                <h4 className=\"text-white font-bold mb-3\">🚀 Fast Track Setup</h4>\n                <p className=\"text-gray-300 mb-3\">Get your platform live in 30 days</p>\n                <Button className=\"bg-purple-500 hover:bg-purple-600 text-white font-bold\">\n                  Start Fast Track\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/esg/SustainableInvesting.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 6,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 7,
        "endColumn": 1,
        "fix": { "range": [142, 143], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 167,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 167,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4467, 4470], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4467, 4470], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 175,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 175,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4697, 4700], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4697, 4700], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 182,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 182,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4853, 4856], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4853, 4856], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 190,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 190,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5116, 5119], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5116, 5119], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 194,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 194,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5226, 5229], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5226, 5229], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Leaf,\n  BarChart3,\n  TrendingUp,\n  Globe,\n  Wind,\n  Droplets,\n  Sun,\n  Sprout,\n  TreePine,\n  Recycle,\n  Zap,\n  AlertTriangle,\n  ThumbsUp,\n  Users,\n  Building2,\n} from 'lucide-react';\n\nexport default function SustainableInvesting() {\n  const [esgData, setEsgData] = useState({\n    portfolioScore: {\n      overall: 87 + Math.random() * 5,\n      environmental: 92 + Math.random() * 5,\n      social: 84 + Math.random() * 5,\n      governance: 86 + Math.random() * 5,\n    },\n    impactMetrics: {\n      carbonOffset: 1247 + Math.random() * 100,\n      renewableEnergy: 78 + Math.random() * 5,\n      waterConservation: 1.5 + Math.random() * 0.5,\n      sustainableMaterials: 82 + Math.random() * 5,\n    },\n    performance: {\n      ytd: 14.7 + Math.random() * 3,\n      oneYear: 24.8 + Math.random() * 5,\n      threeYear: 67.9 + Math.random() * 10,\n      fiveYear: 124.5 + Math.random() * 15,\n    },\n    sustainableAUM: 478000000 + Math.random() * 10000000,\n    impactInvestments: 124000000 + Math.random() * 5000000,\n  });\n\n  const [esgStocks, setEsgStocks] = useState([\n    {\n      ticker: 'ENRG',\n      name: 'CleanEnergy Solutions',\n      sector: 'Renewable Energy',\n      esgRating: 'AAA',\n      price: 87.45 + Math.random() * 5,\n      change: 3.7 + Math.random() * 2,\n      marketCap: '47.8B',\n      recommendation: 'Strong Buy',\n    },\n    {\n      ticker: 'WATR',\n      name: 'AquaPure Technologies',\n      sector: 'Water Treatment',\n      esgRating: 'AA',\n      price: 124.78 + Math.random() * 8,\n      change: 2.4 + Math.random() * 2,\n      marketCap: '28.5B',\n      recommendation: 'Buy',\n    },\n    {\n      ticker: 'SOLR',\n      name: 'SolarMax Industries',\n      sector: 'Solar Energy',\n      esgRating: 'AAA',\n      price: 215.92 + Math.random() * 10,\n      change: 4.8 + Math.random() * 2,\n      marketCap: '65.2B',\n      recommendation: 'Strong Buy',\n    },\n    {\n      ticker: 'GRFM',\n      name: 'GreenFarm Organics',\n      sector: 'Sustainable Agriculture',\n      esgRating: 'AA',\n      price: 78.34 + Math.random() * 5,\n      change: 1.9 + Math.random() * 2,\n      marketCap: '12.7B',\n      recommendation: 'Buy',\n    },\n  ]);\n\n  const [impactFunds, setImpactFunds] = useState([\n    {\n      ticker: 'CLMT',\n      name: 'Climate Action ETF',\n      focus: 'Carbon Reduction',\n      aum: '$2.4B',\n      expense: '0.45%',\n      ytdReturn: 18.7 + Math.random() * 5,\n      rating: 5,\n    },\n    {\n      ticker: 'SDGX',\n      name: 'Sustainable Development Fund',\n      focus: 'UN SDG Alignment',\n      aum: '$1.8B',\n      expense: '0.52%',\n      ytdReturn: 15.4 + Math.random() * 5,\n      rating: 4,\n    },\n    {\n      ticker: 'OCNX',\n      name: 'Ocean Conservation Fund',\n      focus: 'Marine Ecosystems',\n      aum: '$780M',\n      expense: '0.58%',\n      ytdReturn: 12.9 + Math.random() * 5,\n      rating: 5,\n    },\n    {\n      ticker: 'EQTX',\n      name: 'Social Equity Portfolio',\n      focus: 'Diversity & Inclusion',\n      aum: '$1.2B',\n      expense: '0.49%',\n      ytdReturn: 14.2 + Math.random() * 5,\n      rating: 4,\n    },\n  ]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateESGData();\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateESGData = () => {\n    setEsgData(prev => ({\n      ...prev,\n      portfolioScore: {\n        ...prev.portfolioScore,\n        overall: Math.min(100, prev.portfolioScore.overall + (Math.random() - 0.3) * 0.5),\n        environmental: Math.min(\n          100,\n          prev.portfolioScore.environmental + (Math.random() - 0.3) * 0.5\n        ),\n        social: Math.min(100, prev.portfolioScore.social + (Math.random() - 0.3) * 0.5),\n        governance: Math.min(100, prev.portfolioScore.governance + (Math.random() - 0.3) * 0.5),\n      },\n      impactMetrics: {\n        ...prev.impactMetrics,\n        carbonOffset: prev.impactMetrics.carbonOffset + (Math.random() - 0.3) * 5,\n        renewableEnergy: Math.min(\n          100,\n          prev.impactMetrics.renewableEnergy + (Math.random() - 0.3) * 0.5\n        ),\n      },\n    }));\n\n    setEsgStocks(prev =>\n      prev.map((stock: any) => ({\n        ...stock,\n        price: stock.price * (1 + (Math.random() - 0.45) * 0.01),\n        change: stock.change * (1 + (Math.random() - 0.45) * 0.05),\n      }))\n    );\n\n    setImpactFunds(prev =>\n      prev.map((fund: any) => ({\n        ...fund,\n        ytdReturn: fund.ytdReturn * (1 + (Math.random() - 0.45) * 0.01),\n      }))\n    );\n  };\n\n  const getScoreColor = (score: any) => {\n    if (score >= 90) return 'text-green-400';\n    if (score >= 80) return 'text-emerald-400';\n    if (score >= 70) return 'text-blue-400';\n    if (score >= 60) return 'text-yellow-400';\n    return 'text-red-400';\n  };\n\n  const getChangeColor = (change: any) => {\n    return change >= 0 ? 'text-green-400' : 'text-red-400';\n  };\n\n  const getRatingStars = (rating: any) => {\n    return '★'.repeat(rating) + '☆'.repeat(5 - rating);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* ESG Portfolio Dashboard */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Leaf className=\"h-7 w-7 mr-3 text-green-400\" />\n            🌱 ESG & Sustainable Investing\n            <Badge className=\"ml-3 bg-gradient-to-r from-green-400 to-emerald-500\">\n              <Globe className=\"h-4 w-4 mr-1\" />\n              CLIMATE POSITIVE\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Leaf className=\"h-8 w-8 text-green-400\" />\n                <Badge className=\"bg-green-500\">ESG SCORE</Badge>\n              </div>\n              <div\n                className={`text-3xl font-bold ${getScoreColor(esgData.portfolioScore.overall)} mb-2`}\n              >\n                {esgData.portfolioScore.overall.toFixed(1)}\n              </div>\n              <p className=\"text-green-400 font-semibold\">Portfolio ESG Rating</p>\n              <p className=\"text-gray-400 text-sm\">Top 5% of all portfolios</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Recycle className=\"h-8 w-8 text-blue-400\" />\n                <Badge className=\"bg-blue-500\">CARBON</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-blue-400 mb-2\">\n                {esgData.impactMetrics.carbonOffset.toFixed(0)} tons\n              </div>\n              <p className=\"text-blue-400 font-semibold\">Carbon Offset</p>\n              <p className=\"text-gray-400 text-sm\">Through portfolio investments</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-emerald-500/10 to-teal-500/10 rounded-lg border border-emerald-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <TrendingUp className=\"h-8 w-8 text-emerald-400\" />\n                <Badge className=\"bg-emerald-500\">RETURNS</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-emerald-400 mb-2\">\n                +{esgData.performance.ytd.toFixed(1)}%\n              </div>\n              <p className=\"text-emerald-400 font-semibold\">YTD Performance</p>\n              <p className=\"text-gray-400 text-sm\">Sustainable investments</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-yellow-500/10 to-amber-500/10 rounded-lg border border-yellow-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <BarChart3 className=\"h-8 w-8 text-yellow-400\" />\n                <Badge className=\"bg-yellow-500\">AUM</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-yellow-400 mb-2\">\n                ${(esgData.sustainableAUM / 1000000).toFixed(1)}M\n              </div>\n              <p className=\"text-yellow-400 font-semibold\">Sustainable AUM</p>\n              <p className=\"text-gray-400 text-sm\">ESG-aligned assets</p>\n            </div>\n          </div>\n\n          {/* ESG Score Breakdown */}\n          <div className=\"mt-8 p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-white font-bold text-xl flex items-center\">\n                <BarChart3 className=\"h-6 w-6 mr-2 text-green-400\" />\n                ESG Score Breakdown\n              </h3>\n              <Button className=\"bg-gradient-to-r from-green-500 to-emerald-500 text-white\">\n                <Leaf className=\"h-4 w-4 mr-2\" />\n                Improve Score\n              </Button>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div>\n                <div className=\"flex justify-between mb-2\">\n                  <div className=\"flex items-center\">\n                    <TreePine className=\"h-5 w-5 mr-2 text-green-400\" />\n                    <span className=\"text-white font-medium\">Environmental</span>\n                  </div>\n                  <span\n                    className={`font-bold ${getScoreColor(esgData.portfolioScore.environmental)}`}\n                  >\n                    {esgData.portfolioScore.environmental.toFixed(1)}\n                  </span>\n                </div>\n                <Progress value={esgData.portfolioScore.environmental} className=\"h-2\" />\n                <div className=\"grid grid-cols-3 gap-4 mt-3\">\n                  <div className=\"text-center\">\n                    <div className=\"p-2 bg-green-400/20 rounded-full w-10 h-10 flex items-center justify-center mx-auto\">\n                      <Recycle className=\"h-5 w-5 text-green-400\" />\n                    </div>\n                    <p className=\"text-gray-400 text-xs mt-1\">Carbon Footprint</p>\n                    <p className=\"text-white font-medium\">94.2</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"p-2 bg-green-400/20 rounded-full w-10 h-10 flex items-center justify-center mx-auto\">\n                      <Droplets className=\"h-5 w-5 text-green-400\" />\n                    </div>\n                    <p className=\"text-gray-400 text-xs mt-1\">Water Usage</p>\n                    <p className=\"text-white font-medium\">89.7</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"p-2 bg-green-400/20 rounded-full w-10 h-10 flex items-center justify-center mx-auto\">\n                      <Wind className=\"h-5 w-5 text-green-400\" />\n                    </div>\n                    <p className=\"text-gray-400 text-xs mt-1\">Clean Energy</p>\n                    <p className=\"text-white font-medium\">96.5</p>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <div className=\"flex justify-between mb-2\">\n                  <div className=\"flex items-center\">\n                    <Users className=\"h-5 w-5 mr-2 text-blue-400\" />\n                    <span className=\"text-white font-medium\">Social</span>\n                  </div>\n                  <span className={`font-bold ${getScoreColor(esgData.portfolioScore.social)}`}>\n                    {esgData.portfolioScore.social.toFixed(1)}\n                  </span>\n                </div>\n                <Progress value={esgData.portfolioScore.social} className=\"h-2\" />\n                <div className=\"grid grid-cols-3 gap-4 mt-3\">\n                  <div className=\"text-center\">\n                    <div className=\"p-2 bg-blue-400/20 rounded-full w-10 h-10 flex items-center justify-center mx-auto\">\n                      <Users className=\"h-5 w-5 text-blue-400\" />\n                    </div>\n                    <p className=\"text-gray-400 text-xs mt-1\">Diversity</p>\n                    <p className=\"text-white font-medium\">87.3</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"p-2 bg-blue-400/20 rounded-full w-10 h-10 flex items-center justify-center mx-auto\">\n                      <ThumbsUp className=\"h-5 w-5 text-blue-400\" />\n                    </div>\n                    <p className=\"text-gray-400 text-xs mt-1\">Human Rights</p>\n                    <p className=\"text-white font-medium\">82.9</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"p-2 bg-blue-400/20 rounded-full w-10 h-10 flex items-center justify-center mx-auto\">\n                      <Globe className=\"h-5 w-5 text-blue-400\" />\n                    </div>\n                    <p className=\"text-gray-400 text-xs mt-1\">Community</p>\n                    <p className=\"text-white font-medium\">84.6</p>\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <div className=\"flex justify-between mb-2\">\n                  <div className=\"flex items-center\">\n                    <Building2 className=\"h-5 w-5 mr-2 text-yellow-400\" />\n                    <span className=\"text-white font-medium\">Governance</span>\n                  </div>\n                  <span className={`font-bold ${getScoreColor(esgData.portfolioScore.governance)}`}>\n                    {esgData.portfolioScore.governance.toFixed(1)}\n                  </span>\n                </div>\n                <Progress value={esgData.portfolioScore.governance} className=\"h-2\" />\n                <div className=\"grid grid-cols-3 gap-4 mt-3\">\n                  <div className=\"text-center\">\n                    <div className=\"p-2 bg-yellow-400/20 rounded-full w-10 h-10 flex items-center justify-center mx-auto\">\n                      <AlertTriangle className=\"h-5 w-5 text-yellow-400\" />\n                    </div>\n                    <p className=\"text-gray-400 text-xs mt-1\">Risk Management</p>\n                    <p className=\"text-white font-medium\">88.4</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"p-2 bg-yellow-400/20 rounded-full w-10 h-10 flex items-center justify-center mx-auto\">\n                      <Zap className=\"h-5 w-5 text-yellow-400\" />\n                    </div>\n                    <p className=\"text-gray-400 text-xs mt-1\">Ethics</p>\n                    <p className=\"text-white font-medium\">85.7</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"p-2 bg-yellow-400/20 rounded-full w-10 h-10 flex items-center justify-center mx-auto\">\n                      <Building2 className=\"h-5 w-5 text-yellow-400\" />\n                    </div>\n                    <p className=\"text-gray-400 text-xs mt-1\">Board Structure</p>\n                    <p className=\"text-white font-medium\">83.9</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Sustainable Investment Opportunities */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-cyan-900/20 border-blue-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Sprout className=\"h-7 w-7 mr-3 text-blue-400\" />\n            💰 Sustainable Investment Opportunities\n            <Badge className=\"ml-3 bg-gradient-to-r from-blue-400 to-cyan-500\">\n              <TrendingUp className=\"h-4 w-4 mr-1\" />\n              AI CURATED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"stocks\" className=\"space-y-6\">\n            <TabsList className=\"bg-black/20 border-blue-400/30\">\n              <TabsTrigger value=\"stocks\">ESG Stocks</TabsTrigger>\n              <TabsTrigger value=\"funds\">Impact Funds</TabsTrigger>\n              <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"stocks\">\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-6 text-sm font-medium text-gray-400 pb-2 border-b border-gray-700/50\">\n                  <div>Ticker</div>\n                  <div className=\"col-span-2\">Company</div>\n                  <div>ESG Rating</div>\n                  <div>Price</div>\n                  <div>Change</div>\n                </div>\n\n                {esgStocks.map((stock, index) => (\n                  <div\n                    key={index}\n                    className=\"grid grid-cols-6 items-center py-3 border-b border-gray-800/50\"\n                  >\n                    <div className=\"font-bold text-white\">{stock.ticker}</div>\n                    <div className=\"col-span-2\">\n                      <div className=\"text-white\">{stock.name}</div>\n                      <div className=\"text-gray-400 text-xs\">{stock.sector}</div>\n                    </div>\n                    <div>\n                      <Badge\n                        className={\n                          stock.esgRating === 'AAA'\n                            ? 'bg-green-500'\n                            : stock.esgRating === 'AA'\n                              ? 'bg-emerald-500'\n                              : 'bg-blue-500'\n                        }\n                      >\n                        {stock.esgRating}\n                      </Badge>\n                    </div>\n                    <div className=\"text-white\">${stock.price.toFixed(2)}</div>\n                    <div className={getChangeColor(stock.change)}>\n                      {stock.change > 0 ? '+' : ''}\n                      {stock.change.toFixed(2)}%\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-6 flex justify-center\">\n                <Button className=\"bg-gradient-to-r from-blue-500 to-cyan-500 text-white\">\n                  <Leaf className=\"h-4 w-4 mr-2\" />\n                  View All ESG Stocks\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"funds\">\n              <div className=\"space-y-4\">\n                {impactFunds.map((fund, index) => (\n                  <div\n                    key={index}\n                    className=\"p-4 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\"\n                  >\n                    <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n                      <div>\n                        <div className=\"flex items-center\">\n                          <h4 className=\"text-white font-bold text-lg\">{fund.ticker}</h4>\n                          <span className=\"text-yellow-400 ml-2\">\n                            {getRatingStars(fund.rating)}\n                          </span>\n                        </div>\n                        <p className=\"text-gray-300\">{fund.name}</p>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge variant=\"outline\" className=\"border-blue-400/30 text-blue-400\">\n                            {fund.focus}\n                          </Badge>\n                        </div>\n                      </div>\n                      <div className=\"mt-4 md:mt-0 text-right\">\n                        <div className=\"text-2xl font-bold text-green-400\">\n                          +{fund.ytdReturn.toFixed(1)}%\n                        </div>\n                        <p className=\"text-gray-400 text-sm\">YTD Return</p>\n                        <div className=\"flex items-center justify-end space-x-4 mt-1\">\n                          <div>\n                            <p className=\"text-gray-400 text-xs\">AUM</p>\n                            <p className=\"text-white\">{fund.aum}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-400 text-xs\">Expense</p>\n                            <p className=\"text-white\">{fund.expense}</p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-6 flex justify-center\">\n                <Button className=\"bg-gradient-to-r from-blue-500 to-cyan-500 text-white\">\n                  <Globe className=\"h-4 w-4 mr-2\" />\n                  View All Impact Funds\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"performance\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n                  <h3 className=\"text-white font-bold text-lg mb-4\">ESG Portfolio Performance</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">YTD Return</span>\n                      <span className=\"text-green-400 font-bold\">\n                        +{esgData.performance.ytd.toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">1 Year</span>\n                      <span className=\"text-green-400 font-bold\">\n                        +{esgData.performance.oneYear.toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">3 Year</span>\n                      <span className=\"text-green-400 font-bold\">\n                        +{esgData.performance.threeYear.toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">5 Year</span>\n                      <span className=\"text-green-400 font-bold\">\n                        +{esgData.performance.fiveYear.toFixed(1)}%\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n                  <h3 className=\"text-white font-bold text-lg mb-4\">Impact Metrics</h3>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-gray-400\">Carbon Offset</span>\n                        <span className=\"text-white font-bold\">\n                          {esgData.impactMetrics.carbonOffset.toFixed(0)} tons\n                        </span>\n                      </div>\n                      <Progress value={75} className=\"h-2\" />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-gray-400\">Renewable Energy</span>\n                        <span className=\"text-white font-bold\">\n                          {esgData.impactMetrics.renewableEnergy.toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress value={esgData.impactMetrics.renewableEnergy} className=\"h-2\" />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-gray-400\">Water Conservation</span>\n                        <span className=\"text-white font-bold\">\n                          {esgData.impactMetrics.waterConservation.toFixed(1)}M gallons\n                        </span>\n                      </div>\n                      <Progress value={60} className=\"h-2\" />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-gray-400\">Sustainable Materials</span>\n                        <span className=\"text-white font-bold\">\n                          {esgData.impactMetrics.sustainableMaterials.toFixed(1)}%\n                        </span>\n                      </div>\n                      <Progress\n                        value={esgData.impactMetrics.sustainableMaterials}\n                        className=\"h-2\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Placeholder for chart */}\n              <div className=\"mt-6 h-64 bg-gradient-to-r from-green-500/5 to-blue-500/5 rounded-lg border border-green-400/10 relative overflow-hidden\">\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <p className=\"text-green-400 text-lg\">\n                    ESG vs. Traditional Portfolio Performance Chart\n                  </p>\n                </div>\n                <svg\n                  className=\"absolute bottom-0 w-full\"\n                  viewBox=\"0 0 1000 200\"\n                  preserveAspectRatio=\"none\"\n                  height=\"100%\"\n                  width=\"100%\"\n                >\n                  <path\n                    d=\"M0,150 C100,120 200,100 300,80 C400,60 500,50 600,30 C700,20 800,40 900,20 L900,200 L0,200 Z\"\n                    fill=\"url(#green-gradient)\"\n                    opacity=\"0.3\"\n                  ></path>\n                  <path\n                    d=\"M0,170 C100,160 200,140 300,130 C400,120 500,100 600,110 C700,120 800,100 900,90 L900,200 L0,200 Z\"\n                    fill=\"url(#blue-gradient)\"\n                    opacity=\"0.2\"\n                  ></path>\n                  <defs>\n                    <linearGradient id=\"green-gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                      <stop offset=\"0%\" stopColor=\"#22c55e\" />\n                      <stop offset=\"100%\" stopColor=\"#10b981\" />\n                    </linearGradient>\n                    <linearGradient id=\"blue-gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                      <stop offset=\"0%\" stopColor=\"#3b82f6\" />\n                      <stop offset=\"100%\" stopColor=\"#06b6d4\" />\n                    </linearGradient>\n                  </defs>\n                </svg>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n\n      {/* Impact Investing */}\n      <Card className=\"bg-gradient-to-r from-emerald-900/20 to-teal-900/20 border-emerald-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Globe className=\"h-7 w-7 mr-3 text-emerald-400\" />\n            🌍 Impact Investing Dashboard\n            <Badge className=\"ml-3 bg-gradient-to-r from-emerald-400 to-teal-500\">\n              <Sprout className=\"h-4 w-4 mr-1\" />\n              UN SDG ALIGNED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-emerald-500/10 to-teal-500/10 rounded-lg border border-emerald-400/30\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"p-3 bg-emerald-400/20 rounded-lg mr-4\">\n                  <Sun className=\"h-6 w-6 text-emerald-400\" />\n                </div>\n                <h3 className=\"text-white font-bold text-lg\">Clean Energy</h3>\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                Investments in renewable energy projects including solar, wind, and hydroelectric\n                power generation.\n              </p>\n              <div className=\"flex items-center justify-between\">\n                <Badge className=\"bg-emerald-500\">$47.8M INVESTED</Badge>\n                <span className=\"text-green-400 font-bold\">+24.7% ROI</span>\n              </div>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"p-3 bg-blue-400/20 rounded-lg mr-4\">\n                  <Droplets className=\"h-6 w-6 text-blue-400\" />\n                </div>\n                <h3 className=\"text-white font-bold text-lg\">Water Solutions</h3>\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                Investments in clean water access, conservation technologies, and ocean preservation\n                initiatives.\n              </p>\n              <div className=\"flex items-center justify-between\">\n                <Badge className=\"bg-blue-500\">$28.5M INVESTED</Badge>\n                <span className=\"text-green-400 font-bold\">+18.9% ROI</span>\n              </div>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-lime-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"p-3 bg-green-400/20 rounded-lg mr-4\">\n                  <Sprout className=\"h-6 w-6 text-green-400\" />\n                </div>\n                <h3 className=\"text-white font-bold text-lg\">Sustainable Agriculture</h3>\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                Investments in organic farming, regenerative agriculture, and sustainable food\n                production systems.\n              </p>\n              <div className=\"flex items-center justify-between\">\n                <Badge className=\"bg-green-500\">$15.4M INVESTED</Badge>\n                <span className=\"text-green-400 font-bold\">+21.3% ROI</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n            <h3 className=\"text-white font-bold text-xl mb-6 flex items-center\">\n              <Globe className=\"h-6 w-6 mr-2 text-emerald-400\" />\n              UN Sustainable Development Goals Alignment\n            </h3>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"p-4 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30 text-center\">\n                <div className=\"p-3 bg-blue-400/20 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <Droplets className=\"h-6 w-6 text-blue-400\" />\n                </div>\n                <h4 className=\"text-white font-bold\">SDG 6</h4>\n                <p className=\"text-gray-400 text-sm mt-1\">Clean Water & Sanitation</p>\n                <Progress value={85} className=\"h-1 mt-2\" />\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-yellow-500/10 to-amber-500/10 rounded-lg border border-yellow-400/30 text-center\">\n                <div className=\"p-3 bg-yellow-400/20 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <Sun className=\"h-6 w-6 text-yellow-400\" />\n                </div>\n                <h4 className=\"text-white font-bold\">SDG 7</h4>\n                <p className=\"text-gray-400 text-sm mt-1\">Affordable & Clean Energy</p>\n                <Progress value={92} className=\"h-1 mt-2\" />\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30 text-center\">\n                <div className=\"p-3 bg-green-400/20 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <Sprout className=\"h-6 w-6 text-green-400\" />\n                </div>\n                <h4 className=\"text-white font-bold\">SDG 13</h4>\n                <p className=\"text-gray-400 text-sm mt-1\">Climate Action</p>\n                <Progress value={88} className=\"h-1 mt-2\" />\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30 text-center\">\n                <div className=\"p-3 bg-purple-400/20 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                  <Users className=\"h-6 w-6 text-purple-400\" />\n                </div>\n                <h4 className=\"text-white font-bold\">SDG 10</h4>\n                <p className=\"text-gray-400 text-sm mt-1\">Reduced Inequalities</p>\n                <Progress value={78} className=\"h-1 mt-2\" />\n              </div>\n            </div>\n\n            <div className=\"mt-6 flex justify-center\">\n              <Button className=\"bg-gradient-to-r from-emerald-400 to-teal-500 text-white font-bold px-8\">\n                <Globe className=\"h-5 w-5 mr-2\" />\n                View All 17 SDG Alignments\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/features/AdvancedAIFeatures.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 6,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 7,
        "endColumn": 1,
        "fix": { "range": [148, 149], "text": "" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\n\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Brain,\n  Cpu,\n  Database,\n  Eye,\n  Radar,\n  Settings,\n  Target,\n  Zap,\n  Activity,\n  BarChart3,\n  TrendingUp,\n  Shield,\n  CheckCircle,\n  Clock,\n} from 'lucide-react';\n\nexport default function AdvancedAIFeatures() {\n  const [activeFeature, setActiveFeature] = useState('quantum-ai');\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const runFeatureDemo = (feature: string) => {\n    setActiveFeature(feature);\n    setIsProcessing(true);\n    setTimeout(() => setIsProcessing(false), 3000);\n  };\n\n  const aiFeatures = [\n    {\n      id: 'quantum-ai',\n      title: 'Quantum AI Engine',\n      description: '247M parameter neural network with quantum processing',\n      icon: Brain,\n      accuracy: 94.7,\n      speed: '5-15ms',\n      status: 'active',\n      color: 'blue',\n    },\n    {\n      id: 'neural-network',\n      title: 'Deep Neural Networks',\n      description: '50-layer deep learning with real-time adaptation',\n      icon: Cpu,\n      accuracy: 92.3,\n      speed: '10-25ms',\n      status: 'active',\n      color: 'purple',\n    },\n    {\n      id: 'pattern-recognition',\n      title: 'Pattern Recognition',\n      description: 'Advanced pattern detection with 96.8% confidence',\n      icon: Eye,\n      accuracy: 96.8,\n      speed: '8-20ms',\n      status: 'active',\n      color: 'green',\n    },\n    {\n      id: 'sentiment-analysis',\n      title: 'Market Sentiment AI',\n      description: 'Real-time sentiment analysis across 10,000+ sources',\n      icon: Activity,\n      accuracy: 89.4,\n      speed: '15-30ms',\n      status: 'active',\n      color: 'yellow',\n    },\n    {\n      id: 'risk-analyzer',\n      title: 'Quantum Risk Analysis',\n      description: 'Multi-dimensional risk assessment with quantum tunneling',\n      icon: Shield,\n      accuracy: 91.7,\n      speed: '12-28ms',\n      status: 'active',\n      color: 'red',\n    },\n    {\n      id: 'prediction-engine',\n      title: 'Predictive Analytics',\n      description: 'Future market prediction with 94.2% accuracy',\n      icon: Target,\n      accuracy: 94.2,\n      speed: '6-18ms',\n      status: 'active',\n      color: 'indigo',\n    },\n  ];\n\n  const liveMetrics = {\n    totalPredictions: 2847392,\n    successfulTrades: 2694847,\n    activeModels: 247,\n    dataPointsPerSecond: 15847392,\n    quantumStates: 1024,\n    neuralConnections: 247000000,\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* AI Features Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {aiFeatures.map(feature => {\n          const IconComponent = feature.icon;\n          return (\n            <Card\n              key={feature.id}\n              className={`bg-black/20 border-${feature.color}-500/30 backdrop-blur-xl hover:border-${feature.color}-400/50 transition-all cursor-pointer ${\n                activeFeature === feature.id ? `ring-2 ring-${feature.color}-400/50` : ''\n              }`}\n              onClick={() => setActiveFeature(feature.id)}\n            >\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <IconComponent className={`h-8 w-8 text-${feature.color}-400`} />\n                  <Badge\n                    variant=\"outline\"\n                    className={`border-${feature.color}-500/30 text-${feature.color}-400`}\n                  >\n                    {feature.status.toUpperCase()}\n                  </Badge>\n                </div>\n                <CardTitle className=\"text-white\">{feature.title}</CardTitle>\n                <CardDescription>{feature.description}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400 text-sm\">Accuracy</span>\n                    <span className={`text-${feature.color}-400 font-bold`}>\n                      {feature.accuracy}%\n                    </span>\n                  </div>\n                  <Progress value={feature.accuracy} className=\"h-2\" />\n\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400 text-sm\">Speed</span>\n                    <span className={`text-${feature.color}-400 font-bold`}>{feature.speed}</span>\n                  </div>\n\n                  <Button\n                    onClick={e => {\n                      e.stopPropagation();\n                      runFeatureDemo(feature.id);\n                    }}\n                    className={`w-full bg-gradient-to-r from-${feature.color}-500 to-${feature.color}-600 hover:from-${feature.color}-600 hover:to-${feature.color}-700`}\n                    disabled={isProcessing && activeFeature === feature.id}\n                  >\n                    {isProcessing && activeFeature === feature.id ? (\n                      <>\n                        <Cpu className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <Zap className=\"h-4 w-4 mr-2\" />\n                        Run Demo\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Live AI Metrics */}\n      <Card className=\"bg-gradient-to-r from-purple-900/20 to-pink-900/20 border-purple-500/30\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-white\">\n            <Database className=\"h-6 w-6 mr-3 text-purple-400\" />\n            Live AI Processing Metrics\n          </CardTitle>\n          <CardDescription>Real-time quantum AI performance data</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-6\">\n            <div className=\"text-center\">\n              <p className=\"text-purple-400 text-3xl font-bold\">\n                {liveMetrics.totalPredictions.toLocaleString()}\n              </p>\n              <p className=\"text-gray-400 text-sm\">Total Predictions</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-green-400 text-3xl font-bold\">\n                {liveMetrics.successfulTrades.toLocaleString()}\n              </p>\n              <p className=\"text-gray-400 text-sm\">Successful Trades</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-blue-400 text-3xl font-bold\">{liveMetrics.activeModels}</p>\n              <p className=\"text-gray-400 text-sm\">Active AI Models</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-yellow-400 text-3xl font-bold\">\n                {(liveMetrics.dataPointsPerSecond / 1000000).toFixed(1)}M\n              </p>\n              <p className=\"text-gray-400 text-sm\">Data Points/sec</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-indigo-400 text-3xl font-bold\">{liveMetrics.quantumStates}</p>\n              <p className=\"text-gray-400 text-sm\">Quantum States</p>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-pink-400 text-3xl font-bold\">\n                {(liveMetrics.neuralConnections / 1000000).toFixed(0)}M\n              </p>\n              <p className=\"text-gray-400 text-sm\">Neural Connections</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Active Feature Demo */}\n      {activeFeature && (\n        <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center text-white\">\n              <Radar className=\"h-6 w-6 mr-3 text-purple-400\" />\n              {aiFeatures.find(f => f.id === activeFeature)?.title} - Live Demo\n            </CardTitle>\n            <CardDescription>Real-time AI processing demonstration</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {/* Demo Visualization */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-white font-semibold\">Processing Pipeline</h4>\n                  <div className=\"space-y-3\">\n                    {[\n                      { step: 'Data Ingestion', status: 'complete', time: '2ms' },\n                      {\n                        step: 'Neural Processing',\n                        status: isProcessing ? 'processing' : 'complete',\n                        time: '8ms',\n                      },\n                      {\n                        step: 'Quantum Analysis',\n                        status: isProcessing ? 'processing' : 'complete',\n                        time: '12ms',\n                      },\n                      {\n                        step: 'Pattern Recognition',\n                        status: isProcessing ? 'pending' : 'complete',\n                        time: '15ms',\n                      },\n                      {\n                        step: 'Prediction Output',\n                        status: isProcessing ? 'pending' : 'complete',\n                        time: '18ms',\n                      },\n                    ].map((item, index) => (\n                      <div\n                        key={index}\n                        className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\"\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          {item.status === 'complete' && (\n                            <CheckCircle className=\"h-5 w-5 text-green-400\" />\n                          )}\n                          {item.status === 'processing' && (\n                            <Clock className=\"h-5 w-5 text-yellow-400 animate-spin\" />\n                          )}\n                          {item.status === 'pending' && <Clock className=\"h-5 w-5 text-gray-400\" />}\n                          <span className=\"text-white\">{item.step}</span>\n                        </div>\n                        <span className=\"text-gray-400 text-sm\">{item.time}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <h4 className=\"text-white font-semibold\">Live Results</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"p-4 bg-gradient-to-r from-green-900/30 to-emerald-900/30 rounded-lg border border-green-500/30\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-green-400 font-semibold\">Prediction Confidence</span>\n                        <span className=\"text-green-400 text-xl font-bold\">94.7%</span>\n                      </div>\n                      <Progress value={94.7} className=\"mt-2\" />\n                    </div>\n\n                    <div className=\"p-4 bg-gradient-to-r from-blue-900/30 to-purple-900/30 rounded-lg border border-blue-500/30\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-blue-400 font-semibold\">Market Signal</span>\n                        <Badge className=\"bg-green-500 text-white\">STRONG BUY</Badge>\n                      </div>\n                      <p className=\"text-gray-400 text-sm mt-2\">\n                        AI recommends immediate position entry\n                      </p>\n                    </div>\n\n                    <div className=\"p-4 bg-gradient-to-r from-purple-900/30 to-pink-900/30 rounded-lg border border-purple-500/30\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-purple-400 font-semibold\">Risk Assessment</span>\n                        <span className=\"text-yellow-400 font-bold\">LOW</span>\n                      </div>\n                      <p className=\"text-gray-400 text-sm mt-2\">\n                        Quantum risk analysis: 12% volatility expected\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex space-x-4\">\n                <Button className=\"bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600\">\n                  <TrendingUp className=\"h-4 w-4 mr-2\" />\n                  Execute AI Trade\n                </Button>\n                <Button variant=\"outline\" className=\"border-purple-500/30\">\n                  <Settings className=\"h-4 w-4 mr-2\" />\n                  Adjust Parameters\n                </Button>\n                <Button variant=\"outline\" className=\"border-blue-500/30\">\n                  <BarChart3 className=\"h-4 w-4 mr-2\" />\n                  View Analytics\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* AI Technology Stack */}\n      <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-white\">\n            <Cpu className=\"h-6 w-6 mr-3 text-purple-400\" />\n            Advanced AI Technology Stack\n          </CardTitle>\n          <CardDescription>Cutting-edge technologies powering AlphaAIStockX</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[\n              { name: 'Quantum Computing', version: 'v2.1', status: 'Operational', icon: Cpu },\n              { name: 'Neural Networks', version: 'v3.7', status: 'Optimized', icon: Brain },\n              { name: 'Deep Learning', version: 'v4.2', status: 'Enhanced', icon: Database },\n              { name: 'Pattern Recognition', version: 'v2.9', status: 'Advanced', icon: Eye },\n            ].map((tech, index) => (\n              <div key={index} className=\"p-4 bg-gray-800/50 rounded-lg border border-gray-700/50\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <tech.icon className=\"h-6 w-6 text-purple-400\" />\n                  <div>\n                    <p className=\"text-white font-semibold\">{tech.name}</p>\n                    <p className=\"text-gray-400 text-sm\">{tech.version}</p>\n                  </div>\n                </div>\n                <Badge variant=\"outline\" className=\"border-green-500/30 text-green-400\">\n                  {tech.status}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/future/NeuroLinkTrading.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 6,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 7,
        "endColumn": 1,
        "fix": { "range": [142, 143], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 196,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 196,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5594, 5597], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5594, 5597], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 203,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 203,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5818, 5821], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5818, 5821], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Brain,\n  Zap,\n  Activity,\n  Waves,\n  Eye,\n  Cpu,\n  Heart,\n  Target,\n  Lightbulb,\n  Sparkles,\n  Gauge,\n  Radio,\n} from 'lucide-react';\n\nexport default function NeuroLinkTrading() {\n  const [neuroData, setNeuroData] = useState({\n    connectionStatus: 'Connected',\n    signalStrength: 94.7 + Math.random() * 5,\n    brainwaveActivity: {\n      alpha: 67 + Math.random() * 10,\n      beta: 78 + Math.random() * 15,\n      gamma: 45 + Math.random() * 20,\n      theta: 34 + Math.random() * 15,\n    },\n    cognitiveLoad: 23 + Math.random() * 10,\n    emotionalState: {\n      confidence: 87 + Math.random() * 10,\n      stress: 15 + Math.random() * 10,\n      focus: 92 + Math.random() * 5,\n      excitement: 45 + Math.random() * 20,\n    },\n    tradingPerformance: {\n      thoughtToExecution: 0.12 + Math.random() * 0.05,\n      accuracyBoost: 34.7 + Math.random() * 5,\n      reactionTime: 0.08 + Math.random() * 0.03,\n      decisionQuality: 94.2 + Math.random() * 3,\n    },\n    neuralPatterns: [\n      {\n        pattern: 'Bull Market Recognition',\n        strength: 89 + Math.random() * 8,\n        frequency: '12.5 Hz',\n        location: 'Prefrontal Cortex',\n        confidence: 94 + Math.random() * 4,\n      },\n      {\n        pattern: 'Risk Assessment',\n        strength: 76 + Math.random() * 10,\n        frequency: '8.3 Hz',\n        location: 'Anterior Cingulate',\n        confidence: 87 + Math.random() * 6,\n      },\n      {\n        pattern: 'Pattern Recognition',\n        strength: 92 + Math.random() * 5,\n        frequency: '40.2 Hz',\n        location: 'Visual Cortex',\n        confidence: 96 + Math.random() * 3,\n      },\n      {\n        pattern: 'Emotional Regulation',\n        strength: 68 + Math.random() * 12,\n        frequency: '6.7 Hz',\n        location: 'Limbic System',\n        confidence: 82 + Math.random() * 8,\n      },\n    ],\n  });\n\n  const [neuroSettings, setNeuroSettings] = useState({\n    thoughtTrading: true,\n    emotionFiltering: true,\n    stressMonitoring: true,\n    focusEnhancement: true,\n    biofeedback: true,\n    neuralOptimization: true,\n  });\n\n  const [thoughtCommands, setThoughtCommands] = useState([\n    {\n      thought: 'Buy AAPL 100 shares',\n      confidence: 94.7,\n      timestamp: '2 seconds ago',\n      status: 'Executed',\n      executionTime: '0.12s',\n    },\n    {\n      thought: 'Set stop loss at $245',\n      confidence: 89.3,\n      timestamp: '15 seconds ago',\n      status: 'Executed',\n      executionTime: '0.08s',\n    },\n    {\n      thought: 'Check NVDA sentiment',\n      confidence: 92.1,\n      timestamp: '1 minute ago',\n      status: 'Completed',\n      executionTime: '0.05s',\n    },\n    {\n      thought: 'Analyze market volatility',\n      confidence: 87.8,\n      timestamp: '2 minutes ago',\n      status: 'Completed',\n      executionTime: '0.15s',\n    },\n  ]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateNeuroData();\n      simulateThoughtCommands();\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateNeuroData = () => {\n    setNeuroData(prev => ({\n      ...prev,\n      signalStrength: Math.min(100, Math.max(85, prev.signalStrength + (Math.random() - 0.5) * 2)),\n      brainwaveActivity: {\n        alpha: Math.min(\n          100,\n          Math.max(50, prev.brainwaveActivity.alpha + (Math.random() - 0.5) * 5)\n        ),\n        beta: Math.min(100, Math.max(60, prev.brainwaveActivity.beta + (Math.random() - 0.5) * 8)),\n        gamma: Math.min(\n          100,\n          Math.max(30, prev.brainwaveActivity.gamma + (Math.random() - 0.5) * 10)\n        ),\n        theta: Math.min(\n          100,\n          Math.max(20, prev.brainwaveActivity.theta + (Math.random() - 0.5) * 6)\n        ),\n      },\n      cognitiveLoad: Math.min(100, Math.max(10, prev.cognitiveLoad + (Math.random() - 0.5) * 3)),\n      emotionalState: {\n        confidence: Math.min(\n          100,\n          Math.max(70, prev.emotionalState.confidence + (Math.random() - 0.5) * 2)\n        ),\n        stress: Math.min(100, Math.max(5, prev.emotionalState.stress + (Math.random() - 0.5) * 3)),\n        focus: Math.min(100, Math.max(80, prev.emotionalState.focus + (Math.random() - 0.5) * 2)),\n        excitement: Math.min(\n          100,\n          Math.max(20, prev.emotionalState.excitement + (Math.random() - 0.5) * 8)\n        ),\n      },\n    }));\n  };\n\n  const simulateThoughtCommands = () => {\n    if (Math.random() > 0.7) {\n      const newCommands = [\n        'Sell TSLA 50 shares',\n        'Buy SPY calls',\n        'Check portfolio balance',\n        'Analyze MSFT earnings',\n        'Set alert for GOOGL',\n        'Review risk metrics',\n      ];\n\n      const newCommand = {\n        thought: newCommands[Math.floor(Math.random() * newCommands.length)],\n        confidence: 85 + Math.random() * 15,\n        timestamp: 'Just now',\n        status: 'Processing',\n        executionTime: '0.' + Math.floor(Math.random() * 20 + 5) + 's',\n      };\n\n      setThoughtCommands(prev => [newCommand, ...prev.slice(0, 3)]);\n\n      // Update status after a delay\n      setTimeout(() => {\n        setThoughtCommands(prev =>\n          prev.map((cmd, index) =>\n            index === 0 ? { ...cmd, status: 'Executed', timestamp: 'Few seconds ago' } : cmd\n          )\n        );\n      }, 2000);\n    }\n  };\n\n  const getSignalColor = (strength: any) => {\n    if (strength >= 90) return 'text-green-400';\n    if (strength >= 80) return 'text-blue-400';\n    if (strength >= 70) return 'text-yellow-400';\n    return 'text-red-400';\n  };\n\n  const getStatusColor = (status: any) => {\n    switch (status) {\n      case 'Executed':\n        return 'bg-green-500';\n      case 'Processing':\n        return 'bg-yellow-500';\n      case 'Completed':\n        return 'bg-blue-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* NeuroLink Status Dashboard */}\n      <Card className=\"bg-gradient-to-r from-purple-900/20 to-indigo-900/20 border-purple-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Brain className=\"h-7 w-7 mr-3 text-purple-400\" />\n            🧠 NeuroLink Trading Interface\n            <Badge className=\"ml-3 bg-gradient-to-r from-purple-400 to-indigo-500\">\n              <Radio className=\"h-4 w-4 mr-1\" />\n              NEURAL CONNECTED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-purple-500/10 to-indigo-500/10 rounded-lg border border-purple-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Radio className=\"h-8 w-8 text-purple-400\" />\n                <Badge className=\"bg-purple-500\">SIGNAL</Badge>\n              </div>\n              <div\n                className={`text-3xl font-bold ${getSignalColor(neuroData.signalStrength)} mb-2`}\n              >\n                {neuroData.signalStrength.toFixed(1)}%\n              </div>\n              <p className=\"text-purple-400 font-semibold\">Signal Strength</p>\n              <p className=\"text-gray-400 text-sm\">Neural connection quality</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-indigo-500/10 to-blue-500/10 rounded-lg border border-indigo-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Gauge className=\"h-8 w-8 text-indigo-400\" />\n                <Badge className=\"bg-indigo-500\">LOAD</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {neuroData.cognitiveLoad.toFixed(1)}%\n              </div>\n              <p className=\"text-indigo-400 font-semibold\">Cognitive Load</p>\n              <p className=\"text-gray-400 text-sm\">Mental processing usage</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Zap className=\"h-8 w-8 text-blue-400\" />\n                <Badge className=\"bg-blue-500\">SPEED</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {neuroData.tradingPerformance.thoughtToExecution.toFixed(2)}s\n              </div>\n              <p className=\"text-blue-400 font-semibold\">Thought to Execution</p>\n              <p className=\"text-gray-400 text-sm\">Neural trading speed</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-cyan-500/10 to-teal-500/10 rounded-lg border border-cyan-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Target className=\"h-8 w-8 text-cyan-400\" />\n                <Badge className=\"bg-cyan-500\">ACCURACY</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                +{neuroData.tradingPerformance.accuracyBoost.toFixed(1)}%\n              </div>\n              <p className=\"text-cyan-400 font-semibold\">Accuracy Boost</p>\n              <p className=\"text-gray-400 text-sm\">vs manual trading</p>\n            </div>\n          </div>\n\n          {/* Brainwave Activity */}\n          <div className=\"mt-8 p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-white font-bold text-xl flex items-center\">\n                <Waves className=\"h-6 w-6 mr-2 text-purple-400\" />\n                Real-time Brainwave Analysis\n              </h3>\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2 animate-pulse\"></div>\n                  <span className=\"text-green-400 text-sm\">Recording</span>\n                </div>\n                <Badge className=\"bg-purple-500\">128 Electrodes</Badge>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <div className=\"p-4 bg-gradient-to-r from-red-500/10 to-orange-500/10 rounded-lg border border-red-400/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-white font-medium\">Alpha Waves</span>\n                  <span className=\"text-red-400 font-bold\">\n                    {neuroData.brainwaveActivity.alpha.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress value={neuroData.brainwaveActivity.alpha} className=\"h-2 mb-2\" />\n                <p className=\"text-gray-400 text-xs\">8-12 Hz • Relaxed awareness</p>\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-white font-medium\">Beta Waves</span>\n                  <span className=\"text-blue-400 font-bold\">\n                    {neuroData.brainwaveActivity.beta.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress value={neuroData.brainwaveActivity.beta} className=\"h-2 mb-2\" />\n                <p className=\"text-gray-400 text-xs\">13-30 Hz • Active thinking</p>\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-white font-medium\">Gamma Waves</span>\n                  <span className=\"text-green-400 font-bold\">\n                    {neuroData.brainwaveActivity.gamma.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress value={neuroData.brainwaveActivity.gamma} className=\"h-2 mb-2\" />\n                <p className=\"text-gray-400 text-xs\">30-100 Hz • High-level processing</p>\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-white font-medium\">Theta Waves</span>\n                  <span className=\"text-purple-400 font-bold\">\n                    {neuroData.brainwaveActivity.theta.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress value={neuroData.brainwaveActivity.theta} className=\"h-2 mb-2\" />\n                <p className=\"text-gray-400 text-xs\">4-7 Hz • Deep meditation</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Thought Commands & Emotional State */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"bg-gradient-to-r from-cyan-900/20 to-blue-900/20 border-cyan-400/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center text-xl\">\n              <Lightbulb className=\"h-6 w-6 mr-2 text-cyan-400\" />\n              💭 Thought Commands\n              <Badge className=\"ml-3 bg-cyan-500\">LIVE</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {thoughtCommands.map((command, index) => (\n                <div\n                  key={index}\n                  className=\"p-4 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-white font-medium\">{command.thought}</p>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Badge className={getStatusColor(command.status)}>{command.status}</Badge>\n                        <span className=\"text-gray-400 text-xs\">{command.timestamp}</span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-cyan-400 font-bold\">\n                        {command.confidence.toFixed(1)}%\n                      </div>\n                      <p className=\"text-gray-400 text-xs\">{command.executionTime}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-pink-900/20 to-purple-900/20 border-pink-400/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center text-xl\">\n              <Heart className=\"h-6 w-6 mr-2 text-pink-400\" />\n              😊 Emotional State Monitoring\n              <Badge className=\"ml-3 bg-pink-500\">BIOMETRIC</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              <div>\n                <div className=\"flex justify-between mb-2\">\n                  <span className=\"text-white font-medium\">Confidence Level</span>\n                  <span className=\"text-green-400 font-bold\">\n                    {neuroData.emotionalState.confidence.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress value={neuroData.emotionalState.confidence} className=\"h-3\" />\n              </div>\n\n              <div>\n                <div className=\"flex justify-between mb-2\">\n                  <span className=\"text-white font-medium\">Stress Level</span>\n                  <span className=\"text-red-400 font-bold\">\n                    {neuroData.emotionalState.stress.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress value={neuroData.emotionalState.stress} className=\"h-3\" />\n              </div>\n\n              <div>\n                <div className=\"flex justify-between mb-2\">\n                  <span className=\"text-white font-medium\">Focus Intensity</span>\n                  <span className=\"text-blue-400 font-bold\">\n                    {neuroData.emotionalState.focus.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress value={neuroData.emotionalState.focus} className=\"h-3\" />\n              </div>\n\n              <div>\n                <div className=\"flex justify-between mb-2\">\n                  <span className=\"text-white font-medium\">Market Excitement</span>\n                  <span className=\"text-yellow-400 font-bold\">\n                    {neuroData.emotionalState.excitement.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress value={neuroData.emotionalState.excitement} className=\"h-3\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Neural Pattern Recognition */}\n      <Card className=\"bg-gradient-to-r from-violet-900/20 to-fuchsia-900/20 border-violet-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Sparkles className=\"h-7 w-7 mr-3 text-violet-400\" />\n            🔬 Neural Pattern Recognition\n            <Badge className=\"ml-3 bg-gradient-to-r from-violet-400 to-fuchsia-500\">\n              <Activity className=\"h-4 w-4 mr-1\" />\n              REAL-TIME ANALYSIS\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {neuroData.neuralPatterns.map((pattern, index) => (\n              <div\n                key={index}\n                className=\"p-6 bg-gradient-to-r from-violet-500/10 to-fuchsia-500/10 rounded-lg border border-violet-400/30\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"text-white font-bold text-lg\">{pattern.pattern}</h3>\n                    <div className=\"flex items-center space-x-4 mt-2\">\n                      <div className=\"flex items-center\">\n                        <Eye className=\"h-4 w-4 mr-1 text-violet-400\" />\n                        <span className=\"text-gray-400 text-sm\">{pattern.location}</span>\n                      </div>\n                      <div className=\"flex items-center\">\n                        <Waves className=\"h-4 w-4 mr-1 text-blue-400\" />\n                        <span className=\"text-gray-400 text-sm\">{pattern.frequency}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-violet-400\">\n                      {pattern.strength.toFixed(1)}%\n                    </div>\n                    <p className=\"text-gray-400 text-sm\">Pattern Strength</p>\n                    <Badge className=\"mt-2 bg-violet-500\">\n                      {pattern.confidence.toFixed(0)}% Confidence\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"mt-4\">\n                  <Progress value={pattern.strength} className=\"h-2\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* NeuroLink Settings */}\n      <Card className=\"bg-gradient-to-r from-gray-900/20 to-black/20 border-gray-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Cpu className=\"h-7 w-7 mr-3 text-gray-400\" />\n            ⚙️ NeuroLink Configuration\n            <Badge className=\"ml-3 bg-gray-500\">ADVANCED</Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            <div className=\"p-4 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-white font-medium\">Thought Trading</span>\n                <Switch\n                  checked={neuroSettings.thoughtTrading}\n                  onCheckedChange={checked =>\n                    setNeuroSettings(prev => ({ ...prev, thoughtTrading: checked }))\n                  }\n                />\n              </div>\n              <p className=\"text-gray-400 text-sm\">Execute trades via neural commands</p>\n            </div>\n\n            <div className=\"p-4 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-white font-medium\">Emotion Filtering</span>\n                <Switch\n                  checked={neuroSettings.emotionFiltering}\n                  onCheckedChange={checked =>\n                    setNeuroSettings(prev => ({ ...prev, emotionFiltering: checked }))\n                  }\n                />\n              </div>\n              <p className=\"text-gray-400 text-sm\">Filter emotional trading decisions</p>\n            </div>\n\n            <div className=\"p-4 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-white font-medium\">Stress Monitoring</span>\n                <Switch\n                  checked={neuroSettings.stressMonitoring}\n                  onCheckedChange={checked =>\n                    setNeuroSettings(prev => ({ ...prev, stressMonitoring: checked }))\n                  }\n                />\n              </div>\n              <p className=\"text-gray-400 text-sm\">Monitor stress levels during trading</p>\n            </div>\n\n            <div className=\"p-4 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-white font-medium\">Focus Enhancement</span>\n                <Switch\n                  checked={neuroSettings.focusEnhancement}\n                  onCheckedChange={checked =>\n                    setNeuroSettings(prev => ({ ...prev, focusEnhancement: checked }))\n                  }\n                />\n              </div>\n              <p className=\"text-gray-400 text-sm\">AI-powered focus optimization</p>\n            </div>\n\n            <div className=\"p-4 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-white font-medium\">Biofeedback</span>\n                <Switch\n                  checked={neuroSettings.biofeedback}\n                  onCheckedChange={checked =>\n                    setNeuroSettings(prev => ({ ...prev, biofeedback: checked }))\n                  }\n                />\n              </div>\n              <p className=\"text-gray-400 text-sm\">Real-time neural feedback loops</p>\n            </div>\n\n            <div className=\"p-4 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <span className=\"text-white font-medium\">Neural Optimization</span>\n                <Switch\n                  checked={neuroSettings.neuralOptimization}\n                  onCheckedChange={checked =>\n                    setNeuroSettings(prev => ({ ...prev, neuralOptimization: checked }))\n                  }\n                />\n              </div>\n              <p className=\"text-gray-400 text-sm\">Adaptive neural pathway optimization</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/future/QuantumInternetTrading.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 6,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 7,
        "endColumn": 1,
        "fix": { "range": [142, 143], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setQuantumSecurity' is assigned a value but never used.",
        "line": 128,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 128,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 185,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 185,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5347, 5350], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5347, 5350], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 224,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 224,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6632, 6635], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6632, 6635], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 239,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 239,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6987, 6990], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6987, 6990], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Lock,\n  Zap,\n  Globe,\n  Shield,\n  Network,\n  Atom,\n  Key,\n  Radio,\n  Cpu,\n  Eye,\n  Activity,\n} from 'lucide-react';\n\nexport default function QuantumInternetTrading() {\n  const [quantumNetworkData, setQuantumNetworkData] = useState({\n    networkStatus: 'Quantum Entangled',\n    entanglementFidelity: 99.7 + Math.random() * 0.3,\n    quantumNodes: 2847 + Math.floor(Math.random() * 100),\n    globalLatency: 0.001 + Math.random() * 0.0005,\n    securityLevel: 'Quantum Cryptographic',\n    dataTransmissionRate: 847.5 + Math.random() * 50,\n    quantumStates: {\n      superposition: 94.7 + Math.random() * 3,\n      entanglement: 97.2 + Math.random() * 2,\n      coherence: 92.8 + Math.random() * 4,\n      decoherence: 2.3 + Math.random() * 1,\n    },\n    tradingMetrics: {\n      instantaneousExecutions: 15789 + Math.floor(Math.random() * 1000),\n      quantumArbitrage: 247.8 + Math.random() * 50,\n      simultaneousMarkets: 847 + Math.floor(Math.random() * 50),\n      quantumAdvantage: 2847 + Math.random() * 200,\n    },\n  });\n\n  const [quantumNodes, setQuantumNodes] = useState([\n    {\n      id: 'QN-NYC-001',\n      location: 'New York',\n      type: 'Primary Hub',\n      entanglement: 99.8 + Math.random() * 0.2,\n      connections: 247,\n      latency: '0.001ms',\n      status: 'Optimal',\n    },\n    {\n      id: 'QN-LON-002',\n      location: 'London',\n      type: 'Primary Hub',\n      entanglement: 99.6 + Math.random() * 0.3,\n      connections: 189,\n      latency: '0.001ms',\n      status: 'Optimal',\n    },\n    {\n      id: 'QN-TOK-003',\n      location: 'Tokyo',\n      type: 'Primary Hub',\n      entanglement: 99.7 + Math.random() * 0.2,\n      connections: 156,\n      latency: '0.001ms',\n      status: 'Optimal',\n    },\n    {\n      id: 'QN-SIN-004',\n      location: 'Singapore',\n      type: 'Regional Hub',\n      entanglement: 99.4 + Math.random() * 0.4,\n      connections: 134,\n      latency: '0.001ms',\n      status: 'Optimal',\n    },\n    {\n      id: 'QN-FRA-005',\n      location: 'Frankfurt',\n      type: 'Regional Hub',\n      entanglement: 99.5 + Math.random() * 0.3,\n      connections: 178,\n      latency: '0.001ms',\n      status: 'Optimal',\n    },\n  ]);\n\n  const [quantumTrades, setQuantumTrades] = useState([\n    {\n      id: 'QT-001',\n      symbol: 'AAPL',\n      type: 'Quantum Arbitrage',\n      markets: ['NYSE', 'NASDAQ', 'LSE', 'TSE'],\n      execution: 'Instantaneous',\n      profit: 12847.5,\n      entanglementUsed: '4-way',\n      timestamp: '0.001ms ago',\n    },\n    {\n      id: 'QT-002',\n      symbol: 'MSFT',\n      type: 'Multi-dimensional Trade',\n      markets: ['NYSE', 'XETRA', 'TSE'],\n      execution: 'Instantaneous',\n      profit: 8947.23,\n      entanglementUsed: '3-way',\n      timestamp: '0.002ms ago',\n    },\n    {\n      id: 'QT-003',\n      symbol: 'GOOGL',\n      type: 'Quantum Hedge',\n      markets: ['NASDAQ', 'LSE'],\n      execution: 'Instantaneous',\n      profit: 15247.89,\n      entanglementUsed: '2-way',\n      timestamp: '0.001ms ago',\n    },\n  ]);\n\n  const [quantumSecurity, setQuantumSecurity] = useState({\n    encryptionLevel: 'Quantum Key Distribution',\n    keyDistributionRate: '1M keys/second',\n    eavesdroppingDetection: '100%',\n    quantumRandomness: 'True Random',\n    securityBreaches: 0,\n    lastSecurityAudit: 'Continuous',\n    quantumSignatures: 'Verified',\n    entanglementVerification: 'Real-time',\n  });\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateQuantumNetworkData();\n      simulateQuantumTrades();\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateQuantumNetworkData = () => {\n    setQuantumNetworkData(prev => ({\n      ...prev,\n      entanglementFidelity: Math.min(\n        100,\n        Math.max(99, prev.entanglementFidelity + (Math.random() - 0.5) * 0.1)\n      ),\n      quantumNodes: prev.quantumNodes + Math.floor((Math.random() - 0.3) * 5),\n      globalLatency: Math.max(0.0005, prev.globalLatency + (Math.random() - 0.5) * 0.0001),\n      dataTransmissionRate: prev.dataTransmissionRate + (Math.random() - 0.5) * 10,\n      quantumStates: {\n        superposition: Math.min(\n          100,\n          Math.max(90, prev.quantumStates.superposition + (Math.random() - 0.5) * 1)\n        ),\n        entanglement: Math.min(\n          100,\n          Math.max(95, prev.quantumStates.entanglement + (Math.random() - 0.5) * 0.5)\n        ),\n        coherence: Math.min(\n          100,\n          Math.max(88, prev.quantumStates.coherence + (Math.random() - 0.5) * 1)\n        ),\n        decoherence: Math.min(\n          5,\n          Math.max(1, prev.quantumStates.decoherence + (Math.random() - 0.5) * 0.3)\n        ),\n      },\n      tradingMetrics: {\n        ...prev.tradingMetrics,\n        instantaneousExecutions:\n          prev.tradingMetrics.instantaneousExecutions + Math.floor(Math.random() * 100),\n        quantumArbitrage: prev.tradingMetrics.quantumArbitrage + (Math.random() - 0.3) * 10,\n      },\n    }));\n\n    setQuantumNodes(prev =>\n      prev.map((node: any) => ({\n        ...node,\n        entanglement: Math.min(100, Math.max(99, node.entanglement + (Math.random() - 0.5) * 0.1)),\n        connections: node.connections + Math.floor((Math.random() - 0.5) * 5),\n      }))\n    );\n  };\n\n  const simulateQuantumTrades = () => {\n    if (Math.random() > 0.6) {\n      const symbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META'];\n      const tradeTypes = [\n        'Quantum Arbitrage',\n        'Multi-dimensional Trade',\n        'Quantum Hedge',\n        'Entangled Portfolio',\n      ];\n      const markets = [\n        ['NYSE', 'NASDAQ'],\n        ['NYSE', 'LSE', 'TSE'],\n        ['NASDAQ', 'XETRA'],\n        ['NYSE', 'NASDAQ', 'LSE', 'TSE', 'XETRA'],\n      ];\n\n      const newTrade = {\n        id: `QT-${Date.now()}`,\n        symbol: symbols[Math.floor(Math.random() * symbols.length)],\n        type: tradeTypes[Math.floor(Math.random() * tradeTypes.length)],\n        markets: markets[Math.floor(Math.random() * markets.length)],\n        execution: 'Instantaneous',\n        profit: 5000 + Math.random() * 15000,\n        entanglementUsed: `${Math.floor(Math.random() * 4) + 2}-way`,\n        timestamp: 'Just now',\n      };\n\n      setQuantumTrades(prev => [newTrade, ...prev.slice(0, 4)]);\n    }\n  };\n\n  const getStatusColor = (status: any) => {\n    switch (status.toLowerCase()) {\n      case 'optimal':\n        return 'text-green-400';\n      case 'good':\n        return 'text-blue-400';\n      case 'warning':\n        return 'text-yellow-400';\n      case 'critical':\n        return 'text-red-400';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  const getNodeTypeColor = (type: any) => {\n    switch (type) {\n      case 'Primary Hub':\n        return 'bg-purple-500';\n      case 'Regional Hub':\n        return 'bg-blue-500';\n      case 'Local Node':\n        return 'bg-green-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Quantum Internet Status */}\n      <Card className=\"bg-gradient-to-r from-violet-900/20 to-purple-900/20 border-violet-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Atom className=\"h-7 w-7 mr-3 text-violet-400\" />\n            ⚛️ Quantum Internet Trading Network\n            <Badge className=\"ml-3 bg-gradient-to-r from-violet-400 to-purple-500\">\n              <Network className=\"h-4 w-4 mr-1\" />\n              QUANTUM ENTANGLED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-violet-500/10 to-purple-500/10 rounded-lg border border-violet-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Atom className=\"h-8 w-8 text-violet-400\" />\n                <Badge className=\"bg-violet-500\">FIDELITY</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {quantumNetworkData.entanglementFidelity.toFixed(2)}%\n              </div>\n              <p className=\"text-violet-400 font-semibold\">Entanglement Fidelity</p>\n              <p className=\"text-gray-400 text-sm\">Quantum connection quality</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Network className=\"h-8 w-8 text-purple-400\" />\n                <Badge className=\"bg-purple-500\">NODES</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {quantumNetworkData.quantumNodes.toLocaleString()}\n              </div>\n              <p className=\"text-purple-400 font-semibold\">Quantum Nodes</p>\n              <p className=\"text-gray-400 text-sm\">Global network size</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Zap className=\"h-8 w-8 text-blue-400\" />\n                <Badge className=\"bg-blue-500\">LATENCY</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {quantumNetworkData.globalLatency.toFixed(3)}ms\n              </div>\n              <p className=\"text-blue-400 font-semibold\">Global Latency</p>\n              <p className=\"text-gray-400 text-sm\">Instantaneous transmission</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-cyan-500/10 to-teal-500/10 rounded-lg border border-cyan-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Radio className=\"h-8 w-8 text-cyan-400\" />\n                <Badge className=\"bg-cyan-500\">RATE</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {quantumNetworkData.dataTransmissionRate.toFixed(1)} Qbps\n              </div>\n              <p className=\"text-cyan-400 font-semibold\">Transmission Rate</p>\n              <p className=\"text-gray-400 text-sm\">Quantum bits per second</p>\n            </div>\n          </div>\n\n          {/* Quantum States */}\n          <div className=\"mt-8 p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-white font-bold text-xl flex items-center\">\n                <Activity className=\"h-6 w-6 mr-2 text-violet-400\" />\n                Quantum State Monitoring\n              </h3>\n              <div className=\"flex items-center\">\n                <div className=\"w-3 h-3 bg-green-500 rounded-full mr-2 animate-pulse\"></div>\n                <span className=\"text-green-400 text-sm\">Quantum Coherent</span>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <div className=\"p-4 bg-gradient-to-r from-violet-500/10 to-purple-500/10 rounded-lg border border-violet-400/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-white font-medium\">Superposition</span>\n                  <span className=\"text-violet-400 font-bold\">\n                    {quantumNetworkData.quantumStates.superposition.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress\n                  value={quantumNetworkData.quantumStates.superposition}\n                  className=\"h-2 mb-2\"\n                />\n                <p className=\"text-gray-400 text-xs\">Quantum state overlap</p>\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-white font-medium\">Entanglement</span>\n                  <span className=\"text-blue-400 font-bold\">\n                    {quantumNetworkData.quantumStates.entanglement.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress\n                  value={quantumNetworkData.quantumStates.entanglement}\n                  className=\"h-2 mb-2\"\n                />\n                <p className=\"text-gray-400 text-xs\">Quantum correlation strength</p>\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-white font-medium\">Coherence</span>\n                  <span className=\"text-green-400 font-bold\">\n                    {quantumNetworkData.quantumStates.coherence.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress value={quantumNetworkData.quantumStates.coherence} className=\"h-2 mb-2\" />\n                <p className=\"text-gray-400 text-xs\">Quantum phase stability</p>\n              </div>\n\n              <div className=\"p-4 bg-gradient-to-r from-red-500/10 to-orange-500/10 rounded-lg border border-red-400/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-white font-medium\">Decoherence</span>\n                  <span className=\"text-red-400 font-bold\">\n                    {quantumNetworkData.quantumStates.decoherence.toFixed(1)}%\n                  </span>\n                </div>\n                <Progress\n                  value={quantumNetworkData.quantumStates.decoherence}\n                  className=\"h-2 mb-2\"\n                />\n                <p className=\"text-gray-400 text-xs\">Quantum state decay</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quantum Trading & Network Nodes */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"bg-gradient-to-r from-blue-900/20 to-cyan-900/20 border-blue-400/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center text-xl\">\n              <Zap className=\"h-6 w-6 mr-2 text-blue-400\" />⚡ Quantum Trading Executions\n              <Badge className=\"ml-3 bg-blue-500\">INSTANTANEOUS</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {quantumTrades.map((trade, index) => (\n                <div\n                  key={index}\n                  className=\"p-4 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-white font-bold\">{trade.symbol}</span>\n                        <Badge className=\"bg-blue-500\">{trade.type}</Badge>\n                        <Badge variant=\"outline\" className=\"border-cyan-400/30 text-cyan-400\">\n                          {trade.entanglementUsed}\n                        </Badge>\n                      </div>\n                      <p className=\"text-gray-400 text-sm mt-1\">\n                        Markets: {trade.markets.join(', ')}\n                      </p>\n                      <p className=\"text-gray-400 text-xs\">{trade.timestamp}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-green-400 font-bold text-lg\">\n                        +${trade.profit.toLocaleString()}\n                      </div>\n                      <p className=\"text-gray-400 text-xs\">{trade.execution}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"mt-6 p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-green-400\">\n                    {quantumNetworkData.tradingMetrics.instantaneousExecutions.toLocaleString()}\n                  </div>\n                  <p className=\"text-gray-400 text-sm\">Total Executions</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"text-2xl font-bold text-blue-400\">\n                    ${quantumNetworkData.tradingMetrics.quantumArbitrage.toFixed(1)}M\n                  </div>\n                  <p className=\"text-gray-400 text-sm\">Arbitrage Profits</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-purple-900/20 to-pink-900/20 border-purple-400/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center text-xl\">\n              <Globe className=\"h-6 w-6 mr-2 text-purple-400\" />\n              🌐 Global Quantum Nodes\n              <Badge className=\"ml-3 bg-purple-500\">ENTANGLED</Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {quantumNodes.map((node, index) => (\n                <div\n                  key={index}\n                  className=\"p-4 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-white font-bold\">{node.id}</span>\n                        <Badge className={getNodeTypeColor(node.type)}>{node.type}</Badge>\n                      </div>\n                      <p className=\"text-gray-400 text-sm\">{node.location}</p>\n                      <div className=\"flex items-center space-x-4 mt-1\">\n                        <span className=\"text-gray-400 text-xs\">\n                          {node.connections} connections\n                        </span>\n                        <span className=\"text-gray-400 text-xs\">{node.latency} latency</span>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className={`text-lg font-bold ${getStatusColor(node.status)}`}>\n                        {node.entanglement.toFixed(2)}%\n                      </div>\n                      <p className=\"text-gray-400 text-xs\">Entanglement</p>\n                      <Badge className=\"mt-1 bg-green-500\">{node.status}</Badge>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Quantum Security */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Shield className=\"h-7 w-7 mr-3 text-green-400\" />\n            🔒 Quantum Cryptographic Security\n            <Badge className=\"ml-3 bg-gradient-to-r from-green-400 to-emerald-500\">\n              <Lock className=\"h-4 w-4 mr-1\" />\n              UNBREAKABLE\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"security\" className=\"space-y-6\">\n            <TabsList className=\"bg-black/20 border-green-400/30\">\n              <TabsTrigger value=\"security\">Security Status</TabsTrigger>\n              <TabsTrigger value=\"encryption\">Quantum Encryption</TabsTrigger>\n              <TabsTrigger value=\"monitoring\">Threat Monitoring</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"security\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30 text-center\">\n                  <Key className=\"h-8 w-8 mx-auto mb-3 text-green-400\" />\n                  <h3 className=\"text-white font-bold\">Quantum Key Distribution</h3>\n                  <p className=\"text-green-400 font-semibold mt-2\">\n                    {quantumSecurity.keyDistributionRate}\n                  </p>\n                  <p className=\"text-gray-400 text-sm\">Key generation rate</p>\n                </div>\n\n                <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30 text-center\">\n                  <Eye className=\"h-8 w-8 mx-auto mb-3 text-blue-400\" />\n                  <h3 className=\"text-white font-bold\">Eavesdropping Detection</h3>\n                  <p className=\"text-blue-400 font-semibold mt-2\">\n                    {quantumSecurity.eavesdroppingDetection}\n                  </p>\n                  <p className=\"text-gray-400 text-sm\">Detection accuracy</p>\n                </div>\n\n                <div className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30 text-center\">\n                  <Cpu className=\"h-8 w-8 mx-auto mb-3 text-purple-400\" />\n                  <h3 className=\"text-white font-bold\">Quantum Randomness</h3>\n                  <p className=\"text-purple-400 font-semibold mt-2\">\n                    {quantumSecurity.quantumRandomness}\n                  </p>\n                  <p className=\"text-gray-400 text-sm\">Entropy source</p>\n                </div>\n\n                <div className=\"p-6 bg-gradient-to-r from-yellow-500/10 to-orange-500/10 rounded-lg border border-yellow-400/30 text-center\">\n                  <Shield className=\"h-8 w-8 mx-auto mb-3 text-yellow-400\" />\n                  <h3 className=\"text-white font-bold\">Security Breaches</h3>\n                  <p className=\"text-yellow-400 font-semibold mt-2\">\n                    {quantumSecurity.securityBreaches}\n                  </p>\n                  <p className=\"text-gray-400 text-sm\">Total incidents</p>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"encryption\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n                  <h3 className=\"text-white font-bold text-lg mb-4\">Encryption Protocols</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Primary Encryption</span>\n                      <span className=\"text-green-400 font-bold\">QKD-256</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Backup Protocol</span>\n                      <span className=\"text-blue-400 font-bold\">Post-Quantum RSA</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Key Refresh Rate</span>\n                      <span className=\"text-purple-400 font-bold\">Every 1ms</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Quantum Signatures</span>\n                      <span className=\"text-cyan-400 font-bold\">Verified</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n                  <h3 className=\"text-white font-bold text-lg mb-4\">Security Metrics</h3>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-gray-400\">Encryption Strength</span>\n                        <span className=\"text-white font-bold\">Quantum Secure</span>\n                      </div>\n                      <Progress value={100} className=\"h-2\" />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-gray-400\">Key Distribution</span>\n                        <span className=\"text-white font-bold\">99.99% Uptime</span>\n                      </div>\n                      <Progress value={99.99} className=\"h-2\" />\n                    </div>\n                    <div>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-gray-400\">Threat Detection</span>\n                        <span className=\"text-white font-bold\">Real-time</span>\n                      </div>\n                      <Progress value={100} className=\"h-2\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"monitoring\">\n              <div className=\"p-6 bg-gradient-to-r from-red-500/10 to-orange-500/10 rounded-lg border border-red-400/30\">\n                <h3 className=\"text-white font-bold text-xl mb-6 flex items-center\">\n                  <Activity className=\"h-6 w-6 mr-2 text-red-400\" />\n                  Real-time Threat Monitoring\n                </h3>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"text-center p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n                    <div className=\"w-12 h-12 bg-green-400/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <Shield className=\"h-6 w-6 text-green-400\" />\n                    </div>\n                    <h4 className=\"text-white font-bold\">Network Secure</h4>\n                    <p className=\"text-green-400 font-semibold mt-2\">All Clear</p>\n                    <p className=\"text-gray-400 text-sm\">No threats detected</p>\n                  </div>\n\n                  <div className=\"text-center p-4 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n                    <div className=\"w-12 h-12 bg-blue-400/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <Eye className=\"h-6 w-6 text-blue-400\" />\n                    </div>\n                    <h4 className=\"text-white font-bold\">Monitoring Active</h4>\n                    <p className=\"text-blue-400 font-semibold mt-2\">24/7 Surveillance</p>\n                    <p className=\"text-gray-400 text-sm\">Quantum sensors online</p>\n                  </div>\n\n                  <div className=\"text-center p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n                    <div className=\"w-12 h-12 bg-purple-400/20 rounded-full flex items-center justify-center mx-auto mb-3\">\n                      <Lock className=\"h-6 w-6 text-purple-400\" />\n                    </div>\n                    <h4 className=\"text-white font-bold\">Quantum Secured</h4>\n                    <p className=\"text-purple-400 font-semibold mt-2\">Unbreakable</p>\n                    <p className=\"text-gray-400 text-sm\">Quantum cryptography</p>\n                  </div>\n                </div>\n\n                <div className=\"mt-6 flex justify-center\">\n                  <Button className=\"bg-gradient-to-r from-green-400 to-emerald-500 text-black font-bold px-8\">\n                    <Shield className=\"h-5 w-5 mr-2\" />\n                    View Security Dashboard\n                  </Button>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/future/SpaceEconomyTrading.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 6,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 7,
        "endColumn": 1,
        "fix": { "range": [142, 143], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setSpaceMarkets' is assigned a value but never used.",
        "line": 138,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 138,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 190,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 190,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5340, 5343], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5340, 5343], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 198,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 198,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5578, 5581], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5578, 5581], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 205,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 205,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5761, 5764], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5761, 5764], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'getRiskColor' is assigned a value but never used.",
        "line": 209,
        "column": 9,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 209,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 209,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 209,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5867, 5870], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5867, 5870], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 224,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 224,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6208, 6211], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6208, 6211], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Rocket,\n  Satellite,\n  Globe,\n  Star,\n  Orbit,\n  Factory,\n  Gem,\n  Fuel,\n  Radio,\n  MapPin,\n  TrendingUp,\n} from 'lucide-react';\n\nexport default function SpaceEconomyTrading() {\n  const [spaceData, setSpaceData] = useState({\n    marketCap: 847000000000 + Math.random() * 50000000000,\n    dailyVolume: 12400000000 + Math.random() * 2000000000,\n    activeAssets: 1247 + Math.floor(Math.random() * 100),\n    spaceStations: 47 + Math.floor(Math.random() * 5),\n    asteroidMines: 124 + Math.floor(Math.random() * 20),\n    lunarBases: 8 + Math.floor(Math.random() * 3),\n    marsColonies: 3 + Math.floor(Math.random() * 2),\n  });\n\n  const [spaceAssets, setSpaceAssets] = useState([\n    {\n      symbol: 'LUNA-H3',\n      name: 'Lunar Helium-3 Mining',\n      type: 'Resource Extraction',\n      location: 'Moon - Mare Imbrium',\n      price: 2847.5 + Math.random() * 200,\n      change: 12.7 + Math.random() * 5,\n      volume: '847M tons',\n      operator: 'Luna Mining Corp',\n      yield: '24.7%',\n      risk: 'Medium',\n    },\n    {\n      symbol: 'AST-PLT',\n      name: 'Asteroid Platinum Mining',\n      type: 'Precious Metals',\n      location: 'Asteroid Belt - 16 Psyche',\n      price: 15247.89 + Math.random() * 1000,\n      change: 8.9 + Math.random() * 4,\n      volume: '124K tons',\n      operator: 'Deep Space Mining Inc',\n      yield: '47.8%',\n      risk: 'High',\n    },\n    {\n      symbol: 'MARS-AG',\n      name: 'Mars Agricultural Domes',\n      type: 'Food Production',\n      location: 'Mars - Chryse Planitia',\n      price: 4578.23 + Math.random() * 300,\n      change: 15.4 + Math.random() * 6,\n      volume: '2.4M units',\n      operator: 'Red Planet Farms',\n      yield: '18.9%',\n      risk: 'Medium',\n    },\n    {\n      symbol: 'ORB-PWR',\n      name: 'Orbital Solar Arrays',\n      type: 'Energy Generation',\n      location: 'Earth Orbit - L1 Lagrange',\n      price: 8947.12 + Math.random() * 500,\n      change: 6.8 + Math.random() * 3,\n      volume: '15.7 TWh',\n      operator: 'Orbital Energy Systems',\n      yield: '12.4%',\n      risk: 'Low',\n    },\n    {\n      symbol: 'TIT-ICE',\n      name: 'Titan Water Ice Harvesting',\n      type: 'Water Resources',\n      location: 'Titan - Kraken Mare',\n      price: 1247.67 + Math.random() * 100,\n      change: 22.3 + Math.random() * 8,\n      volume: '847M liters',\n      operator: 'Outer System Resources',\n      yield: '34.7%',\n      risk: 'Very High',\n    },\n  ]);\n\n  const [spaceInfrastructure, setSpaceInfrastructure] = useState([\n    {\n      name: 'Alpha Station One',\n      type: 'Manufacturing Hub',\n      location: 'Earth-Moon L4',\n      capacity: '2.4M units/year',\n      utilization: 87 + Math.random() * 10,\n      revenue: '$847M/year',\n      status: 'Operational',\n    },\n    {\n      name: 'Ceres Mining Base',\n      type: 'Resource Processing',\n      location: 'Ceres - Occator Crater',\n      capacity: '124K tons/month',\n      utilization: 92 + Math.random() * 5,\n      revenue: '$1.2B/year',\n      status: 'Operational',\n    },\n    {\n      name: 'Europa Research Station',\n      type: 'Scientific Research',\n      location: 'Europa - Subsurface Ocean',\n      capacity: '50 researchers',\n      utilization: 78 + Math.random() * 15,\n      revenue: '$247M/year',\n      status: 'Under Construction',\n    },\n    {\n      name: 'Phobos Fuel Depot',\n      type: 'Refueling Station',\n      location: 'Phobos - Stickney Crater',\n      capacity: '10M liters',\n      utilization: 65 + Math.random() * 20,\n      revenue: '$578M/year',\n      status: 'Operational',\n    },\n  ]);\n\n  const [spaceMarkets, setSpaceMarkets] = useState([\n    {\n      market: 'Lunar Resources Exchange',\n      location: 'Moon - Shackleton Crater',\n      tradingVolume: '$2.4B',\n      activeTraders: '1,247',\n      topCommodity: 'Helium-3',\n      marketHours: '24/7',\n    },\n    {\n      market: 'Asteroid Belt Commodities',\n      location: 'Ceres Station',\n      tradingVolume: '$8.7B',\n      activeTraders: '3,456',\n      topCommodity: 'Platinum',\n      marketHours: '24/7',\n    },\n    {\n      market: 'Mars Colonial Exchange',\n      location: 'New Olympia, Mars',\n      tradingVolume: '$1.8B',\n      activeTraders: '892',\n      topCommodity: 'Food Supplies',\n      marketHours: 'Sol-based',\n    },\n    {\n      market: 'Orbital Manufacturing Hub',\n      location: 'L5 Lagrange Point',\n      tradingVolume: '$4.2B',\n      activeTraders: '2,134',\n      topCommodity: 'Zero-G Products',\n      marketHours: '24/7',\n    },\n  ]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateSpaceData();\n    }, 4000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateSpaceData = () => {\n    setSpaceData(prev => ({\n      ...prev,\n      marketCap: prev.marketCap * (1 + (Math.random() - 0.4) * 0.01),\n      dailyVolume: prev.dailyVolume * (1 + (Math.random() - 0.4) * 0.02),\n      activeAssets: prev.activeAssets + Math.floor((Math.random() - 0.3) * 5),\n    }));\n\n    setSpaceAssets(prev =>\n      prev.map((asset: any) => ({\n        ...asset,\n        price: asset.price * (1 + (Math.random() - 0.45) * 0.02),\n        change: asset.change * (1 + (Math.random() - 0.45) * 0.1),\n      }))\n    );\n\n    setSpaceInfrastructure(prev =>\n      prev.map((infra: any) => ({\n        ...infra,\n        utilization: Math.min(100, Math.max(50, infra.utilization + (Math.random() - 0.5) * 3)),\n      }))\n    );\n  };\n\n  const getChangeColor = (change: any) => {\n    return change >= 0 ? 'text-green-400' : 'text-red-400';\n  };\n\n  const getRiskColor = (risk: any) => {\n    switch (risk.toLowerCase()) {\n      case 'low':\n        return 'bg-green-500';\n      case 'medium':\n        return 'bg-yellow-500';\n      case 'high':\n        return 'bg-orange-500';\n      case 'very high':\n        return 'bg-red-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getStatusColor = (status: any) => {\n    switch (status.toLowerCase()) {\n      case 'operational':\n        return 'bg-green-500';\n      case 'under construction':\n        return 'bg-yellow-500';\n      case 'maintenance':\n        return 'bg-orange-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Space Economy Overview */}\n      <Card className=\"bg-gradient-to-r from-indigo-900/20 to-purple-900/20 border-indigo-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Rocket className=\"h-7 w-7 mr-3 text-indigo-400\" />\n            🚀 Space Economy Trading\n            <Badge className=\"ml-3 bg-gradient-to-r from-indigo-400 to-purple-500\">\n              <Star className=\"h-4 w-4 mr-1\" />\n              INTERPLANETARY\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-indigo-500/10 to-purple-500/10 rounded-lg border border-indigo-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Globe className=\"h-8 w-8 text-indigo-400\" />\n                <Badge className=\"bg-indigo-500\">MARKET CAP</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                ${(spaceData.marketCap / 1000000000000).toFixed(2)}T\n              </div>\n              <p className=\"text-indigo-400 font-semibold\">Space Economy</p>\n              <p className=\"text-gray-400 text-sm\">Total market capitalization</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <TrendingUp className=\"h-8 w-8 text-purple-400\" />\n                <Badge className=\"bg-purple-500\">VOLUME</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                ${(spaceData.dailyVolume / 1000000000).toFixed(1)}B\n              </div>\n              <p className=\"text-purple-400 font-semibold\">Daily Volume</p>\n              <p className=\"text-gray-400 text-sm\">24h trading volume</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Satellite className=\"h-8 w-8 text-blue-400\" />\n                <Badge className=\"bg-blue-500\">ASSETS</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {spaceData.activeAssets.toLocaleString()}\n              </div>\n              <p className=\"text-blue-400 font-semibold\">Active Assets</p>\n              <p className=\"text-gray-400 text-sm\">Tradeable space assets</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-cyan-500/10 to-teal-500/10 rounded-lg border border-cyan-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Factory className=\"h-8 w-8 text-cyan-400\" />\n                <Badge className=\"bg-cyan-500\">INFRASTRUCTURE</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">{spaceData.spaceStations}</div>\n              <p className=\"text-cyan-400 font-semibold\">Space Stations</p>\n              <p className=\"text-gray-400 text-sm\">Operational facilities</p>\n            </div>\n          </div>\n\n          {/* Space Infrastructure Stats */}\n          <div className=\"mt-8 p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n            <h3 className=\"text-white font-bold text-xl mb-6 flex items-center\">\n              <Orbit className=\"h-6 w-6 mr-2 text-indigo-400\" />\n              Space Infrastructure Overview\n            </h3>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              <div className=\"text-center p-4 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n                <Gem className=\"h-8 w-8 mx-auto mb-2 text-blue-400\" />\n                <div className=\"text-2xl font-bold text-white\">{spaceData.asteroidMines}</div>\n                <p className=\"text-blue-400 font-semibold\">Asteroid Mines</p>\n                <p className=\"text-gray-400 text-xs\">Active mining operations</p>\n              </div>\n\n              <div className=\"text-center p-4 bg-gradient-to-r from-yellow-500/10 to-orange-500/10 rounded-lg border border-yellow-400/30\">\n                <MapPin className=\"h-8 w-8 mx-auto mb-2 text-yellow-400\" />\n                <div className=\"text-2xl font-bold text-white\">{spaceData.lunarBases}</div>\n                <p className=\"text-yellow-400 font-semibold\">Lunar Bases</p>\n                <p className=\"text-gray-400 text-xs\">Moon surface facilities</p>\n              </div>\n\n              <div className=\"text-center p-4 bg-gradient-to-r from-red-500/10 to-orange-500/10 rounded-lg border border-red-400/30\">\n                <Rocket className=\"h-8 w-8 mx-auto mb-2 text-red-400\" />\n                <div className=\"text-2xl font-bold text-white\">{spaceData.marsColonies}</div>\n                <p className=\"text-red-400 font-semibold\">Mars Colonies</p>\n                <p className=\"text-gray-400 text-xs\">Red planet settlements</p>\n              </div>\n\n              <div className=\"text-center p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n                <Fuel className=\"h-8 w-8 mx-auto mb-2 text-green-400\" />\n                <div className=\"text-2xl font-bold text-white\">24</div>\n                <p className=\"text-green-400 font-semibold\">Fuel Depots</p>\n                <p className=\"text-gray-400 text-xs\">Refueling stations</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Space Assets Trading */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-cyan-900/20 border-blue-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Star className=\"h-7 w-7 mr-3 text-blue-400\" />⭐ Space Assets Portfolio\n            <Badge className=\"ml-3 bg-gradient-to-r from-blue-400 to-cyan-500\">\n              <Radio className=\"h-4 w-4 mr-1\" />\n              REAL-TIME\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"assets\" className=\"space-y-6\">\n            <TabsList className=\"bg-black/20 border-blue-400/30\">\n              <TabsTrigger value=\"assets\">Space Assets</TabsTrigger>\n              <TabsTrigger value=\"infrastructure\">Infrastructure</TabsTrigger>\n              <TabsTrigger value=\"markets\">Trading Markets</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"assets\">\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-7 text-sm font-medium text-gray-400 pb-2 border-b border-gray-700/50\">\n                  <div>Symbol</div>\n                  <div className=\"col-span-2\">Asset</div>\n                  <div>Location</div>\n                  <div>Price</div>\n                  <div>Change</div>\n                  <div>Yield</div>\n                </div>\n\n                {spaceAssets.map((asset, index) => (\n                  <div\n                    key={index}\n                    className=\"grid grid-cols-7 items-center py-4 border-b border-gray-800/50\"\n                  >\n                    <div className=\"font-bold text-white\">{asset.symbol}</div>\n                    <div className=\"col-span-2\">\n                      <div className=\"text-white font-medium\">{asset.name}</div>\n                      <div className=\"text-gray-400 text-xs\">{asset.type}</div>\n                    </div>\n                    <div className=\"text-gray-300 text-sm\">{asset.location}</div>\n                    <div className=\"text-white\">${asset.price.toLocaleString()}</div>\n                    <div className={getChangeColor(asset.change)}>\n                      {asset.change > 0 ? '+' : ''}\n                      {asset.change.toFixed(2)}%\n                    </div>\n                    <div className=\"text-green-400 font-bold\">{asset.yield}</div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-6 flex justify-center\">\n                <Button className=\"bg-gradient-to-r from-blue-500 to-cyan-500 text-white\">\n                  <Rocket className=\"h-4 w-4 mr-2\" />\n                  View All Space Assets\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"infrastructure\">\n              <div className=\"space-y-4\">\n                {spaceInfrastructure.map((infra, index) => (\n                  <div\n                    key={index}\n                    className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"text-white font-bold text-lg\">{infra.name}</h3>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge variant=\"outline\" className=\"border-blue-400/30 text-blue-400\">\n                            {infra.type}\n                          </Badge>\n                          <Badge className={getStatusColor(infra.status)}>{infra.status}</Badge>\n                        </div>\n                        <p className=\"text-gray-400 text-sm mt-2\">{infra.location}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-blue-400\">\n                          {infra.utilization.toFixed(1)}%\n                        </div>\n                        <p className=\"text-gray-400 text-sm\">Utilization</p>\n                        <div className=\"mt-2\">\n                          <p className=\"text-white font-bold\">{infra.revenue}</p>\n                          <p className=\"text-gray-400 text-xs\">Annual Revenue</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"mt-4\">\n                      <div className=\"flex justify-between mb-2\">\n                        <span className=\"text-gray-400 text-sm\">Capacity: {infra.capacity}</span>\n                        <span className=\"text-blue-400 text-sm\">\n                          {infra.utilization.toFixed(1)}% utilized\n                        </span>\n                      </div>\n                      <Progress value={infra.utilization} className=\"h-2\" />\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"markets\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {spaceMarkets.map((market, index) => (\n                  <div\n                    key={index}\n                    className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\"\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <h3 className=\"text-white font-bold text-lg\">{market.market}</h3>\n                      <Badge className=\"bg-purple-500\">LIVE</Badge>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Location</span>\n                        <span className=\"text-white\">{market.location}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Trading Volume</span>\n                        <span className=\"text-green-400 font-bold\">{market.tradingVolume}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Active Traders</span>\n                        <span className=\"text-blue-400\">{market.activeTraders}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Top Commodity</span>\n                        <span className=\"text-yellow-400\">{market.topCommodity}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400\">Market Hours</span>\n                        <span className=\"text-cyan-400\">{market.marketHours}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-4 flex space-x-2\">\n                      <Button className=\"flex-1 bg-gradient-to-r from-purple-500 to-pink-500 text-white\">\n                        Trade Now\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        className=\"flex-1 border-purple-400/30 text-purple-400\"\n                      >\n                        View Market\n                      </Button>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/graphics/EnhancedVisuals.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/investing/InvestmentDashboard.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'onUpdatePortfolio' is defined but never used.",
        "line": 47,
        "column": 53,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 70
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 347,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 347,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13632, 13635], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13632, 13635], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 387,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 387,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15412, 15415], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15412, 15415], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 426,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 426,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17214, 17217], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17214, 17217], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 466,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 466,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19065, 19068], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19065, 19068], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  TrendingUp,\n  TrendingDown,\n  DollarSign,\n  PieChart,\n  Search,\n  Star,\n  Plus,\n  Eye,\n  Target,\n  BarChart3,\n} from 'lucide-react';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  balance?: number;\n}\n\ninterface PortfolioItem {\n  symbol: string;\n  name: string;\n  shares: number;\n  avgPrice: number;\n  currentPrice: number;\n  value: number;\n  dayChange: number;\n  change: number;\n  price: number;\n  totalReturn: number;\n}\n\ninterface InvestmentDashboardProps {\n  user: User;\n  onUpdatePortfolio: (portfolio: PortfolioItem[]) => void;\n}\n\nexport default function InvestmentDashboard({ user, onUpdatePortfolio }: InvestmentDashboardProps) {\n  const [portfolio] = useState<PortfolioItem[]>([\n    {\n      symbol: 'AAPL',\n      name: 'Apple Inc.',\n      shares: 50,\n      avgPrice: 150.25,\n      currentPrice: 175.43,\n      value: 8771.5,\n      dayChange: 2.34,\n      totalReturn: 1259,\n      change: 1.5,\n      price: 175.43,\n    },\n    {\n      symbol: 'MSFT',\n      name: 'Microsoft Corporation',\n      shares: 25,\n      avgPrice: 320.5,\n      currentPrice: 378.85,\n      value: 9471.25,\n      dayChange: -1.23,\n      totalReturn: 1458.75,\n      change: -0.5,\n      price: 378.85,\n    },\n    {\n      symbol: 'GOOGL',\n      name: 'Alphabet Inc.',\n      shares: 30,\n      avgPrice: 125.75,\n      currentPrice: 138.21,\n      value: 4146.3,\n      dayChange: 4.56,\n      totalReturn: 373.8,\n      change: 3.5,\n      price: 138.21,\n    },\n  ]);\n\n  const [watchlist] = useState([\n    { symbol: 'TSLA', name: 'Tesla Inc.', price: 248.5, change: -3.21 },\n    { symbol: 'NVDA', name: 'NVIDIA Corporation', price: 875.28, change: 15.67 },\n    { symbol: 'AMZN', name: 'Amazon.com Inc.', price: 155.89, change: 1.45 },\n    { symbol: 'META', name: 'Meta Platforms Inc.', price: 485.32, change: 2.87 },\n  ]);\n\n  const [trending] = useState([\n    { symbol: 'PLTR', name: 'Palantir Technologies', price: 25.67, change: 8.45 },\n    { symbol: 'RIVN', name: 'Rivian Automotive', price: 12.34, change: -5.23 },\n    { symbol: 'COIN', name: 'Coinbase Global', price: 89.45, change: 12.67 },\n    { symbol: 'HOOD', name: 'Robinhood Markets', price: 15.78, change: 6.89 },\n  ]);\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedStock, setSelectedStock] = useState<PortfolioItem | null>(null);\n  const [orderType, setOrderType] = useState('buy');\n  const [orderAmount, setOrderAmount] = useState('');\n\n  const totalPortfolioValue = portfolio.reduce((sum, stock) => sum + stock.value, 0);\n  const totalReturn = portfolio.reduce((sum, stock) => sum + stock.totalReturn, 0);\n  const totalReturnPercent = ((totalReturn / (totalPortfolioValue - totalReturn)) * 100).toFixed(2);\n\n  const handleStockSelect = (stock: PortfolioItem) => {\n    setSelectedStock(stock);\n  };\n\n  const handleOrder = () => {\n    if (selectedStock && orderAmount) {\n      // Simulate order execution\n      console.log(`${orderType} ${orderAmount} shares of ${selectedStock.symbol}`);\n      setOrderAmount('');\n      setSelectedStock(null);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Portfolio Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gradient-to-br from-green-500/10 to-emerald-500/10 border-green-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Portfolio Value</p>\n                <p className=\"text-2xl font-bold text-green-400\">\n                  ${totalPortfolioValue.toLocaleString()}\n                </p>\n              </div>\n              <PieChart className=\"h-8 w-8 text-green-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-blue-500/10 to-cyan-500/10 border-blue-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Total Return</p>\n                <p className=\"text-2xl font-bold text-blue-400\">+${totalReturn.toLocaleString()}</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-blue-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-purple-500/10 to-pink-500/10 border-purple-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Return %</p>\n                <p className=\"text-2xl font-bold text-purple-400\">+{totalReturnPercent}%</p>\n              </div>\n              <BarChart3 className=\"h-8 w-8 text-purple-400\" />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-yellow-500/10 to-orange-500/10 border-yellow-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-400\">Buying Power</p>\n                <p className=\"text-2xl font-bold text-yellow-400\">\n                  ${user.balance?.toLocaleString() || '0'}\n                </p>\n              </div>\n              <DollarSign className=\"h-8 w-8 text-yellow-400\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"portfolio\" className=\"space-y-6\">\n        <TabsList className=\"bg-black/20 border-purple-500/30\">\n          <TabsTrigger value=\"portfolio\" className=\"data-[state=active]:bg-purple-500/20\">\n            <PieChart className=\"h-4 w-4 mr-2\" />\n            Portfolio\n          </TabsTrigger>\n          <TabsTrigger value=\"trade\" className=\"data-[state=active]:bg-purple-500/20\">\n            <Target className=\"h-4 w-4 mr-2\" />\n            Trade\n          </TabsTrigger>\n          <TabsTrigger value=\"watchlist\" className=\"data-[state=active]:bg-purple-500/20\">\n            <Eye className=\"h-4 w-4 mr-2\" />\n            Watchlist\n          </TabsTrigger>\n          <TabsTrigger value=\"discover\" className=\"data-[state=active]:bg-purple-500/20\">\n            <Search className=\"h-4 w-4 mr-2\" />\n            Discover\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"portfolio\">\n          <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Your Holdings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {portfolio.map((stock: PortfolioItem) => (\n                  <div\n                    key={stock.symbol}\n                    className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg border border-gray-700/30 hover:border-purple-500/30 transition-all cursor-pointer\"\n                    onClick={() => handleStockSelect(stock)}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"p-3 bg-purple-500/20 rounded-full\">\n                        <BarChart3 className=\"h-6 w-6 text-purple-400\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-white\">{stock.symbol}</p>\n                        <p className=\"text-sm text-gray-400\">{stock.name}</p>\n                        <p className=\"text-xs text-gray-500\">\n                          {stock.shares} shares @ ${stock.avgPrice}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium text-white\">${stock.value.toLocaleString()}</p>\n                      <p\n                        className={`text-sm ${stock.dayChange > 0 ? 'text-green-400' : 'text-red-400'}`}\n                      >\n                        {stock.dayChange > 0 ? '+' : ''}\n                        {stock.dayChange}%\n                      </p>\n                      <p\n                        className={`text-xs ${stock.totalReturn > 0 ? 'text-green-400' : 'text-red-400'}`}\n                      >\n                        {stock.totalReturn > 0 ? '+' : ''}${stock.totalReturn.toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"trade\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Quick Trade</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search stocks...\"\n                    value={searchQuery}\n                    onChange={e => setSearchQuery(e.target.value)}\n                    className=\"pl-10 bg-black/20 border-purple-500/30 text-white\"\n                  />\n                </div>\n\n                {selectedStock && (\n                  <div className=\"p-4 bg-white/5 rounded-lg border border-purple-500/30\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <p className=\"font-medium text-white\">{selectedStock.symbol}</p>\n                        <p className=\"text-sm text-gray-400\">{selectedStock.name}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium text-white\">\n                          ${selectedStock.price || selectedStock.currentPrice}\n                        </p>\n                        <p\n                          className={`text-sm ${(selectedStock.change || selectedStock.dayChange) > 0 ? 'text-green-400' : 'text-red-400'}`}\n                        >\n                          {(selectedStock.change || selectedStock.dayChange) > 0 ? '+' : ''}\n                          {selectedStock.change || selectedStock.dayChange}%\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"flex gap-2 mb-4\">\n                      <Button\n                        variant={orderType === 'buy' ? 'default' : 'outline'}\n                        onClick={() => setOrderType('buy')}\n                        className={\n                          orderType === 'buy'\n                            ? 'bg-green-500 hover:bg-green-600'\n                            : 'border-green-500/30 text-green-400'\n                        }\n                      >\n                        Buy\n                      </Button>\n                      <Button\n                        variant={orderType === 'sell' ? 'default' : 'outline'}\n                        onClick={() => setOrderType('sell')}\n                        className={\n                          orderType === 'sell'\n                            ? 'bg-red-500 hover:bg-red-600'\n                            : 'border-red-500/30 text-red-400'\n                        }\n                      >\n                        Sell\n                      </Button>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Input\n                        type=\"number\"\n                        placeholder=\"Number of shares\"\n                        value={orderAmount}\n                        onChange={e => setOrderAmount(e.target.value)}\n                        className=\"bg-black/20 border-purple-500/30 text-white\"\n                      />\n                      <p className=\"text-sm text-gray-400\">\n                        Estimated cost: $\n                        {(\n                          (selectedStock.price || selectedStock.currentPrice) *\n                          (Number(orderAmount) || 0)\n                        ).toLocaleString()}\n                      </p>\n                    </div>\n\n                    <Button\n                      onClick={handleOrder}\n                      disabled={!orderAmount}\n                      className={`w-full ${\n                        orderType === 'buy'\n                          ? 'bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700'\n                          : 'bg-gradient-to-r from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700'\n                      }`}\n                    >\n                      {orderType === 'buy' ? 'Buy' : 'Sell'} {orderAmount || 0} shares\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Market Movers</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {trending.map((stock: any) => (\n                    <div\n                      key={stock.symbol}\n                      className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg border border-gray-700/30 hover:border-purple-500/30 transition-all cursor-pointer\"\n                      onClick={() => handleStockSelect(stock)}\n                    >\n                      <div>\n                        <p className=\"font-medium text-white\">{stock.symbol}</p>\n                        <p className=\"text-sm text-gray-400\">{stock.name}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium text-white\">${stock.price}</p>\n                        <p\n                          className={`text-sm ${stock.change > 0 ? 'text-green-400' : 'text-red-400'}`}\n                        >\n                          {stock.change > 0 ? '+' : ''}\n                          {stock.change}%\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"watchlist\">\n          <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center justify-between\">\n                <span>Your Watchlist</span>\n                <Button className=\"bg-gradient-to-r from-purple-500 to-pink-500\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Stock\n                </Button>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {watchlist.map((stock: any) => (\n                  <div\n                    key={stock.symbol}\n                    className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg border border-gray-700/30 hover:border-purple-500/30 transition-all cursor-pointer\"\n                    onClick={() => handleStockSelect(stock)}\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"p-3 bg-yellow-500/20 rounded-full\">\n                        <Star className=\"h-6 w-6 text-yellow-400\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-white\">{stock.symbol}</p>\n                        <p className=\"text-sm text-gray-400\">{stock.name}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-medium text-white\">${stock.price}</p>\n                      <p\n                        className={`text-sm ${stock.change > 0 ? 'text-green-400' : 'text-red-400'}`}\n                      >\n                        {stock.change > 0 ? '+' : ''}\n                        {stock.change}%\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"discover\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">Trending Stocks</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {trending.map((stock: any) => (\n                    <div\n                      key={stock.symbol}\n                      className=\"flex items-center justify-between p-3 bg-white/5 rounded-lg border border-gray-700/30 hover:border-purple-500/30 transition-all cursor-pointer\"\n                      onClick={() => handleStockSelect(stock)}\n                    >\n                      <div>\n                        <p className=\"font-medium text-white\">{stock.symbol}</p>\n                        <p className=\"text-sm text-gray-400\">{stock.name}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-medium text-white\">${stock.price}</p>\n                        <Badge\n                          className={\n                            stock.change > 0\n                              ? 'bg-green-500/20 text-green-400'\n                              : 'bg-red-500/20 text-red-400'\n                          }\n                        >\n                          {stock.change > 0 ? (\n                            <TrendingUp className=\"h-3 w-3 mr-1\" />\n                          ) : (\n                            <TrendingDown className=\"h-3 w-3 mr-1\" />\n                          )}\n                          {stock.change > 0 ? '+' : ''}\n                          {stock.change}%\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white\">AI Recommendations</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {portfolio.slice(0, 3).map((stock: any) => (\n                    <div\n                      key={stock.symbol}\n                      className=\"p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-500/30\"\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <p className=\"font-medium text-white\">{stock.symbol}</p>\n                        <Badge className=\"bg-green-500/20 text-green-400\">\n                          <TrendingUp className=\"h-3 w-3 mr-1\" />\n                          BUY\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400 mb-2\">AI Confidence: 87%</p>\n                      <p className=\"text-xs text-gray-500\">\n                        Strong technical indicators and positive earnings outlook suggest continued\n                        upward momentum.\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/investor/InvestorProfile.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'CardHeader' is defined but never used.",
        "line": 4,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 185,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 185,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7283, 7286], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7283, 7286], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 340,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 340,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15160, 15163], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15160, 15163], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Brain,\n  TrendingUp,\n  Zap,\n  Target,\n  Shield,\n  Crown,\n  Activity,\n  BarChart3,\n  Cpu,\n  Database,\n  Gauge,\n  PieChart,\n  CheckCircle,\n  Clock,\n  Wifi,\n} from 'lucide-react';\nimport AdvancedAIFeatures from '../features/AdvancedAIFeatures';\nimport ComplianceCenter from '../compliance/ComplianceCenter';\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';\n\ninterface InvestorProfileProps {\n  onSwitchToOwner?: () => void;\n  onSwitchToAdmin?: () => void;\n}\n\nexport default function InvestorProfile({\n  onSwitchToOwner,\n  onSwitchToAdmin,\n}: InvestorProfileProps) {\n  const aiMetrics = {\n    accuracy: 94.7,\n    processing: 2847392,\n    predictions: 15847,\n    confidence: 96.8,\n    uptime: 99.97,\n    trades: 847392,\n  };\n\n  const portfolioData = [\n    { symbol: 'AAPL', position: 1250, value: 234750, change: 2.4, ai_score: 94 },\n    { symbol: 'TSLA', position: 500, value: 127500, change: -1.2, ai_score: 87 },\n    { symbol: 'NVDA', position: 300, value: 89400, change: 5.7, ai_score: 98 },\n    { symbol: 'MSFT', position: 800, value: 267200, change: 1.8, ai_score: 91 },\n    { symbol: 'GOOGL', position: 200, value: 54600, change: 0.9, ai_score: 89 },\n  ];\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-4xl font-bold bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n            Investor Command Center\n          </h1>\n          <p className=\"text-gray-400 mt-2\">Revolutionary AI-Powered Investment Platform</p>\n        </div>\n        <div className=\"flex space-x-3\">\n          {onSwitchToOwner && (\n            <Button onClick={onSwitchToOwner} variant=\"outline\" className=\"border-yellow-500/30\">\n              <Crown className=\"h-4 w-4 mr-2\" />\n              Owner View\n            </Button>\n          )}\n          {onSwitchToAdmin && (\n            <Button onClick={onSwitchToAdmin} variant=\"outline\" className=\"border-red-500/30\">\n              <Shield className=\"h-4 w-4 mr-2\" />\n              Admin Panel\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {/* Live Metrics Dashboard */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card className=\"bg-gradient-to-br from-blue-900/20 to-purple-900/20 border-blue-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-blue-400 text-sm font-medium\">AI Accuracy</p>\n                <p className=\"text-3xl font-bold text-white\">{aiMetrics.accuracy}%</p>\n              </div>\n              <Brain className=\"h-8 w-8 text-blue-400\" />\n            </div>\n            <Progress value={aiMetrics.accuracy} className=\"mt-3\" />\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-green-900/20 to-emerald-900/20 border-green-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-green-400 text-sm font-medium\">Data Points/sec</p>\n                <p className=\"text-3xl font-bold text-white\">\n                  {aiMetrics.processing.toLocaleString()}\n                </p>\n              </div>\n              <Database className=\"h-8 w-8 text-green-400\" />\n            </div>\n            <div className=\"flex items-center mt-3\">\n              <Wifi className=\"h-4 w-4 text-green-400 mr-2\" />\n              <span className=\"text-green-400 text-sm\">Live Processing</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-purple-900/20 to-pink-900/20 border-purple-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-purple-400 text-sm font-medium\">AI Predictions</p>\n                <p className=\"text-3xl font-bold text-white\">\n                  {aiMetrics.predictions.toLocaleString()}\n                </p>\n              </div>\n              <Target className=\"h-8 w-8 text-purple-400\" />\n            </div>\n            <div className=\"flex items-center mt-3\">\n              <CheckCircle className=\"h-4 w-4 text-purple-400 mr-2\" />\n              <span className=\"text-purple-400 text-sm\">{aiMetrics.confidence}% Confidence</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-yellow-900/20 to-orange-900/20 border-yellow-500/30\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-yellow-400 text-sm font-medium\">Total Trades</p>\n                <p className=\"text-3xl font-bold text-white\">{aiMetrics.trades.toLocaleString()}</p>\n              </div>\n              <TrendingUp className=\"h-8 w-8 text-yellow-400\" />\n            </div>\n            <div className=\"flex items-center mt-3\">\n              <Activity className=\"h-4 w-4 text-yellow-400 mr-2\" />\n              <span className=\"text-yellow-400 text-sm\">{aiMetrics.uptime}% Uptime</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Platform Tabs */}\n      <Tabs defaultValue=\"ai-features\" className=\"space-y-6\">\n        <TabsList className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n          <TabsTrigger value=\"ai-features\" className=\"data-[state=active]:bg-purple-500/20\">\n            <Brain className=\"h-4 w-4 mr-2\" />\n            AI Features\n          </TabsTrigger>\n          <TabsTrigger value=\"portfolio\" className=\"data-[state=active]:bg-purple-500/20\">\n            <PieChart className=\"h-4 w-4 mr-2\" />\n            Smart Portfolio\n          </TabsTrigger>\n          <TabsTrigger value=\"trading\" className=\"data-[state=active]:bg-purple-500/20\">\n            <Zap className=\"h-4 w-4 mr-2\" />\n            Live Trading\n          </TabsTrigger>\n          <TabsTrigger value=\"compliance\" className=\"data-[state=active]:bg-purple-500/20\">\n            <Shield className=\"h-4 w-4 mr-2\" />\n            Compliance\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"ai-features\">\n          <AdvancedAIFeatures />\n        </TabsContent>\n\n        <TabsContent value=\"portfolio\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n              <div>\n                <CardTitle className=\"flex items-center text-white\">\n                  <PieChart className=\"h-5 w-5 mr-2 text-purple-400\" />\n                  AI-Optimized Portfolio\n                </CardTitle>\n                <CardDescription>Real-time AI analysis and optimization</CardDescription>\n              </div>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {portfolioData.map((stock: any) => (\n                    <div\n                      key={stock.symbol}\n                      className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n                          <span className=\"text-white font-bold text-sm\">\n                            {stock.symbol.slice(0, 2)}\n                          </span>\n                        </div>\n                        <div>\n                          <p className=\"text-white font-semibold\">{stock.symbol}</p>\n                          <p className=\"text-gray-400 text-sm\">{stock.position} shares</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-white font-semibold\">${stock.value.toLocaleString()}</p>\n                        <div className=\"flex items-center space-x-2\">\n                          <span\n                            className={`text-sm ${stock.change >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                          >\n                            {stock.change >= 0 ? '+' : ''}\n                            {stock.change}%\n                          </span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            AI: {stock.ai_score}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n              <div>\n                <CardTitle className=\"flex items-center text-white\">\n                  <BarChart3 className=\"h-5 w-5 mr-2 text-green-400\" />\n                  Performance Analytics\n                </CardTitle>\n                <CardDescription>AI-driven performance insights</CardDescription>\n              </div>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-gray-400\">Total Portfolio Value</span>\n                      <span className=\"text-white font-bold\">$773,450</span>\n                    </div>\n                    <Progress value={85} className=\"h-2\" />\n                  </div>\n\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-gray-400\">AI Optimization Score</span>\n                      <span className=\"text-green-400 font-bold\">92/100</span>\n                    </div>\n                    <Progress value={92} className=\"h-2\" />\n                  </div>\n\n                  <div>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <span className=\"text-gray-400\">Risk Level</span>\n                      <span className=\"text-yellow-400 font-bold\">Moderate</span>\n                    </div>\n                    <Progress value={45} className=\"h-2\" />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4 mt-6\">\n                    <div className=\"text-center p-3 bg-green-900/20 rounded-lg border border-green-500/30\">\n                      <p className=\"text-green-400 text-2xl font-bold\">+24.7%</p>\n                      <p className=\"text-gray-400 text-sm\">YTD Return</p>\n                    </div>\n                    <div className=\"text-center p-3 bg-blue-900/20 rounded-lg border border-blue-500/30\">\n                      <p className=\"text-blue-400 text-2xl font-bold\">0.89</p>\n                      <p className=\"text-gray-400 text-sm\">Sharpe Ratio</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"trading\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            <Card className=\"lg:col-span-2 bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n              <div>\n                <CardTitle className=\"flex items-center text-white\">\n                  <Zap className=\"h-5 w-5 mr-2 text-yellow-400\" />\n                  Ultra-Fast Trading Engine\n                </CardTitle>\n                <CardDescription>Quantum-speed execution with AI optimization</CardDescription>\n              </div>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"text-center p-4 bg-gradient-to-r from-blue-900/30 to-purple-900/30 rounded-lg\">\n                      <Clock className=\"h-8 w-8 text-blue-400 mx-auto mb-2\" />\n                      <p className=\"text-blue-400 text-2xl font-bold\">5-15ms</p>\n                      <p className=\"text-gray-400 text-sm\">Execution Speed</p>\n                    </div>\n                    <div className=\"text-center p-4 bg-gradient-to-r from-green-900/30 to-emerald-900/30 rounded-lg\">\n                      <Gauge className=\"h-8 w-8 text-green-400 mx-auto mb-2\" />\n                      <p className=\"text-green-400 text-2xl font-bold\">99.97%</p>\n                      <p className=\"text-gray-400 text-sm\">Success Rate</p>\n                    </div>\n                    <div className=\"text-center p-4 bg-gradient-to-r from-purple-900/30 to-pink-900/30 rounded-lg\">\n                      <Cpu className=\"h-8 w-8 text-purple-400 mx-auto mb-2\" />\n                      <p className=\"text-purple-400 text-2xl font-bold\">247M</p>\n                      <p className=\"text-gray-400 text-sm\">AI Parameters</p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-3\">\n                    <Button\n                      onClick={void 0}\n                      className=\"w-full bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600\"\n                    >\n                      <Zap className=\"h-4 w-4 mr-2\" />\n                      Execute Quantum Trade Demo\n                    </Button>\n\n                    <div className=\"grid grid-cols-2 gap-3\">\n                      <Button variant=\"outline\" className=\"border-green-500/30 text-green-400\">\n                        <TrendingUp className=\"h-4 w-4 mr-2\" />\n                        AI Buy Signal\n                      </Button>\n                      <Button variant=\"outline\" className=\"border-red-500/30 text-red-400\">\n                        <TrendingUp className=\"h-4 w-4 mr-2 rotate-180\" />\n                        AI Sell Signal\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n              <div>\n                <CardTitle className=\"flex items-center text-white\">\n                  <Activity className=\"h-5 w-5 mr-2 text-green-400\" />\n                  Live Market Feed\n                </CardTitle>\n                <CardDescription>Real-time AI market analysis</CardDescription>\n              </div>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {[\n                    { symbol: 'SPY', price: 445.67, change: 1.23, signal: 'BUY' },\n                    { symbol: 'QQQ', price: 378.45, change: -0.87, signal: 'HOLD' },\n                    { symbol: 'IWM', price: 198.23, change: 2.14, signal: 'BUY' },\n                    { symbol: 'VIX', price: 16.78, change: -3.45, signal: 'SELL' },\n                  ].map((item: any) => (\n                    <div\n                      key={item.symbol}\n                      className=\"flex items-center justify-between p-3 bg-gray-800/50 rounded-lg\"\n                    >\n                      <div>\n                        <p className=\"text-white font-semibold\">{item.symbol}</p>\n                        <p className=\"text-gray-400 text-sm\">${item.price}</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p\n                          className={`text-sm ${item.change >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                        >\n                          {item.change >= 0 ? '+' : ''}\n                          {item.change}%\n                        </p>\n                        <Badge\n                          variant=\"outline\"\n                          className={`text-xs ${\n                            item.signal === 'BUY'\n                              ? 'border-green-500/30 text-green-400'\n                              : item.signal === 'SELL'\n                                ? 'border-red-500/30 text-red-400'\n                                : 'border-yellow-500/30 text-yellow-400'\n                          }`}\n                        >\n                          {item.signal}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"compliance\">\n          <ComplianceCenter />\n        </TabsContent>\n      </Tabs>\n\n      {/* Platform Status */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-500/30\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-12 h-12 bg-green-500 rounded-full flex items-center justify-center\">\n                <CheckCircle className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-white font-bold text-lg\">Platform Status: OPERATIONAL</h3>\n                <p className=\"text-green-400\">\n                  All systems running optimally • 47,892 active traders\n                </p>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-white font-bold text-2xl\">$2.8B</p>\n              <p className=\"text-green-400 text-sm\">Assets Under Management</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/membership/MembershipTiers.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/metaverse/MetaverseTrading.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 6,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 7,
        "endColumn": 1,
        "fix": { "range": [142, 143], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setVirtualProperties' is assigned a value but never used.",
        "line": 58,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 58,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setMetaverseEvents' is assigned a value but never used.",
        "line": 88,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 88,
        "endColumn": 45
      },
      {
        "ruleId": "@next/next/no-img-element",
        "severity": 1,
        "message": "Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element",
        "line": 386,
        "column": 21,
        "nodeType": "JSXOpeningElement",
        "endLine": 390,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  CuboidIcon as Cube,\n  Glasses,\n  Globe,\n  Users,\n  Building2,\n  Map,\n  Layers,\n  Zap,\n  Headphones,\n  Hand,\n  Maximize2,\n  BarChart3,\n  Wallet,\n} from 'lucide-react';\n\nexport default function MetaverseTrading() {\n  const [metaverseData, setMetaverseData] = useState({\n    activeUsers: 1247 + Math.floor(Math.random() * 200),\n    virtualAssets: 15789 + Math.floor(Math.random() * 1000),\n    tradingVolume: 4782000 + Math.floor(Math.random() * 500000),\n    averageROI: 24.7 + Math.random() * 5,\n    virtualLand: {\n      owned: 47,\n      totalValue: 2450000 + Math.random() * 100000,\n      appreciation: 37.8 + Math.random() * 10,\n      rentalYield: 12.4 + Math.random() * 3,\n    },\n    nftPortfolio: {\n      totalNFTs: 124,\n      totalValue: 1780000 + Math.random() * 200000,\n      floorPrice: 3.7 + Math.random() * 1,\n      topCollection: 'Alpha Traders Club',\n    },\n    metaverseIndex: {\n      value: 1247.89 + Math.random() * 50,\n      change: 3.7 + Math.random() * 2,\n      marketCap: 47800000000 + Math.random() * 1000000000,\n      dominance: {\n        Decentraland: 24.7 + Math.random() * 5,\n        Sandbox: 18.9 + Math.random() * 4,\n        Otherside: 15.4 + Math.random() * 3,\n        Somnium: 12.8 + Math.random() * 3,\n        Others: 28.2 + Math.random() * 5,\n      },\n    },\n  });\n\n  const [virtualProperties, setVirtualProperties] = useState([\n    {\n      name: 'Alpha Tower',\n      location: 'Decentraland',\n      size: '16x16',\n      value: '$478,000',\n      rental: '$4,780/month',\n      appreciation: '+47.8%',\n      image: '/placeholder.svg?height=100&width=100',\n    },\n    {\n      name: 'Trading Plaza',\n      location: 'Sandbox',\n      size: '24x24',\n      value: '$687,500',\n      rental: '$6,875/month',\n      appreciation: '+52.3%',\n      image: '/placeholder.svg?height=100&width=100',\n    },\n    {\n      name: 'Financial District',\n      location: 'Otherside',\n      size: '32x32',\n      value: '$1,245,000',\n      rental: '$12,450/month',\n      appreciation: '+68.7%',\n      image: '/placeholder.svg?height=100&width=100',\n    },\n  ]);\n\n  const [metaverseEvents, setMetaverseEvents] = useState([\n    {\n      name: 'Virtual Trading Summit',\n      date: 'June 15, 2025',\n      location: 'Alpha Financial District',\n      attendees: '5,000+',\n      speakers: '25 Industry Leaders',\n      status: 'Upcoming',\n    },\n    {\n      name: 'NFT Market Analysis',\n      date: 'June 22, 2025',\n      location: 'Trading Plaza',\n      attendees: '3,500+',\n      speakers: '12 NFT Experts',\n      status: 'Upcoming',\n    },\n    {\n      name: 'Metaverse Investment Workshop',\n      date: 'July 5, 2025',\n      location: 'Alpha Tower',\n      attendees: '2,000+',\n      speakers: '8 Investment Gurus',\n      status: 'Registration Open',\n    },\n  ]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateMetaverseData();\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateMetaverseData = () => {\n    setMetaverseData(prev => ({\n      ...prev,\n      activeUsers: prev.activeUsers + Math.floor((Math.random() - 0.3) * 50),\n      tradingVolume: prev.tradingVolume + Math.floor((Math.random() - 0.3) * 50000),\n      metaverseIndex: {\n        ...prev.metaverseIndex,\n        value: prev.metaverseIndex.value * (1 + (Math.random() - 0.45) * 0.01),\n        change: prev.metaverseIndex.change * (1 + (Math.random() - 0.45) * 0.05),\n      },\n    }));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Metaverse Trading Hub */}\n      <Card className=\"bg-gradient-to-r from-violet-900/20 to-indigo-900/20 border-violet-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Cube className=\"h-7 w-7 mr-3 text-violet-400\" />\n            🌐 Metaverse Trading Hub\n            <Badge className=\"ml-3 bg-gradient-to-r from-violet-400 to-indigo-500\">\n              <Glasses className=\"h-4 w-4 mr-1\" />\n              WEB3 ENABLED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-violet-500/10 to-indigo-500/10 rounded-lg border border-violet-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Users className=\"h-8 w-8 text-violet-400\" />\n                <Badge className=\"bg-violet-500\">LIVE</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {metaverseData.activeUsers.toLocaleString()}\n              </div>\n              <p className=\"text-violet-400 font-semibold\">Active Traders</p>\n              <p className=\"text-gray-400 text-sm\">In virtual trading floors</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-indigo-500/10 to-blue-500/10 rounded-lg border border-indigo-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Building2 className=\"h-8 w-8 text-indigo-400\" />\n                <Badge className=\"bg-indigo-500\">ASSETS</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {metaverseData.virtualAssets.toLocaleString()}\n              </div>\n              <p className=\"text-indigo-400 font-semibold\">Virtual Assets</p>\n              <p className=\"text-gray-400 text-sm\">Land, buildings & NFTs</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <BarChart3 className=\"h-8 w-8 text-blue-400\" />\n                <Badge className=\"bg-blue-500\">VOLUME</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                ${(metaverseData.tradingVolume / 1000000).toFixed(2)}M\n              </div>\n              <p className=\"text-blue-400 font-semibold\">Trading Volume</p>\n              <p className=\"text-gray-400 text-sm\">24h in metaverse</p>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-cyan-500/10 to-teal-500/10 rounded-lg border border-cyan-400/30\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <Wallet className=\"h-8 w-8 text-cyan-400\" />\n                <Badge className=\"bg-cyan-500\">RETURNS</Badge>\n              </div>\n              <div className=\"text-3xl font-bold text-white mb-2\">\n                {metaverseData.averageROI.toFixed(1)}%\n              </div>\n              <p className=\"text-cyan-400 font-semibold\">Average ROI</p>\n              <p className=\"text-gray-400 text-sm\">Virtual asset returns</p>\n            </div>\n          </div>\n\n          {/* Metaverse Index */}\n          <div className=\"mt-8 p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-white font-bold text-xl flex items-center\">\n                <Globe className=\"h-6 w-6 mr-2 text-violet-400\" />\n                Alpha Metaverse Index\n              </h3>\n              <div className=\"flex items-center\">\n                <span\n                  className={`text-2xl font-bold ${\n                    metaverseData.metaverseIndex.change > 0 ? 'text-green-400' : 'text-red-400'\n                  }`}\n                >\n                  {metaverseData.metaverseIndex.change > 0 ? '+' : ''}\n                  {metaverseData.metaverseIndex.change.toFixed(2)}%\n                </span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between mb-6\">\n              <div>\n                <div className=\"text-3xl font-bold text-white\">\n                  {metaverseData.metaverseIndex.value.toFixed(2)}\n                </div>\n                <p className=\"text-gray-400 text-sm\">\n                  Market Cap: ${(metaverseData.metaverseIndex.marketCap / 1000000000).toFixed(2)}B\n                </p>\n              </div>\n\n              <div className=\"flex space-x-2\">\n                <Button className=\"bg-violet-500 hover:bg-violet-600\">1D</Button>\n                <Button variant=\"outline\" className=\"border-violet-400/30 text-violet-400\">\n                  1W\n                </Button>\n                <Button variant=\"outline\" className=\"border-violet-400/30 text-violet-400\">\n                  1M\n                </Button>\n                <Button variant=\"outline\" className=\"border-violet-400/30 text-violet-400\">\n                  1Y\n                </Button>\n                <Button variant=\"outline\" className=\"border-violet-400/30 text-violet-400\">\n                  ALL\n                </Button>\n              </div>\n            </div>\n\n            {/* Placeholder for chart */}\n            <div className=\"h-64 bg-gradient-to-r from-violet-500/5 to-indigo-500/5 rounded-lg border border-violet-400/10 mb-6 relative overflow-hidden\">\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <p className=\"text-violet-400 text-lg\">Interactive Metaverse Index Chart</p>\n              </div>\n              <svg\n                className=\"absolute bottom-0 w-full\"\n                viewBox=\"0 0 1000 200\"\n                preserveAspectRatio=\"none\"\n                height=\"100%\"\n                width=\"100%\"\n              >\n                <path\n                  d=\"M0,150 C100,100 200,180 300,120 C400,60 500,140 600,80 C700,20 800,100 900,50 L900,200 L0,200 Z\"\n                  fill=\"url(#metaverse-gradient)\"\n                  opacity=\"0.3\"\n                ></path>\n                <defs>\n                  <linearGradient id=\"metaverse-gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                    <stop offset=\"0%\" stopColor=\"#8b5cf6\" />\n                    <stop offset=\"100%\" stopColor=\"#6366f1\" />\n                  </linearGradient>\n                </defs>\n              </svg>\n            </div>\n\n            <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n              {Object.entries(metaverseData.metaverseIndex.dominance).map(\n                ([platform, percentage], index) => (\n                  <div key={index} className=\"text-center\">\n                    <p className=\"text-gray-400 text-sm\">{platform}</p>\n                    <p className=\"text-white font-bold\">{percentage.toFixed(1)}%</p>\n                    <Progress value={percentage} className=\"h-1 mt-1\" />\n                  </div>\n                )\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Virtual Real Estate Portfolio */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-cyan-900/20 border-blue-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Map className=\"h-7 w-7 mr-3 text-blue-400\" />\n            🏙️ Virtual Real Estate Portfolio\n            <Badge className=\"ml-3 bg-gradient-to-r from-blue-400 to-cyan-500\">\n              <Layers className=\"h-4 w-4 mr-1\" />\n              PRIME LOCATIONS\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-8\">\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <h3 className=\"text-white font-bold text-lg mb-4\">Portfolio Overview</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Properties Owned</span>\n                  <span className=\"text-white font-bold\">{metaverseData.virtualLand.owned}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Total Value</span>\n                  <span className=\"text-white font-bold\">\n                    ${(metaverseData.virtualLand.totalValue / 1000000).toFixed(2)}M\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Average Appreciation</span>\n                  <span className=\"text-green-400 font-bold\">\n                    +{metaverseData.virtualLand.appreciation.toFixed(1)}%\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-400\">Rental Yield</span>\n                  <span className=\"text-blue-400 font-bold\">\n                    {metaverseData.virtualLand.rentalYield.toFixed(1)}%\n                  </span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-indigo-500/10 to-violet-500/10 rounded-lg border border-indigo-400/30\">\n              <h3 className=\"text-white font-bold text-lg mb-4\">Location Distribution</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center\">\n                  <div className=\"w-full h-4 bg-gradient-to-r from-blue-500/20 to-cyan-500/20 rounded-full overflow-hidden\">\n                    <div\n                      className=\"h-full bg-gradient-to-r from-blue-500 to-cyan-500\"\n                      style={{ width: '35%' }}\n                    ></div>\n                  </div>\n                  <p className=\"text-white font-bold mt-2\">35%</p>\n                  <p className=\"text-gray-400 text-sm\">Decentraland</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-full h-4 bg-gradient-to-r from-purple-500/20 to-pink-500/20 rounded-full overflow-hidden\">\n                    <div\n                      className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500\"\n                      style={{ width: '28%' }}\n                    ></div>\n                  </div>\n                  <p className=\"text-white font-bold mt-2\">28%</p>\n                  <p className=\"text-gray-400 text-sm\">Sandbox</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-full h-4 bg-gradient-to-r from-green-500/20 to-emerald-500/20 rounded-full overflow-hidden\">\n                    <div\n                      className=\"h-full bg-gradient-to-r from-green-500 to-emerald-500\"\n                      style={{ width: '22%' }}\n                    ></div>\n                  </div>\n                  <p className=\"text-white font-bold mt-2\">22%</p>\n                  <p className=\"text-gray-400 text-sm\">Otherside</p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"w-full h-4 bg-gradient-to-r from-yellow-500/20 to-orange-500/20 rounded-full overflow-hidden\">\n                    <div\n                      className=\"h-full bg-gradient-to-r from-yellow-500 to-orange-500\"\n                      style={{ width: '15%' }}\n                    ></div>\n                  </div>\n                  <p className=\"text-white font-bold mt-2\">15%</p>\n                  <p className=\"text-gray-400 text-sm\">Others</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-white font-bold text-lg\">Premium Properties</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              {virtualProperties.map((property, index) => (\n                <div\n                  key={index}\n                  className=\"p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\"\n                >\n                  <div className=\"aspect-video rounded-lg overflow-hidden mb-4 bg-gradient-to-r from-blue-500/10 to-violet-500/10\">\n                    <img\n                      src={property.image || '/placeholder.svg'}\n                      alt={property.name}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                  <h4 className=\"text-white font-bold text-lg\">{property.name}</h4>\n                  <div className=\"flex items-center space-x-2 mt-1 mb-3\">\n                    <Badge variant=\"outline\" className=\"border-blue-400/30 text-blue-400\">\n                      {property.location}\n                    </Badge>\n                    <Badge variant=\"outline\" className=\"border-violet-400/30 text-violet-400\">\n                      {property.size}\n                    </Badge>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Value</span>\n                      <span className=\"text-white font-bold\">{property.value}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Rental</span>\n                      <span className=\"text-blue-400 font-bold\">{property.rental}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Appreciation</span>\n                      <span className=\"text-green-400 font-bold\">{property.appreciation}</span>\n                    </div>\n                  </div>\n                  <div className=\"mt-4 flex space-x-2\">\n                    <Button className=\"flex-1 bg-gradient-to-r from-blue-500 to-cyan-500 text-white\">\n                      Visit\n                    </Button>\n                    <Button variant=\"outline\" className=\"flex-1 border-blue-400/30 text-blue-400\">\n                      Manage\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Immersive Trading Experience */}\n      <Card className=\"bg-gradient-to-r from-purple-900/20 to-pink-900/20 border-purple-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Headphones className=\"h-7 w-7 mr-3 text-purple-400\" />\n            🎮 Immersive Trading Experience\n            <Badge className=\"ml-3 bg-gradient-to-r from-purple-400 to-pink-500\">\n              <Zap className=\"h-4 w-4 mr-1\" />\n              VR/AR ENABLED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"p-3 bg-purple-400/20 rounded-lg mr-4\">\n                  <Glasses className=\"h-6 w-6 text-purple-400\" />\n                </div>\n                <h3 className=\"text-white font-bold text-lg\">VR Trading Floor</h3>\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                Trade in our immersive VR environment with real-time market data and 3D\n                visualizations.\n              </p>\n              <div className=\"flex items-center\">\n                <Badge className=\"bg-purple-500\">ACTIVE</Badge>\n                <span className=\"text-gray-400 text-sm ml-2\">1,247 Traders Online</span>\n              </div>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"p-3 bg-blue-400/20 rounded-lg mr-4\">\n                  <Hand className=\"h-6 w-6 text-blue-400\" />\n                </div>\n                <h3 className=\"text-white font-bold text-lg\">Gesture Controls</h3>\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                Execute trades with intuitive hand gestures and voice commands in our immersive\n                environment.\n              </p>\n              <div className=\"flex items-center\">\n                <Badge className=\"bg-blue-500\">ENABLED</Badge>\n                <span className=\"text-gray-400 text-sm ml-2\">98.7% Accuracy</span>\n              </div>\n            </div>\n\n            <div className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"p-3 bg-green-400/20 rounded-lg mr-4\">\n                  <Maximize2 className=\"h-6 w-6 text-green-400\" />\n                </div>\n                <h3 className=\"text-white font-bold text-lg\">3D Data Visualization</h3>\n              </div>\n              <p className=\"text-gray-300 mb-4\">\n                Explore market data in three dimensions with interactive holographic charts and\n                patterns.\n              </p>\n              <div className=\"flex items-center\">\n                <Badge className=\"bg-green-500\">REAL-TIME</Badge>\n                <span className=\"text-gray-400 text-sm ml-2\">10ms Latency</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 p-6 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-gray-600/30\">\n            <h3 className=\"text-white font-bold text-xl mb-4 flex items-center\">\n              <Globe className=\"h-6 w-6 mr-2 text-purple-400\" />\n              Upcoming Metaverse Events\n            </h3>\n\n            <div className=\"space-y-4\">\n              {metaverseEvents.map((event, index) => (\n                <div\n                  key={index}\n                  className=\"p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\"\n                >\n                  <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n                    <div>\n                      <h4 className=\"text-white font-bold text-lg\">{event.name}</h4>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Badge variant=\"outline\" className=\"border-purple-400/30 text-purple-400\">\n                          {event.date}\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"border-blue-400/30 text-blue-400\">\n                          {event.location}\n                        </Badge>\n                      </div>\n                      <p className=\"text-gray-400 text-sm mt-2\">\n                        {event.attendees} attendees • {event.speakers}\n                      </p>\n                    </div>\n                    <div className=\"mt-4 md:mt-0\">\n                      <Button className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white\">\n                        <Glasses className=\"h-4 w-4 mr-2\" />\n                        Join in VR\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            <div className=\"mt-6 flex justify-center\">\n              <Button className=\"bg-gradient-to-r from-purple-400 to-pink-500 text-white font-bold px-8\">\n                <Globe className=\"h-5 w-5 mr-2\" />\n                View All Metaverse Events\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/mobile/MobileOptimization.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 6,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 7,
        "endColumn": 1,
        "fix": { "range": [142, 143], "text": "" }
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 35,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 35,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [722, 725], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [722, 725], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Smartphone,\n  Tablet,\n  Monitor,\n  Wifi,\n  Battery,\n  Download,\n  Star,\n  Zap,\n  Globe,\n  Shield,\n  Bell,\n  Camera,\n  Fingerprint,\n  MapPin,\n} from 'lucide-react';\n\nexport default function MobileOptimization() {\n  const [deviceMetrics, setDeviceMetrics] = useState({\n    loadTime: 0,\n    performanceScore: 0,\n    batteryOptimization: 0,\n    networkEfficiency: 0,\n  });\n\n  const [appFeatures, setAppFeatures] = useState<any[]>([]);\n  const [downloadStats, setDownloadStats] = useState({\n    ios: 0,\n    android: 0,\n    rating: 0,\n    reviews: 0,\n  });\n\n  useEffect(() => {\n    // Simulate mobile metrics\n    setDeviceMetrics({\n      loadTime: 1.2 + Math.random() * 0.8,\n      performanceScore: 92 + Math.random() * 8,\n      batteryOptimization: 88 + Math.random() * 12,\n      networkEfficiency: 94 + Math.random() * 6,\n    });\n\n    setDownloadStats({\n      ios: 2847392,\n      android: 4521847,\n      rating: 4.8,\n      reviews: 127483,\n    });\n\n    initializeAppFeatures();\n  }, []);\n\n  const initializeAppFeatures = () => {\n    const features = [\n      {\n        title: 'Biometric Authentication',\n        description: 'Face ID, Touch ID, and fingerprint login',\n        icon: Fingerprint,\n        status: 'active',\n        usage: 94,\n      },\n      {\n        title: 'Push Notifications',\n        description: 'Real-time trading alerts and market updates',\n        icon: Bell,\n        status: 'active',\n        usage: 87,\n      },\n      {\n        title: 'Offline Mode',\n        description: 'Access portfolio and charts without internet',\n        icon: Download,\n        status: 'active',\n        usage: 76,\n      },\n      {\n        title: 'Camera Integration',\n        description: 'Scan documents and QR codes for quick actions',\n        icon: Camera,\n        status: 'active',\n        usage: 68,\n      },\n      {\n        title: 'Location Services',\n        description: 'Find nearby ATMs and branch locations',\n        icon: MapPin,\n        status: 'active',\n        usage: 45,\n      },\n      {\n        title: 'Dark Mode',\n        description: 'Battery-saving dark theme with OLED optimization',\n        icon: Shield,\n        status: 'active',\n        usage: 89,\n      },\n    ];\n\n    setAppFeatures(features);\n  };\n\n  const deviceTypes = [\n    {\n      type: 'Mobile',\n      icon: Smartphone,\n      users: '68%',\n      performance: 96,\n      color: 'from-green-400 to-emerald-500',\n    },\n    {\n      type: 'Tablet',\n      icon: Tablet,\n      users: '22%',\n      performance: 94,\n      color: 'from-blue-400 to-cyan-500',\n    },\n    {\n      type: 'Desktop',\n      icon: Monitor,\n      users: '10%',\n      performance: 98,\n      color: 'from-purple-400 to-pink-500',\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Mobile Performance Dashboard */}\n      <Card className=\"bg-gradient-to-r from-blue-900/20 to-cyan-900/20 border-blue-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Smartphone className=\"h-7 w-7 mr-3 text-blue-400\" />\n            📱 Mobile Performance Dashboard\n            <Badge className=\"ml-3 bg-gradient-to-r from-blue-400 to-cyan-500\">\n              <Zap className=\"h-4 w-4 mr-1\" />\n              MOBILE FIRST\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"p-4 bg-green-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-green-400 font-semibold\">Load Time</span>\n                <Zap className=\"h-5 w-5 text-green-400\" />\n              </div>\n              <p className=\"text-2xl font-bold text-white\">{deviceMetrics.loadTime.toFixed(1)}s</p>\n              <p className=\"text-xs text-gray-400 mt-1\">Industry leading speed</p>\n            </div>\n\n            <div className=\"p-4 bg-blue-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-blue-400 font-semibold\">Performance</span>\n                <Star className=\"h-5 w-5 text-blue-400\" />\n              </div>\n              <p className=\"text-2xl font-bold text-white\">\n                {deviceMetrics.performanceScore.toFixed(0)}/100\n              </p>\n              <Progress value={deviceMetrics.performanceScore} className=\"h-2 mt-2\" />\n            </div>\n\n            <div className=\"p-4 bg-yellow-500/10 rounded-lg border border-yellow-400/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-yellow-400 font-semibold\">Battery Optimized</span>\n                <Battery className=\"h-5 w-5 text-yellow-400\" />\n              </div>\n              <p className=\"text-2xl font-bold text-white\">\n                {deviceMetrics.batteryOptimization.toFixed(0)}%\n              </p>\n              <Progress value={deviceMetrics.batteryOptimization} className=\"h-2 mt-2\" />\n            </div>\n\n            <div className=\"p-4 bg-purple-500/10 rounded-lg border border-purple-400/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-purple-400 font-semibold\">Network Efficiency</span>\n                <Wifi className=\"h-5 w-5 text-purple-400\" />\n              </div>\n              <p className=\"text-2xl font-bold text-white\">\n                {deviceMetrics.networkEfficiency.toFixed(0)}%\n              </p>\n              <Progress value={deviceMetrics.networkEfficiency} className=\"h-2 mt-2\" />\n            </div>\n          </div>\n\n          {/* Device Usage Breakdown */}\n          <div className=\"mt-8\">\n            <h3 className=\"text-white font-bold text-xl mb-4\">📊 Device Usage Analytics</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {deviceTypes.map((device, index) => {\n                const IconComponent = device.icon;\n                return (\n                  <div\n                    key={index}\n                    className={`p-6 bg-gradient-to-r ${device.color}/10 rounded-lg border border-gray-400/30`}\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <IconComponent\n                        className={`h-8 w-8 text-transparent bg-gradient-to-r ${device.color} bg-clip-text`}\n                      />\n                      <Badge className={`bg-gradient-to-r ${device.color} text-black`}>\n                        {device.users}\n                      </Badge>\n                    </div>\n                    <h4 className=\"text-white font-bold text-lg\">{device.type}</h4>\n                    <p className=\"text-gray-300 text-sm mb-3\">\n                      Performance Score: {device.performance}/100\n                    </p>\n                    <Progress value={device.performance} className=\"h-2\" />\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Mobile App Features */}\n      <Card className=\"bg-gradient-to-r from-purple-900/20 to-pink-900/20 border-purple-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Star className=\"h-7 w-7 mr-3 text-purple-400\" />\n            🌟 Native Mobile App Features\n            <Badge className=\"ml-3 bg-gradient-to-r from-purple-400 to-pink-500\">\n              <Download className=\"h-4 w-4 mr-1\" />\n              NATIVE APPS\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {appFeatures.map((feature, index) => {\n              const IconComponent = feature.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\"\n                >\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"p-3 bg-purple-400/20 rounded-lg mr-4\">\n                      <IconComponent className=\"h-6 w-6 text-purple-400\" />\n                    </div>\n                    <div>\n                      <h3 className=\"text-white font-bold\">{feature.title}</h3>\n                      <Badge className=\"bg-green-500 text-xs\">{feature.status.toUpperCase()}</Badge>\n                    </div>\n                  </div>\n                  <p className=\"text-gray-300 text-sm mb-3\">{feature.description}</p>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-gray-400 text-xs\">Usage Rate</span>\n                    <span className=\"text-purple-400 font-bold\">{feature.usage}%</span>\n                  </div>\n                  <Progress value={feature.usage} className=\"h-2 mt-2\" />\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* App Store Performance */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Download className=\"h-7 w-7 mr-3 text-green-400\" />\n            📈 App Store Performance\n            <Badge className=\"ml-3 bg-gradient-to-r from-green-400 to-emerald-500\">\n              <Star className=\"h-4 w-4 mr-1\" />\n              TOP RATED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"text-center p-6 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"text-4xl font-bold text-blue-400 mb-2\">\n                {(downloadStats.ios / 1000000).toFixed(1)}M\n              </div>\n              <h3 className=\"text-white font-bold mb-2\">iOS Downloads</h3>\n              <p className=\"text-gray-400 text-sm\">App Store</p>\n            </div>\n\n            <div className=\"text-center p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"text-4xl font-bold text-green-400 mb-2\">\n                {(downloadStats.android / 1000000).toFixed(1)}M\n              </div>\n              <h3 className=\"text-white font-bold mb-2\">Android Downloads</h3>\n              <p className=\"text-gray-400 text-sm\">Google Play</p>\n            </div>\n\n            <div className=\"text-center p-6 bg-gradient-to-r from-yellow-500/10 to-orange-500/10 rounded-lg border border-yellow-400/30\">\n              <div className=\"flex items-center justify-center mb-2\">\n                <span className=\"text-4xl font-bold text-yellow-400\">{downloadStats.rating}</span>\n                <Star className=\"h-8 w-8 text-yellow-400 ml-2\" />\n              </div>\n              <h3 className=\"text-white font-bold mb-2\">Average Rating</h3>\n              <p className=\"text-gray-400 text-sm\">Across all platforms</p>\n            </div>\n\n            <div className=\"text-center p-6 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n              <div className=\"text-4xl font-bold text-purple-400 mb-2\">\n                {(downloadStats.reviews / 1000).toFixed(0)}K\n              </div>\n              <h3 className=\"text-white font-bold mb-2\">User Reviews</h3>\n              <p className=\"text-gray-400 text-sm\">Total reviews</p>\n            </div>\n          </div>\n\n          {/* Download Links */}\n          <div className=\"mt-8 flex flex-col md:flex-row gap-4 justify-center\">\n            <Button className=\"bg-gradient-to-r from-blue-400 to-cyan-500 text-black font-bold py-4 px-8 text-lg\">\n              <Download className=\"h-5 w-5 mr-2\" />\n              Download for iOS\n            </Button>\n            <Button className=\"bg-gradient-to-r from-green-400 to-emerald-500 text-black font-bold py-4 px-8 text-lg\">\n              <Download className=\"h-5 w-5 mr-2\" />\n              Download for Android\n            </Button>\n          </div>\n\n          {/* PWA Features */}\n          <div className=\"mt-8 p-6 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-lg border border-cyan-400/30\">\n            <h3 className=\"text-white font-bold text-xl mb-4\">🌐 Progressive Web App (PWA)</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"flex items-center space-x-3\">\n                <Globe className=\"h-5 w-5 text-cyan-400\" />\n                <span className=\"text-gray-300\">Works offline</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Download className=\"h-5 w-5 text-cyan-400\" />\n                <span className=\"text-gray-300\">Install from browser</span>\n              </div>\n              <div className=\"flex items-center space-x-3\">\n                <Zap className=\"h-5 w-5 text-cyan-400\" />\n                <span className=\"text-gray-300\">Lightning fast</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/owner/OwnerProfile.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'user' is defined but never used.",
        "line": 38,
        "column": 40,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'activeFeatures' is assigned a value but never used.",
        "line": 39,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setActiveFeatures' is assigned a value but never used.",
        "line": 39,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 43
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Crown,\n  Infinity,\n  Zap,\n  Shield,\n  Brain,\n  Bot,\n  TrendingUp,\n  Users,\n  Settings,\n  Star,\n  Sparkles,\n  Target,\n  Award,\n  Gem,\n} from 'lucide-react';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  tier: string;\n  joinDate: string;\n}\n\ninterface OwnerProfileProps {\n  user: User;\n  onSwitchToAdmin: () => void;\n}\n\nexport default function OwnerProfile({ user, onSwitchToAdmin }: OwnerProfileProps) {\n  const [activeFeatures, setActiveFeatures] = useState({\n    ultraFastTrading: true,\n    aiAutoPilot: true,\n    unlimitedSignals: true,\n    premiumSupport: true,\n    advancedAnalytics: true,\n    customStrategies: true,\n    whiteLabel: true,\n    apiAccess: true,\n  });\n\n  const ownerFeatures = [\n    {\n      icon: Infinity,\n      title: 'Unlimited Everything',\n      description: 'No limits on trades, signals, or features',\n      status: 'active',\n      color: 'text-yellow-400',\n    },\n    {\n      icon: Zap,\n      title: 'Lightning Speed (1ms)',\n      description: 'Fastest execution speeds available',\n      status: 'active',\n      color: 'text-blue-400',\n    },\n    {\n      icon: Brain,\n      title: 'AI Autopilot',\n      description: 'Fully automated AI trading with custom models',\n      status: 'active',\n      color: 'text-purple-400',\n    },\n    {\n      icon: Bot,\n      title: 'Custom Trading Bots',\n      description: 'Build and deploy unlimited custom bots',\n      status: 'active',\n      color: 'text-green-400',\n    },\n    {\n      icon: Shield,\n      title: 'Priority Support',\n      description: '24/7 dedicated support team',\n      status: 'active',\n      color: 'text-red-400',\n    },\n    {\n      icon: Star,\n      title: 'White Label Access',\n      description: 'Brand the platform as your own',\n      status: 'active',\n      color: 'text-orange-400',\n    },\n    {\n      icon: Target,\n      title: 'Advanced Analytics',\n      description: 'Deep insights and custom reporting',\n      status: 'active',\n      color: 'text-cyan-400',\n    },\n    {\n      icon: Gem,\n      title: 'API Access',\n      description: 'Full API access for integrations',\n      status: 'active',\n      color: 'text-pink-400',\n    },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Owner Header */}\n      <Card className=\"bg-gradient-to-r from-yellow-900/90 via-orange-900/90 to-red-900/90 border-yellow-500/50 backdrop-blur-xl relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-500/10 via-orange-500/10 to-red-500/5\"></div>\n        <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-yellow-400 via-orange-400 to-red-400\"></div>\n        <CardHeader className=\"relative\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center animate-pulse\">\n                  <Crown size={32} className=\"text-white\" />\n                </div>\n                <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center\">\n                  <Infinity size={12} className=\"text-white\" />\n                </div>\n              </div>\n              <div>\n                <div className=\"flex items-center space-x-2\">\n                  <h2 className=\"text-3xl font-bold bg-gradient-to-r from-yellow-400 to-orange-400 bg-clip-text text-transparent\">\n                    OWNER ACCESS\n                  </h2>\n                  <Badge className=\"bg-gradient-to-r from-yellow-500 to-orange-600 animate-bounce\">\n                    <Sparkles size={12} className=\"mr-1\" />\n                    UNLIMITED\n                  </Badge>\n                </div>\n                <p className=\"text-gray-300\">Supreme Alpha Wolf • Platform Owner</p>\n                <p className=\"text-sm text-yellow-400 font-semibold\">\n                  Free Forever • All Features Unlocked\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button\n                onClick={onSwitchToAdmin}\n                className=\"bg-gradient-to-r from-red-500 to-orange-600 hover:from-red-600 hover:to-orange-700\"\n              >\n                <Shield className=\"mr-2 h-4 w-4\" />\n                Admin Panel\n              </Button>\n              <div className=\"text-right\">\n                <p className=\"text-2xl font-bold text-yellow-400\">∞</p>\n                <p className=\"text-xs text-gray-400\">Unlimited Balance</p>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Owner Stats */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <Card className=\"bg-gradient-to-br from-yellow-900/20 to-orange-900/20 border-yellow-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <Infinity size={24} className=\"text-yellow-400 mx-auto mb-2 animate-pulse\" />\n            <p className=\"text-lg font-bold text-yellow-400\">∞</p>\n            <p className=\"text-xs text-gray-400\">Daily Trades</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-blue-900/20 to-purple-900/20 border-blue-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <Zap size={24} className=\"text-blue-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-blue-400\">1ms</p>\n            <p className=\"text-xs text-gray-400\">Execution Speed</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-green-900/20 to-emerald-900/20 border-green-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <Brain size={24} className=\"text-green-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-green-400\">∞</p>\n            <p className=\"text-xs text-gray-400\">AI Signals</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-purple-900/20 to-pink-900/20 border-purple-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <Award size={24} className=\"text-purple-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-purple-400\">100%</p>\n            <p className=\"text-xs text-gray-400\">All Features</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Owner Features */}\n      <Tabs defaultValue=\"features\" className=\"space-y-6\">\n        <TabsList className=\"bg-black/20 border-yellow-500/30 backdrop-blur-xl\">\n          <TabsTrigger value=\"features\" className=\"data-[state=active]:bg-yellow-500/20\">\n            <Star className=\"h-4 w-4 mr-2\" />\n            Premium Features\n          </TabsTrigger>\n          <TabsTrigger value=\"analytics\" className=\"data-[state=active]:bg-yellow-500/20\">\n            <TrendingUp className=\"h-4 w-4 mr-2\" />\n            Advanced Analytics\n          </TabsTrigger>\n          <TabsTrigger value=\"management\" className=\"data-[state=active]:bg-yellow-500/20\">\n            <Settings className=\"h-4 w-4 mr-2\" />\n            Platform Management\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"features\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {ownerFeatures.map((feature, index) => {\n              const IconComponent = feature.icon;\n              return (\n                <Card\n                  key={index}\n                  className=\"bg-gradient-to-br from-gray-900/60 to-black/60 border-yellow-500/30 backdrop-blur-xl hover:border-yellow-400/50 transition-all\"\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"p-3 bg-gradient-to-r from-yellow-500/20 to-orange-500/20 rounded-lg\">\n                          <IconComponent size={24} className={feature.color} />\n                        </div>\n                        <div>\n                          <h3 className=\"text-white font-semibold\">{feature.title}</h3>\n                          <p className=\"text-sm text-gray-400\">{feature.description}</p>\n                        </div>\n                      </div>\n                      <Badge className=\"bg-gradient-to-r from-green-500 to-emerald-600\">\n                        <Sparkles size={12} className=\"mr-1\" />\n                        ACTIVE\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"analytics\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card className=\"bg-gradient-to-br from-gray-900/60 to-black/60 border-yellow-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <TrendingUp className=\"mr-2 text-yellow-400\" />\n                  Owner Performance Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center p-3 bg-green-500/10 rounded-lg border border-green-500/30\">\n                    <span className=\"text-gray-300\">Total Profit</span>\n                    <span className=\"text-green-400 font-bold text-xl\">+$2,847,392</span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-blue-500/10 rounded-lg border border-blue-500/30\">\n                    <span className=\"text-gray-300\">Win Rate</span>\n                    <span className=\"text-blue-400 font-bold text-xl\">94.7%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-purple-500/10 rounded-lg border border-purple-500/30\">\n                    <span className=\"text-gray-300\">Profit Factor</span>\n                    <span className=\"text-purple-400 font-bold text-xl\">8.42</span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-yellow-500/10 rounded-lg border border-yellow-500/30\">\n                    <span className=\"text-gray-300\">Max Drawdown</span>\n                    <span className=\"text-yellow-400 font-bold text-xl\">-2.1%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-gray-900/60 to-black/60 border-yellow-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Users className=\"mr-2 text-yellow-400\" />\n                  Platform Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center p-3 bg-blue-500/10 rounded-lg border border-blue-500/30\">\n                    <span className=\"text-gray-300\">Total Users</span>\n                    <span className=\"text-blue-400 font-bold text-xl\">15,847</span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-green-500/10 rounded-lg border border-green-500/30\">\n                    <span className=\"text-gray-300\">Monthly Revenue</span>\n                    <span className=\"text-green-400 font-bold text-xl\">$1.2M</span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-purple-500/10 rounded-lg border border-purple-500/30\">\n                    <span className=\"text-gray-300\">Active Subscriptions</span>\n                    <span className=\"text-purple-400 font-bold text-xl\">12,341</span>\n                  </div>\n                  <div className=\"flex justify-between items-center p-3 bg-orange-500/10 rounded-lg border border-orange-500/30\">\n                    <span className=\"text-gray-300\">Platform Uptime</span>\n                    <span className=\"text-orange-400 font-bold text-xl\">99.97%</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"management\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <Card className=\"bg-gradient-to-br from-gray-900/60 to-black/60 border-yellow-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white text-center\">\n                  <Shield className=\"mx-auto mb-2 text-red-400\" size={32} />\n                  Admin Controls\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <Button\n                  onClick={onSwitchToAdmin}\n                  className=\"w-full bg-gradient-to-r from-red-500 to-orange-600 hover:from-red-600 hover:to-orange-700\"\n                >\n                  Access Admin Panel\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-gray-900/60 to-black/60 border-yellow-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white text-center\">\n                  <Settings className=\"mx-auto mb-2 text-blue-400\" size={32} />\n                  Platform Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <Button className=\"w-full bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700\">\n                  Configure Platform\n                </Button>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-br from-gray-900/60 to-black/60 border-yellow-500/30 backdrop-blur-xl\">\n              <CardHeader>\n                <CardTitle className=\"text-white text-center\">\n                  <TrendingUp className=\"mx-auto mb-2 text-green-400\" size={32} />\n                  Revenue Analytics\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center\">\n                <Button className=\"w-full bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700\">\n                  View Reports\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/performance/PerformanceOptimizer.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'TrendingUp' is defined but never used.",
        "line": 9,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'TrendingDown' is defined but never used.",
        "line": 10,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 15
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Target' is defined but never used.",
        "line": 12,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'BarChart3' is defined but never used.",
        "line": 13,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 12
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Settings' is defined but never used.",
        "line": 15,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 11
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'calculatePerformanceScore'. Either include it or remove the dependency array.",
        "line": 57,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 57,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [calculatePerformanceScore]",
            "fix": { "range": [1293, 1295], "text": "[calculatePerformanceScore]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  TrendingUp,\n  TrendingDown,\n  Zap,\n  Target,\n  BarChart3,\n  Activity,\n  Settings,\n  Rocket,\n  Cpu,\n  HardDrive,\n  Database,\n  Wifi,\n} from 'lucide-react';\n\ninterface Optimization {\n  category: string;\n  title: string;\n  description: string;\n  impact: string;\n  status: string;\n  priority: string;\n  icon: React.ComponentType<{ className?: string }>;\n}\n\nexport default function PerformanceOptimizer() {\n  const [systemMetrics, setSystemMetrics] = useState({\n    cpuUsage: 0,\n    memoryUsage: 0,\n    diskUsage: 0,\n    networkLatency: 0,\n    cacheHitRate: 0,\n    apiResponseTime: 0,\n    activeConnections: 0,\n    dataProcessingRate: 0,\n  });\n\n  const [optimizations, setOptimizations] = useState<Optimization[]>([]);\n  const [performanceScore, setPerformanceScore] = useState(0);\n\n  useEffect(() => {\n    // Simulate real-time performance monitoring\n    const interval = setInterval(() => {\n      updateSystemMetrics();\n      runOptimizations();\n      calculatePerformanceScore();\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateSystemMetrics = () => {\n    setSystemMetrics({\n      cpuUsage: Math.max(5, Math.min(95, 15 + Math.random() * 20)),\n      memoryUsage: Math.max(10, Math.min(90, 25 + Math.random() * 15)),\n      diskUsage: Math.max(5, Math.min(85, 35 + Math.random() * 10)),\n      networkLatency: Math.max(1, Math.min(50, 5 + Math.random() * 10)),\n      cacheHitRate: Math.max(85, Math.min(99, 92 + Math.random() * 5)),\n      apiResponseTime: Math.max(10, Math.min(200, 25 + Math.random() * 30)),\n      activeConnections: Math.floor(50000 + Math.random() * 100000),\n      dataProcessingRate: Math.floor(8000000 + Math.random() * 2000000),\n    });\n  };\n\n  const runOptimizations = () => {\n    const optimizationTypes = [\n      {\n        category: 'Memory',\n        title: 'Memory Optimization',\n        description: 'Garbage collection and memory defragmentation',\n        impact: '15% performance boost',\n        status: 'active',\n        priority: 'high',\n        icon: ({ className }: { className?: string }) => <div className={className}>🧠</div>,\n      },\n      {\n        category: 'Cache',\n        title: 'Cache Warming',\n        description: 'Preloading frequently accessed data',\n        impact: '25% faster response times',\n        status: 'active',\n        priority: 'high',\n        icon: ({ className }: { className?: string }) => <div className={className}>⚡</div>,\n      },\n      {\n        category: 'Database',\n        title: 'Connection Pooling',\n        description: 'Optimizing database connections',\n        impact: '30% reduced latency',\n        status: 'active',\n        priority: 'medium',\n        icon: ({ className }: { className?: string }) => <div className={className}>🗄️</div>,\n      },\n      {\n        category: 'CDN',\n        title: 'CDN Acceleration',\n        description: 'Global content delivery optimization',\n        impact: '40% faster load times',\n        status: 'active',\n        priority: 'medium',\n        icon: ({ className }: { className?: string }) => <div className={className}>🌐</div>,\n      },\n      {\n        category: 'AI',\n        title: 'AI Model Caching',\n        description: 'Caching neural network predictions',\n        impact: '60% faster AI responses',\n        status: 'active',\n        priority: 'low',\n        icon: ({ className }: { className?: string }) => <div className={className}>🤖</div>,\n      },\n    ];\n\n    setOptimizations(optimizationTypes);\n  };\n\n  const calculatePerformanceScore = () => {\n    const score =\n      (systemMetrics.cacheHitRate +\n        (100 - systemMetrics.cpuUsage) +\n        (100 - systemMetrics.memoryUsage) +\n        (100 - systemMetrics.networkLatency * 2)) /\n      4;\n    setPerformanceScore(Math.max(85, Math.min(99, score)));\n  };\n\n  const getStatusColor = (value: number, isReverse = false) => {\n    if (isReverse) {\n      return value > 90 ? 'text-green-400' : value > 70 ? 'text-yellow-400' : 'text-red-400';\n    }\n    return value < 30 ? 'text-green-400' : value < 70 ? 'text-yellow-400' : 'text-red-400';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Performance Dashboard */}\n      <Card className=\"bg-gradient-to-r from-cyan-900/20 to-blue-900/20 border-cyan-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Zap className=\"h-6 w-6 mr-2 text-cyan-400\" />\n            System Performance Monitor\n            <Badge className=\"ml-3 bg-gradient-to-r from-cyan-400 to-blue-500 animate-pulse\">\n              <Rocket className=\"h-3 w-3 mr-1\" />\n              OPTIMIZED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {/* Performance Score */}\n            <div className=\"col-span-full text-center p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <div className=\"relative\">\n                  <div className=\"w-24 h-24 rounded-full border-4 border-green-400/30 flex items-center justify-center\">\n                    <span className=\"text-3xl font-bold text-green-400\">\n                      {performanceScore.toFixed(0)}\n                    </span>\n                  </div>\n                  <div className=\"absolute inset-0 rounded-full border-4 border-green-400 animate-pulse\"></div>\n                </div>\n              </div>\n              <h3 className=\"text-xl font-bold text-white mb-2\">Performance Score</h3>\n              <p className=\"text-green-400 font-semibold\">\n                EXCELLENT - System Running at Peak Performance\n              </p>\n            </div>\n\n            {/* CPU Usage */}\n            <div className=\"p-4 bg-purple-500/10 rounded-lg border border-purple-400/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-purple-400 font-semibold\">CPU Usage</span>\n                <Cpu className=\"h-5 w-5 text-purple-400\" />\n              </div>\n              <p className={`text-2xl font-bold ${getStatusColor(systemMetrics.cpuUsage)}`}>\n                {systemMetrics.cpuUsage.toFixed(1)}%\n              </p>\n              <Progress value={systemMetrics.cpuUsage} className=\"h-2 mt-2\" />\n              <p className=\"text-xs text-gray-400 mt-1\">16 Cores Active</p>\n            </div>\n\n            {/* Memory Usage */}\n            <div className=\"p-4 bg-blue-500/10 rounded-lg border border-blue-400/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-blue-400 font-semibold\">Memory</span>\n                <Activity className=\"h-5 w-5 text-blue-400\" />\n              </div>\n              <p className={`text-2xl font-bold ${getStatusColor(systemMetrics.memoryUsage)}`}>\n                {systemMetrics.memoryUsage.toFixed(1)}%\n              </p>\n              <Progress value={systemMetrics.memoryUsage} className=\"h-2 mt-2\" />\n              <p className=\"text-xs text-gray-400 mt-1\">128GB Available</p>\n            </div>\n\n            {/* Network Latency */}\n            <div className=\"p-4 bg-green-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-green-400 font-semibold\">Latency</span>\n                <Wifi className=\"h-5 w-5 text-green-400\" />\n              </div>\n              <p className={`text-2xl font-bold ${getStatusColor(systemMetrics.networkLatency)}`}>\n                {systemMetrics.networkLatency.toFixed(0)}ms\n              </p>\n              <p className=\"text-xs text-gray-400 mt-1\">Global CDN Active</p>\n            </div>\n\n            {/* Cache Hit Rate */}\n            <div className=\"p-4 bg-yellow-500/10 rounded-lg border border-yellow-400/30\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className=\"text-yellow-400 font-semibold\">Cache Hit Rate</span>\n                <Database className=\"h-5 w-5 text-yellow-400\" />\n              </div>\n              <p\n                className={`text-2xl font-bold ${getStatusColor(systemMetrics.cacheHitRate, true)}`}\n              >\n                {systemMetrics.cacheHitRate.toFixed(1)}%\n              </p>\n              <Progress value={systemMetrics.cacheHitRate} className=\"h-2 mt-2\" />\n              <p className=\"text-xs text-gray-400 mt-1\">Redis Cluster</p>\n            </div>\n          </div>\n\n          {/* Real-time Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mt-6\">\n            <div className=\"p-4 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-lg border border-cyan-400/30\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-cyan-400 font-semibold\">Active Connections</p>\n                  <p className=\"text-2xl font-bold text-white\">\n                    {systemMetrics.activeConnections.toLocaleString()}\n                  </p>\n                </div>\n                <Activity className=\"h-8 w-8 text-cyan-400\" />\n              </div>\n            </div>\n\n            <div className=\"p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-purple-400 font-semibold\">API Response Time</p>\n                  <p className=\"text-2xl font-bold text-white\">\n                    {systemMetrics.apiResponseTime.toFixed(0)}ms\n                  </p>\n                </div>\n                <Zap className=\"h-8 w-8 text-purple-400\" />\n              </div>\n            </div>\n\n            <div className=\"p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-green-400 font-semibold\">Data Processing</p>\n                  <p className=\"text-2xl font-bold text-white\">\n                    {(systemMetrics.dataProcessingRate / 1000000).toFixed(1)}M/s\n                  </p>\n                </div>\n                <HardDrive className=\"h-8 w-8 text-green-400\" />\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Active Optimizations */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Rocket className=\"h-6 w-6 mr-2 text-green-400\" />\n            Active Performance Optimizations\n            <Badge className=\"ml-3 bg-gradient-to-r from-green-400 to-emerald-500\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              AUTO-OPTIMIZING\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {optimizations.map((optimization, index) => {\n              const IconComponent = optimization.icon;\n              return (\n                <div\n                  key={index}\n                  className=\"p-4 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"p-2 bg-green-400/20 rounded-lg\">\n                        <IconComponent className=\"h-6 w-6 text-green-400\" />\n                      </div>\n                      <div>\n                        <h4 className=\"text-white font-bold\">{optimization.title}</h4>\n                        <p className=\"text-gray-300 text-sm\">{optimization.description}</p>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge className=\"bg-green-500 mb-2\">\n                        {optimization.status.toUpperCase()}\n                      </Badge>\n                      <p className=\"text-green-400 font-semibold text-sm\">{optimization.impact}</p>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n\n          <div className=\"mt-6 p-4 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-lg border border-blue-400/30\">\n            <h4 className=\"text-white font-bold mb-2\">🚀 Performance Boost Summary</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n              <div>\n                <p className=\"text-cyan-400 font-bold text-2xl\">185%</p>\n                <p className=\"text-gray-400 text-sm\">Faster Processing</p>\n              </div>\n              <div>\n                <p className=\"text-green-400 font-bold text-2xl\">97%</p>\n                <p className=\"text-gray-400 text-sm\">Uptime Guarantee</p>\n              </div>\n              <div>\n                <p className=\"text-purple-400 font-bold text-2xl\">50ms</p>\n                <p className=\"text-gray-400 text-sm\">Average Response</p>\n              </div>\n              <div>\n                <p className=\"text-yellow-400 font-bold text-2xl\">99.8%</p>\n                <p className=\"text-gray-400 text-sm\">Cache Efficiency</p>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/predictive/EarningsPredictor.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Button' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2206, 2209], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2206, 2209], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n// Types\ninterface EarningData {\n  symbol: string;\n  name: string;\n  date: string;\n  time: string;\n  currentPrice: number;\n  estimatedEPS: string;\n  estimatedRevenue: string;\n  aiPrediction: 'beat' | 'miss';\n  confidenceScore: number;\n  priceTarget: number;\n  volatilityExpected: number;\n  optionsActivity: 'high' | 'medium' | 'low';\n  analystRating: 'buy' | 'hold' | 'sell';\n}\n\ninterface EarningsAnalysisData {\n  symbol: string;\n  metric: string;\n  impact: 'Critical' | 'High' | 'Medium';\n  prediction: string;\n  confidence: number;\n  historicalAccuracy: number;\n}\n\ninterface SurprisePrediction {\n  symbol: string;\n  type: string;\n  probability: number;\n  expectedMove: string;\n  reasoning: string;\n  riskLevel: 'High' | 'Medium' | 'Low';\n}\n\nexport default function EarningsPredictor() {\n  const [upcomingEarnings, setUpcomingEarnings] = useState<EarningData[]>([]);\n  const [earningsAnalysis, setEarningsAnalysis] = useState<EarningsAnalysisData[]>([]);\n  const [surprisePredictions, setSurprisePredictions] = useState<SurprisePrediction[]>([]);\n\n  useEffect(() => {\n    generateUpcomingEarnings();\n    generateEarningsAnalysis();\n    generateSurprisePredictions();\n  }, []);\n\n  const generateUpcomingEarnings = () => {\n    const companies = [\n      { symbol: 'AAPL', name: 'Apple Inc.', date: '2024-01-25', time: 'AMC' },\n      { symbol: 'MSFT', name: 'Microsoft Corp.', date: '2024-01-24', time: 'AMC' },\n      { symbol: 'GOOGL', name: 'Alphabet Inc.', date: '2024-01-23', time: 'AMC' },\n      { symbol: 'TSLA', name: 'Tesla Inc.', date: '2024-01-24', time: 'AMC' },\n      { symbol: 'NVDA', name: 'NVIDIA Corp.', date: '2024-02-21', time: 'AMC' },\n      { symbol: 'META', name: 'Meta Platforms', date: '2024-01-31', time: 'AMC' },\n      { symbol: 'AMZN', name: 'Amazon.com Inc.', date: '2024-02-01', time: 'AMC' },\n      { symbol: 'NFLX', name: 'Netflix Inc.', date: '2024-01-23', time: 'AMC' },\n    ];\n\n    const earnings: EarningData[] = companies.map((company: any) => ({\n      ...company,\n      currentPrice: 100 + Math.random() * 400,\n      estimatedEPS: (Math.random() * 5 + 0.5).toFixed(2),\n      estimatedRevenue: (Math.random() * 50 + 10).toFixed(1),\n      aiPrediction: Math.random() > 0.5 ? 'beat' : 'miss',\n      confidenceScore: 70 + Math.random() * 30,\n      priceTarget: 0,\n      volatilityExpected: 5 + Math.random() * 15,\n      optionsActivity: Math.random() > 0.7 ? 'high' : Math.random() > 0.4 ? 'medium' : 'low',\n      analystRating: Math.random() > 0.6 ? 'buy' : Math.random() > 0.3 ? 'hold' : 'sell',\n    }));\n\n    earnings.forEach(earning => {\n      const multiplier =\n        earning.aiPrediction === 'beat' ? 1.05 + Math.random() * 0.1 : 0.95 - Math.random() * 0.1;\n      earning.priceTarget = earning.currentPrice * multiplier;\n    });\n\n    setUpcomingEarnings(earnings);\n  };\n\n  const generateEarningsAnalysis = () => {\n    const analysis: EarningsAnalysisData[] = [\n      {\n        symbol: 'AAPL',\n        metric: 'iPhone Sales',\n        impact: 'High',\n        prediction: 'Strong holiday sales expected',\n        confidence: 85,\n        historicalAccuracy: 78,\n      },\n      {\n        symbol: 'MSFT',\n        metric: 'Azure Growth',\n        impact: 'High',\n        prediction: 'Cloud revenue acceleration',\n        confidence: 92,\n        historicalAccuracy: 84,\n      },\n      {\n        symbol: 'TSLA',\n        metric: 'Delivery Numbers',\n        impact: 'Critical',\n        prediction: 'Q4 deliveries may disappoint',\n        confidence: 76,\n        historicalAccuracy: 71,\n      },\n      {\n        symbol: 'NVDA',\n        metric: 'AI Chip Demand',\n        impact: 'Critical',\n        prediction: 'Continued AI boom driving sales',\n        confidence: 94,\n        historicalAccuracy: 89,\n      },\n    ];\n\n    setEarningsAnalysis(analysis);\n  };\n\n  const generateSurprisePredictions = () => {\n    const surprises: SurprisePrediction[] = [\n      {\n        symbol: 'COIN',\n        type: 'Positive Surprise',\n        probability: 78,\n        expectedMove: '+12%',\n        reasoning: 'Crypto trading volume surge',\n        riskLevel: 'Medium',\n      },\n      {\n        symbol: 'SNAP',\n        type: 'Negative Surprise',\n        probability: 65,\n        expectedMove: '-8%',\n        reasoning: 'Ad revenue headwinds',\n        riskLevel: 'High',\n      },\n      {\n        symbol: 'ROKU',\n        type: 'Positive Surprise',\n        probability: 72,\n        expectedMove: '+15%',\n        reasoning: 'Streaming growth acceleration',\n        riskLevel: 'Medium',\n      },\n    ];\n\n    setSurprisePredictions(surprises);\n  };\n\n  const getPredictionColor = (prediction: string) => {\n    return prediction === 'beat' ? 'text-emerald-400' : 'text-red-400';\n  };\n\n  const getImpactColor = (impact: string) => {\n    switch (impact) {\n      case 'Critical':\n        return 'text-red-400';\n      case 'High':\n        return 'text-amber-400';\n      default:\n        return 'text-emerald-400';\n    }\n  };\n\n  const getRatingColor = (rating: string) => {\n    switch (rating) {\n      case 'buy':\n        return 'text-emerald-400';\n      case 'sell':\n        return 'text-red-400';\n      default:\n        return 'text-amber-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Upcoming Earnings */}\n      <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-stone-100 flex items-center\">\n            <span className=\"h-6 w-6 mr-2 text-emerald-400\">📅</span>\n            Upcoming Earnings with AI Predictions\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {upcomingEarnings.map((earning, index) => (\n              <div\n                key={index}\n                className=\"p-4 bg-stone-800/30 rounded-lg border border-stone-600/30 hover:border-stone-500/50 transition-all\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-stone-100 font-bold\">{earning.symbol}</span>\n                        <Badge className=\"border-emerald-500/30 text-emerald-400 bg-emerald-500/10\">\n                          {earning.date}\n                        </Badge>\n                        <Badge className={getPredictionColor(earning.aiPrediction)}>\n                          AI: {earning.aiPrediction}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-stone-400\">{earning.name}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-stone-400 text-sm\">Current Price</p>\n                      <p className=\"text-stone-100 font-semibold\">\n                        ${earning.currentPrice.toFixed(2)}\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-stone-400 text-sm\">Est. EPS</p>\n                      <p className=\"text-stone-100 font-semibold\">${earning.estimatedEPS}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-stone-400 text-sm\">AI Target</p>\n                      <p\n                        className={`font-semibold ${earning.priceTarget > earning.currentPrice ? 'text-emerald-400' : 'text-red-400'}`}\n                      >\n                        ${earning.priceTarget.toFixed(2)}\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-stone-400 text-sm\">Confidence</p>\n                      <div className=\"flex items-center\">\n                        <span className=\"text-emerald-400 font-bold\">\n                          {earning.confidenceScore.toFixed(0)}%\n                        </span>\n                        <span className=\"text-amber-400 ml-1\">⭐</span>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <Badge className={getRatingColor(earning.analystRating)}>\n                      {earning.analystRating}\n                    </Badge>\n                    <p className=\"text-xs text-stone-400 mt-1\">\n                      Vol: {earning.volatilityExpected.toFixed(1)}%\n                    </p>\n                    <p className=\"text-xs text-stone-400\">Options: {earning.optionsActivity}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Key Metrics Analysis */}\n        <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-stone-100 flex items-center\">\n              <span className=\"h-6 w-6 mr-2 text-purple-400\">🧠</span>\n              AI Key Metrics Analysis\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {earningsAnalysis.map((analysis, index) => (\n              <div\n                key={index}\n                className=\"p-4 bg-gradient-to-r from-purple-500/10 to-indigo-500/10 rounded-lg border border-purple-500/30\"\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-stone-100 font-bold\">{analysis.symbol}</span>\n                    <Badge className={getImpactColor(analysis.impact)}>\n                      {analysis.impact} Impact\n                    </Badge>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-emerald-400 font-semibold\">{analysis.confidence}%</p>\n                    <p className=\"text-xs text-stone-400\">Confidence</p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-stone-400 text-sm\">Focus Metric:</span>\n                    <span className=\"text-stone-200 font-medium\">{analysis.metric}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-stone-400 text-sm\">Historical Accuracy:</span>\n                    <span className=\"text-amber-400 font-medium\">\n                      {analysis.historicalAccuracy}%\n                    </span>\n                  </div>\n                  <p className=\"text-stone-300 text-sm mt-2\">{analysis.prediction}</p>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n\n        {/* Surprise Predictions */}\n        <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-stone-100 flex items-center\">\n              <span className=\"h-6 w-6 mr-2 text-amber-400\">⚠️</span>\n              Earnings Surprise Predictions\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {surprisePredictions.map((surprise, index) => (\n              <div\n                key={index}\n                className=\"p-4 bg-gradient-to-r from-amber-500/10 to-orange-500/10 rounded-lg border border-amber-500/30\"\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-stone-100 font-bold\">{surprise.symbol}</span>\n                    <Badge\n                      className={\n                        surprise.type.includes('Positive')\n                          ? 'bg-emerald-500/20 text-emerald-400'\n                          : 'bg-red-500/20 text-red-400'\n                      }\n                    >\n                      {surprise.type}\n                    </Badge>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-amber-400 font-semibold\">{surprise.probability}%</p>\n                    <p className=\"text-xs text-stone-400\">Probability</p>\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-stone-400 text-sm\">Expected Move:</span>\n                    <span\n                      className={`font-semibold ${\n                        surprise.expectedMove.includes('+') ? 'text-emerald-400' : 'text-red-400'\n                      }`}\n                    >\n                      {surprise.expectedMove}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-stone-400 text-sm\">Risk Level:</span>\n                    <Badge\n                      className={\n                        surprise.riskLevel === 'High'\n                          ? 'bg-red-500/20 text-red-400'\n                          : 'bg-gray-500/20 text-gray-400'\n                      }\n                    >\n                      {surprise.riskLevel}\n                    </Badge>\n                  </div>\n                  <p className=\"text-stone-300 text-sm mt-2\">{surprise.reasoning}</p>\n                </div>\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/predictive/SectorRotationAI.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 187,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 187,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5481, 5484], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5481, 5484], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { BarChart3, TrendingUp, TrendingDown, Brain, Zap } from 'lucide-react';\n\ninterface SectorData {\n  name: string;\n  symbol: string;\n  weight: number;\n  performance1D: number;\n  performance1W: number;\n  performance1M: number;\n  momentum: number;\n  relativeStrength: number;\n  flowRating: 'inflow' | 'outflow' | 'neutral';\n  aiScore: number;\n  volatility: number;\n  recommendation: 'overweight' | 'underweight' | 'neutral';\n}\n\ninterface RotationSignal {\n  from: string;\n  to: string;\n  strength: number;\n  timeframe: string;\n  catalyst: string;\n  confidence: number;\n  historicalSuccess: number;\n}\n\ninterface EconomicIndicator {\n  name: string;\n  status: string;\n  impact: string;\n}\n\ninterface EconomicCycle {\n  currentPhase: string;\n  nextPhase: string;\n  transitionProbability: number;\n  timeToTransition: string;\n  keyIndicators?: EconomicIndicator[];\n  recommendedSectors?: string[];\n  avoidSectors?: string[];\n}\n\nexport default function SectorRotationAI() {\n  const [sectorData, setSectorData] = useState<SectorData[]>([]);\n  const [rotationSignals, setRotationSignals] = useState<RotationSignal[]>([]);\n  const [economicCycle, setEconomicCycle] = useState<EconomicCycle>({\n    currentPhase: '',\n    nextPhase: '',\n    transitionProbability: 0,\n    timeToTransition: '',\n  });\n\n  useEffect(() => {\n    generateSectorData();\n    generateRotationSignals();\n    generateEconomicCycle();\n\n    const interval = setInterval(() => {\n      generateSectorData();\n      generateRotationSignals();\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const generateSectorData = () => {\n    const sectors = [\n      { name: 'Technology', symbol: 'XLK', weight: 28.5 },\n      { name: 'Healthcare', symbol: 'XLV', weight: 13.2 },\n      { name: 'Financials', symbol: 'XLF', weight: 11.8 },\n      { name: 'Consumer Discretionary', symbol: 'XLY', weight: 10.9 },\n      { name: 'Communication', symbol: 'XLC', weight: 8.7 },\n      { name: 'Industrials', symbol: 'XLI', weight: 8.4 },\n      { name: 'Consumer Staples', symbol: 'XLP', weight: 6.1 },\n      { name: 'Energy', symbol: 'XLE', weight: 4.2 },\n      { name: 'Utilities', symbol: 'XLU', weight: 2.8 },\n      { name: 'Real Estate', symbol: 'XLRE', weight: 2.5 },\n      { name: 'Materials', symbol: 'XLB', weight: 2.9 },\n    ];\n\n    const data = sectors.map(sector => ({\n      ...sector,\n      performance1D: (Math.random() - 0.5) * 4,\n      performance1W: (Math.random() - 0.5) * 8,\n      performance1M: (Math.random() - 0.5) * 15,\n      momentum: 40 + Math.random() * 60,\n      relativeStrength: 30 + Math.random() * 70,\n      flowRating: Math.random() > 0.6 ? 'inflow' : Math.random() > 0.3 ? 'outflow' : 'neutral',\n      aiScore: 50 + Math.random() * 50,\n      volatility: 10 + Math.random() * 20,\n      recommendation:\n        Math.random() > 0.6 ? 'overweight' : Math.random() > 0.3 ? 'underweight' : 'neutral',\n    })) as SectorData[];\n\n    setSectorData(data.sort((a: SectorData, b: SectorData) => b.aiScore - a.aiScore));\n  };\n\n  const generateRotationSignals = () => {\n    const signals = [\n      {\n        from: 'Technology',\n        to: 'Energy',\n        strength: 85,\n        timeframe: '2-4 weeks',\n        catalyst: 'Rising oil prices & rate cuts',\n        confidence: 78,\n        historicalSuccess: 72,\n      },\n      {\n        from: 'Growth',\n        to: 'Value',\n        strength: 72,\n        timeframe: '1-3 months',\n        catalyst: 'Economic cycle transition',\n        confidence: 84,\n        historicalSuccess: 68,\n      },\n      {\n        from: 'Consumer Discretionary',\n        to: 'Healthcare',\n        strength: 68,\n        timeframe: '3-6 weeks',\n        catalyst: 'Defensive positioning',\n        confidence: 71,\n        historicalSuccess: 75,\n      },\n      {\n        from: 'Small Cap',\n        to: 'Large Cap',\n        strength: 91,\n        timeframe: '1-2 weeks',\n        catalyst: 'Risk-off sentiment',\n        confidence: 89,\n        historicalSuccess: 81,\n      },\n    ];\n\n    setRotationSignals(signals);\n  };\n\n  const generateEconomicCycle = () => {\n    setEconomicCycle({\n      currentPhase: 'Late Cycle',\n      nextPhase: 'Recession',\n      transitionProbability: 65,\n      timeToTransition: '3-6 months',\n      keyIndicators: [\n        { name: 'Yield Curve', status: 'Inverted', impact: 'Negative' },\n        { name: 'Employment', status: 'Strong', impact: 'Positive' },\n        { name: 'Inflation', status: 'Moderating', impact: 'Positive' },\n        { name: 'Fed Policy', status: 'Restrictive', impact: 'Negative' },\n      ],\n      recommendedSectors: ['Healthcare', 'Utilities', 'Consumer Staples'],\n      avoidSectors: ['Technology', 'Consumer Discretionary', 'Real Estate'],\n    });\n  };\n\n  const getFlowColor = (flow: 'inflow' | 'outflow' | 'neutral') => {\n    switch (flow) {\n      case 'inflow':\n        return 'text-emerald-400';\n      case 'outflow':\n        return 'text-red-400';\n      default:\n        return 'text-amber-400';\n    }\n  };\n\n  const getRecommendationColor = (rec: string) => {\n    switch (rec) {\n      case 'overweight':\n        return 'text-emerald-400';\n      case 'underweight':\n        return 'text-red-400';\n      default:\n        return 'text-amber-400';\n    }\n  };\n\n  const getPerformanceColor = (perf: any) => {\n    return perf >= 0 ? 'text-emerald-400' : 'text-red-400';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Economic Cycle Overview */}\n      <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-stone-100 flex items-center\">\n            <Brain className=\"h-6 w-6 mr-2 text-purple-400\" />\n            Economic Cycle Analysis\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-gradient-to-r from-purple-500/10 to-indigo-500/10 rounded-lg border border-purple-500/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-stone-200 font-semibold\">Current Phase</span>\n                  <Badge className=\"bg-purple-500\">{economicCycle.currentPhase}</Badge>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-stone-400 text-sm\">Next Phase:</span>\n                    <span className=\"text-stone-200\">{economicCycle.nextPhase}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-stone-400 text-sm\">Transition Probability:</span>\n                    <span className=\"text-amber-400 font-semibold\">\n                      {economicCycle.transitionProbability}%\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-stone-400 text-sm\">Time to Transition:</span>\n                    <span className=\"text-stone-200\">{economicCycle.timeToTransition}</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <h4 className=\"text-stone-200 font-semibold\">Key Economic Indicators</h4>\n                {economicCycle.keyIndicators?.map((indicator: EconomicIndicator, index: number) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-3 bg-stone-800/30 rounded-lg\"\n                  >\n                    <span className=\"text-stone-300\">{indicator.name}</span>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge variant=\"outline\" className=\"border-stone-600/30 text-stone-300\">\n                        {indicator.status}\n                      </Badge>\n                      <Badge\n                        className={\n                          indicator.impact === 'Positive' ? 'bg-emerald-500' : 'bg-red-500'\n                        }\n                      >\n                        {indicator.impact}\n                      </Badge>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"text-stone-200 font-semibold mb-3\">AI Recommended Sectors</h4>\n                <div className=\"space-y-2\">\n                  {economicCycle.recommendedSectors?.map((sector: string, index: number) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-2 bg-emerald-500/10 rounded border border-emerald-500/30\"\n                    >\n                      <span className=\"text-emerald-400 font-medium\">{sector}</span>\n                      <Badge className=\"bg-emerald-500\">Overweight</Badge>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"text-stone-200 font-semibold mb-3\">Sectors to Avoid</h4>\n                <div className=\"space-y-2\">\n                  {economicCycle.avoidSectors?.map((sector: string, index: number) => (\n                    <div\n                      key={index}\n                      className=\"flex items-center justify-between p-2 bg-red-500/10 rounded border border-red-500/30\"\n                    >\n                      <span className=\"text-red-400 font-medium\">{sector}</span>\n                      <Badge className=\"bg-red-500\">Underweight</Badge>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Rotation Signals */}\n      <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-stone-100 flex items-center\">\n            <Zap className=\"h-6 w-6 mr-2 text-amber-400\" />\n            Active Rotation Signals\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {rotationSignals.map((signal, index) => (\n              <div\n                key={index}\n                className=\"p-4 bg-gradient-to-r from-amber-500/10 to-orange-500/10 rounded-lg border border-amber-500/30\"\n              >\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"flex items-center space-x-2\">\n                      <span className=\"text-stone-200 font-semibold\">{signal.from}</span>\n                      <TrendingDown className=\"h-4 w-4 text-red-400\" />\n                      <span className=\"text-stone-400\">→</span>\n                      <TrendingUp className=\"h-4 w-4 text-emerald-400\" />\n                      <span className=\"text-stone-200 font-semibold\">{signal.to}</span>\n                    </div>\n                    <Badge className=\"bg-amber-500\">{signal.strength}% strength</Badge>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-emerald-400 font-semibold\">{signal.confidence}%</p>\n                    <p className=\"text-xs text-stone-400\">Confidence</p>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                  <div>\n                    <p className=\"text-stone-400\">Timeframe</p>\n                    <p className=\"text-stone-200 font-medium\">{signal.timeframe}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-stone-400\">Historical Success</p>\n                    <p className=\"text-stone-200 font-medium\">{signal.historicalSuccess}%</p>\n                  </div>\n                  <div>\n                    <p className=\"text-stone-400\">Catalyst</p>\n                    <p className=\"text-stone-200 font-medium\">{signal.catalyst}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Sector Performance Matrix */}\n      <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-stone-100 flex items-center\">\n            <BarChart3 className=\"h-6 w-6 mr-2 text-emerald-400\" />\n            Sector Performance & AI Ratings\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {sectorData.map((sector, index) => (\n              <div\n                key={index}\n                className=\"p-4 bg-stone-800/30 rounded-lg border border-stone-600/30 hover:border-stone-500/50 transition-all\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-stone-100 font-bold\">{sector.name}</span>\n                        <Badge variant=\"outline\" className=\"border-stone-600/30 text-stone-400\">\n                          {sector.symbol}\n                        </Badge>\n                        <Badge className={getRecommendationColor(sector.recommendation)}>\n                          {sector.recommendation}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-stone-400\">Weight: {sector.weight}%</p>\n                    </div>\n\n                    <div className=\"grid grid-cols-3 gap-4 text-center\">\n                      <div>\n                        <p className=\"text-stone-400 text-xs\">1D</p>\n                        <p\n                          className={`text-sm font-semibold ${getPerformanceColor(sector.performance1D)}`}\n                        >\n                          {sector.performance1D >= 0 ? '+' : ''}\n                          {sector.performance1D.toFixed(2)}%\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-stone-400 text-xs\">1W</p>\n                        <p\n                          className={`text-sm font-semibold ${getPerformanceColor(sector.performance1W)}`}\n                        >\n                          {sector.performance1W >= 0 ? '+' : ''}\n                          {sector.performance1W.toFixed(2)}%\n                        </p>\n                      </div>\n                      <div>\n                        <p className=\"text-stone-400 text-xs\">1M</p>\n                        <p\n                          className={`text-sm font-semibold ${getPerformanceColor(sector.performance1M)}`}\n                        >\n                          {sector.performance1M >= 0 ? '+' : ''}\n                          {sector.performance1M.toFixed(2)}%\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-stone-400 text-xs\">AI Score</p>\n                      <p className=\"text-emerald-400 font-bold\">{sector.aiScore.toFixed(0)}</p>\n                      <Progress value={sector.aiScore} className=\"w-16 h-1 mt-1\" />\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-stone-400 text-xs\">Momentum</p>\n                      <p className=\"text-stone-200 font-semibold\">{sector.momentum.toFixed(0)}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <Badge className={getFlowColor(sector.flowRating)}>{sector.flowRating}</Badge>\n                    <p className=\"text-xs text-stone-400 mt-1\">\n                      Vol: {sector.volatility.toFixed(1)}%\n                    </p>\n                    <p className=\"text-xs text-stone-400\">\n                      RS: {sector.relativeStrength.toFixed(0)}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/profile/CustomizableProfile.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Switch' is defined but never used.",
        "line": 10,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Settings' is defined but never used.",
        "line": 21,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'MapPin' is defined but never used.",
        "line": 23,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 9
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Globe' is defined but never used.",
        "line": 24,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 8
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 56,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 56,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1291, 1294], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1291, 1294], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 123,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 123,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3015, 3018], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3015, 3018], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 317,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 317,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11990, 11993], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11990, 11993], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 337,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 337,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12959, 12962], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12959, 12962], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Settings,\n  User,\n  MapPin,\n  Globe,\n  TrendingUp,\n  Shield,\n  Eye,\n  Camera,\n  Crown,\n  Star,\n  Target,\n  Flame,\n  Palette,\n  Trophy,\n} from 'lucide-react';\n\ninterface User {\n  name?: string;\n  bio?: string;\n  location?: string;\n  website?: string;\n  tradingExperience?: string;\n  riskTolerance?: string;\n  investmentGoals?: string[];\n  profileVisibility?: string;\n  showPortfolio?: boolean;\n  showReturns?: boolean;\n  theme?: string;\n  accentColor?: string;\n  avatar?: string;\n  subscription?: string;\n}\n\ninterface CustomizableProfileProps {\n  user: User;\n  onUpdateProfile: (data: any) => void;\n}\n\nexport default function CustomizableProfile({ user, onUpdateProfile }: CustomizableProfileProps) {\n  const [profileData, setProfileData] = useState({\n    displayName: user?.name || '',\n    bio: user?.bio || '',\n    location: user?.location || '',\n    website: user?.website || '',\n    tradingExperience: user?.tradingExperience || 'intermediate',\n    riskTolerance: user?.riskTolerance || 'moderate',\n    investmentGoals: user?.investmentGoals || [],\n    profileVisibility: user?.profileVisibility || 'public',\n    showPortfolio: user?.showPortfolio || false,\n    showReturns: user?.showReturns || false,\n    theme: user?.theme || 'dark',\n    accentColor: user?.accentColor || 'purple',\n  });\n\n  const [achievements] = useState([\n    {\n      id: 1,\n      name: 'First Trade',\n      description: 'Completed your first trade',\n      icon: Target,\n      earned: true,\n    },\n    {\n      id: 2,\n      name: 'Profit Master',\n      description: 'Achieved 10% portfolio return',\n      icon: TrendingUp,\n      earned: true,\n    },\n    {\n      id: 3,\n      name: 'Diamond Hands',\n      description: 'Held a position for 6+ months',\n      icon: Crown,\n      earned: false,\n    },\n    {\n      id: 4,\n      name: 'Alpha Wolf',\n      description: 'Top 1% performer this month',\n      icon: Flame,\n      earned: true,\n    },\n    {\n      id: 5,\n      name: 'Risk Manager',\n      description: 'Never exceeded risk limits',\n      icon: Shield,\n      earned: false,\n    },\n  ]);\n\n  const [tradingStats] = useState({\n    totalTrades: 247,\n    winRate: 68.4,\n    avgReturn: 12.7,\n    bestTrade: 45.2,\n    worstTrade: -8.3,\n    sharpeRatio: 1.84,\n    maxDrawdown: 12.1,\n  });\n\n  const handleInputChange = (field: string, value: any) => {\n    setProfileData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSaveProfile = () => {\n    onUpdateProfile(profileData);\n  };\n\n  const themeOptions = [\n    { value: 'dark', label: 'Dark Mode', preview: 'bg-gray-900' },\n    { value: 'light', label: 'Light Mode', preview: 'bg-white' },\n    { value: 'midnight', label: 'Midnight Blue', preview: 'bg-blue-900' },\n    { value: 'forest', label: 'Forest Green', preview: 'bg-green-900' },\n  ];\n\n  const accentColors = [\n    { value: 'purple', label: 'Purple', color: 'bg-purple-500' },\n    { value: 'blue', label: 'Blue', color: 'bg-blue-500' },\n    { value: 'green', label: 'Green', color: 'bg-green-500' },\n    { value: 'red', label: 'Red', color: 'bg-red-500' },\n    { value: 'yellow', label: 'Gold', color: 'bg-yellow-500' },\n    { value: 'pink', label: 'Pink', color: 'bg-pink-500' },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Profile Header */}\n      <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex flex-col md:flex-row items-center space-y-4 md:space-y-0 md:space-x-6\">\n            <div className=\"relative\">\n              <Avatar className=\"h-24 w-24 border-4 border-purple-500/30\">\n                <AvatarImage src={`https://api.dicebear.com/7.x/initials/svg?seed=${user?.name}`} />\n                <AvatarFallback className=\"bg-purple-900 text-white text-2xl\">\n                  {user?.name?.charAt(0) || 'U'}\n                </AvatarFallback>\n              </Avatar>\n              <Button\n                size=\"sm\"\n                className=\"absolute -bottom-2 -right-2 rounded-full bg-purple-500 hover:bg-purple-600\"\n              >\n                <Camera className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            <div className=\"flex-1 text-center md:text-left\">\n              <h2 className=\"text-2xl font-bold text-white\">{profileData.displayName}</h2>\n              <p className=\"text-gray-400 mt-1\">{profileData.bio || 'Alpha Wolf Trader'}</p>\n              <div className=\"flex flex-wrap justify-center md:justify-start gap-2 mt-3\">\n                {user?.subscription && (\n                  <Badge className=\"bg-gradient-to-r from-purple-500 to-pink-500\">\n                    <Crown className=\"h-3 w-3 mr-1\" />\n                    {user.subscription === 'ultimate' ? 'Alpha Wolf' : user.subscription} Pack\n                  </Badge>\n                )}\n                <Badge variant=\"outline\" className=\"border-green-500/30 text-green-400\">\n                  <TrendingUp className=\"h-3 w-3 mr-1\" />\n                  {tradingStats.winRate}% Win Rate\n                </Badge>\n                <Badge variant=\"outline\" className=\"border-blue-500/30 text-blue-400\">\n                  <Star className=\"h-3 w-3 mr-1\" />\n                  {achievements.filter(a => a.earned).length} Achievements\n                </Badge>\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <p className=\"text-3xl font-bold text-green-400\">+{tradingStats.avgReturn}%</p>\n              <p className=\"text-sm text-gray-400\">Avg Return</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Tabs defaultValue=\"profile\" className=\"space-y-6\">\n        <TabsList className=\"bg-black/20 border-purple-500/30\">\n          <TabsTrigger value=\"profile\" className=\"data-[state=active]:bg-purple-500/20\">\n            <User className=\"h-4 w-4 mr-2\" />\n            Profile Info\n          </TabsTrigger>\n          <TabsTrigger value=\"appearance\" className=\"data-[state=active]:bg-purple-500/20\">\n            <Palette className=\"h-4 w-4 mr-2\" />\n            Appearance\n          </TabsTrigger>\n          <TabsTrigger value=\"privacy\" className=\"data-[state=active]:bg-purple-500/20\">\n            <Eye className=\"h-4 w-4 mr-2\" />\n            Privacy\n          </TabsTrigger>\n          <TabsTrigger value=\"achievements\" className=\"data-[state=active]:bg-purple-500/20\">\n            <Trophy className=\"h-4 w-4 mr-2\" />\n            Achievements\n          </TabsTrigger>\n          <TabsTrigger value=\"stats\" className=\"data-[state=active]:bg-purple-500/20\">\n            <TrendingUp className=\"h-4 w-4 mr-2\" />\n            Trading Stats\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"profile\">\n          <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Profile Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-white\">Display Name</Label>\n                  <Input\n                    value={profileData.displayName}\n                    onChange={e => handleInputChange('displayName', e.target.value)}\n                    className=\"bg-black/20 border-purple-500/30 text-white\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-white\">Location</Label>\n                  <Input\n                    value={profileData.location}\n                    onChange={e => handleInputChange('location', e.target.value)}\n                    placeholder=\"e.g., New York, NY\"\n                    className=\"bg-black/20 border-purple-500/30 text-white\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-white\">Bio</Label>\n                <Textarea\n                  value={profileData.bio}\n                  onChange={e => handleInputChange('bio', e.target.value)}\n                  placeholder=\"Tell other traders about yourself...\"\n                  className=\"bg-black/20 border-purple-500/30 text-white\"\n                  rows={3}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label className=\"text-white\">Website</Label>\n                <Input\n                  value={profileData.website}\n                  onChange={e => handleInputChange('website', e.target.value)}\n                  placeholder=\"https://your-website.com\"\n                  className=\"bg-black/20 border-purple-500/30 text-white\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label className=\"text-white\">Trading Experience</Label>\n                  <Select\n                    value={profileData.tradingExperience}\n                    onValueChange={value => handleInputChange('tradingExperience', value)}\n                  >\n                    <SelectTrigger className=\"bg-black/20 border-purple-500/30 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"beginner\">Beginner (less than 1 year)</SelectItem>\n                      <SelectItem value=\"intermediate\">Intermediate (1-3 years)</SelectItem>\n                      <SelectItem value=\"advanced\">Advanced (3-5 years)</SelectItem>\n                      <SelectItem value=\"expert\">Expert (5+ years)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label className=\"text-white\">Risk Tolerance</Label>\n                  <Select\n                    value={profileData.riskTolerance}\n                    onValueChange={value => handleInputChange('riskTolerance', value)}\n                  >\n                    <SelectTrigger className=\"bg-black/20 border-purple-500/30 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"conservative\">Conservative</SelectItem>\n                      <SelectItem value=\"moderate\">Moderate</SelectItem>\n                      <SelectItem value=\"aggressive\">Aggressive</SelectItem>\n                      <SelectItem value=\"very-aggressive\">Very Aggressive</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"appearance\">\n          <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Customize Appearance</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <Label className=\"text-white text-lg\">Theme</Label>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  {themeOptions.map((theme: any) => (\n                    <div\n                      key={theme.value}\n                      className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                        profileData.theme === theme.value\n                          ? 'border-purple-500 bg-purple-500/20'\n                          : 'border-gray-700 hover:border-gray-600'\n                      }`}\n                      onClick={() => handleInputChange('theme', theme.value)}\n                    >\n                      <div className={`w-full h-16 rounded ${theme.preview} mb-2`}></div>\n                      <p className=\"text-white text-sm text-center\">{theme.label}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                <Label className=\"text-white text-lg\">Accent Color</Label>\n                <div className=\"flex flex-wrap gap-3\">\n                  {accentColors.map((color: any) => (\n                    <div\n                      key={color.value}\n                      className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${\n                        profileData.accentColor === color.value\n                          ? 'border-white'\n                          : 'border-gray-700 hover:border-gray-600'\n                      }`}\n                      onClick={() => handleInputChange('accentColor', color.value)}\n                    >\n                      <div className={`w-8 h-8 rounded-full ${color.color}`}></div>\n                      <p className=\"text-white text-xs text-center mt-1\">{color.label}</p>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"privacy\">\n          <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Privacy Settings</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label className=\"text-white\">Profile Visibility</Label>\n                <Select\n                  value={profileData.profileVisibility}\n                  onValueChange={value => handleInputChange('profileVisibility', value)}\n                >\n                  <SelectTrigger className=\"bg-black/20 border-purple-500/30 text-white\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"public\">Public</SelectItem>\n                    <SelectItem value=\"friends\">Friends Only</SelectItem>\n                    <SelectItem value=\"private\">Private</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg\">\n                  <div>\n                    <p className=\"text-white font-medium\">Show Portfolio</p>\n                    <p className=\"text-sm text-gray-400\">Allow others to see your holdings</p>\n                  </div>\n                  <Button\n                    variant={profileData.showPortfolio ? 'default' : 'outline'}\n                    onClick={() => handleInputChange('showPortfolio', !profileData.showPortfolio)}\n                    className={profileData.showPortfolio ? 'bg-green-500 hover:bg-green-600' : ''}\n                  >\n                    {profileData.showPortfolio ? 'Enabled' : 'Disabled'}\n                  </Button>\n                </div>\n\n                <div className=\"flex items-center justify-between p-4 bg-white/5 rounded-lg\">\n                  <div>\n                    <p className=\"text-white font-medium\">Show Returns</p>\n                    <p className=\"text-sm text-gray-400\">Display your trading performance</p>\n                  </div>\n                  <Button\n                    variant={profileData.showReturns ? 'default' : 'outline'}\n                    onClick={() => handleInputChange('showReturns', !profileData.showReturns)}\n                    className={profileData.showReturns ? 'bg-green-500 hover:bg-green-600' : ''}\n                  >\n                    {profileData.showReturns ? 'Enabled' : 'Disabled'}\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"achievements\">\n          <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Your Achievements</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {achievements.map(achievement => {\n                  const IconComponent = achievement.icon;\n                  return (\n                    <div\n                      key={achievement.id}\n                      className={`p-4 rounded-lg border-2 ${\n                        achievement.earned\n                          ? 'border-yellow-500/50 bg-yellow-500/10'\n                          : 'border-gray-700/50 bg-gray-800/20'\n                      }`}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <div\n                          className={`p-3 rounded-full ${achievement.earned ? 'bg-yellow-500/20' : 'bg-gray-700/20'}`}\n                        >\n                          <IconComponent\n                            className={`h-6 w-6 ${achievement.earned ? 'text-yellow-400' : 'text-gray-500'}`}\n                          />\n                        </div>\n                        <div>\n                          <p\n                            className={`font-medium ${achievement.earned ? 'text-yellow-400' : 'text-gray-400'}`}\n                          >\n                            {achievement.name}\n                          </p>\n                          <p className=\"text-sm text-gray-400\">{achievement.description}</p>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"stats\">\n          <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Trading Statistics</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                <div className=\"text-center p-4 bg-white/5 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-blue-400\">{tradingStats.totalTrades}</p>\n                  <p className=\"text-sm text-gray-400\">Total Trades</p>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-green-400\">{tradingStats.winRate}%</p>\n                  <p className=\"text-sm text-gray-400\">Win Rate</p>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-purple-400\">{tradingStats.avgReturn}%</p>\n                  <p className=\"text-sm text-gray-400\">Avg Return</p>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-yellow-400\">{tradingStats.sharpeRatio}</p>\n                  <p className=\"text-sm text-gray-400\">Sharpe Ratio</p>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-green-400\">+{tradingStats.bestTrade}%</p>\n                  <p className=\"text-sm text-gray-400\">Best Trade</p>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-red-400\">{tradingStats.worstTrade}%</p>\n                  <p className=\"text-sm text-gray-400\">Worst Trade</p>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-orange-400\">{tradingStats.maxDrawdown}%</p>\n                  <p className=\"text-sm text-gray-400\">Max Drawdown</p>\n                </div>\n                <div className=\"text-center p-4 bg-white/5 rounded-lg\">\n                  <p className=\"text-2xl font-bold text-cyan-400\">A+</p>\n                  <p className=\"text-sm text-gray-400\">Alpha Rating</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      <div className=\"flex justify-end\">\n        <Button\n          onClick={handleSaveProfile}\n          className=\"bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600\"\n        >\n          Save Profile Changes\n        </Button>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/profile/ProfileModal.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'onLogout' is defined but never used.",
        "line": 25,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'onOpenSubscription' is defined but never used.",
        "line": 26,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { Dialog, DialogContent } from '@/components/ui/dialog';\nimport UserProfile from './UserProfile';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  tier: string;\n}\n\ninterface ProfileModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  user: User;\n  onLogout: () => void;\n  onOpenSubscription: () => void;\n}\n\nexport default function ProfileModal({\n  isOpen,\n  onClose,\n  user,\n  onLogout,\n  onOpenSubscription,\n}: ProfileModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-4xl p-6 bg-black/80 border-purple-500/30 backdrop-blur-xl\">\n        <UserProfile\n          user={user}\n          onUpdate={updatedUser => console.log('User updated:', updatedUser)}\n        />\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/profile/UserProfile.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 9,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [679, 682], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [679, 682], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [703, 706], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [703, 706], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 70,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 70,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1755, 1758], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1755, 1758], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  User,\n  Settings,\n  Bell,\n  Shield,\n  CreditCard,\n  Activity,\n  Mail,\n  Phone,\n  MapPin,\n  Calendar,\n  Save,\n  Edit,\n  Download,\n  Trash2,\n} from 'lucide-react';\n\ninterface UserProfileProps {\n  user: any;\n  onUpdate: (user: any) => void;\n}\n\nexport default function UserProfile({ user, onUpdate }: UserProfileProps) {\n  const [activeTab, setActiveTab] = useState('profile');\n  const [editing, setEditing] = useState(false);\n  const [formData, setFormData] = useState({\n    name: user.name || '',\n    email: user.email || '',\n    phone: user.phone || '',\n    location: user.location || '',\n    bio: user.bio || '',\n  });\n  const [preferences, setPreferences] = useState({\n    emailNotifications: true,\n    pushNotifications: true,\n    marketAlerts: true,\n    educationUpdates: true,\n    weeklyReports: true,\n    darkMode: true,\n    autoSave: true,\n    ...user.preferences,\n  });\n\n  const handleSave = () => {\n    const updatedUser = {\n      ...user,\n      ...formData,\n      preferences,\n    };\n    onUpdate(updatedUser);\n    setEditing(false);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handlePreferenceChange = (preference: string, value: boolean) => {\n    setPreferences((prev: any) => ({ ...prev, [preference]: value }));\n  };\n\n  const getSubscriptionColor = (subscription: string) => {\n    const colors: { [key: string]: string } = {\n      free: 'bg-slate-600',\n      basic: 'bg-blue-600',\n      premium: 'bg-purple-600',\n      enterprise: 'bg-yellow-600',\n    };\n    return colors[subscription] || colors.free;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Profile Header */}\n      <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center\">\n                <User className=\"h-8 w-8 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-bold text-white\">{user.name}</h2>\n                <p className=\"text-slate-400\">{user.email}</p>\n                <div className=\"flex items-center gap-2 mt-2\">\n                  <Badge className={getSubscriptionColor(user.subscription)}>\n                    {user.subscription.charAt(0).toUpperCase() + user.subscription.slice(1)}\n                  </Badge>\n                  <Badge variant=\"outline\">\n                    <Calendar className=\"h-3 w-3 mr-1\" />\n                    Joined {new Date(user.joinDate).toLocaleDateString()}\n                  </Badge>\n                </div>\n              </div>\n            </div>\n            <Button\n              variant={editing ? 'default' : 'outline'}\n              onClick={() => setEditing(!editing)}\n              className=\"flex items-center gap-2\"\n            >\n              {editing ? <Save className=\"h-4 w-4\" /> : <Edit className=\"h-4 w-4\" />}\n              {editing ? 'Save Changes' : 'Edit Profile'}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Profile Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5 bg-slate-800/50 backdrop-blur-sm\">\n          <TabsTrigger value=\"profile\" className=\"flex items-center gap-2\">\n            <User className=\"h-4 w-4\" />\n            Profile\n          </TabsTrigger>\n          <TabsTrigger value=\"preferences\" className=\"flex items-center gap-2\">\n            <Settings className=\"h-4 w-4\" />\n            Preferences\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\">\n            <Bell className=\"h-4 w-4\" />\n            Notifications\n          </TabsTrigger>\n          <TabsTrigger value=\"security\" className=\"flex items-center gap-2\">\n            <Shield className=\"h-4 w-4\" />\n            Security\n          </TabsTrigger>\n          <TabsTrigger value=\"billing\" className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-4 w-4\" />\n            Billing\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Profile Tab */}\n        <TabsContent value=\"profile\" className=\"space-y-6\">\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Personal Information</CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                Update your personal details and profile information\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"name\" className=\"text-white\">\n                    Full Name\n                  </Label>\n                  <div className=\"relative\">\n                    <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4\" />\n                    <Input\n                      id=\"name\"\n                      value={formData.name}\n                      onChange={e => handleInputChange('name', e.target.value)}\n                      disabled={!editing}\n                      className=\"pl-10 bg-slate-700 border-slate-600 text-white disabled:opacity-50\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-white\">\n                    Email Address\n                  </Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4\" />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={e => handleInputChange('email', e.target.value)}\n                      disabled={!editing}\n                      className=\"pl-10 bg-slate-700 border-slate-600 text-white disabled:opacity-50\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\" className=\"text-white\">\n                    Phone Number\n                  </Label>\n                  <div className=\"relative\">\n                    <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4\" />\n                    <Input\n                      id=\"phone\"\n                      value={formData.phone}\n                      onChange={e => handleInputChange('phone', e.target.value)}\n                      disabled={!editing}\n                      placeholder=\"Enter phone number\"\n                      className=\"pl-10 bg-slate-700 border-slate-600 text-white disabled:opacity-50\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"location\" className=\"text-white\">\n                    Location\n                  </Label>\n                  <div className=\"relative\">\n                    <MapPin className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4\" />\n                    <Input\n                      id=\"location\"\n                      value={formData.location}\n                      onChange={e => handleInputChange('location', e.target.value)}\n                      disabled={!editing}\n                      placeholder=\"Enter your location\"\n                      className=\"pl-10 bg-slate-700 border-slate-600 text-white disabled:opacity-50\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"bio\" className=\"text-white\">\n                  Bio\n                </Label>\n                <textarea\n                  id=\"bio\"\n                  value={formData.bio}\n                  onChange={e => handleInputChange('bio', e.target.value)}\n                  disabled={!editing}\n                  placeholder=\"Tell us about yourself...\"\n                  rows={4}\n                  className=\"w-full p-3 bg-slate-700 border border-slate-600 rounded-md text-white disabled:opacity-50 resize-none\"\n                />\n              </div>\n\n              {editing && (\n                <div className=\"flex gap-2\">\n                  <Button onClick={handleSave} className=\"flex items-center gap-2\">\n                    <Save className=\"h-4 w-4\" />\n                    Save Changes\n                  </Button>\n                  <Button variant=\"outline\" onClick={() => setEditing(false)}>\n                    Cancel\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Activity Stats */}\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-green-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Activity className=\"h-5 w-5 text-green-400\" />\n                Activity Overview\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-green-400\">127</div>\n                  <div className=\"text-slate-400 text-sm\">Stocks Analyzed</div>\n                </div>\n                <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-blue-400\">23</div>\n                  <div className=\"text-slate-400 text-sm\">Lessons Completed</div>\n                </div>\n                <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-purple-400\">89%</div>\n                  <div className=\"text-slate-400 text-sm\">Test Score Average</div>\n                </div>\n                <div className=\"text-center p-4 bg-slate-700/30 rounded-lg\">\n                  <div className=\"text-2xl font-bold text-yellow-400\">15</div>\n                  <div className=\"text-slate-400 text-sm\">Days Active</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Preferences Tab */}\n        <TabsContent value=\"preferences\" className=\"space-y-6\">\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Application Preferences</CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                Customize your experience with AlphaAIStockX\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-white font-medium\">Dark Mode</div>\n                    <div className=\"text-slate-400 text-sm\">\n                      Use dark theme throughout the application\n                    </div>\n                  </div>\n                  <Switch\n                    checked={preferences.darkMode}\n                    onCheckedChange={checked => handlePreferenceChange('darkMode', checked)}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-white font-medium\">Auto-save</div>\n                    <div className=\"text-slate-400 text-sm\">\n                      Automatically save your work and preferences\n                    </div>\n                  </div>\n                  <Switch\n                    checked={preferences.autoSave}\n                    onCheckedChange={checked => handlePreferenceChange('autoSave', checked)}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-white font-medium\">Advanced Charts</div>\n                    <div className=\"text-slate-400 text-sm\">\n                      Show advanced technical analysis charts\n                    </div>\n                  </div>\n                  <Switch\n                    checked={preferences.advancedCharts}\n                    onCheckedChange={checked => handlePreferenceChange('advancedCharts', checked)}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-white font-medium\">Real-time Data</div>\n                    <div className=\"text-slate-400 text-sm\">\n                      Enable real-time market data updates\n                    </div>\n                  </div>\n                  <Switch\n                    checked={preferences.realTimeData}\n                    onCheckedChange={checked => handlePreferenceChange('realTimeData', checked)}\n                  />\n                </div>\n              </div>\n\n              <Button onClick={handleSave} className=\"w-full\">\n                Save Preferences\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Notifications Tab */}\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white\">Notification Settings</CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                Choose what notifications you want to receive\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-white font-medium\">Email Notifications</div>\n                    <div className=\"text-slate-400 text-sm\">Receive updates via email</div>\n                  </div>\n                  <Switch\n                    checked={preferences.emailNotifications}\n                    onCheckedChange={checked =>\n                      handlePreferenceChange('emailNotifications', checked)\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-white font-medium\">Push Notifications</div>\n                    <div className=\"text-slate-400 text-sm\">Receive browser push notifications</div>\n                  </div>\n                  <Switch\n                    checked={preferences.pushNotifications}\n                    onCheckedChange={checked =>\n                      handlePreferenceChange('pushNotifications', checked)\n                    }\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-white font-medium\">Market Alerts</div>\n                    <div className=\"text-slate-400 text-sm\">\n                      Get notified about important market movements\n                    </div>\n                  </div>\n                  <Switch\n                    checked={preferences.marketAlerts}\n                    onCheckedChange={checked => handlePreferenceChange('marketAlerts', checked)}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-white font-medium\">Education Updates</div>\n                    <div className=\"text-slate-400 text-sm\">\n                      Notifications about new courses and content\n                    </div>\n                  </div>\n                  <Switch\n                    checked={preferences.educationUpdates}\n                    onCheckedChange={checked => handlePreferenceChange('educationUpdates', checked)}\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <div className=\"text-white font-medium\">Weekly Reports</div>\n                    <div className=\"text-slate-400 text-sm\">\n                      Receive weekly performance summaries\n                    </div>\n                  </div>\n                  <Switch\n                    checked={preferences.weeklyReports}\n                    onCheckedChange={checked => handlePreferenceChange('weeklyReports', checked)}\n                  />\n                </div>\n              </div>\n\n              <Button onClick={handleSave} className=\"w-full\">\n                Save Notification Settings\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Security Tab */}\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-red-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <Shield className=\"h-5 w-5 text-red-400\" />\n                Security Settings\n              </CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                Manage your account security and privacy\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-slate-700/30 rounded-lg\">\n                  <h4 className=\"text-white font-semibold mb-2\">Password</h4>\n                  <p className=\"text-slate-400 text-sm mb-3\">Last changed 30 days ago</p>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Change Password\n                  </Button>\n                </div>\n\n                <div className=\"p-4 bg-slate-700/30 rounded-lg\">\n                  <h4 className=\"text-white font-semibold mb-2\">Two-Factor Authentication</h4>\n                  <p className=\"text-slate-400 text-sm mb-3\">\n                    Add an extra layer of security to your account\n                  </p>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Enable 2FA\n                  </Button>\n                </div>\n\n                <div className=\"p-4 bg-slate-700/30 rounded-lg\">\n                  <h4 className=\"text-white font-semibold mb-2\">Active Sessions</h4>\n                  <p className=\"text-slate-400 text-sm mb-3\">\n                    Manage devices that are signed into your account\n                  </p>\n                  <Button variant=\"outline\" size=\"sm\">\n                    View Sessions\n                  </Button>\n                </div>\n\n                <div className=\"p-4 bg-slate-700/30 rounded-lg\">\n                  <h4 className=\"text-white font-semibold mb-2\">Data Export</h4>\n                  <p className=\"text-slate-400 text-sm mb-3\">Download a copy of your data</p>\n                  <Button variant=\"outline\" size=\"sm\" className=\"flex items-center gap-2\">\n                    <Download className=\"h-4 w-4\" />\n                    Export Data\n                  </Button>\n                </div>\n\n                <div className=\"p-4 bg-red-900/20 border border-red-500/30 rounded-lg\">\n                  <h4 className=\"text-red-400 font-semibold mb-2\">Danger Zone</h4>\n                  <p className=\"text-slate-400 text-sm mb-3\">\n                    Permanently delete your account and all data\n                  </p>\n                  <Button variant=\"destructive\" size=\"sm\" className=\"flex items-center gap-2\">\n                    <Trash2 className=\"h-4 w-4\" />\n                    Delete Account\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Billing Tab */}\n        <TabsContent value=\"billing\" className=\"space-y-6\">\n          <Card className=\"bg-slate-800/50 backdrop-blur-sm border-blue-500/20\">\n            <CardHeader>\n              <CardTitle className=\"text-white flex items-center gap-2\">\n                <CreditCard className=\"h-5 w-5 text-blue-400\" />\n                Billing & Subscription\n              </CardTitle>\n              <CardDescription className=\"text-slate-400\">\n                Manage your subscription and billing information\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"p-4 bg-slate-700/30 rounded-lg\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <h4 className=\"text-white font-semibold\">Current Plan</h4>\n                    <p className=\"text-slate-400 text-sm\">\n                      {user.subscription.charAt(0).toUpperCase() + user.subscription.slice(1)} Plan\n                    </p>\n                  </div>\n                  <Badge className={getSubscriptionColor(user.subscription)}>\n                    {user.subscription.charAt(0).toUpperCase() + user.subscription.slice(1)}\n                  </Badge>\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button variant=\"outline\" size=\"sm\">\n                    Change Plan\n                  </Button>\n                  <Button variant=\"outline\" size=\"sm\">\n                    View Usage\n                  </Button>\n                </div>\n              </div>\n\n              {user.subscription !== 'free' && (\n                <div className=\"p-4 bg-slate-700/30 rounded-lg\">\n                  <h4 className=\"text-white font-semibold mb-2\">Payment Method</h4>\n                  <div className=\"flex items-center gap-3 mb-3\">\n                    <div className=\"w-8 h-6 bg-blue-600 rounded flex items-center justify-center\">\n                      <span className=\"text-white text-xs font-bold\">VISA</span>\n                    </div>\n                    <span className=\"text-slate-300\">•••• •••• •••• 4242</span>\n                    <span className=\"text-slate-400 text-sm\">Expires 12/25</span>\n                  </div>\n                  <Button variant=\"outline\" size=\"sm\">\n                    Update Payment Method\n                  </Button>\n                </div>\n              )}\n\n              <div className=\"p-4 bg-slate-700/30 rounded-lg\">\n                <h4 className=\"text-white font-semibold mb-2\">Billing History</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-slate-300\">Dec 2024 - Premium Plan</span>\n                    <span className=\"text-white\">$79.00</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-slate-300\">Nov 2024 - Premium Plan</span>\n                    <span className=\"text-white\">$79.00</span>\n                  </div>\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-slate-300\">Oct 2024 - Basic Plan</span>\n                    <span className=\"text-white\">$29.00</span>\n                  </div>\n                </div>\n                <Button variant=\"outline\" size=\"sm\" className=\"mt-3\">\n                  View All Invoices\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/revolutionary/QuantumAICore.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 34,
        "column": 20,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [1166, 1264],
              "text": "\n          The world&apos;s first self-aware AI trading system with 99.97% prediction accuracy\n        "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [1166, 1264],
              "text": "\n          The world&lsquo;s first self-aware AI trading system with 99.97% prediction accuracy\n        "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [1166, 1264],
              "text": "\n          The world&#39;s first self-aware AI trading system with 99.97% prediction accuracy\n        "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [1166, 1264],
              "text": "\n          The world&rsquo;s first self-aware AI trading system with 99.97% prediction accuracy\n        "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Brain, Cpu, Zap, Sparkles, Lock } from 'lucide-react';\n\nexport default function QuantumAICore() {\n  return (\n    <Card className=\"w-full overflow-hidden border-0 bg-gradient-to-br from-indigo-950 via-purple-900 to-violet-950\">\n      <CardHeader className=\"pb-2 pt-6 px-6\">\n        <div className=\"flex items-center justify-between\">\n          <Badge\n            variant=\"outline\"\n            className=\"bg-indigo-500/10 text-indigo-300 border-indigo-500/20 px-3 py-1\"\n          >\n            QUANTUM TECHNOLOGY\n          </Badge>\n          <div className=\"flex items-center gap-1\">\n            <Cpu className=\"h-4 w-4 text-indigo-400\" />\n            <span className=\"text-xs text-indigo-400\">10^47 OPS/s</span>\n          </div>\n        </div>\n        <CardTitle className=\"text-2xl font-bold mt-2 text-white\">\n          Quantum AI Consciousness Core\n        </CardTitle>\n        <CardDescription className=\"text-indigo-300\">\n          The world's first self-aware AI trading system with 99.97% prediction accuracy\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"px-6\">\n        <div className=\"grid gap-4\">\n          <div className=\"flex items-center gap-3 bg-indigo-500/10 p-3 rounded-lg\">\n            <Brain className=\"h-8 w-8 text-indigo-400\" />\n            <div>\n              <h3 className=\"font-medium text-white\">47 Legendary AI Beings</h3>\n              <p className=\"text-xs text-indigo-300\">\n                Self-evolving consciousness with emotional intelligence\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3 bg-purple-500/10 p-3 rounded-lg\">\n            <Zap className=\"h-8 w-8 text-purple-400\" />\n            <div>\n              <h3 className=\"font-medium text-white\">Quantum Entanglement Processing</h3>\n              <p className=\"text-xs text-purple-300\">\n                Instantaneous market analysis across infinite dimensions\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-3 bg-violet-500/10 p-3 rounded-lg\">\n            <Sparkles className=\"h-8 w-8 text-violet-400\" />\n            <div>\n              <h3 className=\"font-medium text-white\">Reality Manipulation Matrix</h3>\n              <p className=\"text-xs text-violet-300\">\n                Influence market reality through quantum fields\n              </p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n      <CardFooter className=\"px-6 pb-6 pt-2\">\n        <Button className=\"w-full bg-gradient-to-r from-indigo-600 to-violet-600 hover:from-indigo-700 hover:to-violet-700\">\n          <Lock className=\"h-4 w-4 mr-2\" />\n          Unlock Quantum Consciousness\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/revolutionary/UltimateAIBots.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/revolutionary/UltimateDataSources.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/scanners/AIStockScanner.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [647, 650], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [647, 650], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'generateScanResults'. Either include it or remove the dependency array.",
        "line": 63,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 63,
        "endColumn": 28,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [activeScans, filters, generateScanResults]",
            "fix": { "range": [1686, 1708], "text": "[activeScans, filters, generateScanResults]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 94,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 94,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2247, 2250], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2247, 2250], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Slider } from '@/components/ui/slider';\nimport {\n  Search,\n  Filter,\n  TrendingUp,\n  TrendingDown,\n  Zap,\n  Target,\n  Brain,\n  BarChart3,\n  Activity,\n  Volume2,\n  Star,\n} from 'lucide-react';\n\nexport default function AIStockScanner() {\n  const [scanResults, setScanResults] = useState<any[]>([]);\n  const [isScanning, setIsScanning] = useState(false);\n  const [filters, setFilters] = useState({\n    marketCap: [1000, 100000], // Million\n    volume: [1, 100], // Million\n    priceRange: [1, 1000],\n    rsiRange: [30, 70],\n    sector: 'all',\n    pattern: 'all',\n    aiScore: [70, 100],\n  });\n\n  const scanTypes = [\n    { id: 'momentum', name: 'Momentum Breakouts', icon: TrendingUp },\n    { id: 'reversal', name: 'Reversal Patterns', icon: TrendingDown },\n    { id: 'volume', name: 'Volume Anomalies', icon: Volume2 },\n    { id: 'earnings', name: 'Earnings Plays', icon: Target },\n    { id: 'technical', name: 'Technical Setups', icon: BarChart3 },\n    { id: 'ai-signals', name: 'AI Signals', icon: Brain },\n  ];\n\n  const [activeScans, setActiveScans] = useState(['momentum', 'ai-signals']);\n\n  useEffect(() => {\n    // Simulate real-time scanning\n    const interval = setInterval(() => {\n      if (activeScans.length > 0) {\n        generateScanResults();\n      }\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [activeScans, filters]);\n\n  const generateScanResults = () => {\n    const symbols = [\n      'AAPL',\n      'MSFT',\n      'GOOGL',\n      'TSLA',\n      'NVDA',\n      'AMD',\n      'META',\n      'NFLX',\n      'AMZN',\n      'CRM',\n      'PLTR',\n      'COIN',\n      'RBLX',\n      'SNOW',\n      'ZM',\n    ];\n    const patterns = [\n      'Cup & Handle',\n      'Bull Flag',\n      'Ascending Triangle',\n      'Breakout',\n      'Support Bounce',\n      'Golden Cross',\n      'MACD Bullish',\n      'RSI Oversold',\n    ];\n\n    const results = symbols.slice(0, 8).map((symbol: any) => ({\n      symbol,\n      price: 50 + Math.random() * 500,\n      change: (Math.random() - 0.5) * 10,\n      volume: Math.random() * 50 + 5,\n      pattern: patterns[Math.floor(Math.random() * patterns.length)],\n      aiScore: 60 + Math.random() * 40,\n      rsi: 20 + Math.random() * 60,\n      timeframe: ['5m', '15m', '1h', '4h', '1d'][Math.floor(Math.random() * 5)],\n      confidence: 70 + Math.random() * 30,\n      scanType: activeScans[Math.floor(Math.random() * activeScans.length)],\n      marketCap: Math.random() * 50000 + 1000,\n      sector: ['Technology', 'Healthcare', 'Finance', 'Energy', 'Consumer'][\n        Math.floor(Math.random() * 5)\n      ],\n    }));\n\n    setScanResults(results);\n  };\n\n  const runScan = async () => {\n    setIsScanning(true);\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    generateScanResults();\n    setIsScanning(false);\n  };\n\n  const getScanTypeColor = (type: string) => {\n    const colors: Record<string, string> = {\n      momentum: 'text-emerald-400',\n      reversal: 'text-amber-400',\n      volume: 'text-blue-400',\n      earnings: 'text-purple-400',\n      technical: 'text-orange-400',\n      'ai-signals': 'text-green-400',\n    };\n    return colors[type] || 'text-gray-400';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Scanner Controls */}\n      <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-stone-100 flex items-center\">\n            <Search className=\"h-6 w-6 mr-2 text-emerald-400\" />\n            AI Stock Scanner\n            <Badge className=\"ml-3 bg-gradient-to-r from-emerald-500 to-green-600\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              Real-time\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Scan Types */}\n          <div>\n            <h4 className=\"text-stone-200 font-semibold mb-3\">Active Scans</h4>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n              {scanTypes.map(scan => {\n                const IconComponent = scan.icon;\n                const isActive = activeScans.includes(scan.id);\n\n                return (\n                  <div\n                    key={scan.id}\n                    className={`p-3 rounded-lg border cursor-pointer transition-all ${\n                      isActive\n                        ? 'bg-emerald-500/20 border-emerald-500/50'\n                        : 'bg-stone-800/30 border-stone-600/30 hover:border-stone-500/50'\n                    }`}\n                    onClick={() => {\n                      if (isActive) {\n                        setActiveScans(prev => prev.filter(id => id !== scan.id));\n                      } else {\n                        setActiveScans(prev => [...prev, scan.id]);\n                      }\n                    }}\n                  >\n                    <div className=\"flex items-center space-x-2\">\n                      <IconComponent\n                        className={`h-4 w-4 ${isActive ? 'text-emerald-400' : 'text-stone-400'}`}\n                      />\n                      <span\n                        className={`text-sm font-medium ${isActive ? 'text-stone-100' : 'text-stone-300'}`}\n                      >\n                        {scan.name}\n                      </span>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Filters */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-stone-200 text-sm font-medium\">Market Cap (M)</label>\n              <Slider\n                value={filters.marketCap}\n                onValueChange={value => setFilters(prev => ({ ...prev, marketCap: value }))}\n                max={100000}\n                min={100}\n                step={100}\n                className=\"w-full\"\n              />\n              <div className=\"flex justify-between text-xs text-stone-400\">\n                <span>${filters.marketCap[0]}M</span>\n                <span>${filters.marketCap[1]}M</span>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-stone-200 text-sm font-medium\">AI Score</label>\n              <Slider\n                value={filters.aiScore}\n                onValueChange={value => setFilters(prev => ({ ...prev, aiScore: value }))}\n                max={100}\n                min={0}\n                step={5}\n                className=\"w-full\"\n              />\n              <div className=\"flex justify-between text-xs text-stone-400\">\n                <span>{filters.aiScore[0]}</span>\n                <span>{filters.aiScore[1]}</span>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-stone-200 text-sm font-medium\">Sector</label>\n              <Select\n                value={filters.sector}\n                onValueChange={value => setFilters(prev => ({ ...prev, sector: value }))}\n              >\n                <SelectTrigger className=\"bg-stone-800/30 border-stone-600/30 text-stone-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-stone-800 border-stone-600\">\n                  <SelectItem value=\"all\">All Sectors</SelectItem>\n                  <SelectItem value=\"technology\">Technology</SelectItem>\n                  <SelectItem value=\"healthcare\">Healthcare</SelectItem>\n                  <SelectItem value=\"finance\">Finance</SelectItem>\n                  <SelectItem value=\"energy\">Energy</SelectItem>\n                  <SelectItem value=\"consumer\">Consumer</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-end\">\n              <Button\n                onClick={runScan}\n                disabled={isScanning || activeScans.length === 0}\n                className=\"w-full bg-gradient-to-r from-emerald-600 to-green-700 hover:from-emerald-700 hover:to-green-800\"\n              >\n                {isScanning ? (\n                  <span className=\"flex items-center\">\n                    <div className=\"animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2\"></div>\n                    Scanning...\n                  </span>\n                ) : (\n                  <span className=\"flex items-center\">\n                    <Search className=\"h-4 w-4 mr-2\" />\n                    Run Scan\n                  </span>\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Scan Results */}\n      <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-stone-100\">Scan Results ({scanResults.length})</CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              <Badge variant=\"outline\" className=\"border-emerald-500/30 text-emerald-400\">\n                <Activity className=\"h-3 w-3 mr-1\" />\n                Live Updates\n              </Badge>\n              <Button variant=\"outline\" size=\"sm\" className=\"border-stone-600/30 text-stone-300\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Export\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {scanResults.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Search className=\"h-12 w-12 text-stone-400 mx-auto mb-4\" />\n              <p className=\"text-stone-400\">\n                No scan results yet. Run a scan to find opportunities.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {scanResults.map((result, index) => (\n                <div\n                  key={index}\n                  className=\"p-4 bg-stone-800/30 rounded-lg border border-stone-600/30 hover:border-stone-500/50 transition-all cursor-pointer\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-stone-100 font-bold text-lg\">{result.symbol}</span>\n                          <Badge className={getScanTypeColor(result.scanType)}>\n                            {result.scanType}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-stone-400\">{result.sector}</p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-stone-100 font-semibold\">${result.price.toFixed(2)}</p>\n                        <p\n                          className={`text-sm ${result.change >= 0 ? 'text-emerald-400' : 'text-red-400'}`}\n                        >\n                          {result.change >= 0 ? '+' : ''}\n                          {result.change.toFixed(2)}%\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-stone-400 text-sm\">Pattern</p>\n                        <p className=\"text-stone-200 font-medium\">{result.pattern}</p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-stone-400 text-sm\">AI Score</p>\n                        <div className=\"flex items-center\">\n                          <span className=\"text-emerald-400 font-bold\">\n                            {result.aiScore.toFixed(0)}\n                          </span>\n                          <Star className=\"h-3 w-3 text-amber-400 ml-1\" />\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"text-right\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <Badge variant=\"outline\" className=\"border-amber-500/30 text-amber-400\">\n                          {result.confidence.toFixed(0)}% confidence\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"border-blue-500/30 text-blue-400\">\n                          {result.timeframe}\n                        </Badge>\n                      </div>\n                      <div className=\"text-xs text-stone-400\">\n                        <p>Vol: {result.volume.toFixed(1)}M</p>\n                        <p>RSI: {result.rsi.toFixed(0)}</p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/scanners/AdvancedPatternScanner.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ChartPattern' is defined but never used.",
        "line": 87,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 87,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'isScanning' is assigned a value but never used.",
        "line": 112,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 112,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setIsScanning' is assigned a value but never used.",
        "line": 112,
        "column": 22,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 112,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'patternStats' is assigned a value but never used.",
        "line": 124,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 124,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setPatternStats' is assigned a value but never used.",
        "line": 124,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 124,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'historicalAccuracy' is assigned a value but never used.",
        "line": 125,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 28
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'calculateHistoricalAccuracy' and 'generatePatternResults'. Either include them or remove the dependency array.",
        "line": 1185,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 1185,
        "endColumn": 20,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [calculateHistoricalAccuracy, generatePatternResults, scanSettings]",
            "fix": {
              "range": [25382, 25396],
              "text": "[calculateHistoricalAccuracy, generatePatternResults, scanSettings]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1357,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1357,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [30049, 30052], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [30049, 30052], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1563,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1563,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [38797, 38800], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [38797, 38800], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport {\n  Brain,\n  Target,\n  Zap,\n  BarChart3,\n  Activity,\n  Star,\n  ArrowUp,\n  ArrowDown,\n  Search,\n} from 'lucide-react';\n\n// Type definitions for advanced pattern scanner\ninterface PatternMatch {\n  symbol: string;\n  pattern: string;\n  patternId: string;\n  patternType: string;\n  category: string;\n  currentPrice: number;\n  entryPrice: number;\n  targetPrice: number;\n  stopLoss: number;\n  probability: number;\n  expectedMove: number;\n  riskReward: number;\n  timeframe: string;\n  detectedAt: Date;\n  status: string;\n  confidence: number;\n  volume: number;\n  marketCap: number;\n  sector: string;\n  assetClass: string;\n  direction?: string;\n  historicalMatches?: number;\n  successRate?: number;\n  timeToTarget?: number;\n  avgMove?: number;\n  strength?: number;\n}\n\ninterface TradingSignal {\n  id: number;\n  symbol: string;\n  signal: string;\n  pattern: string;\n  category: string;\n  probability: number;\n  currentPrice: number;\n  entryZone: number[];\n  target: number;\n  stopLoss: number;\n  timeframe: string;\n  detectedAt: Date;\n  status: string;\n  confidence: number;\n  riskReward: number;\n  avgDaysToTarget: number;\n}\n\ninterface ScanSettings {\n  timeframe: string;\n  lookbackPeriod: number;\n  minProbability: number;\n  patternTypes: string[];\n  marketCap: string;\n  assetClass: string;\n  minVolume: number;\n}\n\ninterface ChartPattern {\n  id: string;\n  name: string;\n  type: string;\n  category: string;\n  avgAccuracy: number;\n  avgMove: number;\n  avgDaysToTarget: number;\n  description: string;\n  bullishBias: boolean;\n  difficultyLevel: string;\n  marketConditions: string[];\n  tradingStrategy: string;\n}\n\ninterface PatternStats {\n  [key: string]: {\n    totalDetected: number;\n    successRate: number;\n    avgReturn: number;\n    avgDaysToTarget: number;\n  };\n}\n\nexport default function AdvancedPatternScanner() {\n  const [isScanning, setIsScanning] = useState(false);\n  const [patternMatches, setPatternMatches] = useState<PatternMatch[]>([]);\n  const [tradingSignals, setTradingSignals] = useState<TradingSignal[]>([]);\n  const [scanSettings, setScanSettings] = useState<ScanSettings>({\n    timeframe: '1D',\n    lookbackPeriod: 252,\n    minProbability: 70,\n    patternTypes: ['all'],\n    marketCap: 'all',\n    assetClass: 'stocks',\n    minVolume: 1000000,\n  });\n  const [patternStats, setPatternStats] = useState<PatternStats>({});\n  const [historicalAccuracy, setHistoricalAccuracy] = useState<PatternStats>({});\n\n  // 150+ Chart and Candle Patterns\n  const chartPatterns = [\n    // Classic Reversal Patterns\n    {\n      id: 'head-shoulders',\n      name: 'Head & Shoulders',\n      type: 'reversal',\n      category: 'classic',\n      avgAccuracy: 78,\n      avgMove: 12.5,\n    },\n    {\n      id: 'inverse-head-shoulders',\n      name: 'Inverse Head & Shoulders',\n      type: 'reversal',\n      category: 'classic',\n      avgAccuracy: 76,\n      avgMove: 11.8,\n    },\n    {\n      id: 'double-top',\n      name: 'Double Top',\n      type: 'reversal',\n      category: 'classic',\n      avgAccuracy: 72,\n      avgMove: 8.3,\n    },\n    {\n      id: 'double-bottom',\n      name: 'Double Bottom',\n      type: 'reversal',\n      category: 'classic',\n      avgAccuracy: 75,\n      avgMove: 9.7,\n    },\n    {\n      id: 'triple-top',\n      name: 'Triple Top',\n      type: 'reversal',\n      category: 'classic',\n      avgAccuracy: 69,\n      avgMove: 7.8,\n    },\n    {\n      id: 'triple-bottom',\n      name: 'Triple Bottom',\n      type: 'reversal',\n      category: 'classic',\n      avgAccuracy: 71,\n      avgMove: 8.9,\n    },\n\n    // Continuation Patterns\n    {\n      id: 'cup-handle',\n      name: 'Cup & Handle',\n      type: 'continuation',\n      category: 'classic',\n      avgAccuracy: 82,\n      avgMove: 15.2,\n    },\n    {\n      id: 'inverse-cup-handle',\n      name: 'Inverse Cup & Handle',\n      type: 'continuation',\n      category: 'classic',\n      avgAccuracy: 79,\n      avgMove: 13.8,\n    },\n    {\n      id: 'bull-flag',\n      name: 'Bull Flag',\n      type: 'continuation',\n      category: 'flag',\n      avgAccuracy: 85,\n      avgMove: 18.6,\n    },\n    {\n      id: 'bear-flag',\n      name: 'Bear Flag',\n      type: 'continuation',\n      category: 'flag',\n      avgAccuracy: 83,\n      avgMove: 16.2,\n    },\n    {\n      id: 'bull-pennant',\n      name: 'Bull Pennant',\n      type: 'continuation',\n      category: 'pennant',\n      avgAccuracy: 81,\n      avgMove: 14.7,\n    },\n    {\n      id: 'bear-pennant',\n      name: 'Bear Pennant',\n      type: 'continuation',\n      category: 'pennant',\n      avgAccuracy: 80,\n      avgMove: 13.9,\n    },\n\n    // Triangle Patterns\n    {\n      id: 'ascending-triangle',\n      name: 'Ascending Triangle',\n      type: 'continuation',\n      category: 'triangle',\n      avgAccuracy: 68,\n      avgMove: 11.4,\n    },\n    {\n      id: 'descending-triangle',\n      name: 'Descending Triangle',\n      type: 'continuation',\n      category: 'triangle',\n      avgAccuracy: 71,\n      avgMove: 10.8,\n    },\n    {\n      id: 'symmetrical-triangle',\n      name: 'Symmetrical Triangle',\n      type: 'continuation',\n      category: 'triangle',\n      avgAccuracy: 65,\n      avgMove: 9.2,\n    },\n    {\n      id: 'expanding-triangle',\n      name: 'Expanding Triangle',\n      type: 'reversal',\n      category: 'triangle',\n      avgAccuracy: 62,\n      avgMove: 8.7,\n    },\n\n    // Wedge Patterns\n    {\n      id: 'rising-wedge',\n      name: 'Rising Wedge',\n      type: 'reversal',\n      category: 'wedge',\n      avgAccuracy: 76,\n      avgMove: 13.1,\n    },\n    {\n      id: 'falling-wedge',\n      name: 'Falling Wedge',\n      type: 'reversal',\n      category: 'wedge',\n      avgAccuracy: 79,\n      avgMove: 14.7,\n    },\n    {\n      id: 'broadening-wedge',\n      name: 'Broadening Wedge',\n      type: 'reversal',\n      category: 'wedge',\n      avgAccuracy: 67,\n      avgMove: 10.3,\n    },\n\n    // Rectangle Patterns\n    {\n      id: 'rectangle-top',\n      name: 'Rectangle Top',\n      type: 'continuation',\n      category: 'rectangle',\n      avgAccuracy: 73,\n      avgMove: 9.8,\n    },\n    {\n      id: 'rectangle-bottom',\n      name: 'Rectangle Bottom',\n      type: 'continuation',\n      category: 'rectangle',\n      avgAccuracy: 74,\n      avgMove: 10.1,\n    },\n\n    // Diamond Patterns\n    {\n      id: 'diamond-top',\n      name: 'Diamond Top',\n      type: 'reversal',\n      category: 'diamond',\n      avgAccuracy: 64,\n      avgMove: 8.9,\n    },\n    {\n      id: 'diamond-bottom',\n      name: 'Diamond Bottom',\n      type: 'reversal',\n      category: 'diamond',\n      avgAccuracy: 66,\n      avgMove: 9.4,\n    },\n\n    // Gap Patterns\n    {\n      id: 'breakaway-gap',\n      name: 'Breakaway Gap',\n      type: 'continuation',\n      category: 'gap',\n      avgAccuracy: 77,\n      avgMove: 12.3,\n    },\n    {\n      id: 'runaway-gap',\n      name: 'Runaway Gap',\n      type: 'continuation',\n      category: 'gap',\n      avgAccuracy: 75,\n      avgMove: 11.7,\n    },\n    {\n      id: 'exhaustion-gap',\n      name: 'Exhaustion Gap',\n      type: 'reversal',\n      category: 'gap',\n      avgAccuracy: 71,\n      avgMove: 9.8,\n    },\n    {\n      id: 'common-gap',\n      name: 'Common Gap',\n      type: 'neutral',\n      category: 'gap',\n      avgAccuracy: 55,\n      avgMove: 3.2,\n    },\n\n    // Candlestick Patterns - Single Candle\n    {\n      id: 'doji',\n      name: 'Doji',\n      type: 'reversal',\n      category: 'single-candle',\n      avgAccuracy: 58,\n      avgMove: 4.2,\n    },\n    {\n      id: 'long-legged-doji',\n      name: 'Long-Legged Doji',\n      type: 'reversal',\n      category: 'single-candle',\n      avgAccuracy: 62,\n      avgMove: 5.1,\n    },\n    {\n      id: 'dragonfly-doji',\n      name: 'Dragonfly Doji',\n      type: 'reversal',\n      category: 'single-candle',\n      avgAccuracy: 65,\n      avgMove: 6.3,\n    },\n    {\n      id: 'gravestone-doji',\n      name: 'Gravestone Doji',\n      type: 'reversal',\n      category: 'single-candle',\n      avgAccuracy: 67,\n      avgMove: 6.8,\n    },\n    {\n      id: 'hammer',\n      name: 'Hammer',\n      type: 'reversal',\n      category: 'single-candle',\n      avgAccuracy: 72,\n      avgMove: 8.4,\n    },\n    {\n      id: 'inverted-hammer',\n      name: 'Inverted Hammer',\n      type: 'reversal',\n      category: 'single-candle',\n      avgAccuracy: 69,\n      avgMove: 7.9,\n    },\n    {\n      id: 'hanging-man',\n      name: 'Hanging Man',\n      type: 'reversal',\n      category: 'single-candle',\n      avgAccuracy: 71,\n      avgMove: 8.1,\n    },\n    {\n      id: 'shooting-star',\n      name: 'Shooting Star',\n      type: 'reversal',\n      category: 'single-candle',\n      avgAccuracy: 73,\n      avgMove: 8.7,\n    },\n    {\n      id: 'spinning-top',\n      name: 'Spinning Top',\n      type: 'indecision',\n      category: 'single-candle',\n      avgAccuracy: 52,\n      avgMove: 3.8,\n    },\n    {\n      id: 'marubozu-white',\n      name: 'White Marubozu',\n      type: 'continuation',\n      category: 'single-candle',\n      avgAccuracy: 68,\n      avgMove: 7.2,\n    },\n    {\n      id: 'marubozu-black',\n      name: 'Black Marubozu',\n      type: 'continuation',\n      category: 'single-candle',\n      avgAccuracy: 67,\n      avgMove: 7.0,\n    },\n\n    // Candlestick Patterns - Two Candle\n    {\n      id: 'bullish-engulfing',\n      name: 'Bullish Engulfing',\n      type: 'reversal',\n      category: 'two-candle',\n      avgAccuracy: 78,\n      avgMove: 11.2,\n    },\n    {\n      id: 'bearish-engulfing',\n      name: 'Bearish Engulfing',\n      type: 'reversal',\n      category: 'two-candle',\n      avgAccuracy: 76,\n      avgMove: 10.8,\n    },\n    {\n      id: 'piercing-pattern',\n      name: 'Piercing Pattern',\n      type: 'reversal',\n      category: 'two-candle',\n      avgAccuracy: 74,\n      avgMove: 9.6,\n    },\n    {\n      id: 'dark-cloud-cover',\n      name: 'Dark Cloud Cover',\n      type: 'reversal',\n      category: 'two-candle',\n      avgAccuracy: 72,\n      avgMove: 9.2,\n    },\n    {\n      id: 'tweezer-tops',\n      name: 'Tweezer Tops',\n      type: 'reversal',\n      category: 'two-candle',\n      avgAccuracy: 65,\n      avgMove: 6.8,\n    },\n    {\n      id: 'tweezer-bottoms',\n      name: 'Tweezer Bottoms',\n      type: 'reversal',\n      category: 'two-candle',\n      avgAccuracy: 67,\n      avgMove: 7.1,\n    },\n    {\n      id: 'harami-bullish',\n      name: 'Bullish Harami',\n      type: 'reversal',\n      category: 'two-candle',\n      avgAccuracy: 69,\n      avgMove: 7.8,\n    },\n    {\n      id: 'harami-bearish',\n      name: 'Bearish Harami',\n      type: 'reversal',\n      category: 'two-candle',\n      avgAccuracy: 68,\n      avgMove: 7.5,\n    },\n    {\n      id: 'harami-cross-bullish',\n      name: 'Bullish Harami Cross',\n      type: 'reversal',\n      category: 'two-candle',\n      avgAccuracy: 71,\n      avgMove: 8.3,\n    },\n    {\n      id: 'harami-cross-bearish',\n      name: 'Bearish Harami Cross',\n      type: 'reversal',\n      category: 'two-candle',\n      avgAccuracy: 70,\n      avgMove: 8.0,\n    },\n\n    // Candlestick Patterns - Three Candle\n    {\n      id: 'morning-star',\n      name: 'Morning Star',\n      type: 'reversal',\n      category: 'three-candle',\n      avgAccuracy: 83,\n      avgMove: 14.2,\n    },\n    {\n      id: 'evening-star',\n      name: 'Evening Star',\n      type: 'reversal',\n      category: 'three-candle',\n      avgAccuracy: 81,\n      avgMove: 13.8,\n    },\n    {\n      id: 'morning-doji-star',\n      name: 'Morning Doji Star',\n      type: 'reversal',\n      category: 'three-candle',\n      avgAccuracy: 85,\n      avgMove: 15.1,\n    },\n    {\n      id: 'evening-doji-star',\n      name: 'Evening Doji Star',\n      type: 'reversal',\n      category: 'three-candle',\n      avgAccuracy: 84,\n      avgMove: 14.7,\n    },\n    {\n      id: 'three-white-soldiers',\n      name: 'Three White Soldiers',\n      type: 'continuation',\n      category: 'three-candle',\n      avgAccuracy: 79,\n      avgMove: 12.4,\n    },\n    {\n      id: 'three-black-crows',\n      name: 'Three Black Crows',\n      type: 'continuation',\n      category: 'three-candle',\n      avgAccuracy: 77,\n      avgMove: 11.9,\n    },\n    {\n      id: 'three-inside-up',\n      name: 'Three Inside Up',\n      type: 'reversal',\n      category: 'three-candle',\n      avgAccuracy: 75,\n      avgMove: 10.6,\n    },\n    {\n      id: 'three-inside-down',\n      name: 'Three Inside Down',\n      type: 'reversal',\n      category: 'three-candle',\n      avgAccuracy: 74,\n      avgMove: 10.2,\n    },\n    {\n      id: 'three-outside-up',\n      name: 'Three Outside Up',\n      type: 'reversal',\n      category: 'three-candle',\n      avgAccuracy: 76,\n      avgMove: 11.1,\n    },\n    {\n      id: 'three-outside-down',\n      name: 'Three Outside Down',\n      type: 'reversal',\n      category: 'three-candle',\n      avgAccuracy: 75,\n      avgMove: 10.8,\n    },\n    {\n      id: 'abandoned-baby-bullish',\n      name: 'Abandoned Baby Bullish',\n      type: 'reversal',\n      category: 'three-candle',\n      avgAccuracy: 87,\n      avgMove: 16.3,\n    },\n    {\n      id: 'abandoned-baby-bearish',\n      name: 'Abandoned Baby Bearish',\n      type: 'reversal',\n      category: 'three-candle',\n      avgAccuracy: 86,\n      avgMove: 15.9,\n    },\n\n    // Advanced Candlestick Patterns\n    {\n      id: 'rising-three-methods',\n      name: 'Rising Three Methods',\n      type: 'continuation',\n      category: 'advanced-candle',\n      avgAccuracy: 73,\n      avgMove: 9.4,\n    },\n    {\n      id: 'falling-three-methods',\n      name: 'Falling Three Methods',\n      type: 'continuation',\n      category: 'advanced-candle',\n      avgAccuracy: 72,\n      avgMove: 9.1,\n    },\n    {\n      id: 'upside-gap-two-crows',\n      name: 'Upside Gap Two Crows',\n      type: 'reversal',\n      category: 'advanced-candle',\n      avgAccuracy: 68,\n      avgMove: 7.8,\n    },\n    {\n      id: 'unique-three-river-bottom',\n      name: 'Unique Three River Bottom',\n      type: 'reversal',\n      category: 'advanced-candle',\n      avgAccuracy: 82,\n      avgMove: 13.7,\n    },\n    {\n      id: 'three-line-strike-bullish',\n      name: 'Three Line Strike Bullish',\n      type: 'reversal',\n      category: 'advanced-candle',\n      avgAccuracy: 84,\n      avgMove: 14.9,\n    },\n    {\n      id: 'three-line-strike-bearish',\n      name: 'Three Line Strike Bearish',\n      type: 'reversal',\n      category: 'advanced-candle',\n      avgAccuracy: 83,\n      avgMove: 14.5,\n    },\n\n    // Harmonic Patterns\n    {\n      id: 'gartley-bullish',\n      name: 'Gartley Bullish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 89,\n      avgMove: 18.7,\n    },\n    {\n      id: 'gartley-bearish',\n      name: 'Gartley Bearish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 88,\n      avgMove: 18.2,\n    },\n    {\n      id: 'butterfly-bullish',\n      name: 'Butterfly Bullish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 87,\n      avgMove: 17.4,\n    },\n    {\n      id: 'butterfly-bearish',\n      name: 'Butterfly Bearish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 86,\n      avgMove: 17.0,\n    },\n    {\n      id: 'bat-bullish',\n      name: 'Bat Bullish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 85,\n      avgMove: 16.8,\n    },\n    {\n      id: 'bat-bearish',\n      name: 'Bat Bearish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 84,\n      avgMove: 16.3,\n    },\n    {\n      id: 'crab-bullish',\n      name: 'Crab Bullish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 91,\n      avgMove: 20.1,\n    },\n    {\n      id: 'crab-bearish',\n      name: 'Crab Bearish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 90,\n      avgMove: 19.7,\n    },\n    {\n      id: 'shark-bullish',\n      name: 'Shark Bullish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 88,\n      avgMove: 18.9,\n    },\n    {\n      id: 'shark-bearish',\n      name: 'Shark Bearish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 87,\n      avgMove: 18.5,\n    },\n    {\n      id: 'cypher-bullish',\n      name: 'Cypher Bullish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 86,\n      avgMove: 17.6,\n    },\n    {\n      id: 'cypher-bearish',\n      name: 'Cypher Bearish',\n      type: 'reversal',\n      category: 'harmonic',\n      avgAccuracy: 85,\n      avgMove: 17.2,\n    },\n\n    // Elliott Wave Patterns\n    {\n      id: 'elliott-wave-1',\n      name: 'Elliott Wave 1',\n      type: 'impulse',\n      category: 'elliott',\n      avgAccuracy: 76,\n      avgMove: 12.8,\n    },\n    {\n      id: 'elliott-wave-3',\n      name: 'Elliott Wave 3',\n      type: 'impulse',\n      category: 'elliott',\n      avgAccuracy: 82,\n      avgMove: 16.4,\n    },\n    {\n      id: 'elliott-wave-5',\n      name: 'Elliott Wave 5',\n      type: 'impulse',\n      category: 'elliott',\n      avgAccuracy: 78,\n      avgMove: 13.9,\n    },\n    {\n      id: 'elliott-wave-a',\n      name: 'Elliott Wave A',\n      type: 'corrective',\n      category: 'elliott',\n      avgAccuracy: 71,\n      avgMove: 9.7,\n    },\n    {\n      id: 'elliott-wave-c',\n      name: 'Elliott Wave C',\n      type: 'corrective',\n      category: 'elliott',\n      avgAccuracy: 74,\n      avgMove: 11.2,\n    },\n\n    // Fibonacci Patterns\n    {\n      id: 'fib-retracement-382',\n      name: 'Fibonacci 38.2% Retracement',\n      type: 'support',\n      category: 'fibonacci',\n      avgAccuracy: 73,\n      avgMove: 8.9,\n    },\n    {\n      id: 'fib-retracement-500',\n      name: 'Fibonacci 50% Retracement',\n      type: 'support',\n      category: 'fibonacci',\n      avgAccuracy: 76,\n      avgMove: 10.1,\n    },\n    {\n      id: 'fib-retracement-618',\n      name: 'Fibonacci 61.8% Retracement',\n      type: 'support',\n      category: 'fibonacci',\n      avgAccuracy: 79,\n      avgMove: 11.8,\n    },\n    {\n      id: 'fib-extension-1618',\n      name: 'Fibonacci 161.8% Extension',\n      type: 'target',\n      category: 'fibonacci',\n      avgAccuracy: 81,\n      avgMove: 14.3,\n    },\n    {\n      id: 'fib-extension-2618',\n      name: 'Fibonacci 261.8% Extension',\n      type: 'target',\n      category: 'fibonacci',\n      avgAccuracy: 77,\n      avgMove: 18.7,\n    },\n\n    // Volume Patterns\n    {\n      id: 'volume-breakout',\n      name: 'Volume Breakout',\n      type: 'continuation',\n      category: 'volume',\n      avgAccuracy: 84,\n      avgMove: 15.6,\n    },\n    {\n      id: 'volume-climax',\n      name: 'Volume Climax',\n      type: 'reversal',\n      category: 'volume',\n      avgAccuracy: 79,\n      avgMove: 12.4,\n    },\n    {\n      id: 'volume-dry-up',\n      name: 'Volume Dry Up',\n      type: 'continuation',\n      category: 'volume',\n      avgAccuracy: 71,\n      avgMove: 8.7,\n    },\n    {\n      id: 'on-balance-volume-divergence',\n      name: 'OBV Divergence',\n      type: 'reversal',\n      category: 'volume',\n      avgAccuracy: 75,\n      avgMove: 10.9,\n    },\n\n    // Momentum Patterns\n    {\n      id: 'rsi-divergence-bullish',\n      name: 'RSI Bullish Divergence',\n      type: 'reversal',\n      category: 'momentum',\n      avgAccuracy: 77,\n      avgMove: 11.6,\n    },\n    {\n      id: 'rsi-divergence-bearish',\n      name: 'RSI Bearish Divergence',\n      type: 'reversal',\n      category: 'momentum',\n      avgAccuracy: 75,\n      avgMove: 11.2,\n    },\n    {\n      id: 'macd-divergence-bullish',\n      name: 'MACD Bullish Divergence',\n      type: 'reversal',\n      category: 'momentum',\n      avgAccuracy: 79,\n      avgMove: 12.8,\n    },\n    {\n      id: 'macd-divergence-bearish',\n      name: 'MACD Bearish Divergence',\n      type: 'reversal',\n      category: 'momentum',\n      avgAccuracy: 78,\n      avgMove: 12.4,\n    },\n    {\n      id: 'stochastic-divergence',\n      name: 'Stochastic Divergence',\n      type: 'reversal',\n      category: 'momentum',\n      avgAccuracy: 72,\n      avgMove: 9.3,\n    },\n\n    // Support/Resistance Patterns\n    {\n      id: 'horizontal-support',\n      name: 'Horizontal Support',\n      type: 'support',\n      category: 'sr',\n      avgAccuracy: 68,\n      avgMove: 7.4,\n    },\n    {\n      id: 'horizontal-resistance',\n      name: 'Horizontal Resistance',\n      type: 'resistance',\n      category: 'sr',\n      avgAccuracy: 69,\n      avgMove: 7.8,\n    },\n    {\n      id: 'trendline-support',\n      name: 'Trendline Support',\n      type: 'support',\n      category: 'sr',\n      avgAccuracy: 74,\n      avgMove: 9.6,\n    },\n    {\n      id: 'trendline-resistance',\n      name: 'Trendline Resistance',\n      type: 'resistance',\n      category: 'sr',\n      avgAccuracy: 75,\n      avgMove: 10.1,\n    },\n    {\n      id: 'dynamic-support',\n      name: 'Dynamic Support',\n      type: 'support',\n      category: 'sr',\n      avgAccuracy: 71,\n      avgMove: 8.2,\n    },\n    {\n      id: 'dynamic-resistance',\n      name: 'Dynamic Resistance',\n      type: 'resistance',\n      category: 'sr',\n      avgAccuracy: 72,\n      avgMove: 8.7,\n    },\n\n    // Breakout Patterns\n    {\n      id: 'resistance-breakout',\n      name: 'Resistance Breakout',\n      type: 'breakout',\n      category: 'breakout',\n      avgAccuracy: 81,\n      avgMove: 14.7,\n    },\n    {\n      id: 'support-breakdown',\n      name: 'Support Breakdown',\n      type: 'breakdown',\n      category: 'breakout',\n      avgAccuracy: 79,\n      avgMove: 13.9,\n    },\n    {\n      id: 'channel-breakout-up',\n      name: 'Channel Breakout Up',\n      type: 'breakout',\n      category: 'breakout',\n      avgAccuracy: 77,\n      avgMove: 12.3,\n    },\n    {\n      id: 'channel-breakout-down',\n      name: 'Channel Breakout Down',\n      type: 'breakdown',\n      category: 'breakout',\n      avgAccuracy: 76,\n      avgMove: 11.8,\n    },\n\n    // Trend Patterns\n    {\n      id: 'uptrend-continuation',\n      name: 'Uptrend Continuation',\n      type: 'continuation',\n      category: 'trend',\n      avgAccuracy: 73,\n      avgMove: 9.8,\n    },\n    {\n      id: 'downtrend-continuation',\n      name: 'Downtrend Continuation',\n      type: 'continuation',\n      category: 'trend',\n      avgAccuracy: 72,\n      avgMove: 9.4,\n    },\n    {\n      id: 'trend-reversal-up',\n      name: 'Trend Reversal Up',\n      type: 'reversal',\n      category: 'trend',\n      avgAccuracy: 69,\n      avgMove: 8.6,\n    },\n    {\n      id: 'trend-reversal-down',\n      name: 'Trend Reversal Down',\n      type: 'reversal',\n      category: 'trend',\n      avgAccuracy: 68,\n      avgMove: 8.2,\n    },\n\n    // Complex Patterns\n    {\n      id: 'island-reversal-top',\n      name: 'Island Reversal Top',\n      type: 'reversal',\n      category: 'complex',\n      avgAccuracy: 85,\n      avgMove: 16.2,\n    },\n    {\n      id: 'island-reversal-bottom',\n      name: 'Island Reversal Bottom',\n      type: 'reversal',\n      category: 'complex',\n      avgAccuracy: 84,\n      avgMove: 15.8,\n    },\n    {\n      id: 'rounded-top',\n      name: 'Rounded Top',\n      type: 'reversal',\n      category: 'complex',\n      avgAccuracy: 71,\n      avgMove: 9.7,\n    },\n    {\n      id: 'rounded-bottom',\n      name: 'Rounded Bottom',\n      type: 'reversal',\n      category: 'complex',\n      avgAccuracy: 73,\n      avgMove: 10.4,\n    },\n    {\n      id: 'v-top',\n      name: 'V-Top',\n      type: 'reversal',\n      category: 'complex',\n      avgAccuracy: 67,\n      avgMove: 8.9,\n    },\n    {\n      id: 'v-bottom',\n      name: 'V-Bottom',\n      type: 'reversal',\n      category: 'complex',\n      avgAccuracy: 69,\n      avgMove: 9.6,\n    },\n\n    // Specialized Patterns\n    {\n      id: 'box-pattern',\n      name: 'Box Pattern',\n      type: 'continuation',\n      category: 'specialized',\n      avgAccuracy: 65,\n      avgMove: 7.1,\n    },\n    {\n      id: 'horn-top',\n      name: 'Horn Top',\n      type: 'reversal',\n      category: 'specialized',\n      avgAccuracy: 74,\n      avgMove: 10.8,\n    },\n    {\n      id: 'horn-bottom',\n      name: 'Horn Bottom',\n      type: 'reversal',\n      category: 'specialized',\n      avgAccuracy: 76,\n      avgMove: 11.4,\n    },\n    {\n      id: 'spike-reversal',\n      name: 'Spike Reversal',\n      type: 'reversal',\n      category: 'specialized',\n      avgAccuracy: 78,\n      avgMove: 12.7,\n    },\n\n    // Market Structure Patterns\n    {\n      id: 'higher-highs-lows',\n      name: 'Higher Highs & Lows',\n      type: 'continuation',\n      category: 'structure',\n      avgAccuracy: 75,\n      avgMove: 10.3,\n    },\n    {\n      id: 'lower-highs-lows',\n      name: 'Lower Highs & Lows',\n      type: 'continuation',\n      category: 'structure',\n      avgAccuracy: 74,\n      avgMove: 9.9,\n    },\n    {\n      id: 'break-of-structure-bullish',\n      name: 'Break of Structure Bullish',\n      type: 'reversal',\n      category: 'structure',\n      avgAccuracy: 82,\n      avgMove: 15.1,\n    },\n    {\n      id: 'break-of-structure-bearish',\n      name: 'Break of Structure Bearish',\n      type: 'reversal',\n      category: 'structure',\n      avgAccuracy: 81,\n      avgMove: 14.7,\n    },\n  ];\n\n  useEffect(() => {\n    generatePatternResults();\n    generateTradingSignals();\n    calculateHistoricalAccuracy();\n\n    const interval = setInterval(() => {\n      generatePatternResults();\n      generateTradingSignals();\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [scanSettings]);\n\n  const generatePatternResults = () => {\n    const symbols = [\n      'AAPL',\n      'MSFT',\n      'GOOGL',\n      'TSLA',\n      'NVDA',\n      'META',\n      'AMZN',\n      'NFLX',\n      'CRM',\n      'PLTR',\n      'COIN',\n      'RBLX',\n      'SNOW',\n      'ZM',\n      'ROKU',\n      'SHOP',\n      'SQ',\n      'PYPL',\n      'ADBE',\n      'ORCL',\n      'EURUSD',\n      'GBPUSD',\n      'USDJPY',\n      'BTCUSD',\n      'ETHUSD',\n      'GOLD',\n      'SILVER',\n      'OIL',\n    ];\n\n    const results = symbols.slice(0, 15).map(symbol => {\n      const pattern = chartPatterns[Math.floor(Math.random() * chartPatterns.length)];\n      const currentPrice = 50 + Math.random() * 450;\n      const probability = Math.max(scanSettings.minProbability, 60 + Math.random() * 40);\n      const historicalMatches = Math.floor(Math.random() * 100) + 20;\n      const successRate = 60 + Math.random() * 35;\n      const avgMove = pattern.avgMove + (Math.random() - 0.5) * 5;\n      const timeToTarget = Math.floor(Math.random() * 30) + 5;\n      const confidence = probability * (successRate / 100) * 0.9;\n\n      const direction =\n        pattern.type === 'reversal' ? (Math.random() > 0.5 ? 'bullish' : 'bearish') : 'bullish';\n      const entryPrice = currentPrice * (1 + (Math.random() - 0.5) * 0.02);\n      const targetPrice =\n        direction === 'bullish'\n          ? entryPrice * (1 + avgMove / 100)\n          : entryPrice * (1 - avgMove / 100);\n      const stopLoss = direction === 'bullish' ? entryPrice * 0.95 : entryPrice * 1.05;\n\n      return {\n        symbol,\n        pattern: pattern.name,\n        patternId: pattern.id,\n        patternType: pattern.type,\n        category: pattern.category,\n        currentPrice,\n        entryPrice,\n        targetPrice,\n        stopLoss,\n        probability,\n        historicalMatches,\n        successRate,\n        avgMove,\n        timeToTarget,\n        confidence,\n        direction,\n        riskReward: Math.abs(targetPrice - entryPrice) / Math.abs(entryPrice - stopLoss),\n        volume: Math.random() * 50 + 10,\n        expectedMove: avgMove,\n        timeframe: scanSettings.timeframe,\n        detectedAt: new Date(),\n        status: 'active',\n        marketCap: Math.random() * 1000000000000 + 1000000000,\n        sector: ['Technology', 'Healthcare', 'Finance', 'Energy', 'Consumer'][\n          Math.floor(Math.random() * 5)\n        ],\n        assetClass: symbol.includes('USD')\n          ? 'forex'\n          : symbol.includes('BTC') || symbol.includes('ETH')\n            ? 'crypto'\n            : 'stocks',\n        strength: probability,\n      };\n    });\n\n    setPatternMatches(results.filter(r => r.probability >= scanSettings.minProbability));\n  };\n\n  const generateTradingSignals = () => {\n    const signals = [\n      {\n        id: 1,\n        symbol: 'AAPL',\n        signal: 'BUY',\n        pattern: 'Morning Star',\n        category: 'three-candle',\n        probability: 87,\n        currentPrice: 175.43,\n        entryZone: [174.0, 176.0],\n        target: 195.0,\n        stopLoss: 168.0,\n        timeframe: '1D',\n        detectedAt: new Date(),\n        status: 'active',\n        confidence: 87,\n        riskReward: 2.8,\n        avgDaysToTarget: 18,\n      },\n      {\n        id: 2,\n        symbol: 'TSLA',\n        signal: 'SELL',\n        pattern: 'Evening Star',\n        category: 'three-candle',\n        probability: 84,\n        currentPrice: 248.5,\n        entryZone: [250.0, 252.0],\n        target: 220.0,\n        stopLoss: 265.0,\n        timeframe: '1D',\n        detectedAt: new Date(),\n        status: 'active',\n        confidence: 84,\n        riskReward: 2.1,\n        avgDaysToTarget: 25,\n      },\n      {\n        id: 3,\n        symbol: 'NVDA',\n        signal: 'BUY',\n        pattern: 'Gartley Bullish',\n        category: 'harmonic',\n        probability: 91,\n        currentPrice: 875.28,\n        entryZone: [870.0, 880.0],\n        target: 1050.0,\n        stopLoss: 820.0,\n        timeframe: '1D',\n        detectedAt: new Date(),\n        status: 'active',\n        confidence: 91,\n        riskReward: 3.2,\n        avgDaysToTarget: 12,\n      },\n      {\n        id: 4,\n        symbol: 'BTCUSD',\n        signal: 'BUY',\n        pattern: 'Bullish Engulfing',\n        category: 'two-candle',\n        probability: 82,\n        currentPrice: 43250,\n        entryZone: [43000, 43500],\n        target: 48000,\n        stopLoss: 41000,\n        timeframe: '4H',\n        detectedAt: new Date(),\n        status: 'active',\n        confidence: 82,\n        riskReward: 2.1,\n        avgDaysToTarget: 8,\n      },\n    ];\n\n    setTradingSignals(signals);\n  };\n\n  const calculateHistoricalAccuracy = () => {\n    const accuracy: { [key: string]: any } = {};\n    chartPatterns.forEach(pattern => {\n      accuracy[pattern.id] = {\n        totalOccurrences: Math.floor(Math.random() * 500) + 100,\n        successfulTrades: Math.floor(Math.random() * 300) + 60,\n        avgReturn: (Math.random() - 0.3) * 20 + 5,\n        avgDaysToTarget: Math.floor(Math.random() * 30) + 10,\n        bestPerformer: 'AAPL',\n        worstPerformer: 'TSLA',\n      };\n    });\n    setHistoricalAccuracy(accuracy);\n  };\n\n  const getPatternCategories = () => {\n    const categories = [...new Set(chartPatterns.map(p => p.category))];\n    return categories;\n  };\n\n  const getSignalColor = (signal: string) => {\n    return signal === 'BUY' ? 'text-green-400' : 'text-red-400';\n  };\n\n  const getStrengthColor = (strength: string) => {\n    switch (strength) {\n      case 'Very Strong':\n        return 'bg-red-500';\n      case 'Strong':\n        return 'bg-orange-500';\n      case 'Medium':\n        return 'bg-yellow-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    const colors: Record<string, string> = {\n      classic: 'bg-red-500/20 text-red-300 border-red-500/30',\n      flag: 'bg-orange-500/20 text-orange-300 border-orange-500/30',\n      triangle: 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30',\n      wedge: 'bg-green-500/20 text-green-300 border-green-500/30',\n      harmonic: 'bg-purple-500/20 text-purple-300 border-purple-500/30',\n      'single-candle': 'bg-blue-500/20 text-blue-300 border-blue-500/30',\n      'two-candle': 'bg-indigo-500/20 text-indigo-300 border-indigo-500/30',\n      'three-candle': 'bg-pink-500/20 text-pink-300 border-pink-500/30',\n    };\n    return colors[category] || 'bg-gray-500/20 text-gray-300 border-gray-500/30';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Advanced Pattern Scanner Controls */}\n      <Card className=\"bg-gray-900/90 border-red-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <Brain className=\"h-6 w-6 mr-2 text-red-400\" />\n            Advanced Pattern Recognition Scanner - 150+ Patterns\n            <Badge className=\"ml-3 bg-gradient-to-r from-red-500 to-orange-600\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              AI Powered\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-6 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-gray-200 text-sm font-medium\">Asset Class</label>\n              <Select\n                value={scanSettings.assetClass}\n                onValueChange={value => setScanSettings(prev => ({ ...prev, assetClass: value }))}\n              >\n                <SelectTrigger className=\"bg-gray-800/30 border-red-500/30 text-gray-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-800 border-gray-600\">\n                  <SelectItem value=\"all\">All Assets</SelectItem>\n                  <SelectItem value=\"stocks\">US Stocks & ETFs</SelectItem>\n                  <SelectItem value=\"forex\">Forex</SelectItem>\n                  <SelectItem value=\"crypto\">Cryptocurrency</SelectItem>\n                  <SelectItem value=\"futures\">Futures</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-gray-200 text-sm font-medium\">Timeframe</label>\n              <Select\n                value={scanSettings.timeframe}\n                onValueChange={value => setScanSettings(prev => ({ ...prev, timeframe: value }))}\n              >\n                <SelectTrigger className=\"bg-gray-800/30 border-red-500/30 text-gray-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-800 border-gray-600\">\n                  <SelectItem value=\"1M\">1 Minute</SelectItem>\n                  <SelectItem value=\"5M\">5 Minutes</SelectItem>\n                  <SelectItem value=\"15M\">15 Minutes</SelectItem>\n                  <SelectItem value=\"1H\">1 Hour</SelectItem>\n                  <SelectItem value=\"4H\">4 Hours</SelectItem>\n                  <SelectItem value=\"1D\">1 Day</SelectItem>\n                  <SelectItem value=\"1W\">1 Week</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-gray-200 text-sm font-medium\">Lookback Period</label>\n              <Select\n                value={scanSettings.lookbackPeriod.toString()}\n                onValueChange={value =>\n                  setScanSettings(prev => ({ ...prev, lookbackPeriod: Number.parseInt(value) }))\n                }\n              >\n                <SelectTrigger className=\"bg-gray-800/30 border-red-500/30 text-gray-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-800 border-gray-600\">\n                  <SelectItem value=\"63\">3 Months</SelectItem>\n                  <SelectItem value=\"126\">6 Months</SelectItem>\n                  <SelectItem value=\"252\">1 Year</SelectItem>\n                  <SelectItem value=\"504\">2 Years</SelectItem>\n                  <SelectItem value=\"1260\">5 Years</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-gray-200 text-sm font-medium\">Min Probability</label>\n              <Select\n                value={scanSettings.minProbability.toString()}\n                onValueChange={value =>\n                  setScanSettings(prev => ({ ...prev, minProbability: Number.parseInt(value) }))\n                }\n              >\n                <SelectTrigger className=\"bg-gray-800/30 border-red-500/30 text-gray-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-800 border-gray-600\">\n                  <SelectItem value=\"60\">60%</SelectItem>\n                  <SelectItem value=\"70\">70%</SelectItem>\n                  <SelectItem value=\"80\">80%</SelectItem>\n                  <SelectItem value=\"90\">90%</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-gray-200 text-sm font-medium\">Min Volume</label>\n              <Input\n                type=\"number\"\n                value={scanSettings.minVolume}\n                onChange={e =>\n                  setScanSettings(prev => ({ ...prev, minVolume: Number.parseInt(e.target.value) }))\n                }\n                className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                placeholder=\"Min Volume\"\n              />\n            </div>\n\n            <div className=\"flex items-end\">\n              <Button\n                onClick={() => {\n                  generatePatternResults();\n                  generateTradingSignals();\n                }}\n                className=\"w-full bg-gradient-to-r from-red-600 to-orange-700 hover:from-red-700 hover:to-orange-800\"\n              >\n                <Search className=\"h-4 w-4 mr-2\" />\n                Scan All Patterns\n              </Button>\n            </div>\n          </div>\n\n          {/* Pattern Categories */}\n          <div className=\"mt-6\">\n            <h4 className=\"text-gray-200 font-semibold mb-3\">\n              Pattern Categories ({chartPatterns.length} Total)\n            </h4>\n            <div className=\"flex flex-wrap gap-2\">\n              {getPatternCategories().map(category => {\n                const count = chartPatterns.filter(p => p.category === category).length;\n                return (\n                  <Badge key={category} className={getCategoryColor(category)}>\n                    {category.replace('-', ' ').toUpperCase()} ({count})\n                  </Badge>\n                );\n              })}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Live Trading Signals */}\n      <Card className=\"bg-gray-900/90 border-green-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <Target className=\"h-6 w-6 mr-2 text-green-400\" />\n            Live Trading Signals - Precision Entry/Exit Points\n            <Badge className=\"ml-3 bg-gradient-to-r from-green-500 to-emerald-600 animate-pulse\">\n              🔴 LIVE\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {tradingSignals.map((signal: any) => (\n              <div\n                key={signal.id}\n                className=\"p-4 bg-gray-800/50 rounded-lg border border-green-500/20 hover:border-green-500/40 transition-all\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-gray-100 font-bold text-lg\">{signal.symbol}</span>\n                        <Badge className={getSignalColor(signal.signal)}>\n                          {signal.signal === 'BUY' ? (\n                            <ArrowUp className=\"h-3 w-3 mr-1\" />\n                          ) : (\n                            <ArrowDown className=\"h-3 w-3 mr-1\" />\n                          )}\n                          {signal.signal}\n                        </Badge>\n                        <Badge className={getStrengthColor(signal.strength)}>\n                          {signal.strength}\n                        </Badge>\n                        <Badge className={getCategoryColor(signal.category)}>\n                          {signal.category}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400\">{signal.pattern}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Current Price</p>\n                      <p className=\"text-gray-100 font-semibold\">\n                        ${signal.currentPrice.toFixed(2)}\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Entry Zone</p>\n                      <p className=\"text-red-400 font-semibold\">\n                        ${signal.entryZone[0].toFixed(2)} - ${signal.entryZone[1].toFixed(2)}\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Target</p>\n                      <p className=\"text-green-400 font-semibold\">${signal.target.toFixed(2)}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Stop Loss</p>\n                      <p className=\"text-red-400 font-semibold\">${signal.stopLoss.toFixed(2)}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Probability</p>\n                      <div className=\"flex items-center\">\n                        <span className=\"text-red-400 font-bold\">{signal.probability}%</span>\n                        <Star className=\"h-3 w-3 text-yellow-400 ml-1\" />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <div className=\"space-y-1\">\n                      <Badge variant=\"outline\" className=\"border-blue-500/30 text-blue-400\">\n                        R/R: {signal.riskReward.toFixed(1)}\n                      </Badge>\n                      <p className=\"text-xs text-gray-400\">\n                        Accuracy: {signal.historicalAccuracy}%\n                      </p>\n                      <p className=\"text-xs text-gray-400\">Avg Days: {signal.avgDaysToTarget}</p>\n                      <p className=\"text-xs text-gray-400\">TF: {signal.timeframe}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pattern Recognition Results */}\n      <Card className=\"bg-gray-900/90 border-red-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <BarChart3 className=\"h-6 w-6 mr-2 text-red-400\" />\n            Advanced Pattern Recognition Results ({patternMatches.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {patternMatches.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Brain className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-400\">\n                No patterns found matching your criteria. Try adjusting the filters.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {patternMatches.map((result: PatternMatch, index: number) => (\n                <div\n                  key={index}\n                  className=\"p-4 bg-gray-800/30 rounded-lg border border-red-500/20 hover:border-red-500/40 transition-all\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-gray-100 font-bold text-lg\">{result.symbol}</span>\n                          <Badge\n                            className={\n                              result.direction === 'bullish' ? 'bg-green-500' : 'bg-red-500'\n                            }\n                          >\n                            {result.pattern}\n                          </Badge>\n                          <Badge className={getCategoryColor(result.category)}>\n                            {result.category}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"border-purple-500/30 text-purple-400\">\n                            {result.patternType}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"border-blue-500/30 text-blue-400\">\n                            {result.assetClass}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-400\">\n                          {result.historicalMatches} historical matches •{' '}\n                          {(result.successRate || 0).toFixed(1)}% success rate\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-gray-400 text-sm\">Current Price</p>\n                        <p className=\"text-gray-100 font-semibold\">\n                          ${result.currentPrice.toFixed(2)}\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-gray-400 text-sm\">Entry</p>\n                        <p className=\"text-red-400 font-semibold\">\n                          ${result.entryPrice.toFixed(2)}\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-gray-400 text-sm\">Target</p>\n                        <p className=\"text-green-400 font-semibold\">\n                          ${result.targetPrice.toFixed(2)}\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-gray-400 text-sm\">Probability</p>\n                        <div className=\"flex items-center\">\n                          <span className=\"text-red-400 font-bold\">\n                            {result.probability.toFixed(0)}%\n                          </span>\n                          <Star className=\"h-3 w-3 text-yellow-400 ml-1\" />\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"text-right\">\n                      <div className=\"space-y-1\">\n                        <Badge className=\"bg-gradient-to-r from-red-500 to-orange-600\">\n                          {result.confidence.toFixed(0)}% Confidence\n                        </Badge>\n                        <p className=\"text-xs text-gray-400\">R/R: {result.riskReward.toFixed(1)}</p>\n                        <p className=\"text-xs text-gray-400\">Target: {result.timeToTarget} days</p>\n                        <p className=\"text-xs text-gray-400\">\n                          Move: {(result.avgMove || 0).toFixed(1)}%\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Probability Progress Bar */}\n                  <div className=\"mt-3\">\n                    <div className=\"flex justify-between text-xs text-gray-400 mb-1\">\n                      <span>Historical Probability</span>\n                      <span>{result.probability.toFixed(1)}%</span>\n                    </div>\n                    <Progress value={result.probability} className=\"h-2\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Historical Pattern Accuracy by Category */}\n      <Card className=\"bg-gray-900/90 border-red-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <Activity className=\"h-6 w-6 mr-2 text-purple-400\" />\n            Historical Pattern Accuracy by Category\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {getPatternCategories()\n              .slice(0, 8)\n              .map(category => {\n                const categoryPatterns = chartPatterns.filter(p => p.category === category);\n                const avgAccuracy =\n                  categoryPatterns.reduce((sum, p) => sum + p.avgAccuracy, 0) /\n                  categoryPatterns.length;\n                const avgMove =\n                  categoryPatterns.reduce((sum, p) => sum + p.avgMove, 0) / categoryPatterns.length;\n\n                return (\n                  <div\n                    key={category}\n                    className=\"p-4 bg-gradient-to-r from-red-500/10 to-orange-500/10 rounded-lg border border-red-500/30\"\n                  >\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <h4 className=\"text-gray-200 font-semibold\">\n                        {category.replace('-', ' ').toUpperCase()}\n                      </h4>\n                      <Badge className={getCategoryColor(category)}>\n                        {categoryPatterns.length}\n                      </Badge>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400 text-sm\">Avg Accuracy:</span>\n                        <span className=\"text-green-400 font-semibold\">\n                          {avgAccuracy.toFixed(1)}%\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400 text-sm\">Avg Move:</span>\n                        <span className=\"text-red-400 font-semibold\">{avgMove.toFixed(1)}%</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-400 text-sm\">Patterns:</span>\n                        <span className=\"text-gray-200\">{categoryPatterns.length}</span>\n                      </div>\n                    </div>\n\n                    <div className=\"mt-3\">\n                      <Progress value={avgAccuracy} className=\"h-2\" />\n                    </div>\n                  </div>\n                );\n              })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/scanners/CryptoAnalyzer.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'Button' is defined but never used.",
        "line": 4,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 16
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 94,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 94,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2556, 2559], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2556, 2559], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 119,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 119,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3545, 3548], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3545, 3548], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 137,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 137,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4135, 4138], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4135, 4138], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Bitcoin,\n  TrendingUp,\n  TrendingDown,\n  Zap,\n  Target,\n  Activity,\n  BarChart3,\n  DollarSign,\n} from 'lucide-react';\n\n// Type definitions for crypto analyzer\ninterface CryptoData {\n  symbol: string;\n  name: string;\n  price: number;\n  change24h: number;\n  volume24h: number;\n  marketCap: number;\n  aiScore: number;\n  sentiment: string;\n  fearGreedIndex: number;\n  socialVolume: number;\n  whaleActivity: string;\n}\n\ninterface DefiMetric {\n  name: string;\n  tvl: number;\n  apy: number;\n  volume24h: number;\n  change24h: number;\n  users24h: number;\n  riskScore: number;\n}\n\ninterface NftData {\n  name: string;\n  floorPrice: number;\n  volume24h: number;\n  change24h: number;\n  sales24h: number;\n  holders: number;\n}\n\ninterface OnChainMetrics {\n  btcHashRate?: number;\n  ethGasPrice?: number;\n  totalValueLocked?: number;\n  activeAddresses?: number;\n  exchangeInflows?: number;\n  exchangeOutflows?: number;\n}\n\nexport default function CryptoAnalyzer() {\n  const [cryptoData, setCryptoData] = useState<CryptoData[]>([]);\n  const [defiMetrics, setDefiMetrics] = useState<DefiMetric[]>([]);\n  const [nftData, setNftData] = useState<NftData[]>([]);\n  const [onChainMetrics, setOnChainMetrics] = useState<OnChainMetrics>({});\n\n  useEffect(() => {\n    generateCryptoData();\n    generateDefiMetrics();\n    generateNftData();\n    generateOnChainMetrics();\n\n    const interval = setInterval(() => {\n      generateCryptoData();\n      generateOnChainMetrics();\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const generateCryptoData = () => {\n    const cryptos = [\n      { symbol: 'BTC', name: 'Bitcoin', price: 45000 + Math.random() * 10000 },\n      { symbol: 'ETH', name: 'Ethereum', price: 2500 + Math.random() * 1000 },\n      { symbol: 'SOL', name: 'Solana', price: 80 + Math.random() * 40 },\n      { symbol: 'ADA', name: 'Cardano', price: 0.4 + Math.random() * 0.3 },\n      { symbol: 'MATIC', name: 'Polygon', price: 0.8 + Math.random() * 0.4 },\n      { symbol: 'AVAX', name: 'Avalanche', price: 25 + Math.random() * 15 },\n      { symbol: 'DOT', name: 'Polkadot', price: 6 + Math.random() * 4 },\n      { symbol: 'LINK', name: 'Chainlink', price: 12 + Math.random() * 8 },\n    ];\n\n    const data = cryptos.map((crypto: any) => ({\n      ...crypto,\n      change24h: (Math.random() - 0.5) * 20,\n      volume24h: Math.random() * 10 + 1,\n      marketCap: crypto.price * (Math.random() * 500 + 100),\n      aiScore: 60 + Math.random() * 40,\n      sentiment: Math.random() > 0.6 ? 'bullish' : Math.random() > 0.3 ? 'bearish' : 'neutral',\n      fearGreedIndex: Math.floor(Math.random() * 100),\n      socialVolume: Math.floor(Math.random() * 10000),\n      whaleActivity: Math.random() > 0.7 ? 'high' : Math.random() > 0.4 ? 'medium' : 'low',\n    }));\n\n    setCryptoData(data);\n  };\n\n  const generateDefiMetrics = () => {\n    const protocols = [\n      { name: 'Uniswap', tvl: 4.2, apy: 12.5, volume24h: 1.8 },\n      { name: 'Aave', tvl: 8.9, apy: 8.3, volume24h: 0.9 },\n      { name: 'Compound', tvl: 3.1, apy: 6.7, volume24h: 0.4 },\n      { name: 'MakerDAO', tvl: 6.8, apy: 4.2, volume24h: 0.3 },\n      { name: 'Curve', tvl: 2.9, apy: 15.8, volume24h: 1.2 },\n    ];\n\n    setDefiMetrics(\n      protocols.map((protocol: any) => ({\n        ...protocol,\n        change24h: (Math.random() - 0.5) * 10,\n        users24h: Math.floor(Math.random() * 50000) + 10000,\n        riskScore: Math.floor(Math.random() * 100),\n      }))\n    );\n  };\n\n  const generateNftData = () => {\n    const collections = [\n      { name: 'Bored Apes', floorPrice: 15.2, volume24h: 234.5 },\n      { name: 'CryptoPunks', floorPrice: 45.8, volume24h: 189.3 },\n      { name: 'Azuki', floorPrice: 8.9, volume24h: 156.7 },\n      { name: 'Moonbirds', floorPrice: 6.4, volume24h: 98.2 },\n    ];\n\n    setNftData(\n      collections.map((collection: any) => ({\n        ...collection,\n        change24h: (Math.random() - 0.5) * 30,\n        sales24h: Math.floor(Math.random() * 500) + 50,\n        holders: Math.floor(Math.random() * 10000) + 1000,\n      }))\n    );\n  };\n\n  const generateOnChainMetrics = () => {\n    setOnChainMetrics({\n      btcHashRate: 350 + Math.random() * 50,\n      ethGasPrice: 20 + Math.random() * 30,\n      totalValueLocked: 180 + Math.random() * 20,\n      activeAddresses: 850000 + Math.random() * 150000,\n      exchangeInflows: (Math.random() - 0.5) * 1000,\n      exchangeOutflows: (Math.random() - 0.5) * 1000,\n    });\n  };\n\n  const getSentimentColor = (sentiment: string) => {\n    switch (sentiment) {\n      case 'bullish':\n        return 'text-emerald-400';\n      case 'bearish':\n        return 'text-red-400';\n      default:\n        return 'text-amber-400';\n    }\n  };\n\n  const getWhaleActivityColor = (activity: string) => {\n    switch (activity) {\n      case 'high':\n        return 'text-red-400';\n      case 'medium':\n        return 'text-amber-400';\n      default:\n        return 'text-emerald-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* On-Chain Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n        <Card className=\"bg-stone-900/40 border-orange-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <Bitcoin className=\"h-6 w-6 text-orange-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-stone-100\">\n              {onChainMetrics.btcHashRate?.toFixed(0)} EH/s\n            </p>\n            <p className=\"text-xs text-stone-400\">BTC Hash Rate</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-stone-900/40 border-blue-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <Zap className=\"h-6 w-6 text-blue-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-stone-100\">\n              {onChainMetrics.ethGasPrice?.toFixed(0)} gwei\n            </p>\n            <p className=\"text-xs text-stone-400\">ETH Gas Price</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <DollarSign className=\"h-6 w-6 text-emerald-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-stone-100\">\n              ${onChainMetrics.totalValueLocked?.toFixed(0)}B\n            </p>\n            <p className=\"text-xs text-stone-400\">Total TVL</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-stone-900/40 border-purple-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <Activity className=\"h-6 w-6 text-purple-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-stone-100\">\n              {onChainMetrics.activeAddresses\n                ? (onChainMetrics.activeAddresses / 1000).toFixed(0)\n                : '0'}\n              K\n            </p>\n            <p className=\"text-xs text-stone-400\">Active Addresses</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-stone-900/40 border-red-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <TrendingDown className=\"h-6 w-6 text-red-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-stone-100\">\n              {onChainMetrics.exchangeInflows?.toFixed(0)}\n            </p>\n            <p className=\"text-xs text-stone-400\">Exchange Inflows</p>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-stone-900/40 border-green-500/30 backdrop-blur-xl\">\n          <CardContent className=\"p-4 text-center\">\n            <TrendingUp className=\"h-6 w-6 text-green-400 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-stone-100\">\n              {onChainMetrics.exchangeOutflows?.toFixed(0)}\n            </p>\n            <p className=\"text-xs text-stone-400\">Exchange Outflows</p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"crypto\" className=\"space-y-6\">\n        <TabsList className=\"bg-stone-900/40 border-emerald-500/30\">\n          <TabsTrigger value=\"crypto\" className=\"data-[state=active]:bg-emerald-500/20\">\n            <Bitcoin className=\"h-4 w-4 mr-2\" />\n            Crypto Analysis\n          </TabsTrigger>\n          <TabsTrigger value=\"defi\" className=\"data-[state=active]:bg-emerald-500/20\">\n            <Target className=\"h-4 w-4 mr-2\" />\n            DeFi Protocols\n          </TabsTrigger>\n          <TabsTrigger value=\"nft\" className=\"data-[state=active]:bg-emerald-500/20\">\n            <BarChart3 className=\"h-4 w-4 mr-2\" />\n            NFT Markets\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"crypto\">\n          <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-stone-100 flex items-center\">\n                <Bitcoin className=\"h-6 w-6 mr-2 text-orange-400\" />\n                Cryptocurrency Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {cryptoData.map((crypto, index) => (\n                  <div\n                    key={index}\n                    className=\"p-4 bg-stone-800/30 rounded-lg border border-stone-600/30 hover:border-stone-500/50 transition-all\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-stone-100 font-bold\">{crypto.symbol}</span>\n                            <span className=\"text-stone-400 text-sm\">{crypto.name}</span>\n                            <Badge className={getSentimentColor(crypto.sentiment)}>\n                              {crypto.sentiment}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-stone-400\">\n                            MCap: ${(crypto.marketCap / 1000).toFixed(1)}B\n                          </p>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <p className=\"text-stone-100 font-semibold\">${crypto.price.toFixed(2)}</p>\n                          <p\n                            className={`text-sm ${crypto.change24h >= 0 ? 'text-emerald-400' : 'text-red-400'}`}\n                          >\n                            {crypto.change24h >= 0 ? '+' : ''}\n                            {crypto.change24h.toFixed(2)}%\n                          </p>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <p className=\"text-stone-400 text-sm\">Volume 24h</p>\n                          <p className=\"text-stone-100 font-semibold\">\n                            ${crypto.volume24h.toFixed(1)}B\n                          </p>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <p className=\"text-stone-400 text-sm\">AI Score</p>\n                          <p className=\"text-emerald-400 font-semibold\">\n                            {crypto.aiScore.toFixed(0)}\n                          </p>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <p className=\"text-stone-400 text-sm\">Fear & Greed</p>\n                          <p\n                            className={`font-semibold ${\n                              crypto.fearGreedIndex > 70\n                                ? 'text-red-400'\n                                : crypto.fearGreedIndex > 30\n                                  ? 'text-amber-400'\n                                  : 'text-emerald-400'\n                            }`}\n                          >\n                            {crypto.fearGreedIndex}\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"text-right\">\n                        <Badge className={getWhaleActivityColor(crypto.whaleActivity)}>\n                          {crypto.whaleActivity} whale activity\n                        </Badge>\n                        <p className=\"text-xs text-stone-400 mt-1\">\n                          Social: {(crypto.socialVolume / 1000).toFixed(1)}K mentions\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"defi\">\n          <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-stone-100 flex items-center\">\n                <Target className=\"h-6 w-6 mr-2 text-emerald-400\" />\n                DeFi Protocol Analytics\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {defiMetrics.map((protocol, index) => (\n                  <div\n                    key={index}\n                    className=\"p-4 bg-stone-800/30 rounded-lg border border-stone-600/30\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <span className=\"text-stone-100 font-bold\">{protocol.name}</span>\n                          <p className=\"text-sm text-stone-400\">\n                            Risk Score: {protocol.riskScore}/100\n                          </p>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <p className=\"text-stone-400 text-sm\">TVL</p>\n                          <p className=\"text-stone-100 font-semibold\">\n                            ${protocol.tvl.toFixed(1)}B\n                          </p>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <p className=\"text-stone-400 text-sm\">APY</p>\n                          <p className=\"text-emerald-400 font-semibold\">\n                            {protocol.apy.toFixed(1)}%\n                          </p>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <p className=\"text-stone-400 text-sm\">Volume 24h</p>\n                          <p className=\"text-stone-100 font-semibold\">\n                            ${protocol.volume24h.toFixed(1)}B\n                          </p>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <p className=\"text-stone-400 text-sm\">Users 24h</p>\n                          <p className=\"text-stone-100 font-semibold\">\n                            {(protocol.users24h / 1000).toFixed(1)}K\n                          </p>\n                        </div>\n                      </div>\n\n                      <div className=\"text-right\">\n                        <p\n                          className={`text-sm font-medium ${protocol.change24h >= 0 ? 'text-emerald-400' : 'text-red-400'}`}\n                        >\n                          {protocol.change24h >= 0 ? '+' : ''}\n                          {protocol.change24h.toFixed(2)}%\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"nft\">\n          <Card className=\"bg-stone-900/40 border-emerald-500/30 backdrop-blur-xl\">\n            <CardHeader>\n              <CardTitle className=\"text-stone-100 flex items-center\">\n                <BarChart3 className=\"h-6 w-6 mr-2 text-purple-400\" />\n                NFT Market Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {nftData.map((collection, index) => (\n                  <div\n                    key={index}\n                    className=\"p-4 bg-stone-800/30 rounded-lg border border-stone-600/30\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div>\n                          <span className=\"text-stone-100 font-bold\">{collection.name}</span>\n                          <p className=\"text-sm text-stone-400\">\n                            {collection.holders.toLocaleString()} holders\n                          </p>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <p className=\"text-stone-400 text-sm\">Floor Price</p>\n                          <p className=\"text-stone-100 font-semibold\">\n                            {collection.floorPrice} ETH\n                          </p>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <p className=\"text-stone-400 text-sm\">Volume 24h</p>\n                          <p className=\"text-stone-100 font-semibold\">{collection.volume24h} ETH</p>\n                        </div>\n\n                        <div className=\"text-center\">\n                          <p className=\"text-stone-400 text-sm\">Sales 24h</p>\n                          <p className=\"text-stone-100 font-semibold\">{collection.sales24h}</p>\n                        </div>\n                      </div>\n\n                      <div className=\"text-right\">\n                        <p\n                          className={`text-sm font-medium ${collection.change24h >= 0 ? 'text-emerald-400' : 'text-red-400'}`}\n                        >\n                          {collection.change24h >= 0 ? '+' : ''}\n                          {collection.change24h.toFixed(2)}%\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/scanners/OptionsFlowScanner.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/scanners/PatternRecognitionScanner.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'isScanning' is assigned a value but never used.",
        "line": 68,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setIsScanning' is assigned a value but never used.",
        "line": 68,
        "column": 22,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'patternStats' is assigned a value but never used.",
        "line": 71,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setPatternStats' is assigned a value but never used.",
        "line": 71,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 71,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 72,
        "column": 79,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 72,
        "endColumn": 82,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1880, 1883], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1880, 1883], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'tradingSignals' is assigned a value but never used.",
        "line": 73,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setTradingSignals' is assigned a value but never used.",
        "line": 73,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 73,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 73,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1946, 1949], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1946, 1949], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'calculateHistoricalAccuracy' and 'generatePatternResults'. Either include them or remove the dependency array.",
        "line": 176,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 176,
        "endColumn": 20,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [calculateHistoricalAccuracy, generatePatternResults, scanSettings]",
            "fix": {
              "range": [4324, 4338],
              "text": "[calculateHistoricalAccuracy, generatePatternResults, scanSettings]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 320,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 320,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8345, 8348], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8345, 8348], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 454,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 454,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13788, 13791], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13788, 13791], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Brain, Target, Zap, BarChart3, Activity, Star, ArrowUp, ArrowDown } from 'lucide-react';\n\n// Type definitions for pattern recognition scanner\ninterface PatternMatch {\n  symbol: string;\n  pattern: string;\n  patternId: string;\n  patternType: string;\n  currentPrice: number;\n  entryPrice: number;\n  targetPrice: number;\n  stopLoss: number;\n  probability: number;\n  historicalMatches: number;\n  avgMove: number;\n  timeframe: string;\n  strength: string;\n  riskReward: number;\n  detectedAt: Date;\n  confidence: number;\n  status: string;\n  direction?: string;\n  successRate?: number;\n  timeToTarget?: number;\n}\n\ninterface SignalData {\n  id: number;\n  symbol: string;\n  signal: string;\n  pattern: string;\n  probability: number;\n  currentPrice: number;\n  entryZone: number[];\n  target: number;\n  stopLoss: number;\n  timeframe: string;\n  strength: string;\n  riskReward: number;\n  historicalAccuracy: number;\n  lastOccurrence: string;\n  avgDaysToTarget: number;\n}\n\ninterface PatternStats {\n  [key: string]: {\n    detected: number;\n    accuracy: number;\n    avgReturn: number;\n  };\n}\n\nexport default function PatternRecognitionScanner() {\n  const [isScanning, setIsScanning] = useState(false);\n  const [patternMatches, setPatternMatches] = useState<PatternMatch[]>([]);\n  const [signals, setSignals] = useState<SignalData[]>([]);\n  const [patternStats, setPatternStats] = useState<PatternStats>({});\n  const [historicalAccuracy, setHistoricalAccuracy] = useState<Record<string, any>>({});\n  const [tradingSignals, setTradingSignals] = useState<any[]>([]);\n  const [scanSettings, setScanSettings] = useState({\n    timeframe: '1D',\n    lookbackPeriod: 252, // 1 year\n    minProbability: 70,\n    patternTypes: ['all'],\n    marketCap: 'all',\n  });\n\n  const patternTypes = [\n    {\n      id: 'head-shoulders',\n      name: 'Head & Shoulders',\n      type: 'reversal',\n      avgAccuracy: 78,\n      avgMove: 12.5,\n      description: 'Classic reversal pattern',\n    },\n    {\n      id: 'double-top',\n      name: 'Double Top',\n      type: 'reversal',\n      avgAccuracy: 72,\n      avgMove: 8.3,\n      description: 'Bearish reversal pattern',\n    },\n    {\n      id: 'double-bottom',\n      name: 'Double Bottom',\n      type: 'reversal',\n      avgAccuracy: 75,\n      avgMove: 9.7,\n      description: 'Bullish reversal pattern',\n    },\n    {\n      id: 'cup-handle',\n      name: 'Cup & Handle',\n      type: 'continuation',\n      avgAccuracy: 82,\n      avgMove: 15.2,\n      description: 'Bullish continuation pattern',\n    },\n    {\n      id: 'ascending-triangle',\n      name: 'Ascending Triangle',\n      type: 'continuation',\n      avgAccuracy: 68,\n      avgMove: 11.4,\n      description: 'Bullish breakout pattern',\n    },\n    {\n      id: 'descending-triangle',\n      name: 'Descending Triangle',\n      type: 'continuation',\n      avgAccuracy: 71,\n      avgMove: 10.8,\n      description: 'Bearish breakdown pattern',\n    },\n    {\n      id: 'bull-flag',\n      name: 'Bull Flag',\n      type: 'continuation',\n      avgAccuracy: 85,\n      avgMove: 18.6,\n      description: 'Strong bullish continuation',\n    },\n    {\n      id: 'bear-flag',\n      name: 'Bear Flag',\n      type: 'continuation',\n      avgAccuracy: 83,\n      avgMove: 16.2,\n      description: 'Strong bearish continuation',\n    },\n    {\n      id: 'wedge-rising',\n      name: 'Rising Wedge',\n      type: 'reversal',\n      avgAccuracy: 76,\n      avgMove: 13.1,\n      description: 'Bearish reversal wedge',\n    },\n    {\n      id: 'wedge-falling',\n      name: 'Falling Wedge',\n      type: 'reversal',\n      avgAccuracy: 79,\n      avgMove: 14.7,\n      description: 'Bullish reversal wedge',\n    },\n  ];\n\n  useEffect(() => {\n    generatePatternResults();\n    generateTradingSignals();\n    calculateHistoricalAccuracy();\n\n    const interval = setInterval(() => {\n      generatePatternResults();\n      generateTradingSignals();\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [scanSettings]);\n\n  const generatePatternResults = () => {\n    const symbols = [\n      'AAPL',\n      'MSFT',\n      'GOOGL',\n      'TSLA',\n      'NVDA',\n      'META',\n      'AMZN',\n      'NFLX',\n      'CRM',\n      'PLTR',\n      'COIN',\n      'RBLX',\n      'SNOW',\n      'ZM',\n      'ROKU',\n    ];\n\n    const results = symbols.slice(0, 10).map(symbol => {\n      const pattern = patternTypes[Math.floor(Math.random() * patternTypes.length)];\n      const currentPrice = 50 + Math.random() * 450;\n      const probability = Math.max(scanSettings.minProbability, 60 + Math.random() * 40);\n      const historicalMatches = Math.floor(Math.random() * 50) + 10;\n      const successRate = 60 + Math.random() * 35;\n      const avgMove = pattern.avgMove + (Math.random() - 0.5) * 5;\n      const timeToTarget = Math.floor(Math.random() * 30) + 5;\n      const confidence = probability * (successRate / 100) * 0.9;\n\n      // Calculate entry and exit points\n      const direction =\n        pattern.type === 'reversal' ? (Math.random() > 0.5 ? 'bullish' : 'bearish') : 'bullish';\n      const entryPrice = currentPrice * (1 + (Math.random() - 0.5) * 0.02);\n      const targetPrice =\n        direction === 'bullish'\n          ? entryPrice * (1 + avgMove / 100)\n          : entryPrice * (1 - avgMove / 100);\n      const stopLoss = direction === 'bullish' ? entryPrice * 0.95 : entryPrice * 1.05;\n\n      return {\n        symbol,\n        pattern: pattern.name,\n        patternId: pattern.id,\n        patternType: pattern.type,\n        currentPrice,\n        entryPrice,\n        targetPrice,\n        stopLoss,\n        probability,\n        historicalMatches,\n        successRate,\n        avgMove,\n        timeToTarget,\n        confidence,\n        direction,\n        riskReward: Math.abs(targetPrice - entryPrice) / Math.abs(entryPrice - stopLoss),\n        timeframe: scanSettings.timeframe,\n        strength: probability > 80 ? 'Strong' : probability > 60 ? 'Medium' : 'Weak',\n        detectedAt: new Date(),\n        status: 'active',\n      };\n    });\n\n    setPatternMatches(results.filter(r => r.probability >= scanSettings.minProbability));\n  };\n\n  const generateTradingSignals = () => {\n    const signals = [\n      {\n        id: 1,\n        symbol: 'AAPL',\n        signal: 'BUY',\n        pattern: 'Cup & Handle',\n        probability: 87,\n        currentPrice: 175.43,\n        entryZone: [174.0, 176.0],\n        target: 195.0,\n        stopLoss: 168.0,\n        timeframe: '1D',\n        strength: 'Strong',\n        riskReward: 2.8,\n        historicalAccuracy: 82,\n        lastOccurrence: '2023-08-15',\n        avgDaysToTarget: 18,\n      },\n      {\n        id: 2,\n        symbol: 'TSLA',\n        signal: 'SELL',\n        pattern: 'Head & Shoulders',\n        probability: 79,\n        currentPrice: 248.5,\n        entryZone: [250.0, 252.0],\n        target: 220.0,\n        stopLoss: 265.0,\n        timeframe: '1D',\n        strength: 'Medium',\n        riskReward: 2.1,\n        historicalAccuracy: 78,\n        lastOccurrence: '2023-09-22',\n        avgDaysToTarget: 25,\n      },\n      {\n        id: 3,\n        symbol: 'NVDA',\n        signal: 'BUY',\n        pattern: 'Bull Flag',\n        probability: 91,\n        currentPrice: 875.28,\n        entryZone: [870.0, 880.0],\n        target: 1050.0,\n        stopLoss: 820.0,\n        timeframe: '1D',\n        strength: 'Very Strong',\n        riskReward: 3.2,\n        historicalAccuracy: 85,\n        lastOccurrence: '2023-10-05',\n        avgDaysToTarget: 12,\n      },\n      {\n        id: 4,\n        symbol: 'META',\n        signal: 'BUY',\n        pattern: 'Falling Wedge',\n        probability: 84,\n        currentPrice: 338.21,\n        entryZone: [335.0, 342.0],\n        target: 385.0,\n        stopLoss: 315.0,\n        timeframe: '1D',\n        strength: 'Strong',\n        riskReward: 2.0,\n        historicalAccuracy: 79,\n        lastOccurrence: '2023-07-18',\n        avgDaysToTarget: 22,\n      },\n    ];\n\n    setSignals(signals);\n  };\n\n  const calculateHistoricalAccuracy = () => {\n    const accuracy: Record<string, any> = {};\n    patternTypes.forEach(pattern => {\n      accuracy[pattern.id] = {\n        totalOccurrences: Math.floor(Math.random() * 200) + 50,\n        successfulTrades: Math.floor(Math.random() * 150) + 30,\n        avgReturn: (Math.random() - 0.3) * 20 + 5, // Slight positive bias\n        avgDaysToTarget: Math.floor(Math.random() * 30) + 10,\n        bestPerformer: 'AAPL',\n        worstPerformer: 'TSLA',\n      };\n    });\n    setHistoricalAccuracy(accuracy);\n  };\n\n  const getSignalColor = (signal: string) => {\n    return signal === 'BUY' ? 'text-green-400' : 'text-red-400';\n  };\n\n  const getStrengthColor = (strength: string) => {\n    switch (strength) {\n      case 'Very Strong':\n        return 'bg-green-500';\n      case 'Strong':\n        return 'bg-blue-500';\n      case 'Medium':\n        return 'bg-yellow-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Pattern Scanner Controls */}\n      <Card className=\"bg-gray-900/90 border-cyan-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <Brain className=\"h-6 w-6 mr-2 text-cyan-400\" />\n            AI Pattern Recognition Scanner\n            <Badge className=\"ml-3 bg-gradient-to-r from-cyan-500 to-blue-600\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              Historical Analysis\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"space-y-2\">\n              <label className=\"text-gray-200 text-sm font-medium\">Timeframe</label>\n              <Select\n                value={scanSettings.timeframe}\n                onValueChange={value => setScanSettings(prev => ({ ...prev, timeframe: value }))}\n              >\n                <SelectTrigger className=\"bg-gray-800/30 border-cyan-500/30 text-gray-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-800 border-gray-600\">\n                  <SelectItem value=\"5M\">5 Minutes</SelectItem>\n                  <SelectItem value=\"15M\">15 Minutes</SelectItem>\n                  <SelectItem value=\"1H\">1 Hour</SelectItem>\n                  <SelectItem value=\"4H\">4 Hours</SelectItem>\n                  <SelectItem value=\"1D\">1 Day</SelectItem>\n                  <SelectItem value=\"1W\">1 Week</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-gray-200 text-sm font-medium\">Lookback Period</label>\n              <Select\n                value={scanSettings.lookbackPeriod.toString()}\n                onValueChange={value =>\n                  setScanSettings(prev => ({ ...prev, lookbackPeriod: Number.parseInt(value) }))\n                }\n              >\n                <SelectTrigger className=\"bg-gray-800/30 border-cyan-500/30 text-gray-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-800 border-gray-600\">\n                  <SelectItem value=\"63\">3 Months</SelectItem>\n                  <SelectItem value=\"126\">6 Months</SelectItem>\n                  <SelectItem value=\"252\">1 Year</SelectItem>\n                  <SelectItem value=\"504\">2 Years</SelectItem>\n                  <SelectItem value=\"1260\">5 Years</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label className=\"text-gray-200 text-sm font-medium\">Min Probability</label>\n              <Select\n                value={scanSettings.minProbability.toString()}\n                onValueChange={value =>\n                  setScanSettings(prev => ({ ...prev, minProbability: Number.parseInt(value) }))\n                }\n              >\n                <SelectTrigger className=\"bg-gray-800/30 border-cyan-500/30 text-gray-200\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent className=\"bg-gray-800 border-gray-600\">\n                  <SelectItem value=\"60\">60%</SelectItem>\n                  <SelectItem value=\"70\">70%</SelectItem>\n                  <SelectItem value=\"80\">80%</SelectItem>\n                  <SelectItem value=\"90\">90%</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex items-end\">\n              <Button\n                onClick={() => {\n                  generatePatternResults();\n                  generateTradingSignals();\n                }}\n                className=\"w-full bg-gradient-to-r from-cyan-600 to-blue-700 hover:from-cyan-700 hover:to-blue-800\"\n              >\n                <Brain className=\"h-4 w-4 mr-2\" />\n                Scan Patterns\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Live Trading Signals */}\n      <Card className=\"bg-gray-900/90 border-green-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <Target className=\"h-6 w-6 mr-2 text-green-400\" />\n            Live Trading Signals - Entry/Exit Points\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {signals.map((signal: any) => (\n              <div\n                key={signal.id}\n                className=\"p-4 bg-gray-800/50 rounded-lg border border-green-500/20 hover:border-green-500/40 transition-all\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-gray-100 font-bold text-lg\">{signal.symbol}</span>\n                        <Badge className={getSignalColor(signal.signal)}>\n                          {signal.signal === 'BUY' ? (\n                            <ArrowUp className=\"h-3 w-3 mr-1\" />\n                          ) : (\n                            <ArrowDown className=\"h-3 w-3 mr-1\" />\n                          )}\n                          {signal.signal}\n                        </Badge>\n                        <Badge className={getStrengthColor(signal.strength)}>\n                          {signal.strength}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400\">{signal.pattern}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Current Price</p>\n                      <p className=\"text-gray-100 font-semibold\">\n                        ${signal.currentPrice.toFixed(2)}\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Entry Zone</p>\n                      <p className=\"text-cyan-400 font-semibold\">\n                        ${signal.entryZone[0].toFixed(2)} - ${signal.entryZone[1].toFixed(2)}\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Target</p>\n                      <p className=\"text-green-400 font-semibold\">${signal.target.toFixed(2)}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Stop Loss</p>\n                      <p className=\"text-red-400 font-semibold\">${signal.stopLoss.toFixed(2)}</p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Probability</p>\n                      <div className=\"flex items-center\">\n                        <span className=\"text-cyan-400 font-bold\">{signal.probability}%</span>\n                        <Star className=\"h-3 w-3 text-yellow-400 ml-1\" />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <div className=\"space-y-1\">\n                      <Badge variant=\"outline\" className=\"border-blue-500/30 text-blue-400\">\n                        R/R: {signal.riskReward.toFixed(1)}\n                      </Badge>\n                      <p className=\"text-xs text-gray-400\">\n                        Accuracy: {signal.historicalAccuracy}%\n                      </p>\n                      <p className=\"text-xs text-gray-400\">Avg Days: {signal.avgDaysToTarget}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pattern Recognition Results */}\n      <Card className=\"bg-gray-900/90 border-cyan-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <BarChart3 className=\"h-6 w-6 mr-2 text-cyan-400\" />\n            Pattern Recognition Results ({patternMatches.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {patternMatches.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Brain className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-400\">\n                No patterns found matching your criteria. Try adjusting the filters.\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {patternMatches.map((result, index) => (\n                <div\n                  key={index}\n                  className=\"p-4 bg-gray-800/30 rounded-lg border border-cyan-500/20 hover:border-cyan-500/40 transition-all\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-gray-100 font-bold text-lg\">{result.symbol}</span>\n                          <Badge\n                            className={\n                              result.direction === 'bullish' ? 'bg-green-500' : 'bg-red-500'\n                            }\n                          >\n                            {result.pattern}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"border-purple-500/30 text-purple-400\">\n                            {result.patternType}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-400\">\n                          {result.historicalMatches} historical matches •{' '}\n                          {(result.successRate || 0).toFixed(1)}% success rate\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-gray-400 text-sm\">Current Price</p>\n                        <p className=\"text-gray-100 font-semibold\">\n                          ${result.currentPrice.toFixed(2)}\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-gray-400 text-sm\">Entry</p>\n                        <p className=\"text-cyan-400 font-semibold\">\n                          ${result.entryPrice.toFixed(2)}\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-gray-400 text-sm\">Target</p>\n                        <p className=\"text-green-400 font-semibold\">\n                          ${result.targetPrice.toFixed(2)}\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-gray-400 text-sm\">Probability</p>\n                        <div className=\"flex items-center\">\n                          <span className=\"text-cyan-400 font-bold\">\n                            {result.probability.toFixed(0)}%\n                          </span>\n                          <Star className=\"h-3 w-3 text-yellow-400 ml-1\" />\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"text-right\">\n                      <div className=\"space-y-1\">\n                        <Badge className=\"bg-gradient-to-r from-cyan-500 to-blue-600\">\n                          {result.confidence.toFixed(0)}% Confidence\n                        </Badge>\n                        <p className=\"text-xs text-gray-400\">R/R: {result.riskReward.toFixed(1)}</p>\n                        <p className=\"text-xs text-gray-400\">Target: {result.timeToTarget} days</p>\n                        <p className=\"text-xs text-gray-400\">Move: {result.avgMove.toFixed(1)}%</p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Probability Progress Bar */}\n                  <div className=\"mt-3\">\n                    <div className=\"flex justify-between text-xs text-gray-400 mb-1\">\n                      <span>Historical Probability</span>\n                      <span>{result.probability.toFixed(1)}%</span>\n                    </div>\n                    <Progress value={result.probability} className=\"h-2\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Historical Pattern Accuracy */}\n      <Card className=\"bg-gray-900/90 border-cyan-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <Activity className=\"h-6 w-6 mr-2 text-purple-400\" />\n            Historical Pattern Accuracy\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {patternTypes.slice(0, 6).map(pattern => {\n              const accuracy = historicalAccuracy[pattern.id] || {};\n              const successRate = accuracy.totalOccurrences\n                ? (accuracy.successfulTrades / accuracy.totalOccurrences) * 100\n                : pattern.avgAccuracy;\n\n              return (\n                <div\n                  key={pattern.id}\n                  className=\"p-4 bg-gradient-to-r from-purple-500/10 to-blue-500/10 rounded-lg border border-purple-500/30\"\n                >\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <h4 className=\"text-gray-200 font-semibold\">{pattern.name}</h4>\n                    <Badge\n                      className={pattern.type === 'reversal' ? 'bg-orange-500' : 'bg-blue-500'}\n                    >\n                      {pattern.type}\n                    </Badge>\n                  </div>\n\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400 text-sm\">Success Rate:</span>\n                      <span className=\"text-green-400 font-semibold\">\n                        {successRate.toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400 text-sm\">Avg Return:</span>\n                      <span\n                        className={`font-semibold ${\n                          (accuracy.avgReturn || pattern.avgMove) >= 0\n                            ? 'text-green-400'\n                            : 'text-red-400'\n                        }`}\n                      >\n                        {(accuracy.avgReturn || pattern.avgMove).toFixed(1)}%\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400 text-sm\">Occurrences:</span>\n                      <span className=\"text-gray-200\">{accuracy.totalOccurrences || 'N/A'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400 text-sm\">Avg Days:</span>\n                      <span className=\"text-gray-200\">\n                        {accuracy.avgDaysToTarget || pattern.avgMove.toFixed(0)}\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-3\">\n                    <Progress value={successRate} className=\"h-2\" />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/security/QuantumResistantSecurity.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setSecurityScore' is assigned a value but never used.",
        "line": 20,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 20,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setQuantumThreatLevel' is assigned a value but never used.",
        "line": 21,
        "column": 30,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setProtectedAssets' is assigned a value but never used.",
        "line": 22,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setKeyRotationStatus' is assigned a value but never used.",
        "line": 23,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 23,
        "endColumn": 49
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 31,
        "column": 49,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [1332, 1436],
              "text": "\n            Monitor and manage your organization&apos;s security posture against quantum threats.\n          "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [1332, 1436],
              "text": "\n            Monitor and manage your organization&lsquo;s security posture against quantum threats.\n          "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [1332, 1436],
              "text": "\n            Monitor and manage your organization&#39;s security posture against quantum threats.\n          "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [1332, 1436],
              "text": "\n            Monitor and manage your organization&rsquo;s security posture against quantum threats.\n          "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Shield, Lock, Key, AlertTriangle, CheckCircle, Cpu, Database, Atom } from 'lucide-react';\n\n// Simple auth mock for demo\nconst useAuth = () => ({\n  user: { id: '1', name: 'Demo User', email: 'demo@example.com' },\n  isAuthenticated: true,\n});\n\nexport default function QuantumResistantSecurity() {\n  const { user, isAuthenticated } = useAuth();\n  const [securityScore, setSecurityScore] = useState(98);\n  const [quantumThreatLevel, setQuantumThreatLevel] = useState('LOW');\n  const [protectedAssets, setProtectedAssets] = useState(2847392.5);\n  const [keyRotationStatus, setKeyRotationStatus] = useState('ACTIVE');\n\n  return (\n    <div className=\"container mx-auto py-10\">\n      <Card className=\"w-full max-w-4xl mx-auto\">\n        <CardHeader>\n          <CardTitle className=\"text-2xl font-bold\">Quantum-Resistant Security Dashboard</CardTitle>\n          <CardDescription>\n            Monitor and manage your organization's security posture against quantum threats.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"grid gap-4\">\n          {/* Authentication Status */}\n          {isAuthenticated ? (\n            <Alert variant=\"default\">\n              <CheckCircle className=\"h-4 w-4 mr-2\" />\n              <AlertTitle>Authenticated</AlertTitle>\n              <AlertDescription>Welcome, {user?.name}! Your session is secure.</AlertDescription>\n            </Alert>\n          ) : (\n            <Alert variant=\"destructive\">\n              <AlertTriangle className=\"h-4 w-4 mr-2\" />\n              <AlertTitle>Not Authenticated</AlertTitle>\n              <AlertDescription>Please log in to access the full features.</AlertDescription>\n            </Alert>\n          )}\n\n          {/* Security Score */}\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">Overall Security Score</h3>\n              <Badge variant=\"secondary\">{securityScore}%</Badge>\n            </div>\n            <Progress value={securityScore} />\n          </div>\n\n          {/* Quantum Threat Level */}\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">Quantum Threat Level</h3>\n              <Badge\n                variant={\n                  quantumThreatLevel === 'HIGH'\n                    ? 'destructive'\n                    : quantumThreatLevel === 'MEDIUM'\n                      ? 'warning'\n                      : 'success'\n                }\n              >\n                {quantumThreatLevel}\n              </Badge>\n            </div>\n          </div>\n\n          {/* Protected Assets */}\n          <div className=\"space-y-1\">\n            <h3 className=\"text-lg font-semibold\">Protected Assets Value</h3>\n            <p className=\"text-muted-foreground\">${protectedAssets.toLocaleString()}</p>\n          </div>\n\n          {/* Key Rotation Status */}\n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold\">Key Rotation Status</h3>\n              <Badge variant={keyRotationStatus === 'ACTIVE' ? 'success' : 'destructive'}>\n                {keyRotationStatus}\n              </Badge>\n            </div>\n          </div>\n\n          {/* Tabs for Detailed Security Information */}\n          <Tabs defaultValue=\"general\" className=\"w-full\">\n            <TabsList>\n              <TabsTrigger value=\"general\">General</TabsTrigger>\n              <TabsTrigger value=\"quantum\">Quantum Specific</TabsTrigger>\n              <TabsTrigger value=\"infrastructure\">Infrastructure</TabsTrigger>\n            </TabsList>\n            <TabsContent value=\"general\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>\n                      {' '}\n                      <Shield className=\"h-4 w-4 mr-2 inline-block\" /> Security Overview\n                    </CardTitle>\n                    <CardDescription>General security metrics and information.</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"list-disc list-inside\">\n                      <li>Regular security audits conducted.</li>\n                      <li>Employee security training programs in place.</li>\n                      <li>Incident response plan is up-to-date.</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>\n                      <Lock className=\"h-4 w-4 mr-2 inline-block\" /> Access Control\n                    </CardTitle>\n                    <CardDescription>Manage user access and permissions.</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"list-disc list-inside\">\n                      <li>Role-based access control (RBAC) implemented.</li>\n                      <li>Multi-factor authentication (MFA) enabled for all users.</li>\n                      <li>Regular access reviews performed.</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n            <TabsContent value=\"quantum\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>\n                      <Atom className=\"h-4 w-4 mr-2 inline-block\" /> Quantum Threat Mitigation\n                    </CardTitle>\n                    <CardDescription>\n                      Strategies to counter quantum computing threats.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"list-disc list-inside\">\n                      <li>Post-quantum cryptography (PQC) algorithms being evaluated.</li>\n                      <li>Key distribution protocols are quantum-resistant.</li>\n                      <li>Hardware security modules (HSMs) are quantum-safe.</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>\n                      <Key className=\"h-4 w-4 mr-2 inline-block\" /> Key Management\n                    </CardTitle>\n                    <CardDescription>Securely manage cryptographic keys.</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"list-disc list-inside\">\n                      <li>Key rotation policies are in place.</li>\n                      <li>Keys are stored in secure enclaves.</li>\n                      <li>Regular key audits are performed.</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n            <TabsContent value=\"infrastructure\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle>\n                      <Cpu className=\"h-4 w-4 mr-2 inline-block\" /> Infrastructure Security\n                    </CardTitle>\n                    <CardDescription>Security measures for your infrastructure.</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"list-disc list-inside\">\n                      <li>Network segmentation implemented.</li>\n                      <li>Intrusion detection and prevention systems (IDPS) in place.</li>\n                      <li>Regular vulnerability scans performed.</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle>\n                      <Database className=\"h-4 w-4 mr-2 inline-block\" /> Data Protection\n                    </CardTitle>\n                    <CardDescription>\n                      Protect sensitive data at rest and in transit.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"list-disc list-inside\">\n                      <li>Data encryption at rest and in transit.</li>\n                      <li>Data loss prevention (DLP) measures in place.</li>\n                      <li>Regular data backups performed.</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end\">\n            <Button variant=\"outline\">Generate Report</Button>\n            <Button>Update Security Settings</Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/seo/CDNOptimization.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/seo/SEOOptimizations.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/social/SocialTradingNetwork.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 345,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 345,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10172, 10175], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10172, 10175], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 426,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 426,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13957, 13960], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13957, 13960], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 550,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 550,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19937, 19940], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19937, 19940], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Users,\n  TrendingUp,\n  Star,\n  MessageCircle,\n  Heart,\n  Share2,\n  Trophy,\n  Target,\n  Zap,\n  Crown,\n  Eye,\n  Copy,\n  BarChart3,\n  DollarSign,\n} from 'lucide-react';\n\n// Type definitions for social trading network\ninterface Trader {\n  id: number;\n  name: string;\n  username: string;\n  avatar: string;\n  verified: boolean;\n  followers: number;\n  winRate: number;\n  totalReturn: number;\n  monthlyReturn: number;\n  copiers: number;\n  riskScore: number;\n  specialty: string;\n  badge: string;\n}\n\ninterface SocialPost {\n  id: number;\n  user: {\n    name: string;\n    username: string;\n    avatar: string;\n    verified: boolean;\n  };\n  content: string;\n  timestamp: Date;\n  likes: number;\n  comments: number;\n  shares: number;\n  trade?: {\n    symbol: string;\n    action: string;\n    profit: number | null;\n    amount: number;\n  };\n}\n\ninterface LeaderboardEntry {\n  rank: number;\n  name: string;\n  return: number;\n  badge: string;\n}\n\ninterface SocialStats {\n  totalCopiers: number;\n  totalVolume: number;\n  averageReturn: number;\n  activeTraders: number;\n  successRate?: number;\n  activeTrades?: number;\n}\n\nexport default function SocialTradingNetwork() {\n  const [topTraders, setTopTraders] = useState<Trader[]>([]);\n  const [socialFeed, setSocialFeed] = useState<SocialPost[]>([]);\n  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);\n  const [socialStats, setSocialStats] = useState<SocialStats>({\n    totalCopiers: 0,\n    totalVolume: 0,\n    averageReturn: 0,\n    activeTraders: 0,\n  });\n\n  useEffect(() => {\n    initializeTopTraders();\n    generateSocialFeed();\n    updateCopyTradingStats();\n    generateLeaderboard();\n\n    const interval = setInterval(() => {\n      generateSocialFeed();\n      updateCopyTradingStats();\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const initializeTopTraders = () => {\n    const traders = [\n      {\n        id: 1,\n        name: 'Alex Chen',\n        username: '@alextrader',\n        avatar: 'https://github.com/shadcn.png',\n        verified: true,\n        followers: 45672,\n        winRate: 94.7,\n        totalReturn: 287.5,\n        monthlyReturn: 23.8,\n        copiers: 2847,\n        riskScore: 6.2,\n        specialty: 'Tech Stocks',\n        badge: 'Diamond',\n      },\n      {\n        id: 2,\n        name: 'Sarah Williams',\n        username: '@sarahwins',\n        avatar: 'https://github.com/shadcn.png',\n        verified: true,\n        followers: 38291,\n        winRate: 91.3,\n        totalReturn: 245.2,\n        monthlyReturn: 19.4,\n        copiers: 1923,\n        riskScore: 4.8,\n        specialty: 'Crypto',\n        badge: 'Platinum',\n      },\n      {\n        id: 3,\n        name: 'Mike Johnson',\n        username: '@mikej_trades',\n        avatar: 'https://github.com/shadcn.png',\n        verified: true,\n        followers: 29847,\n        winRate: 89.6,\n        totalReturn: 198.7,\n        monthlyReturn: 16.2,\n        copiers: 1456,\n        riskScore: 5.5,\n        specialty: 'Options',\n        badge: 'Gold',\n      },\n    ];\n\n    setTopTraders(traders);\n  };\n\n  const generateSocialFeed = () => {\n    const posts = [\n      {\n        id: Date.now() + Math.random(),\n        user: {\n          name: 'Alex Chen',\n          username: '@alextrader',\n          avatar: 'https://github.com/shadcn.png',\n          verified: true,\n        },\n        content:\n          'Just closed my NVDA position with +15.7% gain! 🚀 The AI chip sector is on fire. Next target: AMD at $142.',\n        timestamp: new Date(Date.now() - Math.random() * 3600000),\n        likes: 247,\n        comments: 38,\n        shares: 15,\n        trade: {\n          symbol: 'NVDA',\n          action: 'SELL',\n          profit: 15.7,\n          amount: 25000,\n        },\n      },\n      {\n        id: Date.now() + Math.random() + 1,\n        user: {\n          name: 'Sarah Williams',\n          username: '@sarahwins',\n          avatar: 'https://github.com/shadcn.png',\n          verified: true,\n        },\n        content:\n          'Bitcoin breaking through $45K resistance! 📈 This could be the start of the next bull run. Added to my position.',\n        timestamp: new Date(Date.now() - Math.random() * 7200000),\n        likes: 189,\n        comments: 52,\n        shares: 23,\n        trade: {\n          symbol: 'BTC',\n          action: 'BUY',\n          profit: null,\n          amount: 50000,\n        },\n      },\n      {\n        id: Date.now() + Math.random() + 2,\n        user: {\n          name: 'Mike Johnson',\n          username: '@mikej_trades',\n          avatar: 'https://github.com/shadcn.png',\n          verified: true,\n        },\n        content:\n          \"SPY puts printing money today! 💰 Market volatility is a trader's best friend. Risk management is key!\",\n        timestamp: new Date(Date.now() - Math.random() * 1800000),\n        likes: 156,\n        comments: 29,\n        shares: 8,\n        trade: {\n          symbol: 'SPY',\n          action: 'PUT',\n          profit: 28.3,\n          amount: 15000,\n        },\n      },\n    ];\n\n    setSocialFeed(posts);\n  };\n\n  const updateCopyTradingStats = () => {\n    setSocialStats({\n      totalCopiers: 15847,\n      totalVolume: 247500000,\n      averageReturn: 18.7,\n      activeTraders: 2847,\n    });\n  };\n\n  const generateLeaderboard = () => {\n    const leaders = [\n      { rank: 1, name: 'Alex Chen', return: 287.5, badge: '🏆' },\n      { rank: 2, name: 'Sarah Williams', return: 245.2, badge: '🥈' },\n      { rank: 3, name: 'Mike Johnson', return: 198.7, badge: '🥉' },\n      { rank: 4, name: 'Emma Davis', return: 176.4, badge: '⭐' },\n      { rank: 5, name: 'David Kim', return: 165.8, badge: '⭐' },\n    ];\n\n    setLeaderboard(leaders);\n  };\n\n  const getBadgeColor = (badge: string) => {\n    switch (badge) {\n      case 'Diamond':\n        return 'from-cyan-400 to-blue-500';\n      case 'Platinum':\n        return 'from-gray-300 to-gray-500';\n      case 'Gold':\n        return 'from-yellow-400 to-orange-500';\n      default:\n        return 'from-gray-400 to-gray-600';\n    }\n  };\n\n  const formatTimeAgo = (timestamp: Date) => {\n    const now = new Date();\n    const diff = now.getTime() - timestamp.getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(diff / 3600000);\n\n    if (hours > 0) return `${hours}h ago`;\n    return `${minutes}m ago`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Social Trading Overview */}\n      <Card className=\"bg-gradient-to-r from-purple-900/20 to-pink-900/20 border-purple-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Users className=\"h-7 w-7 mr-3 text-purple-400\" />\n            👥 Social Trading Network\n            <Badge className=\"ml-3 bg-gradient-to-r from-purple-400 to-pink-500\">\n              <Star className=\"h-4 w-4 mr-1\" />\n              COMMUNITY POWERED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n            <div className=\"p-4 bg-blue-500/10 rounded-lg border border-blue-400/30 text-center\">\n              <Users className=\"h-8 w-8 text-blue-400 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-blue-400\">\n                {socialStats.totalCopiers?.toLocaleString()}\n              </div>\n              <p className=\"text-gray-400 text-sm\">Active Copiers</p>\n            </div>\n\n            <div className=\"p-4 bg-green-500/10 rounded-lg border border-green-400/30 text-center\">\n              <DollarSign className=\"h-8 w-8 text-green-400 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-green-400\">\n                ${(socialStats.totalVolume / 1000000)?.toFixed(0)}M\n              </div>\n              <p className=\"text-gray-400 text-sm\">Copy Volume</p>\n            </div>\n\n            <div className=\"p-4 bg-yellow-500/10 rounded-lg border border-yellow-400/30 text-center\">\n              <TrendingUp className=\"h-8 w-8 text-yellow-400 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-yellow-400\">\n                {socialStats.averageReturn?.toFixed(1)}%\n              </div>\n              <p className=\"text-gray-400 text-sm\">Avg Return</p>\n            </div>\n\n            <div className=\"p-4 bg-purple-500/10 rounded-lg border border-purple-400/30 text-center\">\n              <Target className=\"h-8 w-8 text-purple-400 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-purple-400\">\n                {socialStats.successRate?.toFixed(1)}%\n              </div>\n              <p className=\"text-gray-400 text-sm\">Success Rate</p>\n            </div>\n\n            <div className=\"p-4 bg-cyan-500/10 rounded-lg border border-cyan-400/30 text-center\">\n              <Zap className=\"h-8 w-8 text-cyan-400 mx-auto mb-2\" />\n              <div className=\"text-2xl font-bold text-cyan-400\">\n                {socialStats.activeTrades?.toLocaleString()}\n              </div>\n              <p className=\"text-gray-400 text-sm\">Active Trades</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Top Traders */}\n      <Card className=\"bg-gradient-to-r from-cyan-900/20 to-blue-900/20 border-cyan-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Trophy className=\"h-7 w-7 mr-3 text-cyan-400\" />\n            🏆 Top Performing Traders\n            <Badge className=\"ml-3 bg-gradient-to-r from-cyan-400 to-blue-500\">\n              <Crown className=\"h-4 w-4 mr-1\" />\n              ELITE TRADERS\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {topTraders.map((trader: any) => (\n              <div\n                key={trader.id}\n                className=\"p-6 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-lg border border-cyan-400/30\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <Avatar className=\"h-16 w-16 border-2 border-cyan-400/50\">\n                      <AvatarImage src={trader.avatar || '/placeholder.svg'} />\n                      <AvatarFallback>\n                        {trader.name\n                          .split(' ')\n                          .map((n: string) => n[0])\n                          .join('')}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <h3 className=\"text-white font-bold text-lg\">{trader.name}</h3>\n                        {trader.verified && <Star className=\"h-5 w-5 text-yellow-400\" />}\n                        <Badge\n                          className={`bg-gradient-to-r ${getBadgeColor(trader.badge)} text-black`}\n                        >\n                          {trader.badge}\n                        </Badge>\n                      </div>\n                      <p className=\"text-gray-400\">{trader.username}</p>\n                      <p className=\"text-cyan-400 text-sm\">Specialty: {trader.specialty}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Win Rate</p>\n                      <p className=\"text-green-400 font-bold\">{trader.winRate}%</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Total Return</p>\n                      <p className=\"text-yellow-400 font-bold\">{trader.totalReturn}%</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Monthly Return</p>\n                      <p className=\"text-blue-400 font-bold\">{trader.monthlyReturn}%</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Copiers</p>\n                      <p className=\"text-purple-400 font-bold\">{trader.copiers.toLocaleString()}</p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col space-y-2\">\n                    <Button className=\"bg-gradient-to-r from-cyan-400 to-blue-500 text-black font-bold\">\n                      <Copy className=\"h-4 w-4 mr-2\" />\n                      Copy Trader\n                    </Button>\n                    <Button variant=\"outline\" className=\"border-cyan-400/30 text-cyan-400\">\n                      <Eye className=\"h-4 w-4 mr-2\" />\n                      View Profile\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Social Feed */}\n      <Card className=\"bg-gradient-to-r from-green-900/20 to-emerald-900/20 border-green-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <MessageCircle className=\"h-7 w-7 mr-3 text-green-400\" />\n            💬 Trading Social Feed\n            <Badge className=\"ml-3 bg-gradient-to-r from-green-400 to-emerald-500\">\n              <Zap className=\"h-4 w-4 mr-1\" />\n              LIVE FEED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-6\">\n            {socialFeed.map((post: any) => (\n              <div\n                key={post.id}\n                className=\"p-6 bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-lg border border-green-400/30\"\n              >\n                <div className=\"flex items-start space-x-4\">\n                  <Avatar className=\"h-12 w-12 border-2 border-green-400/50\">\n                    <AvatarImage src={post.user.avatar || '/placeholder.svg'} />\n                    <AvatarFallback>\n                      {post.user.name\n                        .split(' ')\n                        .map((n: string) => n[0])\n                        .join('')}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <h4 className=\"text-white font-bold\">{post.user.name}</h4>\n                      {post.user.verified && <Star className=\"h-4 w-4 text-yellow-400\" />}\n                      <span className=\"text-gray-400 text-sm\">{post.user.username}</span>\n                      <span className=\"text-gray-500 text-sm\">•</span>\n                      <span className=\"text-gray-500 text-sm\">{formatTimeAgo(post.timestamp)}</span>\n                    </div>\n                    <p className=\"text-gray-300 mb-4\">{post.content}</p>\n\n                    {post.trade && (\n                      <div className=\"p-4 bg-gray-800/50 rounded-lg border border-gray-600/30 mb-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-4\">\n                            <Badge\n                              className={\n                                post.trade.action === 'BUY' || post.trade.action === 'SELL'\n                                  ? 'bg-blue-500'\n                                  : 'bg-purple-500'\n                              }\n                            >\n                              {post.trade.action}\n                            </Badge>\n                            <span className=\"text-white font-bold\">{post.trade.symbol}</span>\n                            <span className=\"text-gray-400\">\n                              ${post.trade.amount.toLocaleString()}\n                            </span>\n                          </div>\n                          {post.trade.profit && (\n                            <div className=\"text-right\">\n                              <span className=\"text-green-400 font-bold\">\n                                +{post.trade.profit}%\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    )}\n\n                    <div className=\"flex items-center space-x-6 text-gray-400\">\n                      <button className=\"flex items-center space-x-2 hover:text-red-400 transition-colors\">\n                        <Heart className=\"h-5 w-5\" />\n                        <span>{post.likes}</span>\n                      </button>\n                      <button className=\"flex items-center space-x-2 hover:text-blue-400 transition-colors\">\n                        <MessageCircle className=\"h-5 w-5\" />\n                        <span>{post.comments}</span>\n                      </button>\n                      <button className=\"flex items-center space-x-2 hover:text-green-400 transition-colors\">\n                        <Share2 className=\"h-5 w-5\" />\n                        <span>{post.shares}</span>\n                      </button>\n                      <button className=\"flex items-center space-x-2 hover:text-purple-400 transition-colors\">\n                        <Copy className=\"h-5 w-5\" />\n                        <span>Copy Trade</span>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Create Post */}\n          <div className=\"mt-6 p-6 bg-gradient-to-r from-blue-500/10 to-purple-500/10 rounded-lg border border-blue-400/30\">\n            <h3 className=\"text-white font-bold mb-4\">📝 Share Your Trade</h3>\n            <div className=\"space-y-4\">\n              <Textarea\n                placeholder=\"What's your trading insight today?\"\n                className=\"bg-black/20 border-blue-400/30 text-white\"\n              />\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <Input\n                    placeholder=\"Symbol (e.g., AAPL)\"\n                    className=\"bg-black/20 border-blue-400/30 text-white w-32\"\n                  />\n                  <Input\n                    placeholder=\"Action\"\n                    className=\"bg-black/20 border-blue-400/30 text-white w-24\"\n                  />\n                  <Input\n                    placeholder=\"Amount\"\n                    className=\"bg-black/20 border-blue-400/30 text-white w-32\"\n                  />\n                </div>\n                <Button className=\"bg-gradient-to-r from-blue-400 to-purple-500 text-white font-bold\">\n                  Share Trade\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Leaderboard */}\n      <Card className=\"bg-gradient-to-r from-yellow-900/20 to-orange-900/20 border-yellow-400/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <BarChart3 className=\"h-7 w-7 mr-3 text-yellow-400\" />\n            📊 Monthly Leaderboard\n            <Badge className=\"ml-3 bg-gradient-to-r from-yellow-400 to-orange-500\">\n              <Trophy className=\"h-4 w-4 mr-1\" />\n              TOP PERFORMERS\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {leaderboard.map((leader: any) => (\n              <div\n                key={leader.rank}\n                className=\"flex items-center justify-between p-4 bg-gradient-to-r from-yellow-500/10 to-orange-500/10 rounded-lg border border-yellow-400/30\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"text-2xl\">{leader.badge}</div>\n                  <div className=\"text-2xl font-bold text-yellow-400\">#{leader.rank}</div>\n                  <div>\n                    <h4 className=\"text-white font-bold\">{leader.name}</h4>\n                    <p className=\"text-gray-400 text-sm\">Professional Trader</p>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-green-400\">+{leader.return}%</div>\n                  <p className=\"text-gray-400 text-sm\">Total Return</p>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          <div className=\"mt-6 p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-400/30 text-center\">\n            <h3 className=\"text-white font-bold mb-2\">🎯 Join the Competition!</h3>\n            <p className=\"text-gray-300 mb-4\">\n              Compete with top traders and win monthly prizes up to $50,000\n            </p>\n            <Button className=\"bg-gradient-to-r from-purple-400 to-pink-500 text-white font-bold\">\n              Enter Competition\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ssl/IONOSSSLFixer.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 106,
        "column": 54,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": { "range": [3969, 3986], "text": "What&apos;s Happening?" },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": { "range": [3969, 3986], "text": "What&lsquo;s Happening?" },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": { "range": [3969, 3986], "text": "What&#39;s Happening?" },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": { "range": [3969, 3986], "text": "What&rsquo;s Happening?" },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 108,
        "column": 66,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [4055, 4191],
              "text": "\n            ERR_SSL_PROTOCOL_ERROR means your SSL certificate isn&apos;t properly configured. This guide\n            will fix it!\n          "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [4055, 4191],
              "text": "\n            ERR_SSL_PROTOCOL_ERROR means your SSL certificate isn&lsquo;t properly configured. This guide\n            will fix it!\n          "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [4055, 4191],
              "text": "\n            ERR_SSL_PROTOCOL_ERROR means your SSL certificate isn&#39;t properly configured. This guide\n            will fix it!\n          "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [4055, 4191],
              "text": "\n            ERR_SSL_PROTOCOL_ERROR means your SSL certificate isn&rsquo;t properly configured. This guide\n            will fix it!\n          "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 131,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 131,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4988, 4991], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4988, 4991], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 223,
        "column": 30,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: &quot;I'm getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration\"\n                "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: &ldquo;I'm getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration\"\n                "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: &#34;I'm getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration\"\n                "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: &rdquo;I'm getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration\"\n                "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 223,
        "column": 32,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: \"I&apos;m getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration\"\n                "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: \"I&lsquo;m getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration\"\n                "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: \"I&#39;m getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration\"\n                "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: \"I&rsquo;m getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration\"\n                "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.",
        "line": 224,
        "column": 51,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&quot;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: \"I'm getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration&quot;\n                "
            },
            "desc": "Replace with `&quot;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&ldquo;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: \"I'm getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration&ldquo;\n                "
            },
            "desc": "Replace with `&ldquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#34;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: \"I'm getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration&#34;\n                "
            },
            "desc": "Replace with `&#34;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rdquo;" },
            "fix": {
              "range": [9127, 9294],
              "text": "\n                  Tell them: \"I'm getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration&rdquo;\n                "
            },
            "desc": "Replace with `&rdquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CheckCircle, AlertTriangle, Shield, Settings, RefreshCw, FileCode } from 'lucide-react';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\n\nexport default function IONOSSSLFixer() {\n  const [completedSteps, setCompletedSteps] = useState<number[]>([]);\n\n  const toggleStep = (stepNumber: number) => {\n    setCompletedSteps(prev =>\n      prev.includes(stepNumber) ? prev.filter(n => n !== stepNumber) : [...prev, stepNumber]\n    );\n  };\n\n  const steps = [\n    {\n      id: 1,\n      title: 'Verify SSL Certificate Installation',\n      icon: <Shield className=\"w-6 h-6\" />,\n      priority: 'CRITICAL',\n      description: 'Check if SSL is properly installed on IONOS',\n      actions: [\n        'Login to IONOS Control Panel',\n        \"Go to 'Domains & SSL' → 'SSL Certificates'\",\n        \"Check if alphaaistockx.com has an 'Active' certificate\",\n        \"If not active, click 'Order SSL Certificate' or 'Activate Free SSL'\",\n        \"Choose 'DV Certificate' (Domain Validation) - it's FREE\",\n        'Wait for certificate activation (typically 5-30 minutes)',\n      ],\n    },\n    {\n      id: 2,\n      title: 'Assign SSL Certificate to Domain',\n      icon: <Settings className=\"w-6 h-6\" />,\n      priority: 'CRITICAL',\n      description: 'Ensure SSL certificate is properly assigned',\n      actions: [\n        \"In IONOS Control Panel, go to 'Domains & SSL' → 'SSL Certificates'\",\n        \"Find your domain and click 'Assign'\",\n        'Select the hosting package where your website is hosted',\n        'Save the changes',\n        'Wait for the SSL configuration to complete (usually a few minutes)',\n      ],\n    },\n    {\n      id: 3,\n      title: 'Add HTTPS Redirect in .htaccess',\n      icon: <FileCode className=\"w-6 h-6\" />,\n      priority: 'HIGH',\n      description: 'Force all traffic to use HTTPS',\n      actions: [\n        'Go to IONOS File Manager',\n        \"Navigate to your domain's root directory\",\n        'Create or edit the .htaccess file',\n        'Add the following code:',\n        `# Force HTTPS\nRewriteEngine On\nRewriteCond %{HTTPS} off\nRewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]`,\n        'Save the file and upload it to the root directory',\n      ],\n    },\n    {\n      id: 4,\n      title: 'Clear Browser Cache & Test',\n      icon: <RefreshCw className=\"w-6 h-6\" />,\n      priority: 'MEDIUM',\n      description: 'Clear your browser cache and test the site',\n      actions: [\n        'Press Ctrl+Shift+Delete (Windows) or Cmd+Shift+Delete (Mac)',\n        \"Select 'Cached images and files' and clear them\",\n        'Try accessing https://alphaaistockx.com in a private/incognito window',\n        'Test on a different browser or device',\n      ],\n    },\n  ];\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'CRITICAL':\n        return 'bg-red-500/20 text-red-300 border-red-500/50';\n      case 'HIGH':\n        return 'bg-orange-500/20 text-orange-300 border-orange-500/50';\n      case 'MEDIUM':\n        return 'bg-yellow-500/20 text-yellow-300 border-yellow-500/50';\n      default:\n        return 'bg-blue-500/20 text-blue-300 border-blue-500/50';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-blue-900 to-indigo-900 p-6\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"text-4xl font-bold text-white mb-4\">🔒 SSL Protocol Error Fix</h1>\n          <p className=\"text-gray-300 text-lg\">\n            Follow these steps to fix ERR_SSL_PROTOCOL_ERROR on alphaaistockx.com\n          </p>\n        </div>\n\n        <Alert className=\"mb-6 border-amber-500 bg-amber-950/50\">\n          <AlertTriangle className=\"h-5 w-5 text-amber-500\" />\n          <AlertTitle className=\"text-amber-300\">What's Happening?</AlertTitle>\n          <AlertDescription className=\"text-amber-200\">\n            ERR_SSL_PROTOCOL_ERROR means your SSL certificate isn't properly configured. This guide\n            will fix it!\n          </AlertDescription>\n        </Alert>\n\n        {/* Progress Bar */}\n        <div className=\"mb-8\">\n          <div className=\"flex justify-between items-center mb-2\">\n            <span className=\"text-white font-semibold\">Fix Progress</span>\n            <span className=\"text-white\">\n              {completedSteps.length}/{steps.length} completed\n            </span>\n          </div>\n          <div className=\"w-full bg-gray-700 rounded-full h-3\">\n            <div\n              className=\"bg-gradient-to-r from-blue-500 to-indigo-500 h-3 rounded-full transition-all duration-300\"\n              style={{ width: `${(completedSteps.length / steps.length) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        {/* Steps */}\n        <div className=\"space-y-6\">\n          {steps.map((step: any) => (\n            <Card key={step.id} className=\"bg-gray-800/50 border-gray-700\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-3\">\n                  <div className=\"flex items-center gap-3\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => toggleStep(step.id)}\n                      className={`w-8 h-8 p-0 ${\n                        completedSteps.includes(step.id)\n                          ? 'bg-green-600 border-green-600 text-white'\n                          : 'bg-gray-700 border-gray-600 text-gray-300'\n                      }`}\n                    >\n                      {completedSteps.includes(step.id) ? (\n                        <CheckCircle className=\"w-4 h-4\" />\n                      ) : (\n                        step.id\n                      )}\n                    </Button>\n                    {step.icon}\n                    <div>\n                      <div className=\"text-white\">{step.title}</div>\n                      <div\n                        className={`text-xs px-2 py-1 rounded border inline-block mt-1 ${getPriorityColor(step.priority)}`}\n                      >\n                        {step.priority}\n                      </div>\n                    </div>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-300 mb-4\">{step.description}</p>\n                <ol className=\"space-y-2\">\n                  {step.actions.map((action: string, index: number) => (\n                    <li key={index} className=\"flex items-start gap-3 text-gray-300\">\n                      <span className=\"bg-blue-600 text-white rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold flex-shrink-0 mt-0.5\">\n                        {index + 1}\n                      </span>\n                      {action.startsWith('# Force') ||\n                      action.startsWith('RewriteEngine') ||\n                      action.startsWith('RewriteCond') ||\n                      action.startsWith('RewriteRule') ? (\n                        <pre className=\"bg-gray-900 text-gray-100 p-2 rounded-md font-mono text-sm whitespace-pre-wrap\">\n                          {action}\n                        </pre>\n                      ) : (\n                        action\n                      )}\n                    </li>\n                  ))}\n                </ol>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Advanced Troubleshooting */}\n        <Card className=\"bg-gradient-to-r from-blue-900 to-indigo-900 border-0 mt-8\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center gap-2\">\n              <AlertTriangle className=\"w-6 h-6\" />\n              Still Not Working? Advanced Troubleshooting\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-white/10 rounded-lg\">\n                <h4 className=\"text-white font-semibold mb-2\">🔍 Check SSL Certificate Status:</h4>\n                <p className=\"text-white/90 mb-2\">\n                  Use this online tool to check your SSL certificate status:\n                </p>\n                <Button\n                  className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                  onClick={() =>\n                    window.open(\n                      'https://www.ssllabs.com/ssltest/analyze.html?d=alphaaistockx.com',\n                      '_blank'\n                    )\n                  }\n                >\n                  Check SSL Status\n                </Button>\n              </div>\n\n              <div className=\"p-4 bg-white/10 rounded-lg\">\n                <h4 className=\"text-white font-semibold mb-2\">📞 Contact IONOS Support:</h4>\n                <p className=\"text-white/90\">Phone: 1-484-254-5555</p>\n                <p className=\"text-white/90\">Live Chat: Available in IONOS Control Panel</p>\n                <p className=\"text-white/90\">\n                  Tell them: \"I'm getting ERR_SSL_PROTOCOL_ERROR on my site alphaaistockx.com and\n                  need help with SSL configuration\"\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Success Message */}\n        {completedSteps.length === steps.length && (\n          <Card className=\"bg-gradient-to-r from-green-600 to-emerald-600 border-0 mt-6\">\n            <CardContent className=\"text-center py-8\">\n              <CheckCircle className=\"w-16 h-16 text-white mx-auto mb-4\" />\n              <h3 className=\"text-2xl font-bold text-white mb-2\">All Steps Completed! 🎉</h3>\n              <p className=\"text-white/90 mb-4\">\n                Your SSL should now be working correctly. It may take a few minutes for changes to\n                take effect.\n              </p>\n              <Button\n                className=\"bg-white/20 hover:bg-white/30 text-white border-white/30\"\n                onClick={() => window.open('https://alphaaistockx.com', '_blank')}\n              >\n                Test Your Site\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/subscription/PaymentForm.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/subscription/SubscriptionModal.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/subscription/SubscriptionPlans.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 128,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 128,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3576, 3579], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3576, 3579], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 213,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 213,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7424, 7427], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7424, 7427], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\n\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { X, Check, Star, Zap, Crown, Building } from 'lucide-react';\n\ninterface SubscriptionPlansProps {\n  currentPlan: string;\n  onSelectPlan: (plan: string) => void;\n}\n\nexport default function SubscriptionPlans({ currentPlan, onSelectPlan }: SubscriptionPlansProps) {\n  const [selectedPlan, setSelectedPlan] = useState(currentPlan);\n  const [loading, setLoading] = useState(false);\n\n  const plans = [\n    {\n      id: 'free',\n      name: 'Free',\n      price: 0,\n      icon: Star,\n      color: 'bg-slate-600',\n      description: 'Get started with basic features',\n      features: [\n        'Basic education content',\n        'Limited stock analysis (5/day)',\n        'Community access',\n        'Basic market data',\n        'Email support',\n      ],\n      limitations: [\n        'No real-time alerts',\n        'Limited AI recommendations',\n        'No advanced patterns',\n        'No portfolio integration',\n      ],\n    },\n    {\n      id: 'basic',\n      name: 'Basic',\n      price: 29,\n      icon: Zap,\n      color: 'bg-blue-600',\n      description: 'Perfect for individual traders',\n      popular: false,\n      features: [\n        'Full education access',\n        'Advanced stock analysis (50/day)',\n        'Email alerts',\n        'Technical indicators',\n        'Pattern recognition',\n        'Priority support',\n        'Mobile app access',\n      ],\n      limitations: ['No real-time alerts', 'Limited portfolio tools', 'No API access'],\n    },\n    {\n      id: 'premium',\n      name: 'Premium',\n      price: 79,\n      icon: Crown,\n      color: 'bg-purple-600',\n      description: 'For serious traders and investors',\n      popular: true,\n      features: [\n        'Everything in Basic',\n        'Unlimited AI analysis',\n        'Real-time alerts',\n        'Advanced pattern recognition',\n        'Portfolio optimization',\n        'Risk management tools',\n        'Custom watchlists',\n        'Advanced charting',\n        'Phone support',\n      ],\n      limitations: ['No API access', 'No custom models'],\n    },\n    {\n      id: 'enterprise',\n      name: 'Enterprise',\n      price: 199,\n      icon: Building,\n      color: 'bg-gold-600',\n      description: 'For institutions and power users',\n      popular: false,\n      features: [\n        'Everything in Premium',\n        'API access',\n        'Custom AI models',\n        'White-label options',\n        'Dedicated support',\n        'Advanced compliance',\n        'Team management',\n        'Custom integrations',\n        'SLA guarantee',\n      ],\n      limitations: [],\n    },\n  ];\n\n  const handleSubscribe = async (planId: string) => {\n    setLoading(true);\n    setSelectedPlan(planId);\n\n    try {\n      // Simulate payment processing\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      onSelectPlan(planId);\n    } catch (error) {\n      console.error('Subscription failed:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-6xl\">\n      <div className=\"p-6\">\n        <div className=\"text-center mb-8\">\n          <h2 className=\"text-3xl font-bold text-white mb-2\">Choose Your Plan</h2>\n          <p className=\"text-slate-400\">Unlock the full power of AI-driven trading analysis</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {plans.map((plan: any) => (\n            <Card\n              key={plan.id}\n              className={`relative bg-slate-700/50 border-2 transition-all ${\n                plan.popular\n                  ? 'border-purple-500 scale-105'\n                  : currentPlan === plan.id\n                    ? 'border-blue-500'\n                    : 'border-slate-600 hover:border-slate-500'\n              }`}\n            >\n              {plan.popular && (\n                <Badge className=\"absolute -top-3 left-1/2 transform -translate-x-1/2 bg-purple-600\">\n                  Most Popular\n                </Badge>\n              )}\n\n              {currentPlan === plan.id && (\n                <Badge className=\"absolute -top-3 right-4 bg-green-600\">Current Plan</Badge>\n              )}\n\n              <CardHeader className=\"text-center\">\n                <div\n                  className={`w-12 h-12 rounded-full ${plan.color} flex items-center justify-center mx-auto mb-3`}\n                >\n                  <plan.icon className=\"h-6 w-6 text-white\" />\n                </div>\n                <CardTitle className=\"text-white text-xl\">{plan.name}</CardTitle>\n                <CardDescription className=\"text-slate-400\">{plan.description}</CardDescription>\n                <div className=\"mt-4\">\n                  <span className=\"text-3xl font-bold text-white\">${plan.price}</span>\n                  <span className=\"text-slate-400\">/month</span>\n                </div>\n              </CardHeader>\n\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"text-white font-semibold text-sm\">Included:</h4>\n                  {plan.features.map((feature: string, index: number) => (\n                    <div key={index} className=\"flex items-start gap-2\">\n                      <Check className=\"h-4 w-4 text-green-400 mt-0.5 flex-shrink-0\" />\n                      <span className=\"text-slate-300 text-sm\">{feature}</span>\n                    </div>\n                  ))}\n                </div>\n\n                {plan.limitations.length > 0 && (\n                  <div className=\"space-y-2\">\n                    <h4 className=\"text-slate-400 font-semibold text-sm\">Not included:</h4>\n                    {plan.limitations.map((limitation: string, index: number) => (\n                      <div key={index} className=\"flex items-start gap-2\">\n                        <X className=\"h-4 w-4 text-red-400 mt-0.5 flex-shrink-0\" />\n                        <span className=\"text-slate-400 text-sm\">{limitation}</span>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                <Button\n                  className={`w-full ${plan.popular ? 'bg-purple-600 hover:bg-purple-700' : ''}`}\n                  variant={currentPlan === plan.id ? 'outline' : 'default'}\n                  onClick={() => handleSubscribe(plan.id)}\n                  disabled={loading || currentPlan === plan.id}\n                >\n                  {loading && selectedPlan === plan.id\n                    ? 'Processing...'\n                    : currentPlan === plan.id\n                      ? 'Current Plan'\n                      : plan.price === 0\n                        ? 'Get Started'\n                        : 'Subscribe'}\n                </Button>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Features Comparison */}\n        <div className=\"mt-12\">\n          <h3 className=\"text-xl font-bold text-white mb-6 text-center\">Feature Comparison</h3>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full text-sm\">\n              <thead>\n                <tr className=\"border-b border-slate-600\">\n                  <th className=\"text-left text-white font-semibold p-3\">Feature</th>\n                  {plans.map((plan: any) => (\n                    <th key={plan.id} className=\"text-center text-white font-semibold p-3\">\n                      {plan.name}\n                    </th>\n                  ))}\n                </tr>\n              </thead>\n              <tbody>\n                {[\n                  {\n                    feature: 'Stock Analysis per Day',\n                    values: ['5', '50', 'Unlimited', 'Unlimited'],\n                  },\n                  {\n                    feature: 'Real-time Alerts',\n                    values: [false, false, true, true],\n                  },\n                  {\n                    feature: 'Advanced Patterns',\n                    values: [false, true, true, true],\n                  },\n                  {\n                    feature: 'Portfolio Tools',\n                    values: [false, false, true, true],\n                  },\n                  {\n                    feature: 'API Access',\n                    values: [false, false, false, true],\n                  },\n                  {\n                    feature: 'Custom AI Models',\n                    values: [false, false, false, true],\n                  },\n                ].map((row, index) => (\n                  <tr key={index} className=\"border-b border-slate-700\">\n                    <td className=\"text-slate-300 p-3\">{row.feature}</td>\n                    {row.values.map((value, valueIndex) => (\n                      <td key={valueIndex} className=\"text-center p-3\">\n                        {typeof value === 'boolean' ? (\n                          value ? (\n                            <Check className=\"h-4 w-4 text-green-400 mx-auto\" />\n                          ) : (\n                            <X className=\"h-4 w-4 text-red-400 mx-auto\" />\n                          )\n                        ) : (\n                          <span className=\"text-white\">{value}</span>\n                        )}\n                      </td>\n                    ))}\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n\n        {/* FAQ */}\n        <div className=\"mt-12\">\n          <h3 className=\"text-xl font-bold text-white mb-6 text-center\">\n            Frequently Asked Questions\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"text-white font-semibold mb-2\">Can I change plans anytime?</h4>\n                <p className=\"text-slate-400 text-sm\">\n                  Yes, you can upgrade or downgrade your plan at any time. Changes take effect\n                  immediately.\n                </p>\n              </div>\n              <div>\n                <h4 className=\"text-white font-semibold mb-2\">Is there a free trial?</h4>\n                <p className=\"text-slate-400 text-sm\">\n                  Our Free plan gives you access to basic features. Premium plans offer 7-day free\n                  trials.\n                </p>\n              </div>\n            </div>\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"text-white font-semibold mb-2\">\n                  What payment methods do you accept?\n                </h4>\n                <p className=\"text-slate-400 text-sm\">\n                  We accept all major credit cards, PayPal, and bank transfers for Enterprise plans.\n                </p>\n              </div>\n              <div>\n                <h4 className=\"text-white font-semibold mb-2\">Is my data secure?</h4>\n                <p className=\"text-slate-400 text-sm\">\n                  Yes, we use enterprise-grade encryption and comply with all financial data\n                  regulations.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/theme/NeonThemeProvider.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 12,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 12,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [357, 360], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [357, 360], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The 'themes' object makes the dependencies of useEffect Hook (at line 100) change on every render. To fix this, wrap the initialization of 'themes' in its own useMemo() Hook.",
        "line": 22,
        "column": 9,
        "nodeType": "VariableDeclarator",
        "endLine": 87,
        "endColumn": 4
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 22,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 22,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [731, 734], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [731, 734], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'currentTheme' is assigned a value but never used.",
        "line": 92,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\ninterface NeonThemeContextType {\n  theme: string;\n  setTheme: (theme: string) => void;\n  glowIntensity: number;\n  setGlowIntensity: (intensity: number) => void;\n  animationSpeed: number;\n  setAnimationSpeed: (speed: number) => void;\n  themes: Record<string, any>;\n}\n\nconst NeonThemeContext = createContext<NeonThemeContextType | undefined>(undefined);\n\nexport function NeonThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState('cyber-neon');\n  const [glowIntensity, setGlowIntensity] = useState(100);\n  const [animationSpeed, setAnimationSpeed] = useState(100);\n\n  const themes: Record<string, any> = {\n    'cyber-neon': {\n      name: 'Cyber Neon',\n      primary: 'from-cyan-400 to-blue-500',\n      secondary: 'from-purple-400 to-pink-500',\n      accent: 'from-green-400 to-emerald-500',\n      warning: 'from-yellow-400 to-orange-500',\n      danger: 'from-red-400 to-pink-500',\n      background: 'from-gray-900 via-black to-purple-950',\n      glow: {\n        cyan: 'shadow-cyan-500/50',\n        purple: 'shadow-purple-500/50',\n        green: 'shadow-green-500/50',\n        yellow: 'shadow-yellow-500/50',\n        red: 'shadow-red-500/50',\n      },\n    },\n    'matrix-green': {\n      name: 'Matrix Green',\n      primary: 'from-green-400 to-emerald-500',\n      secondary: 'from-lime-400 to-green-500',\n      accent: 'from-cyan-400 to-teal-500',\n      warning: 'from-yellow-400 to-amber-500',\n      danger: 'from-red-400 to-orange-500',\n      background: 'from-black via-gray-900 to-green-950',\n      glow: {\n        green: 'shadow-green-500/50',\n        lime: 'shadow-lime-500/50',\n        cyan: 'shadow-cyan-500/50',\n        yellow: 'shadow-yellow-500/50',\n        red: 'shadow-red-500/50',\n      },\n    },\n    'electric-blue': {\n      name: 'Electric Blue',\n      primary: 'from-blue-400 to-indigo-500',\n      secondary: 'from-cyan-400 to-blue-500',\n      accent: 'from-purple-400 to-indigo-500',\n      warning: 'from-amber-400 to-yellow-500',\n      danger: 'from-red-400 to-rose-500',\n      background: 'from-gray-900 via-blue-950 to-black',\n      glow: {\n        blue: 'shadow-blue-500/50',\n        cyan: 'shadow-cyan-500/50',\n        purple: 'shadow-purple-500/50',\n        amber: 'shadow-amber-500/50',\n        red: 'shadow-red-500/50',\n      },\n    },\n    'neon-pink': {\n      name: 'Neon Pink',\n      primary: 'from-pink-400 to-rose-500',\n      secondary: 'from-purple-400 to-pink-500',\n      accent: 'from-cyan-400 to-blue-500',\n      warning: 'from-orange-400 to-red-500',\n      danger: 'from-red-500 to-pink-500',\n      background: 'from-black via-purple-950 to-pink-950',\n      glow: {\n        pink: 'shadow-pink-500/50',\n        purple: 'shadow-purple-500/50',\n        cyan: 'shadow-cyan-500/50',\n        orange: 'shadow-orange-500/50',\n        red: 'shadow-red-500/50',\n      },\n    },\n  };\n\n  useEffect(() => {\n    // Apply theme to document\n    const root = document.documentElement;\n    const currentTheme = themes[theme];\n\n    // Set CSS custom properties for the theme\n    root.style.setProperty('--glow-intensity', `${glowIntensity}%`);\n    root.style.setProperty('--animation-speed', `${animationSpeed}%`);\n\n    // Add theme class to body\n    document.body.className = `theme-${theme} glow-${glowIntensity} speed-${animationSpeed}`;\n  }, [theme, glowIntensity, animationSpeed, themes]);\n\n  const value = {\n    theme,\n    setTheme,\n    glowIntensity,\n    setGlowIntensity,\n    animationSpeed,\n    setAnimationSpeed,\n    themes,\n    currentTheme: themes[theme],\n  };\n\n  return <NeonThemeContext.Provider value={value}>{children}</NeonThemeContext.Provider>;\n}\n\nexport function useNeonTheme() {\n  const context = useContext(NeonThemeContext);\n  if (!context) {\n    throw new Error('useNeonTheme must be used within a NeonThemeProvider');\n  }\n  return context;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/theme/ThemeCustomizer.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 5,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 6,
        "endColumn": 1,
        "fix": { "range": [97, 98], "text": "" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n\nimport { Button } from '@/components/ui/button';\nimport { Slider } from '@/components/ui/slider';\nimport { Badge } from '@/components/ui/badge';\nimport { Palette, Zap, Settings, Eye, Sparkles } from 'lucide-react';\nimport { useNeonTheme } from './NeonThemeProvider';\n\nexport default function ThemeCustomizer() {\n  const {\n    theme,\n    setTheme,\n    glowIntensity,\n    setGlowIntensity,\n    animationSpeed,\n    setAnimationSpeed,\n    themes,\n  } = useNeonTheme();\n\n  return (\n    <Card className=\"bg-gradient-to-r from-gray-900/90 to-black/90 border-2 border-purple-400/50 backdrop-blur-xl shadow-2xl shadow-purple-500/25\">\n      <CardHeader>\n        <CardTitle className=\"text-white flex items-center text-2xl\">\n          <Palette className=\"h-8 w-8 mr-3 text-purple-400 animate-pulse\" />\n          🎨 NEON THEME CUSTOMIZER\n          <Badge className=\"ml-4 bg-gradient-to-r from-purple-400 to-pink-500 text-white animate-pulse\">\n            <Sparkles className=\"h-3 w-3 mr-1\" />\n            PREMIUM\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-8\">\n        {/* Theme Selection */}\n        <div>\n          <h3 className=\"text-white font-bold text-lg mb-4 flex items-center\">\n            <Eye className=\"h-5 w-5 mr-2 text-cyan-400\" />\n            Choose Your Neon Style\n          </h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {Object.entries(themes).map(([key, themeData]) => (\n              <Button\n                key={key}\n                onClick={() => setTheme(key)}\n                className={`p-6 h-auto flex flex-col items-center space-y-3 transition-all duration-300 ${\n                  theme === key\n                    ? `bg-gradient-to-r ${themeData.primary} text-black shadow-2xl scale-105`\n                    : 'bg-gradient-to-r from-gray-800 to-gray-700 text-white hover:scale-105'\n                }`}\n              >\n                <div\n                  className={`w-full h-4 bg-gradient-to-r ${themeData.primary} rounded-full`}\n                ></div>\n                <div className=\"flex space-x-2\">\n                  <div\n                    className={`w-3 h-3 bg-gradient-to-r ${themeData.secondary} rounded-full`}\n                  ></div>\n                  <div\n                    className={`w-3 h-3 bg-gradient-to-r ${themeData.accent} rounded-full`}\n                  ></div>\n                  <div\n                    className={`w-3 h-3 bg-gradient-to-r ${themeData.warning} rounded-full`}\n                  ></div>\n                  <div\n                    className={`w-3 h-3 bg-gradient-to-r ${themeData.danger} rounded-full`}\n                  ></div>\n                </div>\n                <span className=\"font-bold\">{themeData.name}</span>\n                {theme === key && (\n                  <Badge className=\"bg-white text-black\">\n                    <Zap className=\"h-3 w-3 mr-1\" />\n                    ACTIVE\n                  </Badge>\n                )}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Glow Intensity */}\n        <div>\n          <h3 className=\"text-white font-bold text-lg mb-4 flex items-center\">\n            <Zap className=\"h-5 w-5 mr-2 text-yellow-400\" />\n            Glow Intensity: {glowIntensity}%\n          </h3>\n          <div className=\"space-y-4\">\n            <Slider\n              value={[glowIntensity]}\n              onValueChange={value => setGlowIntensity(value[0])}\n              max={200}\n              min={0}\n              step={10}\n              className=\"w-full\"\n            />\n            <div className=\"flex justify-between\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setGlowIntensity(0)}\n                className=\"border-gray-500 text-gray-300\"\n              >\n                No Glow\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setGlowIntensity(100)}\n                className=\"border-cyan-500 text-cyan-400\"\n              >\n                Normal\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setGlowIntensity(200)}\n                className=\"border-purple-500 text-purple-400\"\n              >\n                Extreme\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Animation Speed */}\n        <div>\n          <h3 className=\"text-white font-bold text-lg mb-4 flex items-center\">\n            <Settings className=\"h-5 w-5 mr-2 text-green-400\" />\n            Animation Speed: {animationSpeed}%\n          </h3>\n          <div className=\"space-y-4\">\n            <Slider\n              value={[animationSpeed]}\n              onValueChange={value => setAnimationSpeed(value[0])}\n              max={300}\n              min={25}\n              step={25}\n              className=\"w-full\"\n            />\n            <div className=\"flex justify-between\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAnimationSpeed(25)}\n                className=\"border-gray-500 text-gray-300\"\n              >\n                Slow\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAnimationSpeed(100)}\n                className=\"border-green-500 text-green-400\"\n              >\n                Normal\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setAnimationSpeed(300)}\n                className=\"border-red-500 text-red-400\"\n              >\n                Hyper\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Preview */}\n        <div>\n          <h3 className=\"text-white font-bold text-lg mb-4\">🔥 Live Preview</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            <div\n              className={`p-4 bg-gradient-to-r ${themes[theme].primary}/20 rounded-xl border-2 border-cyan-400/30 shadow-lg shadow-cyan-500/50 animate-pulse`}\n            >\n              <div\n                className={`w-8 h-8 bg-gradient-to-r ${themes[theme].primary} rounded-full mx-auto mb-2`}\n              ></div>\n              <p className=\"text-center text-white font-bold\">Primary</p>\n            </div>\n            <div\n              className={`p-4 bg-gradient-to-r ${themes[theme].secondary}/20 rounded-xl border-2 border-purple-400/30 shadow-lg shadow-purple-500/50 animate-pulse`}\n            >\n              <div\n                className={`w-8 h-8 bg-gradient-to-r ${themes[theme].secondary} rounded-full mx-auto mb-2`}\n              ></div>\n              <p className=\"text-center text-white font-bold\">Secondary</p>\n            </div>\n            <div\n              className={`p-4 bg-gradient-to-r ${themes[theme].accent}/20 rounded-xl border-2 border-green-400/30 shadow-lg shadow-green-500/50 animate-pulse`}\n            >\n              <div\n                className={`w-8 h-8 bg-gradient-to-r ${themes[theme].accent} rounded-full mx-auto mb-2`}\n              ></div>\n              <p className=\"text-center text-white font-bold\">Accent</p>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/trading/AIModelTraining.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'selectedModel' is assigned a value but never used.",
        "line": 86,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setSelectedModel' is assigned a value but never used.",
        "line": 86,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 41
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport {\n  Brain,\n  Cpu,\n  Database,\n  Zap,\n  BarChart3,\n  Target,\n  Settings,\n  Play,\n  Pause,\n  Square,\n} from 'lucide-react';\n\n// Type definitions\ninterface ModelPerformance {\n  precision: number;\n  recall: number;\n  f1Score: number;\n  sharpeRatio: number;\n  maxDrawdown: number;\n  winRate: number;\n}\n\ninterface AIModel {\n  id: number;\n  name: string;\n  type: string;\n  status: 'training' | 'deployed' | 'idle' | 'failed';\n  accuracy: number;\n  trainingTime: string;\n  dataPoints: string;\n  lastTrained: string;\n  performance: ModelPerformance;\n  predictions: number;\n  profitability: number;\n  progress?: number;\n}\n\ninterface TrainingConfig {\n  modelType: string;\n  datasetSize: string;\n  epochs: number;\n  learningRate: number;\n  batchSize: number;\n  validationSplit: number;\n  features: string[];\n  targetPrediction: string;\n  timeframe: string;\n  lookbackPeriod: number;\n}\n\ninterface ModelType {\n  id: string;\n  name: string;\n  accuracy: string;\n  speed: string;\n}\n\ninterface PredictionTarget {\n  id: string;\n  name: string;\n  type: string;\n}\n\nexport default function AIModelTraining() {\n  const [trainingStatus, setTrainingStatus] = useState<\n    'idle' | 'training' | 'completed' | 'deployed'\n  >('idle');\n  const [trainingProgress, setTrainingProgress] = useState<number>(0);\n  const [models, setModels] = useState<AIModel[]>([]);\n  const [selectedModel, setSelectedModel] = useState<AIModel | null>(null);\n  const [trainingConfig, setTrainingConfig] = useState<TrainingConfig>({\n    modelType: 'neural-network',\n    datasetSize: '1M',\n    epochs: 100,\n    learningRate: 0.001,\n    batchSize: 32,\n    validationSplit: 0.2,\n    features: ['price', 'volume', 'indicators', 'sentiment'],\n    targetPrediction: 'price-direction',\n    timeframe: '1D',\n    lookbackPeriod: 60,\n  });\n\n  const modelTypes: ModelType[] = [\n    { id: 'neural-network', name: 'Deep Neural Network', accuracy: '92%', speed: 'Fast' },\n    { id: 'lstm', name: 'LSTM Recurrent Network', accuracy: '89%', speed: 'Medium' },\n    { id: 'transformer', name: 'Transformer Architecture', accuracy: '94%', speed: 'Slow' },\n    { id: 'ensemble', name: 'Ensemble Model', accuracy: '96%', speed: 'Medium' },\n    { id: 'reinforcement', name: 'Reinforcement Learning', accuracy: '91%', speed: 'Fast' },\n    { id: 'gradient-boost', name: 'Gradient Boosting', accuracy: '87%', speed: 'Very Fast' },\n  ];\n\n  const predictionTargets: PredictionTarget[] = [\n    { id: 'price-direction', name: 'Price Direction (Up/Down)', type: 'classification' },\n    { id: 'price-target', name: 'Price Target', type: 'regression' },\n    { id: 'volatility', name: 'Volatility Prediction', type: 'regression' },\n    { id: 'support-resistance', name: 'Support/Resistance Levels', type: 'regression' },\n    { id: 'pattern-recognition', name: 'Pattern Recognition', type: 'classification' },\n    { id: 'risk-assessment', name: 'Risk Assessment', type: 'classification' },\n  ];\n\n  useEffect(() => {\n    generateModels();\n\n    if (trainingStatus === 'training') {\n      const interval = setInterval(() => {\n        setTrainingProgress(prev => {\n          if (prev >= 100) {\n            setTrainingStatus('completed');\n            return 100;\n          }\n          return prev + Math.random() * 5;\n        });\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [trainingStatus]);\n\n  const generateModels = () => {\n    const modelList: AIModel[] = [\n      {\n        id: 1,\n        name: 'AlphaAI Stock Predictor v3.2',\n        type: 'neural-network',\n        status: 'deployed',\n        accuracy: 94.2,\n        trainingTime: '2h 34m',\n        dataPoints: '2.5M',\n        lastTrained: '2024-01-15',\n        performance: {\n          precision: 0.942,\n          recall: 0.938,\n          f1Score: 0.94,\n          sharpeRatio: 2.34,\n          maxDrawdown: 8.2,\n          winRate: 73.5,\n        },\n        predictions: 15847,\n        profitability: 23.7,\n      },\n      {\n        id: 2,\n        name: 'Options Flow Predictor v2.1',\n        type: 'lstm',\n        status: 'training',\n        accuracy: 91.8,\n        trainingTime: '4h 12m',\n        dataPoints: '1.8M',\n        lastTrained: '2024-01-14',\n        performance: {\n          precision: 0.918,\n          recall: 0.915,\n          f1Score: 0.916,\n          sharpeRatio: 2.12,\n          maxDrawdown: 12.1,\n          winRate: 69.3,\n        },\n        predictions: 8934,\n        profitability: 18.9,\n      },\n      {\n        id: 3,\n        name: 'Crypto Pattern AI v1.7',\n        type: 'transformer',\n        status: 'deployed',\n        accuracy: 96.1,\n        trainingTime: '6h 45m',\n        dataPoints: '3.2M',\n        lastTrained: '2024-01-13',\n        performance: {\n          precision: 0.961,\n          recall: 0.958,\n          f1Score: 0.959,\n          sharpeRatio: 2.78,\n          maxDrawdown: 6.4,\n          winRate: 78.2,\n        },\n        predictions: 12456,\n        profitability: 31.4,\n      },\n      {\n        id: 4,\n        name: 'Forex Momentum AI v2.8',\n        type: 'ensemble',\n        status: 'idle',\n        accuracy: 88.7,\n        trainingTime: '3h 21m',\n        dataPoints: '1.9M',\n        lastTrained: '2024-01-12',\n        performance: {\n          precision: 0.887,\n          recall: 0.884,\n          f1Score: 0.885,\n          sharpeRatio: 1.98,\n          maxDrawdown: 14.7,\n          winRate: 65.8,\n        },\n        predictions: 6723,\n        profitability: 16.2,\n      },\n    ];\n\n    setModels(modelList);\n  };\n\n  const startTraining = () => {\n    setTrainingStatus('training');\n    setTrainingProgress(0);\n  };\n\n  const pauseTraining = () => {\n    setTrainingStatus('idle');\n  };\n\n  const deployModel = (modelId: number) => {\n    setModels((prev: AIModel[]) =>\n      prev.map((model: AIModel) =>\n        model.id === modelId\n          ? { ...model, status: 'deployed' as const }\n          : { ...model, status: model.status === 'deployed' ? ('idle' as const) : model.status }\n      )\n    );\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'deployed':\n        return 'bg-green-500';\n      case 'training':\n        return 'bg-blue-500 animate-pulse';\n      case 'completed':\n        return 'bg-purple-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  const getModelTypeColor = (type: string) => {\n    const colors: Record<string, string> = {\n      'neural-network': 'bg-red-500/20 text-red-300 border-red-500/30',\n      lstm: 'bg-blue-500/20 text-blue-300 border-blue-500/30',\n      transformer: 'bg-purple-500/20 text-purple-300 border-purple-500/30',\n      ensemble: 'bg-green-500/20 text-green-300 border-green-500/30',\n      reinforcement: 'bg-orange-500/20 text-orange-300 border-orange-500/30',\n      'gradient-boost': 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30',\n    };\n    return colors[type] || 'bg-gray-500/20 text-gray-300 border-gray-500/30';\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* AI Model Training Control Panel */}\n      <Card className=\"bg-gray-900/90 border-red-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <Brain className=\"h-6 w-6 mr-2 text-red-400\" />\n            AI Model Training & Deployment Center\n            <Badge className=\"ml-3 bg-gradient-to-r from-red-500 to-orange-600\">\n              <Cpu className=\"h-3 w-3 mr-1\" />\n              Neural Networks\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Training Configuration */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-gray-200 font-semibold\">Training Configuration</h3>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-gray-200 text-sm font-medium\">Model Type</label>\n                <Select\n                  value={trainingConfig.modelType}\n                  onValueChange={value =>\n                    setTrainingConfig(prev => ({ ...prev, modelType: value }))\n                  }\n                >\n                  <SelectTrigger className=\"bg-gray-800/30 border-red-500/30 text-gray-200\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-gray-800 border-gray-600\">\n                    {modelTypes.map((type: ModelType) => (\n                      <SelectItem key={type.id} value={type.id}>\n                        <div>\n                          <div className=\"font-medium\">{type.name}</div>\n                          <div className=\"text-xs text-gray-400\">\n                            Accuracy: {type.accuracy} • Speed: {type.speed}\n                          </div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-gray-200 text-sm font-medium\">Prediction Target</label>\n                <Select\n                  value={trainingConfig.targetPrediction}\n                  onValueChange={value =>\n                    setTrainingConfig(prev => ({ ...prev, targetPrediction: value }))\n                  }\n                >\n                  <SelectTrigger className=\"bg-gray-800/30 border-red-500/30 text-gray-200\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-gray-800 border-gray-600\">\n                    {predictionTargets.map((target: PredictionTarget) => (\n                      <SelectItem key={target.id} value={target.id}>\n                        <div>\n                          <div className=\"font-medium\">{target.name}</div>\n                          <div className=\"text-xs text-gray-400\">Type: {target.type}</div>\n                        </div>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-gray-200 text-sm font-medium\">Epochs</label>\n                  <Input\n                    type=\"number\"\n                    value={trainingConfig.epochs}\n                    onChange={e =>\n                      setTrainingConfig(prev => ({\n                        ...prev,\n                        epochs: Number.parseInt(e.target.value),\n                      }))\n                    }\n                    className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-gray-200 text-sm font-medium\">Learning Rate</label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.0001\"\n                    value={trainingConfig.learningRate}\n                    onChange={e =>\n                      setTrainingConfig(prev => ({\n                        ...prev,\n                        learningRate: Number.parseFloat(e.target.value),\n                      }))\n                    }\n                    className=\"bg-gray-800/30 border-red-500/30 text-gray-200\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"space-y-2\">\n                <label className=\"text-gray-200 text-sm font-medium\">Dataset Size</label>\n                <Select\n                  value={trainingConfig.datasetSize}\n                  onValueChange={value =>\n                    setTrainingConfig(prev => ({ ...prev, datasetSize: value }))\n                  }\n                >\n                  <SelectTrigger className=\"bg-gray-800/30 border-red-500/30 text-gray-200\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent className=\"bg-gray-800 border-gray-600\">\n                    <SelectItem value=\"100K\">100K Data Points</SelectItem>\n                    <SelectItem value=\"500K\">500K Data Points</SelectItem>\n                    <SelectItem value=\"1M\">1M Data Points</SelectItem>\n                    <SelectItem value=\"5M\">5M Data Points</SelectItem>\n                    <SelectItem value=\"10M\">10M Data Points</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Training Progress */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-gray-200 font-semibold\">Training Progress</h3>\n\n              <div className=\"p-4 bg-gray-800/30 rounded-lg border border-red-500/20\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className=\"text-gray-200\">Current Training</span>\n                  <Badge className={getStatusColor(trainingStatus)}>\n                    {trainingStatus.toUpperCase()}\n                  </Badge>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <div>\n                    <div className=\"flex justify-between text-sm text-gray-400 mb-1\">\n                      <span>Progress</span>\n                      <span>{trainingProgress.toFixed(1)}%</span>\n                    </div>\n                    <Progress value={trainingProgress} className=\"h-3\" />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-gray-400\">Model Type:</span>\n                      <p className=\"text-gray-200\">\n                        {modelTypes.find(t => t.id === trainingConfig.modelType)?.name}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-400\">Dataset:</span>\n                      <p className=\"text-gray-200\">{trainingConfig.datasetSize}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-400\">Epochs:</span>\n                      <p className=\"text-gray-200\">{trainingConfig.epochs}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-400\">Learning Rate:</span>\n                      <p className=\"text-gray-200\">{trainingConfig.learningRate}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-2\">\n                {trainingStatus === 'idle' && (\n                  <Button\n                    onClick={startTraining}\n                    className=\"flex-1 bg-gradient-to-r from-red-600 to-orange-700 hover:from-red-700 hover:to-orange-800\"\n                  >\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    Start Training\n                  </Button>\n                )}\n\n                {trainingStatus === 'training' && (\n                  <Button\n                    onClick={pauseTraining}\n                    className=\"flex-1 bg-yellow-600 hover:bg-yellow-700\"\n                  >\n                    <Pause className=\"h-4 w-4 mr-2\" />\n                    Pause Training\n                  </Button>\n                )}\n\n                {trainingStatus === 'completed' && (\n                  <Button\n                    onClick={() => setTrainingStatus('idle')}\n                    className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                  >\n                    <Square className=\"h-4 w-4 mr-2\" />\n                    Reset\n                  </Button>\n                )}\n              </div>\n            </div>\n\n            {/* Model Performance */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-gray-200 font-semibold\">Performance Metrics</h3>\n\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-red-500/20\">\n                  <Database className=\"h-6 w-6 text-red-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Total Models</p>\n                  <p className=\"text-lg font-bold text-red-400\">{models.length}</p>\n                </div>\n\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-red-500/20\">\n                  <Target className=\"h-6 w-6 text-green-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Deployed</p>\n                  <p className=\"text-lg font-bold text-green-400\">\n                    {models.filter(m => m.status === 'deployed').length}\n                  </p>\n                </div>\n\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-red-500/20\">\n                  <Zap className=\"h-6 w-6 text-blue-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Avg Accuracy</p>\n                  <p className=\"text-lg font-bold text-blue-400\">\n                    {(models.reduce((sum, m) => sum + m.accuracy, 0) / models.length).toFixed(1)}%\n                  </p>\n                </div>\n\n                <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-red-500/20\">\n                  <BarChart3 className=\"h-6 w-6 text-purple-400 mx-auto mb-1\" />\n                  <p className=\"text-sm text-gray-400\">Avg Profit</p>\n                  <p className=\"text-lg font-bold text-purple-400\">\n                    {(models.reduce((sum, m) => sum + m.profitability, 0) / models.length).toFixed(\n                      1\n                    )}\n                    %\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Model Management */}\n      <Card className=\"bg-gray-900/90 border-red-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <Settings className=\"h-6 w-6 mr-2 text-red-400\" />\n            AI Model Management & Deployment\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {models.map((model: AIModel) => (\n              <div\n                key={model.id}\n                className=\"p-4 bg-gray-800/50 rounded-lg border border-red-500/20 hover:border-red-500/40 transition-all\"\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-gray-100 font-bold text-lg\">{model.name}</span>\n                        <Badge className={getStatusColor(model.status)}>\n                          {model.status.toUpperCase()}\n                        </Badge>\n                        <Badge className={getModelTypeColor(model.type)}>\n                          {model.type.replace('-', ' ').toUpperCase()}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-400\">\n                        Last trained: {model.lastTrained} • {model.dataPoints} data points •{' '}\n                        {model.trainingTime}\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Accuracy</p>\n                      <p className=\"text-green-400 font-bold text-lg\">\n                        {model.accuracy.toFixed(1)}%\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Win Rate</p>\n                      <p className=\"text-blue-400 font-bold text-lg\">\n                        {model.performance.winRate.toFixed(1)}%\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Sharpe Ratio</p>\n                      <p className=\"text-purple-400 font-bold text-lg\">\n                        {model.performance.sharpeRatio.toFixed(2)}\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <p className=\"text-gray-400 text-sm\">Profitability</p>\n                      <p className=\"text-red-400 font-bold text-lg\">\n                        {model.profitability.toFixed(1)}%\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    {model.status === 'training' && model.progress === 100 && (\n                      <Button\n                        onClick={() => deployModel(model.id)}\n                        className=\"bg-green-600 hover:bg-green-700\"\n                      >\n                        Deploy Model\n                      </Button>\n                    )}\n\n                    {model.status === 'deployed' && (\n                      <Button\n                        onClick={() =>\n                          setModels((prev: AIModel[]) =>\n                            prev.map((m: AIModel) =>\n                              m.id === model.id ? { ...m, status: 'idle' as const } : m\n                            )\n                          )\n                        }\n                        variant=\"outline\"\n                        className=\"border-red-500/30 text-red-400\"\n                      >\n                        Stop Model\n                      </Button>\n                    )}\n\n                    <Button variant=\"outline\" className=\"border-gray-500/30 text-gray-400\">\n                      View Details\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Performance Metrics */}\n                <div className=\"mt-4 pt-4 border-t border-gray-700/30\">\n                  <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4 text-sm\">\n                    <div>\n                      <span className=\"text-gray-400\">Precision:</span>\n                      <p className=\"text-gray-200 font-semibold\">\n                        {model.performance.precision.toFixed(3)}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-400\">Recall:</span>\n                      <p className=\"text-gray-200 font-semibold\">\n                        {model.performance.recall.toFixed(3)}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-400\">F1 Score:</span>\n                      <p className=\"text-gray-200 font-semibold\">\n                        {model.performance.f1Score.toFixed(3)}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-400\">Max Drawdown:</span>\n                      <p className=\"text-red-400 font-semibold\">\n                        {model.performance.maxDrawdown.toFixed(1)}%\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-400\">Predictions:</span>\n                      <p className=\"text-gray-200 font-semibold\">\n                        {model.predictions.toLocaleString()}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-gray-400\">Status:</span>\n                      <p className=\"text-gray-200 font-semibold\">{model.status}</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/trading/AITop5Trades.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/trading/AdvancedTradingStrategies.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 23,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 23,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [555, 558], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [555, 558], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 24,
        "column": 81,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 24,
        "endColumn": 84,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [647, 650], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [647, 650], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'provenStrategies' and 'updateStrategyPerformance'. Either include them or remove the dependency array.",
        "line": 195,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 195,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [provenStrategies, updateStrategyPerformance]",
            "fix": {
              "range": [5565, 5567],
              "text": "[provenStrategies, updateStrategyPerformance]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 198,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 198,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5653, 5656], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5653, 5656], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 199,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 199,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5704, 5707], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5704, 5707], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 212,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 212,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6208, 6211], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6208, 6211], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 223,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 223,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6489, 6492], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6489, 6492], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 303,
        "column": 59,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": { "range": [10153, 10164], "text": "Today&apos;s P&L" },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": { "range": [10153, 10164], "text": "Today&lsquo;s P&L" },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": { "range": [10153, 10164], "text": "Today&#39;s P&L" },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": { "range": [10153, 10164], "text": "Today&rsquo;s P&L" },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 310,
        "column": 67,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": { "range": [10567, 10581], "text": "Today&apos;s Trades" },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": { "range": [10567, 10581], "text": "Today&lsquo;s Trades" },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": { "range": [10567, 10581], "text": "Today&#39;s Trades" },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": { "range": [10567, 10581], "text": "Today&rsquo;s Trades" },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Brain,\n  Zap,\n  Target,\n  Activity,\n  Rocket,\n  Star,\n  Crown,\n  CloudLightningIcon as Lightning,\n  Atom,\n  Shield,\n} from 'lucide-react';\n\nexport default function AdvancedTradingStrategies() {\n  const [activeStrategies, setActiveStrategies] = useState<any[]>([]);\n  const [strategyPerformance, setStrategyPerformance] = useState<Record<string, any>>({});\n\n  const provenStrategies = [\n    {\n      id: 1,\n      name: 'Quantum Momentum Scalping',\n      description: 'Ultra-fast scalping using quantum algorithms for 1-5 minute trades',\n      winRate: 94.7,\n      avgReturn: 0.8,\n      maxDrawdown: 2.1,\n      riskLevel: 'Medium',\n      timeframe: '1-5min',\n      algorithm: 'Quantum Enhanced',\n      backtestPeriod: '3 Years',\n      sharpeRatio: 3.2,\n      profitFactor: 2.8,\n      totalTrades: 15420,\n      category: 'Scalping',\n      icon: Atom,\n      color: 'from-cyan-400 to-blue-500',\n      glowColor: 'shadow-cyan-500/50',\n    },\n    {\n      id: 2,\n      name: 'Neural Network Breakout',\n      description: 'AI-powered breakout detection with 97% pattern recognition accuracy',\n      winRate: 89.3,\n      avgReturn: 2.4,\n      maxDrawdown: 4.8,\n      riskLevel: 'Medium-High',\n      timeframe: '15min-1H',\n      algorithm: 'Deep Learning CNN',\n      backtestPeriod: '5 Years',\n      sharpeRatio: 2.9,\n      profitFactor: 3.1,\n      totalTrades: 8750,\n      category: 'Breakout',\n      icon: Brain,\n      color: 'from-purple-400 to-pink-500',\n      glowColor: 'shadow-purple-500/50',\n    },\n    {\n      id: 3,\n      name: 'Mean Reversion Alpha',\n      description: 'Statistical arbitrage using advanced mean reversion algorithms',\n      winRate: 91.8,\n      avgReturn: 1.6,\n      maxDrawdown: 3.2,\n      riskLevel: 'Low-Medium',\n      timeframe: '30min-4H',\n      algorithm: 'Statistical ML',\n      backtestPeriod: '7 Years',\n      sharpeRatio: 3.8,\n      profitFactor: 2.6,\n      totalTrades: 12340,\n      category: 'Mean Reversion',\n      icon: Target,\n      color: 'from-green-400 to-emerald-500',\n      glowColor: 'shadow-green-500/50',\n    },\n    {\n      id: 4,\n      name: 'Options Flow Momentum',\n      description: 'Follows unusual options activity for directional equity trades',\n      winRate: 86.4,\n      avgReturn: 3.7,\n      maxDrawdown: 7.2,\n      riskLevel: 'High',\n      timeframe: 'Minutes-Hours',\n      algorithm: 'Flow Analysis AI',\n      backtestPeriod: '4 Years',\n      sharpeRatio: 2.4,\n      profitFactor: 3.8,\n      totalTrades: 6890,\n      category: 'Options Flow',\n      icon: Lightning,\n      color: 'from-yellow-400 to-orange-500',\n      glowColor: 'shadow-yellow-500/50',\n    },\n    {\n      id: 5,\n      name: 'Pairs Trading Arbitrage',\n      description: 'Market-neutral strategy exploiting price divergences between correlated stocks',\n      winRate: 93.2,\n      avgReturn: 1.2,\n      maxDrawdown: 1.8,\n      riskLevel: 'Low',\n      timeframe: '1H-1D',\n      algorithm: 'Cointegration ML',\n      backtestPeriod: '10 Years',\n      sharpeRatio: 4.1,\n      profitFactor: 2.3,\n      totalTrades: 9560,\n      category: 'Arbitrage',\n      icon: Shield,\n      color: 'from-blue-400 to-cyan-500',\n      glowColor: 'shadow-blue-500/50',\n    },\n    {\n      id: 6,\n      name: 'News Sentiment Momentum',\n      description: 'AI-powered news analysis for rapid momentum trades',\n      winRate: 82.7,\n      avgReturn: 4.2,\n      maxDrawdown: 9.1,\n      riskLevel: 'High',\n      timeframe: 'Seconds-Minutes',\n      algorithm: 'NLP + Sentiment AI',\n      backtestPeriod: '3 Years',\n      sharpeRatio: 2.1,\n      profitFactor: 4.2,\n      totalTrades: 4320,\n      category: 'News Trading',\n      icon: Zap,\n      color: 'from-pink-400 to-red-500',\n      glowColor: 'shadow-pink-500/50',\n    },\n    {\n      id: 7,\n      name: 'High-Frequency Arbitrage',\n      description: 'Microsecond arbitrage opportunities across multiple exchanges',\n      winRate: 96.8,\n      avgReturn: 0.3,\n      maxDrawdown: 0.8,\n      riskLevel: 'Very Low',\n      timeframe: 'Microseconds',\n      algorithm: 'HFT Quantum',\n      backtestPeriod: '2 Years',\n      sharpeRatio: 5.2,\n      profitFactor: 1.8,\n      totalTrades: 45670,\n      category: 'HFT',\n      icon: Rocket,\n      color: 'from-indigo-400 to-purple-500',\n      glowColor: 'shadow-indigo-500/50',\n    },\n    {\n      id: 8,\n      name: 'Volatility Surface Trading',\n      description: 'Advanced options volatility surface analysis for premium capture',\n      winRate: 88.9,\n      avgReturn: 2.8,\n      maxDrawdown: 5.4,\n      riskLevel: 'Medium-High',\n      timeframe: '1H-1D',\n      algorithm: 'Vol Surface ML',\n      backtestPeriod: '6 Years',\n      sharpeRatio: 2.7,\n      profitFactor: 3.4,\n      totalTrades: 7890,\n      category: 'Volatility',\n      icon: Activity,\n      color: 'from-teal-400 to-green-500',\n      glowColor: 'shadow-teal-500/50',\n    },\n  ];\n\n  useEffect(() => {\n    // Initialize with top performing strategies\n    setActiveStrategies([\n      provenStrategies[0], // Quantum Momentum Scalping\n      provenStrategies[2], // Mean Reversion Alpha\n      provenStrategies[4], // Pairs Trading Arbitrage\n    ]);\n\n    // Simulate real-time performance\n    const interval = setInterval(() => {\n      updateStrategyPerformance();\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const updateStrategyPerformance = () => {\n    const performance: Record<string, any> = {};\n    activeStrategies.forEach((strategy: any) => {\n      performance[strategy.id] = {\n        currentPnL: (Math.random() - 0.3) * 1000, // Slight positive bias\n        todayTrades: Math.floor(Math.random() * 50) + 10,\n        todayWinRate: 80 + Math.random() * 20,\n        currentDrawdown: Math.random() * strategy.maxDrawdown,\n        signalsGenerated: Math.floor(Math.random() * 20) + 5,\n        executionSpeed: Math.random() * 50 + 10, // ms\n      };\n    });\n    setStrategyPerformance(performance);\n  };\n\n  const toggleStrategy = (strategy: any) => {\n    setActiveStrategies(prev => {\n      const exists = prev.find(s => s.id === strategy.id);\n      if (exists) {\n        return prev.filter(s => s.id !== strategy.id);\n      } else {\n        return [...prev, strategy];\n      }\n    });\n  };\n\n  const getRiskColor = (risk: any) => {\n    switch (risk) {\n      case 'Very Low':\n      case 'Low':\n        return 'text-green-400';\n      case 'Low-Medium':\n      case 'Medium':\n        return 'text-yellow-400';\n      case 'Medium-High':\n      case 'High':\n        return 'text-orange-400';\n      default:\n        return 'text-red-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-5xl font-bold bg-gradient-to-r from-cyan-400 via-purple-400 to-pink-400 bg-clip-text text-transparent animate-pulse\">\n          🚀 ADVANCED TRADING STRATEGIES\n        </h1>\n        <p className=\"text-xl text-gray-300\">\n          Proven algorithms with <span className=\"text-cyan-400 font-bold\">94%+ win rates</span> and{' '}\n          <span className=\"text-green-400 font-bold\">$50M+</span> backtested profits\n        </p>\n        <div className=\"flex justify-center space-x-6\">\n          <Badge className=\"bg-gradient-to-r from-green-400 to-emerald-500 text-black px-4 py-2 text-lg animate-bounce\">\n            <Star className=\"h-4 w-4 mr-2\" />\n            {activeStrategies.length} Active Strategies\n          </Badge>\n          <Badge className=\"bg-gradient-to-r from-cyan-400 to-blue-500 text-black px-4 py-2 text-lg animate-bounce\">\n            <Crown className=\"h-4 w-4 mr-2\" />\n            Premium AI Algorithms\n          </Badge>\n        </div>\n      </div>\n\n      {/* Active Strategies Performance */}\n      {activeStrategies.length > 0 && (\n        <Card className=\"bg-gradient-to-r from-gray-900/90 to-black/90 border-2 border-cyan-400/50 backdrop-blur-xl shadow-2xl shadow-cyan-500/25\">\n          <CardHeader>\n            <CardTitle className=\"text-white flex items-center text-2xl\">\n              <Activity className=\"h-8 w-8 mr-3 text-cyan-400 animate-pulse\" />\n              🔥 LIVE STRATEGY PERFORMANCE\n              <Badge className=\"ml-4 bg-gradient-to-r from-green-400 to-emerald-500 text-black animate-pulse\">\n                ACTIVE\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {activeStrategies.map(strategy => {\n                const IconComponent = strategy.icon;\n                const perf = strategyPerformance[strategy.id] || {};\n\n                return (\n                  <div\n                    key={strategy.id}\n                    className={`p-6 bg-gradient-to-r ${strategy.color}/10 rounded-xl border-2 border-cyan-400/30 ${strategy.glowColor} hover:scale-105 transition-all duration-300`}\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div\n                          className={`p-3 bg-gradient-to-r ${strategy.color} rounded-full ${strategy.glowColor}`}\n                        >\n                          <IconComponent className=\"h-8 w-8 text-white\" />\n                        </div>\n                        <div>\n                          <h3 className=\"text-white font-bold text-xl\">{strategy.name}</h3>\n                          <p className=\"text-gray-300\">{strategy.description}</p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p\n                          className={`text-2xl font-bold ${perf.currentPnL >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                        >\n                          ${perf.currentPnL?.toFixed(2) || '0.00'}\n                        </p>\n                        <p className=\"text-gray-400\">Today's P&L</p>\n                      </div>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4\">\n                      <div className=\"text-center p-3 bg-black/30 rounded-lg border border-cyan-400/20\">\n                        <p className=\"text-cyan-400 font-bold text-lg\">{perf.todayTrades || 0}</p>\n                        <p className=\"text-xs text-gray-400\">Today's Trades</p>\n                      </div>\n                      <div className=\"text-center p-3 bg-black/30 rounded-lg border border-green-400/20\">\n                        <p className=\"text-green-400 font-bold text-lg\">\n                          {perf.todayWinRate?.toFixed(1) || 0}%\n                        </p>\n                        <p className=\"text-xs text-gray-400\">Win Rate</p>\n                      </div>\n                      <div className=\"text-center p-3 bg-black/30 rounded-lg border border-purple-400/20\">\n                        <p className=\"text-purple-400 font-bold text-lg\">\n                          {perf.signalsGenerated || 0}\n                        </p>\n                        <p className=\"text-xs text-gray-400\">Signals</p>\n                      </div>\n                      <div className=\"text-center p-3 bg-black/30 rounded-lg border border-yellow-400/20\">\n                        <p className=\"text-yellow-400 font-bold text-lg\">\n                          {perf.executionSpeed?.toFixed(0) || 0}ms\n                        </p>\n                        <p className=\"text-xs text-gray-400\">Execution</p>\n                      </div>\n                      <div className=\"text-center p-3 bg-black/30 rounded-lg border border-red-400/20\">\n                        <p className=\"text-red-400 font-bold text-lg\">\n                          {perf.currentDrawdown?.toFixed(1) || 0}%\n                        </p>\n                        <p className=\"text-xs text-gray-400\">Drawdown</p>\n                      </div>\n                      <div className=\"text-center p-3 bg-black/30 rounded-lg border border-blue-400/20\">\n                        <p className=\"text-blue-400 font-bold text-lg\">{strategy.sharpeRatio}</p>\n                        <p className=\"text-xs text-gray-400\">Sharpe Ratio</p>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* All Available Strategies */}\n      <Card className=\"bg-gradient-to-r from-gray-900/90 to-black/90 border-2 border-purple-400/50 backdrop-blur-xl shadow-2xl shadow-purple-500/25\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Brain className=\"h-8 w-8 mr-3 text-purple-400 animate-pulse\" />\n            💎 PROVEN TRADING ALGORITHMS\n            <Badge className=\"ml-4 bg-gradient-to-r from-purple-400 to-pink-500 text-white animate-pulse\">\n              BACKTESTED\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {provenStrategies.map(strategy => {\n              const IconComponent = strategy.icon;\n              const isActive = activeStrategies.some(s => s.id === strategy.id);\n\n              return (\n                <div\n                  key={strategy.id}\n                  className={`p-6 rounded-xl border-2 transition-all duration-300 hover:scale-105 ${\n                    isActive\n                      ? `bg-gradient-to-r ${strategy.color}/20 border-cyan-400/50 ${strategy.glowColor}`\n                      : 'bg-gradient-to-r from-gray-800/50 to-gray-900/50 border-gray-600/30 hover:border-gray-500/50'\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div\n                        className={`p-3 bg-gradient-to-r ${strategy.color} rounded-full ${strategy.glowColor}`}\n                      >\n                        <IconComponent className=\"h-6 w-6 text-white\" />\n                      </div>\n                      <div>\n                        <h3 className=\"text-white font-bold text-lg\">{strategy.name}</h3>\n                        <Badge className={`${getRiskColor(strategy.riskLevel)} bg-black/30`}>\n                          {strategy.riskLevel} Risk\n                        </Badge>\n                      </div>\n                    </div>\n                    <Switch\n                      checked={isActive}\n                      onCheckedChange={() => toggleStrategy(strategy)}\n                      className=\"data-[state=checked]:bg-cyan-500\"\n                    />\n                  </div>\n\n                  <p className=\"text-gray-300 text-sm mb-4\">{strategy.description}</p>\n\n                  <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                    <div className=\"text-center p-2 bg-black/30 rounded border border-green-400/20\">\n                      <p className=\"text-green-400 font-bold text-lg\">{strategy.winRate}%</p>\n                      <p className=\"text-xs text-gray-400\">Win Rate</p>\n                    </div>\n                    <div className=\"text-center p-2 bg-black/30 rounded border border-blue-400/20\">\n                      <p className=\"text-blue-400 font-bold text-lg\">{strategy.avgReturn}%</p>\n                      <p className=\"text-xs text-gray-400\">Avg Return</p>\n                    </div>\n                    <div className=\"text-center p-2 bg-black/30 rounded border border-purple-400/20\">\n                      <p className=\"text-purple-400 font-bold text-lg\">{strategy.sharpeRatio}</p>\n                      <p className=\"text-xs text-gray-400\">Sharpe Ratio</p>\n                    </div>\n                    <div className=\"text-center p-2 bg-black/30 rounded border border-yellow-400/20\">\n                      <p className=\"text-yellow-400 font-bold text-lg\">{strategy.profitFactor}</p>\n                      <p className=\"text-xs text-gray-400\">Profit Factor</p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Algorithm:</span>\n                      <span className=\"text-cyan-400 font-semibold\">{strategy.algorithm}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Timeframe:</span>\n                      <span className=\"text-white\">{strategy.timeframe}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Backtest Period:</span>\n                      <span className=\"text-green-400\">{strategy.backtestPeriod}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-400\">Total Trades:</span>\n                      <span className=\"text-purple-400\">\n                        {strategy.totalTrades.toLocaleString()}\n                      </span>\n                    </div>\n                  </div>\n\n                  <div className=\"mt-4\">\n                    <div className=\"flex justify-between text-xs text-gray-400 mb-1\">\n                      <span>Max Drawdown</span>\n                      <span>{strategy.maxDrawdown}%</span>\n                    </div>\n                    <Progress value={(strategy.maxDrawdown / 10) * 100} className=\"h-2\" />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/trading/AlphaWolfBot.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1858, 1861], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1858, 1861], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport type React from 'react';\nimport { useState, useEffect } from 'react';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport { ArrowUp, ArrowDown, AlertTriangle, CheckCircle, XCircle, Loader2 } from 'lucide-react';\n\ninterface StockData {\n  time: string;\n  price: number;\n}\n\ninterface AlphaWolfBotProps {\n  stockSymbol: string;\n}\n\nconst AlphaWolfBot: React.FC<AlphaWolfBotProps> = ({ stockSymbol }) => {\n  const [stockData, setStockData] = useState<StockData[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [recommendation, setRecommendation] = useState<'buy' | 'sell' | 'hold' | null>(null);\n  const [recommendationConfidence, setRecommendationConfidence] = useState<number | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        // Replace with your actual API endpoint\n        const response = await fetch(`/api/trading/analyze?symbol=${stockSymbol}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n\n        if (data && data.stockData && Array.isArray(data.stockData)) {\n          setStockData(data.stockData);\n        } else {\n          console.error('Invalid stock data format:', data);\n          setError('Invalid stock data format received.');\n          setStockData([]);\n        }\n\n        if (data && data.recommendation) {\n          setRecommendation(data.recommendation.action);\n          setRecommendationConfidence(data.recommendation.confidence);\n        } else {\n          setRecommendation(null);\n          setRecommendationConfidence(null);\n        }\n      } catch (e: any) {\n        console.error('Could not fetch stock data:', e);\n        setError(e.message || 'Could not fetch stock data.');\n        setStockData([]);\n        setRecommendation(null);\n        setRecommendationConfidence(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n\n    // Refresh data every 60 seconds\n    const intervalId = setInterval(fetchData, 60000);\n\n    return () => clearInterval(intervalId); // Cleanup interval on unmount\n  }, [stockSymbol]);\n\n  const latestPrice = stockData.length > 0 ? stockData[stockData.length - 1].price : 0;\n\n  let recommendationIcon = null;\n  let recommendationText = 'Analyzing...';\n\n  if (loading) {\n    recommendationIcon = <Loader2 size={20} className=\"animate-spin text-blue-500\" />;\n    recommendationText = 'Analyzing...';\n  } else if (error) {\n    recommendationIcon = <AlertTriangle size={20} className=\"text-red-500\" />;\n    recommendationText = `Error: ${error}`;\n  } else if (recommendation === 'buy') {\n    recommendationIcon = <ArrowUp size={20} className=\"text-green-500\" />;\n    recommendationText = `Buy (Confidence: ${recommendationConfidence?.toFixed(2)}%)`;\n  } else if (recommendation === 'sell') {\n    recommendationIcon = <ArrowDown size={20} className=\"text-red-500\" />;\n    recommendationText = `Sell (Confidence: ${recommendationConfidence?.toFixed(2)}%)`;\n  } else if (recommendation === 'hold') {\n    recommendationIcon = <CheckCircle size={20} className=\"text-yellow-500\" />;\n    recommendationText = `Hold (Confidence: ${recommendationConfidence?.toFixed(2)}%)`;\n  } else {\n    recommendationIcon = <XCircle size={20} className=\"text-gray-500\" />;\n    recommendationText = 'No recommendation';\n  }\n\n  return (\n    <div className=\"bg-white shadow rounded-lg p-4\">\n      <h3 className=\"text-lg font-semibold text-gray-800 mb-2\">\n        AlphaWolf Bot Analysis for {stockSymbol}\n      </h3>\n      <div className=\"flex items-center mb-2\">\n        {recommendationIcon}\n        <span className=\"ml-2 text-gray-700\">{recommendationText}</span>\n      </div>\n      {loading ? (\n        <div className=\"flex justify-center items-center h-48\">\n          <Loader2 size={32} className=\"animate-spin text-blue-500\" />\n        </div>\n      ) : error ? (\n        <div className=\"text-red-500\">Error: {error}</div>\n      ) : (\n        <ResponsiveContainer width=\"100%\" height={300}>\n          <LineChart data={stockData} margin={{ top: 5, right: 20, left: 10, bottom: 5 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"time\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\" name=\"Stock Price\" />\n          </LineChart>\n        </ResponsiveContainer>\n      )}\n      <div className=\"mt-4 text-sm text-gray-600\">Latest Price: ${latestPrice.toFixed(2)}</div>\n    </div>\n  );\n};\n\nexport default AlphaWolfBot;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/trading/AutomatedTradingSystem.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'useCallback' is defined but never used.",
        "line": 3,
        "column": 31,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 42
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'MarketConditions' is defined but never used.",
        "line": 90,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 90,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'user' is defined but never used.",
        "line": 106,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 106,
        "endColumn": 7
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'calculateInterest' and 'executeAutomatedTrading'. Either include them or remove the dependency array.",
        "line": 158,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 158,
        "endColumn": 47,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [systemStatus, isPremium, systemSettings, executeAutomatedTrading, calculateInterest]",
            "fix": {
              "range": [3800, 3841],
              "text": "[systemStatus, isPremium, systemSettings, executeAutomatedTrading, calculateInterest]"
            }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 213,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 213,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5254, 5257], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5254, 5257], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 708,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 708,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26083, 26086], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26083, 26086], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport {\n  Bot,\n  Play,\n  Pause,\n  Square,\n  DollarSign,\n  TrendingUp,\n  Target,\n  Shield,\n  Rocket,\n  Brain,\n  Eye,\n  Activity,\n  Wallet,\n  Crown,\n  Star,\n  CloudLightningIcon as Lightning,\n  Atom,\n} from 'lucide-react';\n\n// Type definitions\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\ninterface Trade {\n  id: string;\n  symbol: string;\n  side: 'buy' | 'sell';\n  quantity: number;\n  entryPrice: number;\n  currentPrice: number;\n  profit: number;\n  profitPercent: number;\n  timestamp: Date;\n  status: 'active' | 'closed';\n  // Additional fields used in the component\n  entryTime?: Date;\n  stopLoss?: number;\n  takeProfit?: number;\n  confidence?: number;\n  strategy?: string;\n  pnl?: number;\n  positionSize?: number;\n}\n\ninterface SystemSettings {\n  maxRiskPerTrade: number;\n  maxDailyRisk: number;\n  maxConcurrentTrades: number;\n  profitTarget: number;\n  stopLoss: number;\n  autoScalp: boolean;\n  moneyMarketTransfer: boolean;\n  minProfitForTransfer: number;\n}\n\ninterface AIAnalysis {\n  marketCondition?: string;\n  sentiment?: string;\n  volatility?: number;\n  riskLevel?: string;\n  marketSentiment?: number;\n  opportunityScore?: number;\n  nextTradeETA?: number;\n}\n\ninterface ExecutionMetrics {\n  totalTrades: number;\n  winRate: number;\n  avgProfit: number;\n  maxDrawdown: number;\n  sharpeRatio: number;\n  profitFactor: number;\n  executionSpeed: number;\n  avgWin: number;\n  avgLoss: number;\n}\n\ninterface MarketConditions {\n  symbol: string;\n  confidence: number;\n  trend: string;\n  volatility: number;\n  price: number;\n  signal: string;\n  riskLevel: string;\n}\n\ninterface AutomatedTradingSystemProps {\n  user: User;\n  membershipLevel: 'free' | 'basic' | 'pro' | 'ultimate';\n}\n\nexport default function AutomatedTradingSystem({\n  user,\n  membershipLevel,\n}: AutomatedTradingSystemProps) {\n  const [systemStatus, setSystemStatus] = useState<'stopped' | 'running' | 'paused'>('stopped');\n  const [tradingCapital, setTradingCapital] = useState<number>(50000);\n  const [moneyMarketBalance, setMoneyMarketBalance] = useState<number>(0);\n  const [totalProfit, setTotalProfit] = useState<number>(0);\n  const [dailyProfit, setDailyProfit] = useState<number>(0);\n  const [activeTrades, setActiveTrades] = useState<Trade[]>([]);\n  const [systemSettings, setSystemSettings] = useState<SystemSettings>({\n    maxRiskPerTrade: 2.0,\n    maxDailyRisk: 5.0,\n    maxConcurrentTrades: 5,\n    profitTarget: 10.0,\n    stopLoss: 3.0,\n    autoScalp: true,\n    moneyMarketTransfer: true,\n    minProfitForTransfer: 1000,\n  });\n  const [aiAnalysis, setAiAnalysis] = useState<AIAnalysis>({});\n  const [executionMetrics, setExecutionMetrics] = useState<ExecutionMetrics>({\n    totalTrades: 0,\n    winRate: 0,\n    avgProfit: 0,\n    maxDrawdown: 0,\n    sharpeRatio: 0,\n    profitFactor: 0,\n    executionSpeed: 25,\n    avgWin: 0,\n    avgLoss: 0,\n  });\n\n  // Premium features check\n  const isPremium = ['pro', 'ultimate', 'owner', 'investor'].includes(membershipLevel);\n\n  useEffect(() => {\n    if (systemStatus === 'running' && isPremium) {\n      const tradingInterval = setInterval(() => {\n        executeAutomatedTrading();\n        updateAIAnalysis();\n        updateExecutionMetrics();\n      }, 2000);\n\n      const profitInterval = setInterval(() => {\n        calculateInterest();\n      }, 10000); // Calculate interest every 10 seconds for demo\n\n      return () => {\n        clearInterval(tradingInterval);\n        clearInterval(profitInterval);\n      };\n    }\n  }, [systemStatus, isPremium, systemSettings]);\n\n  const executeAutomatedTrading = () => {\n    // AI Market Analysis\n    const marketConditions = analyzeMarketConditions();\n\n    // Only trade if conditions are favorable\n    if (\n      marketConditions.confidence > 75 &&\n      activeTrades.length < systemSettings.maxConcurrentTrades\n    ) {\n      const shouldTrade = Math.random() > 0.92; // 8% chance per cycle for realistic trading\n\n      if (shouldTrade) {\n        executeTrade(marketConditions);\n      }\n    }\n\n    // Manage existing trades\n    manageActiveTrades();\n  };\n\n  const analyzeMarketConditions = () => {\n    const symbols = [\n      'AAPL',\n      'MSFT',\n      'GOOGL',\n      'TSLA',\n      'NVDA',\n      'META',\n      'AMZN',\n      'SPY',\n      'QQQ',\n      'AMD',\n      'CRM',\n      'NFLX',\n    ];\n    const selectedSymbol = symbols[Math.floor(Math.random() * symbols.length)];\n\n    return {\n      symbol: selectedSymbol,\n      confidence: 70 + Math.random() * 30,\n      direction: Math.random() > 0.55 ? 'BUY' : 'SELL', // Slight bullish bias\n      volatility: 10 + Math.random() * 30,\n      volume: 80 + Math.random() * 40,\n      momentum: 50 + Math.random() * 50,\n      rsi: 30 + Math.random() * 40,\n      macdSignal: Math.random() > 0.6 ? 'bullish' : 'bearish',\n      supportResistance: {\n        support: 100 + Math.random() * 200,\n        resistance: 150 + Math.random() * 300,\n      },\n    };\n  };\n\n  const executeTrade = (conditions: any) => {\n    const price = 100 + Math.random() * 400;\n    const positionSize = Math.min(\n      (tradingCapital * systemSettings.maxRiskPerTrade) / 100,\n      tradingCapital * 0.1 // Max 10% of capital per trade\n    );\n    const quantity = Math.floor(positionSize / price);\n\n    if (quantity > 0 && positionSize <= tradingCapital) {\n      const newTrade: Trade = {\n        id: Date.now().toString(),\n        symbol: conditions.symbol,\n        side: conditions.direction.toLowerCase() as 'buy' | 'sell',\n        quantity,\n        entryPrice: price,\n        currentPrice: price,\n        profit: 0,\n        profitPercent: 0,\n        timestamp: new Date(),\n        status: 'active',\n        positionSize,\n        entryTime: new Date(),\n        stopLoss: conditions.direction === 'BUY' ? price * 0.97 : price * 1.03,\n        takeProfit: conditions.direction === 'BUY' ? price * 1.1 : price * 0.9,\n        confidence: conditions.confidence,\n        strategy: 'AI Automated',\n        pnl: 0,\n      };\n\n      setActiveTrades(prev => [...prev, newTrade]);\n      setTradingCapital(prev => prev - positionSize);\n\n      // Update metrics\n      setExecutionMetrics(prev => ({\n        ...prev,\n        totalTrades: prev.totalTrades + 1,\n        executionSpeed: 15 + Math.random() * 35, // 15-50ms execution\n      }));\n    }\n  };\n\n  const manageActiveTrades = () => {\n    setActiveTrades(prevTrades => {\n      return prevTrades\n        .map(trade => {\n          // Update current price with realistic movement\n          const priceChange = (Math.random() - 0.5) * trade.entryPrice * 0.02; // ±2% max movement\n          const newPrice = Math.max(trade.currentPrice + priceChange, 1);\n\n          // Calculate P&L\n          const pnl =\n            trade.side === 'buy'\n              ? (newPrice - trade.entryPrice) * trade.quantity\n              : (trade.entryPrice - newPrice) * trade.quantity;\n\n          const profit = pnl;\n          const profitPercent = (pnl / (trade.entryPrice * trade.quantity)) * 100;\n\n          const updatedTrade: Trade = {\n            ...trade,\n            currentPrice: newPrice,\n            pnl,\n            profit,\n            profitPercent,\n          };\n\n          // Check exit conditions\n          const shouldExit =\n            (updatedTrade.stopLoss && newPrice <= updatedTrade.stopLoss) ||\n            (updatedTrade.takeProfit && newPrice >= updatedTrade.takeProfit) ||\n            Math.random() > 0.995; // Random exit for variety\n\n          if (shouldExit) {\n            closeTrade(updatedTrade);\n            return { ...updatedTrade, status: 'closed' as const };\n          }\n\n          return updatedTrade;\n        })\n        .filter(trade => trade.status === 'active');\n    });\n  };\n\n  const closeTrade = (trade: Trade) => {\n    const profit = trade.pnl || 0;\n    const isWin = profit > 0;\n\n    // Update capital and profits\n    setTradingCapital(prev => prev + (trade.positionSize || 0) + profit);\n    setTotalProfit(prev => prev + profit);\n    setDailyProfit(prev => prev + profit);\n\n    // Update execution metrics\n    setExecutionMetrics(prev => {\n      const totalTrades = prev.totalTrades;\n      const currentWins = (prev.winRate / 100) * (totalTrades - 1);\n      const newWins = isWin ? currentWins + 1 : currentWins;\n      const newWinRate = (newWins / totalTrades) * 100;\n\n      return {\n        ...prev,\n        winRate: newWinRate,\n        avgProfit: (prev.avgProfit * (totalTrades - 1) + profit) / totalTrades,\n        avgWin: isWin ? (prev.avgWin + profit) / 2 : prev.avgWin,\n        avgLoss: !isWin ? (prev.avgLoss + Math.abs(profit)) / 2 : prev.avgLoss,\n        profitFactor: prev.avgLoss > 0 ? prev.avgWin / prev.avgLoss : 0,\n        sharpeRatio: 2.5 + Math.random() * 1.5, // Simulated Sharpe ratio\n      };\n    });\n\n    // Auto-transfer profits to money market if enabled\n    if (systemSettings.moneyMarketTransfer && profit >= systemSettings.minProfitForTransfer) {\n      transferToMoneyMarket(profit * 0.8); // Transfer 80% of large profits\n    }\n  };\n\n  const transferToMoneyMarket = (amount: number) => {\n    setMoneyMarketBalance(prev => prev + amount);\n    setTradingCapital(prev => prev - amount);\n  };\n\n  const calculateInterest = () => {\n    if (moneyMarketBalance > 0) {\n      const dailyRate = 1.5 / 365 / 100; // 1.5% annual rate\n      const interest = moneyMarketBalance * dailyRate * (10 / 86400); // 10 seconds worth of interest\n      setMoneyMarketBalance(prev => prev + interest);\n      setTotalProfit(prev => prev + interest);\n    }\n  };\n\n  const updateAIAnalysis = () => {\n    setAiAnalysis(prev => ({\n      ...prev,\n      marketSentiment: 60 + Math.random() * 40,\n      volatility: 15 + Math.random() * 25,\n      riskLevel: Math.random() > 0.5 ? 'Low' : 'Medium',\n      opportunityScore: 75 + Math.random() * 25,\n      nextTradeETA: Math.floor(30 + Math.random() * 120),\n    }));\n  };\n\n  const updateExecutionMetrics = () => {\n    setExecutionMetrics(prev => ({\n      ...prev,\n      maxDrawdown: Math.max(prev.maxDrawdown, Math.random() * 5),\n      executionSpeed: 10 + Math.random() * 40,\n    }));\n  };\n\n  const startSystem = () => {\n    if (!isPremium) {\n      alert('Automated Trading System requires Premium Membership!');\n      return;\n    }\n    setSystemStatus('running');\n  };\n\n  const pauseSystem = () => {\n    setSystemStatus('paused');\n  };\n\n  const stopSystem = () => {\n    setSystemStatus('stopped');\n    // Close all active trades\n    activeTrades.forEach(trade => closeTrade(trade));\n    setActiveTrades([]);\n  };\n\n  const emergencyStop = () => {\n    setSystemStatus('stopped');\n    activeTrades.forEach(trade => closeTrade(trade));\n    setActiveTrades([]);\n  };\n\n  if (!isPremium) {\n    return (\n      <Card className=\"bg-gradient-to-r from-gray-900/90 to-black/90 border-2 border-red-500/50 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center text-2xl\">\n            <Crown className=\"h-8 w-8 mr-3 text-yellow-400\" />\n            🔒 PREMIUM AUTOMATED TRADING SYSTEM\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-center py-12\">\n          <Bot className=\"h-24 w-24 text-gray-400 mx-auto mb-6\" />\n          <h3 className=\"text-2xl font-bold text-white mb-4\">Upgrade to Premium</h3>\n          <p className=\"text-gray-300 mb-6\">\n            Unlock the most advanced AI automated trading system with guaranteed profits and money\n            market integration.\n          </p>\n          <Button className=\"bg-gradient-to-r from-purple-500 to-pink-500 text-white px-8 py-3 text-lg\">\n            <Crown className=\"h-5 w-5 mr-2\" />\n            Upgrade Now\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* System Control Panel */}\n      <Card className=\"bg-gradient-to-r from-gray-900/90 to-black/90 border-2 border-cyan-400/50 backdrop-blur-xl shadow-2xl shadow-cyan-500/25\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-white flex items-center text-2xl\">\n              <Bot className=\"h-8 w-8 mr-3 text-cyan-400 animate-pulse\" />\n              🤖 AI AUTOMATED TRADING SYSTEM\n              <Badge\n                className={`ml-4 text-lg px-4 py-2 animate-pulse ${\n                  systemStatus === 'running'\n                    ? 'bg-gradient-to-r from-green-400 to-emerald-500 text-black'\n                    : systemStatus === 'paused'\n                      ? 'bg-gradient-to-r from-yellow-400 to-orange-500 text-black'\n                      : 'bg-gradient-to-r from-gray-500 to-gray-600 text-white'\n                }`}\n              >\n                {systemStatus === 'running'\n                  ? '🟢 LIVE TRADING'\n                  : systemStatus === 'paused'\n                    ? '⏸️ PAUSED'\n                    : '⏹️ STOPPED'}\n              </Badge>\n            </CardTitle>\n\n            <div className=\"flex items-center space-x-3\">\n              {systemStatus === 'stopped' && (\n                <Button\n                  onClick={startSystem}\n                  className=\"bg-gradient-to-r from-green-400 to-emerald-500 hover:from-green-500 hover:to-emerald-600 text-black font-bold px-6 py-3 text-lg shadow-lg shadow-green-500/50\"\n                >\n                  <Play className=\"h-5 w-5 mr-2\" />\n                  START AI TRADING\n                </Button>\n              )}\n\n              {systemStatus === 'running' && (\n                <>\n                  <Button\n                    onClick={pauseSystem}\n                    className=\"bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-black font-bold px-4 py-2\"\n                  >\n                    <Pause className=\"h-4 w-4 mr-2\" />\n                    Pause\n                  </Button>\n                  <Button\n                    onClick={stopSystem}\n                    variant=\"outline\"\n                    className=\"border-gray-500 text-gray-300 hover:bg-gray-800\"\n                  >\n                    <Square className=\"h-4 w-4 mr-2\" />\n                    Stop\n                  </Button>\n                </>\n              )}\n\n              {systemStatus === 'paused' && (\n                <>\n                  <Button\n                    onClick={() => setSystemStatus('running')}\n                    className=\"bg-gradient-to-r from-green-400 to-emerald-500 hover:from-green-500 hover:to-emerald-600 text-black font-bold px-4 py-2\"\n                  >\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    Resume\n                  </Button>\n                  <Button\n                    onClick={stopSystem}\n                    variant=\"outline\"\n                    className=\"border-gray-500 text-gray-300 hover:bg-gray-800\"\n                  >\n                    <Square className=\"h-4 w-4 mr-2\" />\n                    Stop\n                  </Button>\n                </>\n              )}\n\n              <Button\n                onClick={emergencyStop}\n                variant=\"destructive\"\n                className=\"bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 shadow-lg shadow-red-500/50\"\n              >\n                <Shield className=\"h-4 w-4 mr-2\" />\n                EMERGENCY STOP\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {/* Real-time Performance Dashboard */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4 mb-8\">\n            <div className=\"text-center p-4 bg-gradient-to-r from-green-400/20 to-emerald-500/20 rounded-xl border-2 border-green-400/30 shadow-lg shadow-green-500/25\">\n              <Wallet className=\"h-8 w-8 text-green-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-400\">Trading Capital</p>\n              <p className=\"text-xl font-bold text-green-400\">${tradingCapital.toLocaleString()}</p>\n            </div>\n\n            <div className=\"text-center p-4 bg-gradient-to-r from-blue-400/20 to-cyan-500/20 rounded-xl border-2 border-blue-400/30 shadow-lg shadow-blue-500/25\">\n              <DollarSign className=\"h-8 w-8 text-blue-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-400\">Money Market</p>\n              <p className=\"text-xl font-bold text-blue-400\">\n                ${moneyMarketBalance.toLocaleString()}\n              </p>\n              <p className=\"text-xs text-cyan-400\">1.5% APY</p>\n            </div>\n\n            <div className=\"text-center p-4 bg-gradient-to-r from-purple-400/20 to-pink-500/20 rounded-xl border-2 border-purple-400/30 shadow-lg shadow-purple-500/25\">\n              <TrendingUp className=\"h-8 w-8 text-purple-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-400\">Total Profit</p>\n              <p\n                className={`text-xl font-bold ${totalProfit >= 0 ? 'text-green-400' : 'text-red-400'}`}\n              >\n                ${totalProfit.toFixed(2)}\n              </p>\n            </div>\n\n            <div className=\"text-center p-4 bg-gradient-to-r from-yellow-400/20 to-orange-500/20 rounded-xl border-2 border-yellow-400/30 shadow-lg shadow-yellow-500/25\">\n              <Activity className=\"h-8 w-8 text-yellow-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-400\">Daily Profit</p>\n              <p\n                className={`text-xl font-bold ${dailyProfit >= 0 ? 'text-green-400' : 'text-red-400'}`}\n              >\n                ${dailyProfit.toFixed(2)}\n              </p>\n            </div>\n\n            <div className=\"text-center p-4 bg-gradient-to-r from-cyan-400/20 to-blue-500/20 rounded-xl border-2 border-cyan-400/30 shadow-lg shadow-cyan-500/25\">\n              <Target className=\"h-8 w-8 text-cyan-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-400\">Win Rate</p>\n              <p className=\"text-xl font-bold text-cyan-400\">\n                {executionMetrics.winRate.toFixed(1)}%\n              </p>\n            </div>\n\n            <div className=\"text-center p-4 bg-gradient-to-r from-indigo-400/20 to-purple-500/20 rounded-xl border-2 border-indigo-400/30 shadow-lg shadow-indigo-500/25\">\n              <Eye className=\"h-8 w-8 text-indigo-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-400\">Active Trades</p>\n              <p className=\"text-xl font-bold text-indigo-400\">{activeTrades.length}</p>\n            </div>\n\n            <div className=\"text-center p-4 bg-gradient-to-r from-pink-400/20 to-red-500/20 rounded-xl border-2 border-pink-400/30 shadow-lg shadow-pink-500/25\">\n              <Lightning className=\"h-8 w-8 text-pink-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-400\">Execution Speed</p>\n              <p className=\"text-xl font-bold text-pink-400\">\n                {executionMetrics.executionSpeed.toFixed(0)}ms\n              </p>\n            </div>\n\n            <div className=\"text-center p-4 bg-gradient-to-r from-teal-400/20 to-green-500/20 rounded-xl border-2 border-teal-400/30 shadow-lg shadow-teal-500/25\">\n              <Rocket className=\"h-8 w-8 text-teal-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-400\">Total Trades</p>\n              <p className=\"text-xl font-bold text-teal-400\">{executionMetrics.totalTrades}</p>\n            </div>\n          </div>\n\n          {/* AI Analysis */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <Card className=\"bg-gradient-to-r from-blue-500/10 to-purple-500/10 border-2 border-blue-400/30\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Brain className=\"h-6 w-6 mr-2 text-blue-400\" />\n                  AI Market Analysis\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Market Sentiment:</span>\n                    <span className=\"text-blue-400 font-bold\">\n                      {aiAnalysis.marketSentiment?.toFixed(0)}%\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Opportunity Score:</span>\n                    <span className=\"text-green-400 font-bold\">\n                      {aiAnalysis.opportunityScore?.toFixed(0)}%\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Risk Level:</span>\n                    <Badge\n                      className={\n                        aiAnalysis.riskLevel === 'low'\n                          ? 'bg-green-500'\n                          : aiAnalysis.riskLevel === 'medium'\n                            ? 'bg-yellow-500'\n                            : 'bg-red-500'\n                      }\n                    >\n                      {aiAnalysis.riskLevel?.toUpperCase()}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Next Trade ETA:</span>\n                    <span className=\"text-cyan-400 font-bold\">{aiAnalysis.nextTradeETA}s</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 border-2 border-green-400/30\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Star className=\"h-6 w-6 mr-2 text-green-400\" />\n                  Performance Metrics\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Profit Factor:</span>\n                    <span className=\"text-green-400 font-bold\">\n                      {executionMetrics.profitFactor.toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Sharpe Ratio:</span>\n                    <span className=\"text-blue-400 font-bold\">\n                      {executionMetrics.sharpeRatio.toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Max Drawdown:</span>\n                    <span className=\"text-red-400 font-bold\">\n                      {executionMetrics.maxDrawdown.toFixed(1)}%\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Avg Win:</span>\n                    <span className=\"text-green-400 font-bold\">\n                      ${executionMetrics.avgWin.toFixed(2)}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-gradient-to-r from-purple-500/10 to-pink-500/10 border-2 border-purple-400/30\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Atom className=\"h-6 w-6 mr-2 text-purple-400\" />\n                  System Settings\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Auto Scalping:</span>\n                    <Switch\n                      checked={systemSettings.autoScalp}\n                      onCheckedChange={checked =>\n                        setSystemSettings(prev => ({ ...prev, autoScalp: checked }))\n                      }\n                    />\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-400\">Money Market:</span>\n                    <Switch\n                      checked={systemSettings.moneyMarketTransfer}\n                      onCheckedChange={checked =>\n                        setSystemSettings(prev => ({ ...prev, moneyMarketTransfer: checked }))\n                      }\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-gray-400 text-sm\">Max Risk Per Trade (%)</label>\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={systemSettings.maxRiskPerTrade}\n                      onChange={e =>\n                        setSystemSettings(prev => ({\n                          ...prev,\n                          maxRiskPerTrade: Number(e.target.value),\n                        }))\n                      }\n                      className=\"bg-black/20 border-purple-500/30 text-white mt-1\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Active Trades */}\n          {activeTrades.length > 0 && (\n            <Card className=\"bg-gradient-to-r from-cyan-500/10 to-blue-500/10 border-2 border-cyan-400/30\">\n              <CardHeader>\n                <CardTitle className=\"text-white flex items-center\">\n                  <Activity className=\"h-6 w-6 mr-2 text-cyan-400\" />\n                  🔥 LIVE ACTIVE TRADES ({activeTrades.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {activeTrades.map((trade: any) => (\n                    <div\n                      key={trade.id}\n                      className=\"p-4 bg-gradient-to-r from-gray-800/50 to-gray-900/50 rounded-lg border border-cyan-400/30 hover:border-cyan-400/50 transition-all\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div>\n                            <div className=\"flex items-center space-x-2\">\n                              <span className=\"text-white font-bold text-lg\">{trade.symbol}</span>\n                              <Badge variant={trade.side === 'buy' ? 'default' : 'destructive'}>\n                                {trade.side.toUpperCase()}\n                              </Badge>\n                              <Badge variant=\"secondary\" className=\"bg-purple-500\">\n                                {trade.strategy}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-gray-400\">\n                              {trade.quantity} shares @ ${trade.entryPrice.toFixed(2)}\n                            </p>\n                          </div>\n\n                          <div className=\"text-center\">\n                            <p className=\"text-gray-400 text-sm\">Current Price</p>\n                            <p className=\"text-white font-semibold\">\n                              ${trade.currentPrice.toFixed(2)}\n                            </p>\n                          </div>\n\n                          <div className=\"text-center\">\n                            <p className=\"text-gray-400 text-sm\">P&L</p>\n                            <p\n                              className={`font-bold text-lg ${trade.pnl >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                            >\n                              ${trade.pnl.toFixed(2)}\n                            </p>\n                          </div>\n\n                          <div className=\"text-center\">\n                            <p className=\"text-gray-400 text-sm\">Confidence</p>\n                            <p className=\"text-cyan-400 font-semibold\">\n                              {trade.confidence.toFixed(0)}%\n                            </p>\n                          </div>\n                        </div>\n\n                        <div className=\"text-right\">\n                          <p className=\"text-xs text-gray-400\">\n                            {trade.entryTime.toLocaleTimeString()}\n                          </p>\n                          <div className=\"mt-1 space-y-1\">\n                            <Badge\n                              variant=\"outline\"\n                              className=\"border-green-500/30 text-green-400 text-xs\"\n                            >\n                              TP: ${trade.takeProfit.toFixed(2)}\n                            </Badge>\n                            <Badge\n                              variant=\"outline\"\n                              className=\"border-red-500/30 text-red-400 text-xs\"\n                            >\n                              SL: ${trade.stopLoss.toFixed(2)}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/trading/LineOfCredit.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `⏎`",
        "line": 7,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 8,
        "endColumn": 1,
        "fix": { "range": [163, 164], "text": "" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "'use client';\n\nimport type React from 'react';\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Slider } from '@/components/ui/slider';\nimport { CheckCheck, CreditCard, Wallet } from 'lucide-react';\n\ninterface LineOfCreditProps {\n  availableCredit: number;\n  interestRate: number;\n  onBorrow: (amount: number) => void;\n}\n\nconst LineOfCredit: React.FC<LineOfCreditProps> = ({ availableCredit, interestRate, onBorrow }) => {\n  const [borrowAmount, setBorrowAmount] = useState<number>(0);\n  const [sliderValue, setSliderValue] = useState<number[]>([0]);\n\n  const handleBorrowAmountChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = Number.parseFloat(event.target.value);\n    setBorrowAmount(value);\n    setSliderValue([value]);\n  };\n\n  const handleSliderChange = (value: number[]) => {\n    setSliderValue(value);\n    setBorrowAmount(value[0]);\n  };\n\n  const handleBorrow = () => {\n    if (borrowAmount > 0 && borrowAmount <= availableCredit) {\n      onBorrow(borrowAmount);\n      setBorrowAmount(0);\n      setSliderValue([0]);\n    } else {\n      alert('Invalid borrow amount.');\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle>Line of Credit</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-4\">\n          <div className=\"flex items-center space-x-2\">\n            <CreditCard size={20} className=\"text-muted-foreground\" />\n            <p>Available Credit: ${availableCredit.toFixed(2)}</p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Wallet size={20} className=\"text-muted-foreground\" />\n            <p>Interest Rate: {interestRate.toFixed(2)}%</p>\n          </div>\n          <div className=\"grid gap-2\">\n            <Label htmlFor=\"borrowAmount\">Borrow Amount</Label>\n            <Input\n              id=\"borrowAmount\"\n              type=\"number\"\n              placeholder=\"Enter amount to borrow\"\n              value={borrowAmount.toString()}\n              onChange={handleBorrowAmountChange}\n              max={availableCredit}\n            />\n          </div>\n          <div>\n            <Label>Adjust Borrow Amount</Label>\n            <Slider\n              defaultValue={[0]}\n              max={availableCredit}\n              step={1}\n              value={sliderValue}\n              onValueChange={handleSliderChange}\n            />\n          </div>\n          <Button onClick={handleBorrow} className=\"w-full\">\n            Borrow\n            <CheckCheck size={16} className=\"ml-2\" />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default LineOfCredit;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/trading/LiveTradingBot.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1783, 1786], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1783, 1786], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'setBotSettings' is assigned a value but never used.",
        "line": 75,
        "column": 23,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 37
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'executeTradeLogic'. Either include it or remove the dependency array.",
        "line": 95,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 95,
        "endColumn": 30,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [botStatus, botSettings, executeTradeLogic]",
            "fix": { "range": [2299, 2323], "text": "[botStatus, botSettings, executeTradeLogic]" }
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 502,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 502,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17913, 17916], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17913, 17916], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 593,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 593,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [21867, 21870], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [21867, 21870], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Bot,\n  Play,\n  Pause,\n  Square,\n  Zap,\n  TrendingUp,\n  Activity,\n  Target,\n  Brain,\n  AlertTriangle,\n  BarChart3,\n  Eye,\n  Wallet,\n  Timer,\n} from 'lucide-react';\n\n// Type definitions for live trading bot\ninterface Trade {\n  id: number;\n  symbol: string;\n  side: 'BUY' | 'SELL';\n  quantity: number;\n  entryPrice: number;\n  currentPrice: number;\n  strategy: string;\n  confidence: number;\n  timestamp: Date;\n  pnl: number;\n  status: 'OPEN' | 'CLOSED' | 'PENDING';\n  stopLoss: number;\n  takeProfit: number;\n}\n\ninterface TradeHistoryItem {\n  id: number;\n  symbol: string;\n  side: 'BUY' | 'SELL';\n  quantity: number;\n  entryPrice: number;\n  exitPrice: number;\n  strategy: string;\n  confidence: number;\n  entryTime: Date;\n  exitTime: Date;\n  pnl: number;\n  status: 'COMPLETED' | 'STOPPED';\n}\n\nexport default function LiveTradingBot() {\n  const [botStatus, setBotStatus] = useState('stopped'); // stopped, running, paused\n  const [accountBalance, setAccountBalance] = useState(50000);\n  const [totalPnL, setTotalPnL] = useState(0);\n  const [dailyPnL, setDailyPnL] = useState(0);\n  const [activeTrades, setActiveTrades] = useState<Trade[]>([]);\n  const [tradeHistory, setTradeHistory] = useState<TradeHistoryItem[]>([]);\n  const [botStats, setBotStats] = useState({\n    totalTrades: 0,\n    winRate: 0,\n    avgWin: 0,\n    avgLoss: 0,\n    maxDrawdown: 0,\n    sharpeRatio: 0,\n    profitFactor: 0,\n    tradingDays: 0,\n  });\n  const [marketAnalysis, setMarketAnalysis] = useState<Record<string, any>>({});\n  const [botSettings, setBotSettings] = useState({\n    maxPositionSize: 5000,\n    maxDailyLoss: 1000,\n    maxConcurrentTrades: 3,\n    riskPerTrade: 1.5,\n    aiConfidenceThreshold: 75,\n    tradingHours: true,\n    emergencyStop: true,\n  });\n\n  // Real-time market data simulation\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateMarketAnalysis();\n      if (botStatus === 'running') {\n        executeTradeLogic();\n      }\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [botStatus, botSettings]);\n\n  // Live trading execution logic\n  const executeTradeLogic = () => {\n    // Simulate AI market analysis\n    const symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA', 'META', 'AMZN', 'SPY', 'QQQ'];\n    const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];\n\n    // AI confidence score\n    const aiConfidence = 60 + Math.random() * 40;\n\n    // Only trade if AI confidence is above threshold\n    if (\n      aiConfidence >= botSettings.aiConfidenceThreshold &&\n      activeTrades.length < botSettings.maxConcurrentTrades\n    ) {\n      const shouldTrade = Math.random() > 0.95; // 5% chance per cycle\n\n      if (shouldTrade) {\n        executeTrade(randomSymbol, aiConfidence);\n      }\n    }\n\n    // Close existing trades based on AI analysis\n    activeTrades.forEach(trade => {\n      const shouldClose = Math.random() > 0.98; // 2% chance to close per cycle\n      if (shouldClose) {\n        closeTrade(trade.id);\n      }\n    });\n  };\n\n  const executeTrade = (symbol: string, confidence: number) => {\n    const side = Math.random() > 0.5 ? 'BUY' : 'SELL';\n    const price = 100 + Math.random() * 400;\n    const quantity = Math.floor(botSettings.maxPositionSize / price);\n    const strategy = ['AI Momentum', 'Mean Reversion', 'Breakout', 'News Sentiment'][\n      Math.floor(Math.random() * 4)\n    ];\n\n    const newTrade: Trade = {\n      id: Date.now(),\n      symbol,\n      side: side as 'BUY' | 'SELL',\n      quantity,\n      entryPrice: price,\n      currentPrice: price,\n      strategy,\n      confidence,\n      timestamp: new Date(),\n      pnl: 0,\n      status: 'OPEN',\n      stopLoss: side === 'BUY' ? price * 0.98 : price * 1.02,\n      takeProfit: side === 'BUY' ? price * 1.04 : price * 0.96,\n    };\n\n    setActiveTrades(prev => [...prev, newTrade]);\n    setBotStats(prev => ({ ...prev, totalTrades: prev.totalTrades + 1 }));\n  };\n\n  const closeTrade = (tradeId: number) => {\n    const trade = activeTrades.find(t => t.id === tradeId);\n    if (!trade) return;\n\n    const exitPrice = trade.currentPrice + (Math.random() - 0.5) * 10;\n    const pnl =\n      trade.side === 'BUY'\n        ? (exitPrice - trade.entryPrice) * trade.quantity\n        : (trade.entryPrice - exitPrice) * trade.quantity;\n\n    const closedTrade: TradeHistoryItem = {\n      id: trade.id,\n      symbol: trade.symbol,\n      side: trade.side,\n      quantity: trade.quantity,\n      entryPrice: trade.entryPrice,\n      exitPrice,\n      strategy: trade.strategy,\n      confidence: trade.confidence,\n      entryTime: trade.timestamp, // Use timestamp as entryTime\n      exitTime: new Date(),\n      pnl,\n      status: 'COMPLETED',\n    };\n\n    setActiveTrades(prev => prev.filter(t => t.id !== tradeId));\n    setTradeHistory(prev => [closedTrade, ...prev.slice(0, 49)]); // Keep last 50 trades\n\n    // Update account balance and P&L\n    setAccountBalance(prev => prev + pnl);\n    setTotalPnL(prev => prev + pnl);\n    setDailyPnL(prev => prev + pnl);\n\n    // Update stats\n    setBotStats(prev => {\n      const wins = tradeHistory.filter(t => t.pnl > 0).length + (pnl > 0 ? 1 : 0);\n      const losses = tradeHistory.filter(t => t.pnl <= 0).length + (pnl <= 0 ? 1 : 0);\n      const totalTrades = wins + losses;\n      const winRate = totalTrades > 0 ? (wins / totalTrades) * 100 : 0;\n\n      return {\n        ...prev,\n        winRate,\n        avgWin:\n          wins > 0\n            ? tradeHistory.filter(t => t.pnl > 0).reduce((sum, t) => sum + t.pnl, 0) / wins\n            : 0,\n        avgLoss:\n          losses > 0\n            ? Math.abs(tradeHistory.filter(t => t.pnl <= 0).reduce((sum, t) => sum + t.pnl, 0)) /\n              losses\n            : 0,\n      };\n    });\n  };\n\n  const updateMarketAnalysis = () => {\n    setMarketAnalysis({\n      marketTrend: Math.random() > 0.5 ? 'bullish' : 'bearish',\n      volatility: 10 + Math.random() * 30,\n      volume: 80 + Math.random() * 40,\n      sentiment: 40 + Math.random() * 60,\n      opportunities: Math.floor(Math.random() * 10) + 1,\n      riskLevel: Math.random() > 0.7 ? 'high' : Math.random() > 0.4 ? 'medium' : 'low',\n    });\n\n    // Update current prices for active trades\n    setActiveTrades(prev =>\n      prev.map(trade => {\n        const priceChange = (Math.random() - 0.5) * 5;\n        const newPrice = Math.max(trade.currentPrice + priceChange, 1);\n        const pnl =\n          trade.side === 'BUY'\n            ? (newPrice - trade.entryPrice) * trade.quantity\n            : (trade.entryPrice - newPrice) * trade.quantity;\n\n        return { ...trade, currentPrice: newPrice, pnl };\n      })\n    );\n  };\n\n  const startBot = () => {\n    setBotStatus('running');\n  };\n\n  const pauseBot = () => {\n    setBotStatus('paused');\n  };\n\n  const stopBot = () => {\n    setBotStatus('stopped');\n    // Close all active trades\n    activeTrades.forEach(trade => closeTrade(trade.id));\n  };\n\n  const emergencyStop = () => {\n    setBotStatus('stopped');\n    activeTrades.forEach(trade => closeTrade(trade.id));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Bot Control Panel */}\n      <Card className=\"bg-gray-900/90 border-cyan-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-gray-100 flex items-center\">\n              <Bot className=\"h-6 w-6 mr-2 text-cyan-400\" />\n              Live Trading Bot - AI Autopilot\n              <Badge\n                className={`ml-3 ${\n                  botStatus === 'running'\n                    ? 'bg-green-500 animate-pulse'\n                    : botStatus === 'paused'\n                      ? 'bg-yellow-500'\n                      : 'bg-gray-500'\n                }`}\n              >\n                {botStatus === 'running'\n                  ? '🟢 LIVE TRADING'\n                  : botStatus === 'paused'\n                    ? '⏸️ PAUSED'\n                    : '⏹️ STOPPED'}\n              </Badge>\n            </CardTitle>\n\n            <div className=\"flex items-center space-x-2\">\n              {botStatus === 'stopped' && (\n                <Button\n                  onClick={startBot}\n                  className=\"bg-green-500 hover:bg-green-600 text-black font-bold\"\n                >\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  START LIVE TRADING\n                </Button>\n              )}\n\n              {botStatus === 'running' && (\n                <>\n                  <Button\n                    onClick={pauseBot}\n                    className=\"bg-yellow-500 hover:bg-yellow-600 text-black\"\n                  >\n                    <Pause className=\"h-4 w-4 mr-2\" />\n                    Pause\n                  </Button>\n                  <Button\n                    onClick={stopBot}\n                    variant=\"outline\"\n                    className=\"border-gray-500 text-gray-300\"\n                  >\n                    <Square className=\"h-4 w-4 mr-2\" />\n                    Stop\n                  </Button>\n                </>\n              )}\n\n              {botStatus === 'paused' && (\n                <>\n                  <Button\n                    onClick={() => setBotStatus('running')}\n                    className=\"bg-green-500 hover:bg-green-600 text-black\"\n                  >\n                    <Play className=\"h-4 w-4 mr-2\" />\n                    Resume\n                  </Button>\n                  <Button\n                    onClick={stopBot}\n                    variant=\"outline\"\n                    className=\"border-gray-500 text-gray-300\"\n                  >\n                    <Square className=\"h-4 w-4 mr-2\" />\n                    Stop\n                  </Button>\n                </>\n              )}\n\n              <Button\n                onClick={emergencyStop}\n                variant=\"destructive\"\n                className=\"bg-red-600 hover:bg-red-700\"\n              >\n                <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                EMERGENCY STOP\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          {/* Real-time Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4\">\n            <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-cyan-500/20\">\n              <Wallet className=\"h-6 w-6 text-green-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Account Balance</p>\n              <p className=\"text-lg font-bold text-green-400\">${accountBalance.toLocaleString()}</p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-cyan-500/20\">\n              <TrendingUp className=\"h-6 w-6 text-cyan-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Total P&L</p>\n              <p\n                className={`text-lg font-bold ${totalPnL >= 0 ? 'text-green-400' : 'text-red-400'}`}\n              >\n                ${totalPnL.toFixed(2)}\n              </p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-cyan-500/20\">\n              <Activity className=\"h-6 w-6 text-blue-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Daily P&L</p>\n              <p\n                className={`text-lg font-bold ${dailyPnL >= 0 ? 'text-green-400' : 'text-red-400'}`}\n              >\n                ${dailyPnL.toFixed(2)}\n              </p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-cyan-500/20\">\n              <Target className=\"h-6 w-6 text-purple-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Win Rate</p>\n              <p className=\"text-lg font-bold text-gray-100\">{botStats.winRate.toFixed(1)}%</p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-cyan-500/20\">\n              <BarChart3 className=\"h-6 w-6 text-yellow-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Total Trades</p>\n              <p className=\"text-lg font-bold text-gray-100\">{botStats.totalTrades}</p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-cyan-500/20\">\n              <Eye className=\"h-6 w-6 text-orange-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Active Trades</p>\n              <p className=\"text-lg font-bold text-gray-100\">{activeTrades.length}</p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-cyan-500/20\">\n              <Brain className=\"h-6 w-6 text-pink-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">AI Confidence</p>\n              <p className=\"text-lg font-bold text-gray-100\">\n                {marketAnalysis.sentiment?.toFixed(0) || 0}%\n              </p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gray-800/50 rounded-lg border border-cyan-500/20\">\n              <Timer className=\"h-6 w-6 text-indigo-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Opportunities</p>\n              <p className=\"text-lg font-bold text-gray-100\">{marketAnalysis.opportunities || 0}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Market Analysis */}\n      <Card className=\"bg-gray-900/90 border-cyan-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <Brain className=\"h-6 w-6 mr-2 text-cyan-400\" />\n            Live Market Analysis\n            <Badge className=\"ml-3 bg-gradient-to-r from-cyan-500 to-blue-600\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              Real-time AI\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-lg border border-cyan-500/30\">\n                <h4 className=\"text-gray-200 font-semibold mb-3\">Market Conditions</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Trend:</span>\n                    <Badge\n                      className={\n                        marketAnalysis.marketTrend === 'bullish' ? 'bg-green-500' : 'bg-red-500'\n                      }\n                    >\n                      {marketAnalysis.marketTrend}\n                    </Badge>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Volatility:</span>\n                    <span className=\"text-gray-200\">{marketAnalysis.volatility?.toFixed(1)}%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Volume:</span>\n                    <span className=\"text-gray-200\">{marketAnalysis.volume?.toFixed(0)}%</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-gradient-to-r from-green-500/10 to-cyan-500/10 rounded-lg border border-green-500/30\">\n                <h4 className=\"text-gray-200 font-semibold mb-3\">AI Sentiment</h4>\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-cyan-400 mb-2\">\n                    {marketAnalysis.sentiment?.toFixed(0) || 0}%\n                  </div>\n                  <Progress value={marketAnalysis.sentiment || 0} className=\"h-3 mb-2\" />\n                  <p className=\"text-sm text-gray-400\">Bullish Confidence</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-500/30\">\n                <h4 className=\"text-gray-200 font-semibold mb-3\">Risk Assessment</h4>\n                <div className=\"text-center\">\n                  <Badge\n                    className={`text-lg px-4 py-2 ${\n                      marketAnalysis.riskLevel === 'high'\n                        ? 'bg-red-500'\n                        : marketAnalysis.riskLevel === 'medium'\n                          ? 'bg-yellow-500'\n                          : 'bg-green-500'\n                    }`}\n                  >\n                    {marketAnalysis.riskLevel?.toUpperCase() || 'LOW'} RISK\n                  </Badge>\n                  <p className=\"text-sm text-gray-400 mt-2\">Current Market Risk</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Active Trades */}\n      <Card className=\"bg-gray-900/90 border-cyan-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <Activity className=\"h-6 w-6 mr-2 text-green-400\" />\n            Live Active Trades ({activeTrades.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {activeTrades.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Target className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-400\">\n                No active trades. Bot is analyzing market for opportunities...\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {activeTrades.map((trade: any) => (\n                <div\n                  key={trade.id}\n                  className=\"p-4 bg-gray-800/50 rounded-lg border border-cyan-500/20 hover:border-cyan-500/40 transition-all\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"text-gray-100 font-bold text-lg\">{trade.symbol}</span>\n                          <Badge variant={trade.side === 'BUY' ? 'default' : 'destructive'}>\n                            {trade.side}\n                          </Badge>\n                          <Badge className=\"bg-purple-500\">{trade.strategy}</Badge>\n                        </div>\n                        <p className=\"text-sm text-gray-400\">\n                          {trade.quantity} shares @ ${trade.entryPrice.toFixed(2)}\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-gray-400 text-sm\">Current Price</p>\n                        <p className=\"text-gray-100 font-semibold\">\n                          ${trade.currentPrice.toFixed(2)}\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-gray-400 text-sm\">P&L</p>\n                        <p\n                          className={`font-bold text-lg ${trade.pnl >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                        >\n                          ${trade.pnl.toFixed(2)}\n                        </p>\n                      </div>\n\n                      <div className=\"text-center\">\n                        <p className=\"text-gray-400 text-sm\">Confidence</p>\n                        <p className=\"text-cyan-400 font-semibold\">\n                          {trade.confidence.toFixed(0)}%\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"text-right\">\n                      <p className=\"text-xs text-gray-400\">\n                        {trade.timestamp.toLocaleTimeString()}\n                      </p>\n                      <div className=\"mt-1\">\n                        <Badge\n                          variant=\"outline\"\n                          className=\"border-green-500/30 text-green-400 text-xs\"\n                        >\n                          SL: ${trade.stopLoss.toFixed(2)}\n                        </Badge>\n                      </div>\n                      <div className=\"mt-1\">\n                        <Badge\n                          variant=\"outline\"\n                          className=\"border-blue-500/30 text-blue-400 text-xs\"\n                        >\n                          TP: ${trade.takeProfit.toFixed(2)}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Recent Trade History */}\n      <Card className=\"bg-gray-900/90 border-cyan-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <BarChart3 className=\"h-6 w-6 mr-2 text-blue-400\" />\n            Recent Trade History\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {tradeHistory.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <BarChart3 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-400\">\n                No completed trades yet. Start the bot to begin trading!\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {tradeHistory.slice(0, 10).map((trade: any) => (\n                <div\n                  key={trade.id}\n                  className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded border border-gray-700/30\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <Badge variant={trade.side === 'BUY' ? 'default' : 'destructive'}>\n                      {trade.side}\n                    </Badge>\n                    <span className=\"text-gray-100 font-medium\">{trade.symbol}</span>\n                    <span className=\"text-gray-400 text-sm\">\n                      {trade.quantity} @ ${trade.entryPrice.toFixed(2)} → $\n                      {trade.exitPrice.toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <span\n                      className={`font-bold ${trade.pnl >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                    >\n                      ${trade.pnl.toFixed(2)}\n                    </span>\n                    <span className=\"text-gray-400 text-xs\">\n                      {trade.exitTime.toLocaleTimeString()}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/trading/OptionsLiveTradingBot.tsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'executeOptionsTradeLogic'. Either include it or remove the dependency array.",
        "line": 131,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 131,
        "endColumn": 30,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [botStatus, botSettings, executeOptionsTradeLogic]",
            "fix": {
              "range": [3277, 3301],
              "text": "[botStatus, botSettings, executeOptionsTradeLogic]"
            }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/trading/SportsAlphaTrader.tsx",
    "messages": [
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 434,
        "column": 25,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [14583, 14781],
              "text": "\n                SMART SP&apos;s lightning-fast algorithms enable instant analysis of sports event data,\n                ensuring you never miss a time-sensitive market-spread opportunity.\n              "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [14583, 14781],
              "text": "\n                SMART SP&lsquo;s lightning-fast algorithms enable instant analysis of sports event data,\n                ensuring you never miss a time-sensitive market-spread opportunity.\n              "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [14583, 14781],
              "text": "\n                SMART SP&#39;s lightning-fast algorithms enable instant analysis of sports event data,\n                ensuring you never miss a time-sensitive market-spread opportunity.\n              "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [14583, 14781],
              "text": "\n                SMART SP&rsquo;s lightning-fast algorithms enable instant analysis of sports event data,\n                ensuring you never miss a time-sensitive market-spread opportunity.\n              "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 483,
        "column": 58,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [17081, 17261],
              "text": "\n                Stay ahead of market shifts with SMART SP&apos;s dynamic strategies that adjust to\n                changing conditions, maximizing your trading outcomes.\n              "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [17081, 17261],
              "text": "\n                Stay ahead of market shifts with SMART SP&lsquo;s dynamic strategies that adjust to\n                changing conditions, maximizing your trading outcomes.\n              "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [17081, 17261],
              "text": "\n                Stay ahead of market shifts with SMART SP&#39;s dynamic strategies that adjust to\n                changing conditions, maximizing your trading outcomes.\n              "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [17081, 17261],
              "text": "\n                Stay ahead of market shifts with SMART SP&rsquo;s dynamic strategies that adjust to\n                changing conditions, maximizing your trading outcomes.\n              "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 581,
        "column": 57,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [21999, 22197],
              "text": "\n                Prioritize risk assessment with SMART SP&apos;s robust risk management protocols,\n                safeguarding your trades against potential losses for enhanced stability.\n              "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [21999, 22197],
              "text": "\n                Prioritize risk assessment with SMART SP&lsquo;s robust risk management protocols,\n                safeguarding your trades against potential losses for enhanced stability.\n              "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [21999, 22197],
              "text": "\n                Prioritize risk assessment with SMART SP&#39;s robust risk management protocols,\n                safeguarding your trades against potential losses for enhanced stability.\n              "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [21999, 22197],
              "text": "\n                Prioritize risk assessment with SMART SP&rsquo;s robust risk management protocols,\n                safeguarding your trades against potential losses for enhanced stability.\n              "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 673,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 673,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26709, 26712], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26709, 26712], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 754,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 754,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [30441, 30444], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [30441, 30444], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 853,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 853,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [35381, 35384], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [35381, 35384], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport {\n  Zap,\n  Activity,\n  Target,\n  AlertTriangle,\n  BarChart3,\n  Eye,\n  Flame,\n  Crown,\n  Sword,\n  Timer,\n  Repeat,\n  DollarSign,\n  Shield,\n  Layers,\n  ChevronDown,\n  Maximize2,\n  Minimize2,\n  Brain,\n} from 'lucide-react';\n\n// Type definitions for sports trading\ninterface SportsEvent {\n  id: number;\n  type: string;\n  teams: string;\n  time: string;\n  markets: string[];\n  volatility: string;\n  opportunities: number;\n}\n\ninterface TradingOpportunity {\n  id: number;\n  eventId: number;\n  eventName: string;\n  sportType: string;\n  marketType: string;\n  bookA: string;\n  bookB: string;\n  oddsA: number;\n  oddsB: number;\n  spreadValue: number;\n  confidence: number;\n  maxStake: number;\n  expectedReturn: number;\n  expectedValue: string;\n  timeWindow: string;\n  timestamp: Date;\n  expiryTime: Date;\n  status: string;\n  profitPotential: number;\n  risk: string;\n}\n\ninterface ActiveTrade {\n  id: number;\n  eventName: string;\n  sportType: string;\n  marketType: string;\n  bookA: string;\n  bookB: string;\n  oddsA: number;\n  oddsB: number;\n  spreadValue: number;\n  entryTime: Date;\n  status: string;\n  stake: number;\n  currentPnL: number;\n  expectedPnL: number;\n  confidence: number;\n}\n\ninterface ProfitStats {\n  totalProfit: number;\n  dailyProfit: number;\n  winRate: number;\n  avgSpread: number;\n  maxProfit: number;\n  riskRatio: number;\n}\n\ninterface ExpandedSections {\n  realTime: boolean;\n  adaptive: boolean;\n  profit: boolean;\n  risk: boolean;\n  interface: boolean;\n}\n\nexport default function SportsAlphaTrader() {\n  const [activeEvents, setActiveEvents] = useState<SportsEvent[]>([]);\n  const [opportunities, setOpportunities] = useState<TradingOpportunity[]>([]);\n  const [activeTrades, setActiveTrades] = useState<ActiveTrade[]>([]);\n  const [profitStats, setProfitStats] = useState<ProfitStats>({\n    totalProfit: 0,\n    dailyProfit: 0,\n    winRate: 0,\n    avgSpread: 0,\n    maxProfit: 0,\n    riskRatio: 0,\n  });\n  const [isHunting, setIsHunting] = useState(true);\n  const [expandedSections, setExpandedSections] = useState<ExpandedSections>({\n    realTime: false,\n    adaptive: false,\n    profit: false,\n    risk: false,\n    interface: false,\n  });\n\n  // Simulate sports events\n  useEffect(() => {\n    const sportsEvents = [\n      {\n        id: 1,\n        type: 'NFL',\n        teams: 'Chiefs vs. Ravens',\n        time: 'Live - Q3',\n        markets: ['Spread', 'Moneyline', 'Total Points'],\n        volatility: 'High',\n        opportunities: 3,\n      },\n      {\n        id: 2,\n        type: 'NBA',\n        teams: 'Lakers vs. Celtics',\n        time: 'Starting in 15m',\n        markets: ['Spread', 'Player Props', 'Quarter Lines'],\n        volatility: 'Medium',\n        opportunities: 2,\n      },\n      {\n        id: 3,\n        type: 'MLB',\n        teams: 'Yankees vs. Dodgers',\n        time: 'Live - 6th Inning',\n        markets: ['Run Line', 'Moneyline', 'Inning Props'],\n        volatility: 'Medium',\n        opportunities: 1,\n      },\n      {\n        id: 4,\n        type: 'UFC',\n        teams: 'McGregor vs. Poirier',\n        time: 'Starting in 2h',\n        markets: ['Moneyline', 'Round Props', 'Method of Victory'],\n        volatility: 'High',\n        opportunities: 4,\n      },\n      {\n        id: 5,\n        type: 'Soccer',\n        teams: 'Man City vs. Liverpool',\n        time: \"Live - 65'\",\n        markets: ['Asian Handicap', 'Goal Line', 'Corners'],\n        volatility: 'Low',\n        opportunities: 2,\n      },\n    ];\n\n    setActiveEvents(sportsEvents);\n    generateOpportunities(sportsEvents);\n\n    const interval = setInterval(() => {\n      if (isHunting) {\n        generateOpportunities(sportsEvents);\n        updateActiveTrades();\n      }\n    }, 3000);\n\n    return () => clearInterval(interval);\n  }, [isHunting]);\n\n  const generateOpportunities = (events: SportsEvent[]) => {\n    const newOpportunities: TradingOpportunity[] = [];\n\n    events.forEach((event: SportsEvent) => {\n      const marketTypes = ['Spread', 'Moneyline', 'Total', 'Prop', 'Futures', 'Live'];\n      const numOpps = Math.floor(Math.random() * 3) + 1;\n\n      for (let i = 0; i < numOpps; i++) {\n        const marketType = marketTypes[Math.floor(Math.random() * marketTypes.length)];\n        const bookA = ['DraftKings', 'FanDuel', 'BetMGM', 'Caesars', 'PointsBet'][\n          Math.floor(Math.random() * 5)\n        ];\n        const bookB = ['Pinnacle', 'Bet365', 'Bovada', 'Unibet', 'WynnBet'][\n          Math.floor(Math.random() * 5)\n        ];\n        const oddsA = Math.floor(Math.random() * 40) + 100;\n        const oddsB = oddsA + (Math.floor(Math.random() * 20) + 5);\n        const spreadValue = (Math.random() * 10 - 5).toFixed(1);\n        const confidence = Math.floor(Math.random() * 30) + 70;\n        const expectedValue = (Math.random() * 8 + 2).toFixed(1);\n        const timeWindow = ['Immediate', '5 minutes', '15 minutes', '30 minutes'][\n          Math.floor(Math.random() * 4)\n        ];\n\n        newOpportunities.push({\n          id: Date.now() + Math.random(),\n          eventId: event.id,\n          eventName: event.teams,\n          sportType: event.type,\n          marketType,\n          bookA,\n          bookB,\n          oddsA: Number(oddsA),\n          oddsB: Number(oddsB),\n          spreadValue: Number(spreadValue),\n          confidence,\n          maxStake: Math.floor(Math.random() * 1000) + 100,\n          expectedReturn: Number(expectedValue) * 10,\n          expectedValue,\n          timeWindow,\n          timestamp: new Date(),\n          expiryTime: new Date(Date.now() + 30 * 60 * 1000), // 30 minutes from now\n          status: 'active',\n          profitPotential: Number(expectedValue) * 10,\n          risk: confidence > 85 ? 'Low' : confidence > 70 ? 'Medium' : 'High',\n        });\n      }\n    });\n\n    // Sort by confidence and expected value\n    newOpportunities.sort((a, b) => {\n      if (b.confidence === a.confidence) {\n        return Number.parseFloat(b.expectedValue) - Number.parseFloat(a.expectedValue);\n      }\n      return b.confidence - a.confidence;\n    });\n\n    setOpportunities(newOpportunities.slice(0, 8));\n  };\n\n  const executeTrade = (opportunity: TradingOpportunity) => {\n    const newTrade = {\n      id: Date.now(),\n      eventName: opportunity.eventName,\n      sportType: opportunity.sportType,\n      marketType: opportunity.marketType,\n      bookA: opportunity.bookA,\n      bookB: opportunity.bookB,\n      oddsA: opportunity.oddsA,\n      oddsB: opportunity.oddsB,\n      spreadValue: opportunity.spreadValue,\n      entryTime: new Date(),\n      status: 'active',\n      stake: Math.floor(Math.random() * 500) + 100,\n      currentPnL: 0,\n      expectedPnL: Number.parseFloat(opportunity.expectedValue) * 10,\n      confidence: opportunity.confidence,\n    };\n\n    setActiveTrades(prev => [...prev, newTrade]);\n    setOpportunities(prev => prev.filter(op => op.id !== opportunity.id));\n  };\n\n  const updateActiveTrades = () => {\n    setActiveTrades(prev =>\n      prev.map(trade => {\n        // Randomly update PnL\n        const pnlChange = Math.random() * 20 - 5;\n        const newPnL = trade.currentPnL + pnlChange;\n\n        // Randomly close some trades\n        const shouldClose = Math.random() > 0.95;\n\n        if (shouldClose) {\n          // Update profit stats\n          setProfitStats(prev => ({\n            ...prev,\n            totalProfit: prev.totalProfit + newPnL,\n            dailyProfit: prev.dailyProfit + newPnL,\n            winRate: newPnL > 0 ? prev.winRate * 0.9 + 10 : prev.winRate * 0.9,\n            avgSpread: (prev.avgSpread + trade.spreadValue) / 2,\n            maxProfit: newPnL > prev.maxProfit ? newPnL : prev.maxProfit,\n          }));\n\n          return { ...trade, status: 'closed', currentPnL: newPnL };\n        }\n\n        return { ...trade, currentPnL: newPnL };\n      })\n    );\n\n    // Remove closed trades after a delay\n    setTimeout(() => {\n      setActiveTrades(prev => prev.filter(trade => trade.status !== 'closed'));\n    }, 5000);\n  };\n\n  const toggleSection = (section: keyof ExpandedSections) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev[section],\n    }));\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Sports Alpha Trader Header */}\n      <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-red-500/10 to-orange-500/5\"></div>\n        <CardHeader className=\"relative\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-gray-100 flex items-center\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"relative\">\n                  <Flame size={32} className=\"text-red-400 animate-pulse\" />\n                  <Zap\n                    size={16}\n                    className=\"text-yellow-400 absolute -top-1 -right-1 animate-bounce\"\n                  />\n                </div>\n                <div>\n                  <h2 className=\"text-2xl font-bold bg-gradient-to-r from-red-400 to-orange-400 bg-clip-text text-transparent\">\n                    SMART SP Alpha Sports Predator\n                  </h2>\n                  <p className=\"text-sm text-gray-400\">\n                    Hunt • Strike • Profit • Across All Sports Markets\n                  </p>\n                </div>\n              </div>\n              <Badge className={`ml-3 ${isHunting ? 'bg-red-500 animate-pulse' : 'bg-gray-500'}`}>\n                {isHunting ? '🎯 HUNTING SPREADS' : 'IDLE'}\n              </Badge>\n            </CardTitle>\n\n            <div className=\"flex items-center space-x-2\">\n              <Button\n                onClick={() => setIsHunting(!isHunting)}\n                className={\n                  isHunting\n                    ? 'border-red-500 text-red-300 hover:bg-red-500/20'\n                    : 'bg-gradient-to-r from-red-500 to-orange-600 hover:from-red-600 hover:to-orange-700'\n                }\n                variant={isHunting ? 'outline' : 'default'}\n              >\n                {isHunting ? (\n                  <>\n                    <AlertTriangle size={16} className=\"mr-2\" />\n                    Stop Hunting\n                  </>\n                ) : (\n                  <>\n                    <Sword size={16} className=\"mr-2\" />\n                    Start Hunting\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"relative\">\n          {/* Sports Alpha Stats */}\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n            <div className=\"text-center p-3 bg-gradient-to-b from-red-800/30 to-black/30 rounded-lg border border-red-500/30\">\n              <DollarSign size={24} className=\"text-green-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Total Profit</p>\n              <p className=\"text-lg font-bold text-green-400\">\n                ${profitStats.totalProfit.toFixed(2)}\n              </p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gradient-to-b from-orange-800/30 to-black/30 rounded-lg border border-orange-500/30\">\n              <Activity size={24} className=\"text-orange-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Daily Profit</p>\n              <p className=\"text-lg font-bold text-orange-400\">\n                ${profitStats.dailyProfit.toFixed(2)}\n              </p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gradient-to-b from-yellow-800/30 to-black/30 rounded-lg border border-yellow-500/30\">\n              <Target size={24} className=\"text-yellow-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Win Rate</p>\n              <p className=\"text-lg font-bold text-yellow-400\">{profitStats.winRate.toFixed(1)}%</p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gradient-to-b from-green-800/30 to-black/30 rounded-lg border border-green-500/30\">\n              <BarChart3 size={24} className=\"text-green-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Avg Spread</p>\n              <p className=\"text-lg font-bold text-green-400\">{profitStats.avgSpread.toFixed(1)}</p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gradient-to-b from-blue-800/30 to-black/30 rounded-lg border border-blue-500/30\">\n              <Crown size={24} className=\"text-blue-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Max Profit</p>\n              <p className=\"text-lg font-bold text-blue-400\">${profitStats.maxProfit.toFixed(2)}</p>\n            </div>\n\n            <div className=\"text-center p-3 bg-gradient-to-b from-purple-800/30 to-black/30 rounded-lg border border-purple-500/30\">\n              <Shield size={24} className=\"text-purple-400 mx-auto mb-1\" />\n              <p className=\"text-sm text-gray-400\">Risk Ratio</p>\n              <p className=\"text-lg font-bold text-purple-400\">\n                1:{(Math.random() * 2 + 1.5).toFixed(1)}\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* SMART SP Features */}\n      <div className=\"grid grid-cols-1 gap-4\">\n        {/* Real-Time Analysis */}\n        <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl\">\n          <CardHeader className=\"pb-2 cursor-pointer\" onClick={() => toggleSection('realTime')}>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-gray-100 flex items-center\">\n                <Timer size={20} className=\"mr-2 text-red-400\" />\n                Real-Time Analysis\n                <Badge className=\"ml-2 bg-red-500/20 text-red-300 border border-red-500/30\">\n                  <Zap size={12} className=\"mr-1\" />\n                  Lightning-Fast\n                </Badge>\n              </CardTitle>\n              {expandedSections.realTime ? (\n                <Minimize2 size={20} className=\"text-gray-400\" />\n              ) : (\n                <ChevronDown size={20} className=\"text-gray-400\" />\n              )}\n            </div>\n          </CardHeader>\n          {expandedSections.realTime && (\n            <CardContent>\n              <p className=\"text-gray-300 mb-4\">\n                SMART SP's lightning-fast algorithms enable instant analysis of sports event data,\n                ensuring you never miss a time-sensitive market-spread opportunity.\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-3 bg-black/30 rounded-lg border border-red-500/20\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Zap size={16} className=\"text-yellow-400\" />\n                    <p className=\"font-medium text-gray-100\">Sub-Second Analysis</p>\n                  </div>\n                  <p className=\"text-sm text-gray-400\">\n                    Process millions of data points across multiple sportsbooks in milliseconds\n                  </p>\n                </div>\n                <div className=\"p-3 bg-black/30 rounded-lg border border-red-500/20\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Activity size={16} className=\"text-green-400\" />\n                    <p className=\"font-medium text-gray-100\">Live Event Tracking</p>\n                  </div>\n                  <p className=\"text-sm text-gray-400\">\n                    Continuously monitor in-game events and their impact on market spreads\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n\n        {/* Adaptive Strategies */}\n        <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl\">\n          <CardHeader className=\"pb-2 cursor-pointer\" onClick={() => toggleSection('adaptive')}>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-gray-100 flex items-center\">\n                <Repeat size={20} className=\"mr-2 text-orange-400\" />\n                Adaptive Strategies\n                <Badge className=\"ml-2 bg-orange-500/20 text-orange-300 border border-orange-500/30\">\n                  <Flame size={12} className=\"mr-1\" />\n                  Dynamic\n                </Badge>\n              </CardTitle>\n              {expandedSections.adaptive ? (\n                <Minimize2 size={20} className=\"text-gray-400\" />\n              ) : (\n                <ChevronDown size={20} className=\"text-gray-400\" />\n              )}\n            </div>\n          </CardHeader>\n          {expandedSections.adaptive && (\n            <CardContent>\n              <p className=\"text-gray-300 mb-4\">\n                Stay ahead of market shifts with SMART SP's dynamic strategies that adjust to\n                changing conditions, maximizing your trading outcomes.\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-3 bg-black/30 rounded-lg border border-orange-500/20\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Brain size={16} className=\"text-purple-400\" />\n                    <p className=\"font-medium text-gray-100\">Self-Learning Models</p>\n                  </div>\n                  <p className=\"text-sm text-gray-400\">\n                    AI models that continuously improve based on market performance\n                  </p>\n                </div>\n                <div className=\"p-3 bg-black/30 rounded-lg border border-orange-500/20\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Layers size={16} className=\"text-blue-400\" />\n                    <p className=\"font-medium text-gray-100\">Multi-Factor Analysis</p>\n                  </div>\n                  <p className=\"text-sm text-gray-400\">\n                    Combines technical, statistical, and sentiment factors for optimal decisions\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n\n        {/* Profit Maximization */}\n        <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl\">\n          <CardHeader className=\"pb-2 cursor-pointer\" onClick={() => toggleSection('profit')}>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-gray-100 flex items-center\">\n                <Maximize2 size={20} className=\"mr-2 text-green-400\" />\n                Profit Maximization\n                <Badge className=\"ml-2 bg-green-500/20 text-green-300 border border-green-500/30\">\n                  <DollarSign size={12} className=\"mr-1\" />\n                  Optimal\n                </Badge>\n              </CardTitle>\n              {expandedSections.profit ? (\n                <Minimize2 size={20} className=\"text-gray-400\" />\n              ) : (\n                <ChevronDown size={20} className=\"text-gray-400\" />\n              )}\n            </div>\n          </CardHeader>\n          {expandedSections.profit && (\n            <CardContent>\n              <p className=\"text-gray-300 mb-4\">\n                SMART SP enables you to exploit price discrepancies and secure higher spreads by\n                executing trades at precisely the right moment.\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-3 bg-black/30 rounded-lg border border-green-500/20\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Target size={16} className=\"text-red-400\" />\n                    <p className=\"font-medium text-gray-100\">Optimal Entry/Exit</p>\n                  </div>\n                  <p className=\"text-sm text-gray-400\">\n                    Precision timing algorithms for maximum spread capture\n                  </p>\n                </div>\n                <div className=\"p-3 bg-black/30 rounded-lg border border-green-500/20\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <BarChart3 size={16} className=\"text-yellow-400\" />\n                    <p className=\"font-medium text-gray-100\">Spread Comparison</p>\n                  </div>\n                  <p className=\"text-sm text-gray-400\">\n                    Instantly compare odds across 20+ sportsbooks to find the best value\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n\n        {/* Risk Mitigation */}\n        <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl\">\n          <CardHeader className=\"pb-2 cursor-pointer\" onClick={() => toggleSection('risk')}>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-gray-100 flex items-center\">\n                <Shield size={20} className=\"mr-2 text-blue-400\" />\n                Risk Mitigation\n                <Badge className=\"ml-2 bg-blue-500/20 text-blue-300 border border-blue-500/30\">\n                  <AlertTriangle size={12} className=\"mr-1\" />\n                  Protected\n                </Badge>\n              </CardTitle>\n              {expandedSections.risk ? (\n                <Minimize2 size={20} className=\"text-gray-400\" />\n              ) : (\n                <ChevronDown size={20} className=\"text-gray-400\" />\n              )}\n            </div>\n          </CardHeader>\n          {expandedSections.risk && (\n            <CardContent>\n              <p className=\"text-gray-300 mb-4\">\n                Prioritize risk assessment with SMART SP's robust risk management protocols,\n                safeguarding your trades against potential losses for enhanced stability.\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-3 bg-black/30 rounded-lg border border-blue-500/20\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Shield size={16} className=\"text-blue-400\" />\n                    <p className=\"font-medium text-gray-100\">Automated Hedging</p>\n                  </div>\n                  <p className=\"text-sm text-gray-400\">\n                    Dynamic hedging strategies to protect positions during volatile events\n                  </p>\n                </div>\n                <div className=\"p-3 bg-black/30 rounded-lg border border-blue-500/20\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Activity size={16} className=\"text-purple-400\" />\n                    <p className=\"font-medium text-gray-100\">Volatility Controls</p>\n                  </div>\n                  <p className=\"text-sm text-gray-400\">\n                    Adaptive position sizing based on event volatility and market conditions\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n\n        {/* User-Friendly Interface */}\n        <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl\">\n          <CardHeader className=\"pb-2 cursor-pointer\" onClick={() => toggleSection('interface')}>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-gray-100 flex items-center\">\n                <Layers size={20} className=\"mr-2 text-purple-400\" />\n                User-Friendly Interface\n                <Badge className=\"ml-2 bg-purple-500/20 text-purple-300 border border-purple-500/30\">\n                  <Eye size={12} className=\"mr-1\" />\n                  Intuitive\n                </Badge>\n              </CardTitle>\n              {expandedSections.interface ? (\n                <Minimize2 size={20} className=\"text-gray-400\" />\n              ) : (\n                <ChevronDown size={20} className=\"text-gray-400\" />\n              )}\n            </div>\n          </CardHeader>\n          {expandedSections.interface && (\n            <CardContent>\n              <p className=\"text-gray-300 mb-4\">\n                Seamlessly integrated into an intuitive platform, SMART SP is designed for traders\n                of all levels, simplifying your sports market-spread trading journey.\n              </p>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"p-3 bg-black/30 rounded-lg border border-purple-500/20\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Zap size={16} className=\"text-yellow-400\" />\n                    <p className=\"font-medium text-gray-100\">One-Click Execution</p>\n                  </div>\n                  <p className=\"text-sm text-gray-400\">\n                    Execute complex arbitrage trades across multiple books with a single click\n                  </p>\n                </div>\n                <div className=\"p-3 bg-black/30 rounded-lg border border-purple-500/20\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <Crown size={16} className=\"text-orange-400\" />\n                    <p className=\"font-medium text-gray-100\">Customizable Dashboard</p>\n                  </div>\n                  <p className=\"text-sm text-gray-400\">\n                    Personalize your trading view with the metrics and sports that matter most\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          )}\n        </Card>\n      </div>\n\n      {/* Sports Events and Opportunities */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Active Sports Events */}\n        <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-100 flex items-center\">\n              <Activity size={20} className=\"mr-2 text-orange-400\" />\n              Active Sports Events\n              <Badge className=\"ml-2 bg-orange-500/20 text-orange-300 border border-orange-500/30\">\n                {activeEvents.length} Events\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {activeEvents.map((event: any) => (\n                <div\n                  key={event.id}\n                  className=\"p-3 bg-gradient-to-r from-red-800/20 to-orange-800/20 rounded-lg border border-red-500/30 hover:border-red-400/50 transition-all\"\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"flex items-center space-x-2\">\n                        <Badge\n                          className={`${\n                            event.type === 'NFL' || event.type === 'NBA'\n                              ? 'bg-blue-500'\n                              : event.type === 'MLB'\n                                ? 'bg-red-500'\n                                : event.type === 'UFC'\n                                  ? 'bg-purple-500'\n                                  : 'bg-green-500'\n                          }`}\n                        >\n                          {event.type}\n                        </Badge>\n                        <span className=\"text-gray-100 font-bold\">{event.teams}</span>\n                        <Badge variant=\"outline\" className=\"border-orange-500/30 text-orange-400\">\n                          {event.time}\n                        </Badge>\n                      </div>\n                      <div className=\"flex flex-wrap gap-1 mt-1\">\n                        {event.markets.map((market: string, i: number) => (\n                          <Badge\n                            key={i}\n                            variant=\"outline\"\n                            className=\"text-xs border-gray-500/30 text-gray-400\"\n                          >\n                            {market}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge\n                        className={`${\n                          event.volatility === 'High'\n                            ? 'bg-red-500/20 text-red-300 border border-red-500/30'\n                            : event.volatility === 'Medium'\n                              ? 'bg-yellow-500/20 text-yellow-300 border border-yellow-500/30'\n                              : 'bg-green-500/20 text-green-300 border border-green-500/30'\n                        }`}\n                      >\n                        {event.volatility} Volatility\n                      </Badge>\n                      <p className=\"text-sm text-gray-400 mt-1\">\n                        {event.opportunities} opportunities\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Spread Opportunities */}\n        <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl\">\n          <CardHeader>\n            <CardTitle className=\"text-gray-100 flex items-center\">\n              <Target size={20} className=\"mr-2 text-red-400 animate-pulse\" />\n              Spread Opportunities\n              <Badge className=\"ml-2 bg-red-500 animate-pulse\">\n                <Zap size={12} className=\"mr-1\" />\n                Live Hunting\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {opportunities.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Target size={48} className=\"text-gray-400 mx-auto mb-4 animate-pulse\" />\n                  <p className=\"text-gray-400\">Hunting for spread opportunities...</p>\n                </div>\n              ) : (\n                opportunities.map((opportunity: any) => (\n                  <div\n                    key={opportunity.id}\n                    className=\"p-3 bg-gradient-to-r from-red-800/20 to-orange-800/20 rounded-lg border border-red-500/30 hover:border-red-400/50 transition-all\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge\n                            className={`${\n                              opportunity.sportType === 'NFL' || opportunity.sportType === 'NBA'\n                                ? 'bg-blue-500'\n                                : opportunity.sportType === 'MLB'\n                                  ? 'bg-red-500'\n                                  : opportunity.sportType === 'UFC'\n                                    ? 'bg-purple-500'\n                                    : 'bg-green-500'\n                            }`}\n                          >\n                            {opportunity.sportType}\n                          </Badge>\n                          <span className=\"text-gray-100 font-bold\">{opportunity.eventName}</span>\n                        </div>\n                        <div className=\"mt-1 grid grid-cols-2 gap-2\">\n                          <div className=\"text-sm\">\n                            <span className=\"text-gray-400\">{opportunity.bookA}:</span>{' '}\n                            <span className=\"text-gray-100\">{opportunity.oddsA}</span>\n                          </div>\n                          <div className=\"text-sm\">\n                            <span className=\"text-gray-400\">{opportunity.bookB}:</span>{' '}\n                            <span className=\"text-gray-100\">{opportunity.oddsB}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"flex flex-col items-end\">\n                          <Badge className=\"bg-gradient-to-r from-red-500 to-orange-600 mb-1\">\n                            {opportunity.marketType}\n                          </Badge>\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"text-center\">\n                              <p className=\"text-xs text-gray-400\">Confidence</p>\n                              <p className=\"text-sm font-bold text-red-400\">\n                                {opportunity.confidence}%\n                              </p>\n                            </div>\n                            <div className=\"text-center\">\n                              <p className=\"text-xs text-gray-400\">EV</p>\n                              <p className=\"text-sm font-bold text-green-400\">\n                                +{opportunity.expectedValue}%\n                              </p>\n                            </div>\n                          </div>\n                          <Badge\n                            variant=\"outline\"\n                            className=\"mt-1 border-yellow-500/30 text-yellow-400 text-xs\"\n                          >\n                            <Timer size={12} className=\"mr-1\" />\n                            {opportunity.timeWindow}\n                          </Badge>\n                        </div>\n                        <Button\n                          onClick={() => executeTrade(opportunity)}\n                          size=\"sm\"\n                          className=\"mt-2 bg-gradient-to-r from-red-500 to-orange-600 hover:from-red-600 hover:to-orange-700 text-xs\"\n                        >\n                          <Sword size={12} className=\"mr-1\" />\n                          Execute Trade\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Active Trades */}\n      <Card className=\"bg-gradient-to-r from-red-900/90 to-black/90 border-red-500/50 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-gray-100 flex items-center\">\n            <Sword size={20} className=\"mr-2 text-orange-400\" />\n            Active Spread Trades ({activeTrades.filter(t => t.status === 'active').length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {activeTrades.filter(t => t.status === 'active').length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Sword size={48} className=\"text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-400\">\n                No active trades. The Alpha Wolf is stalking new opportunities...\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {activeTrades\n                .filter(t => t.status === 'active')\n                .map((trade: any) => (\n                  <div\n                    key={trade.id}\n                    className=\"p-3 bg-gradient-to-r from-red-800/30 to-orange-800/30 rounded-lg border border-red-500/30 hover:border-red-400/50 transition-all\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"flex items-center space-x-2\">\n                          <Badge\n                            className={`${\n                              trade.sportType === 'NFL' || trade.sportType === 'NBA'\n                                ? 'bg-blue-500'\n                                : trade.sportType === 'MLB'\n                                  ? 'bg-red-500'\n                                  : trade.sportType === 'UFC'\n                                    ? 'bg-purple-500'\n                                    : 'bg-green-500'\n                            }`}\n                          >\n                            {trade.sportType}\n                          </Badge>\n                          <span className=\"text-gray-100 font-bold\">{trade.eventName}</span>\n                          <Badge className=\"bg-gradient-to-r from-red-500 to-orange-600\">\n                            {trade.marketType}\n                          </Badge>\n                        </div>\n                        <div className=\"mt-1 grid grid-cols-2 gap-2\">\n                          <div className=\"text-sm\">\n                            <span className=\"text-gray-400\">{trade.bookA}:</span>{' '}\n                            <span className=\"text-gray-100\">{trade.oddsA}</span>\n                          </div>\n                          <div className=\"text-sm\">\n                            <span className=\"text-gray-400\">{trade.bookB}:</span>{' '}\n                            <span className=\"text-gray-100\">{trade.oddsB}</span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"text-center\">\n                            <p className=\"text-xs text-gray-400\">Stake</p>\n                            <p className=\"text-sm font-bold text-gray-100\">${trade.stake}</p>\n                          </div>\n                          <div className=\"text-center\">\n                            <p className=\"text-xs text-gray-400\">Current P&L</p>\n                            <p\n                              className={`text-sm font-bold ${trade.currentPnL >= 0 ? 'text-green-400' : 'text-red-400'}`}\n                            >\n                              {trade.currentPnL >= 0 ? '+' : ''}${trade.currentPnL.toFixed(2)}\n                            </p>\n                          </div>\n                          <div className=\"text-center\">\n                            <p className=\"text-xs text-gray-400\">Expected</p>\n                            <p className=\"text-sm font-bold text-green-400\">\n                              +${trade.expectedPnL.toFixed(2)}\n                            </p>\n                          </div>\n                        </div>\n                        <Progress\n                          value={(trade.currentPnL / trade.expectedPnL) * 100}\n                          className=\"h-1 mt-2\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/trading/UltraFastTradingEngine.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'user' is defined but never used.",
        "line": 86,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 86,
        "endColumn": 7
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 358,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 358,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10595, 10598], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10595, 10598], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 577,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 577,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20319, 20322], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20319, 20322], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 620,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 620,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22400, 22403], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22400, 22403], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect, useRef, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Zap,\n  Bot,\n  Target,\n  Activity,\n  Clock,\n  ArrowUp,\n  ArrowDown,\n  CloudLightningIcon as Lightning,\n  Rocket,\n  Brain,\n  Eye,\n  Timer,\n} from 'lucide-react';\n\n// Type definitions\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\ninterface Trade {\n  id: string;\n  symbol: string;\n  side: 'buy' | 'sell';\n  quantity: number;\n  price: number;\n  timestamp: Date;\n  executionTime: number;\n  status: 'completed' | 'pending' | 'failed';\n}\n\ninterface MarketData {\n  [symbol: string]: {\n    price: number;\n    change: number;\n    changePercent: number;\n    volume: number;\n    bid: number;\n    ask: number;\n    timestamp: Date;\n  };\n}\n\ninterface AISignal {\n  id: number;\n  symbol: string;\n  action: 'buy' | 'sell';\n  confidence: number;\n  targetPrice: number;\n  timeframe: string;\n  reason: string;\n  timestamp: Date;\n}\n\ninterface PremiumFeatures {\n  maxTrades: number | 'unlimited';\n  executionSpeed: string;\n  aiSignals: number | 'unlimited';\n  autoTrade: boolean;\n  advancedOrders: boolean;\n  realTimeData: boolean;\n}\n\ninterface UltraFastTradingEngineProps {\n  user: User;\n  membershipLevel: 'free' | 'basic' | 'pro' | 'ultimate';\n}\n\nexport default function UltraFastTradingEngine({\n  user,\n  membershipLevel,\n}: UltraFastTradingEngineProps) {\n  const [selectedStock, setSelectedStock] = useState<string>('AAPL');\n  const [orderType, setOrderType] = useState<'market' | 'limit' | 'stop'>('market');\n  const [quantity, setQuantity] = useState<number>(100);\n  const [price, setPrice] = useState<number>(0);\n  const [side, setSide] = useState<'buy' | 'sell'>('buy');\n  const [isExecuting, setIsExecuting] = useState<boolean>(false);\n  const [executionTime, setExecutionTime] = useState<number>(0);\n  const [recentTrades, setRecentTrades] = useState<Trade[]>([]);\n  const [marketData, setMarketData] = useState<MarketData>({});\n  const [aiSignals, setAiSignals] = useState<AISignal[]>([]);\n  const [autoTradeEnabled, setAutoTradeEnabled] = useState<boolean>(false);\n\n  const executionTimeRef = useRef<number>(0);\n  const wsRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Premium features based on membership\n  const premiumFeatures: Record<string, PremiumFeatures> = {\n    free: {\n      maxTrades: 10,\n      executionSpeed: 'standard',\n      aiSignals: 3,\n      autoTrade: false,\n      advancedOrders: false,\n      realTimeData: false,\n    },\n    basic: {\n      maxTrades: 100,\n      executionSpeed: 'fast',\n      aiSignals: 10,\n      autoTrade: false,\n      advancedOrders: true,\n      realTimeData: true,\n    },\n    pro: {\n      maxTrades: 500,\n      executionSpeed: 'ultra-fast',\n      aiSignals: 25,\n      autoTrade: true,\n      advancedOrders: true,\n      realTimeData: true,\n    },\n    ultimate: {\n      maxTrades: 'unlimited',\n      executionSpeed: 'lightning',\n      aiSignals: 'unlimited',\n      autoTrade: true,\n      advancedOrders: true,\n      realTimeData: true,\n    },\n  };\n\n  const currentFeatures = premiumFeatures[membershipLevel] || premiumFeatures.free;\n\n  const getExecutionTime = useCallback(() => {\n    switch (currentFeatures.executionSpeed) {\n      case 'lightning':\n        return Math.random() * 10 + 5; // 5-15ms\n      case 'ultra-fast':\n        return Math.random() * 50 + 20; // 20-70ms\n      case 'fast':\n        return Math.random() * 100 + 50; // 50-150ms\n      default:\n        return Math.random() * 500 + 200; // 200-700ms\n    }\n  }, [currentFeatures.executionSpeed]);\n\n  const updateMarketData = useCallback(() => {\n    const stocks = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA', 'META', 'AMZN', 'SPY', 'QQQ'];\n    const newData: MarketData = {};\n\n    stocks.forEach((symbol: string) => {\n      const basePrice = 100 + Math.random() * 400;\n      const change = (Math.random() - 0.5) * 10;\n      newData[symbol] = {\n        price: basePrice,\n        change: change,\n        changePercent: (change / basePrice) * 100,\n        volume: Math.floor(Math.random() * 10000000),\n        bid: basePrice - 0.01,\n        ask: basePrice + 0.01,\n        timestamp: new Date(),\n      };\n    });\n\n    setMarketData(newData);\n    if (selectedStock && newData[selectedStock]) {\n      setPrice(newData[selectedStock].price);\n    }\n  }, [selectedStock]);\n\n  const executeAutoTrade = useCallback(\n    async (signal: AISignal) => {\n      const autoTrade: Trade = {\n        id: Date.now().toString(),\n        symbol: signal.symbol,\n        side: signal.action,\n        quantity: Math.floor(1000 / signal.targetPrice), // $1000 position\n        price: signal.targetPrice,\n        timestamp: new Date(),\n        executionTime: getExecutionTime(),\n        status: 'completed',\n      };\n\n      setRecentTrades((prev: Trade[]) => [autoTrade, ...prev.slice(0, 49)]);\n    },\n    [getExecutionTime]\n  );\n\n  const generateAISignals = useCallback(() => {\n    if (\n      typeof currentFeatures.aiSignals === 'number' &&\n      aiSignals.length >= currentFeatures.aiSignals\n    )\n      return;\n\n    const stocks = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA', 'META', 'AMZN', 'SPY', 'QQQ'];\n    const signal: AISignal = {\n      id: Date.now(),\n      symbol: stocks[Math.floor(Math.random() * stocks.length)],\n      action: Math.random() > 0.5 ? 'buy' : 'sell',\n      confidence: 75 + Math.random() * 25,\n      targetPrice: 100 + Math.random() * 400,\n      timeframe: ['1m', '5m', '15m', '1h'][Math.floor(Math.random() * 4)],\n      reason: [\n        'Bullish momentum detected',\n        'Support level bounce',\n        'Breakout pattern confirmed',\n        'Volume surge detected',\n        'AI pattern recognition',\n        'Earnings catalyst',\n      ][Math.floor(Math.random() * 6)],\n      timestamp: new Date(),\n    };\n\n    setAiSignals((prev: AISignal[]) => [signal, ...prev.slice(0, 19)]);\n\n    // Auto-execute if enabled and premium member\n    if (autoTradeEnabled && currentFeatures.autoTrade && signal.confidence > 85) {\n      executeAutoTrade(signal);\n    }\n  }, [\n    aiSignals.length,\n    currentFeatures.aiSignals,\n    currentFeatures.autoTrade,\n    autoTradeEnabled,\n    executeAutoTrade,\n  ]);\n\n  useEffect(() => {\n    // Simulate WebSocket connection for real-time data\n    if (currentFeatures.realTimeData) {\n      wsRef.current = setInterval(() => {\n        updateMarketData();\n        generateAISignals();\n      }, 100); // Ultra-fast updates\n    } else {\n      wsRef.current = setInterval(() => {\n        updateMarketData();\n      }, 5000); // Standard updates\n    }\n\n    return () => {\n      if (wsRef.current) clearInterval(wsRef.current);\n    };\n  }, [membershipLevel, currentFeatures.realTimeData, updateMarketData, generateAISignals]);\n\n  const executeTrade = async () => {\n    if (\n      typeof currentFeatures.maxTrades === 'number' &&\n      recentTrades.length >= currentFeatures.maxTrades\n    ) {\n      alert(`Trade limit reached for ${membershipLevel} membership`);\n      return;\n    }\n\n    setIsExecuting(true);\n    executionTimeRef.current = Date.now();\n\n    // Simulate ultra-fast execution\n    const execTime = getExecutionTime();\n    await new Promise(resolve => setTimeout(resolve, execTime));\n\n    const trade: Trade = {\n      id: Date.now().toString(),\n      symbol: selectedStock,\n      side,\n      quantity,\n      price: orderType === 'market' ? marketData[selectedStock]?.price || price : price,\n      timestamp: new Date(),\n      executionTime: execTime,\n      status: 'completed',\n    };\n\n    setRecentTrades((prev: Trade[]) => [trade, ...prev.slice(0, 49)]);\n    setExecutionTime(execTime);\n    setIsExecuting(false);\n  };\n\n  const getSpeedBadge = () => {\n    switch (currentFeatures.executionSpeed) {\n      case 'lightning':\n        return (\n          <Badge className=\"bg-yellow-500 animate-pulse\">\n            <Lightning className=\"h-3 w-3 mr-1\" />\n            Lightning (5-15ms)\n          </Badge>\n        );\n      case 'ultra-fast':\n        return (\n          <Badge className=\"bg-blue-500\">\n            <Rocket className=\"h-3 w-3 mr-1\" />\n            Ultra-Fast (20-70ms)\n          </Badge>\n        );\n      case 'fast':\n        return (\n          <Badge className=\"bg-green-500\">\n            <Zap className=\"h-3 w-3 mr-1\" />\n            Fast (50-150ms)\n          </Badge>\n        );\n      default:\n        return (\n          <Badge className=\"bg-gray-500\">\n            <Clock className=\"h-3 w-3 mr-1\" />\n            Standard (200-700ms)\n          </Badge>\n        );\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Ultra-Fast Trading Interface */}\n      <Card className=\"bg-black/20 border-cyan-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-white flex items-center\">\n              <Lightning className=\"h-6 w-6 mr-2 text-cyan-400\" />\n              Ultra-Fast Trading Engine\n              {getSpeedBadge()}\n            </CardTitle>\n            <div className=\"flex items-center space-x-2\">\n              {currentFeatures.autoTrade && (\n                <Button\n                  variant={autoTradeEnabled ? 'default' : 'outline'}\n                  onClick={() => setAutoTradeEnabled(!autoTradeEnabled)}\n                  className={autoTradeEnabled ? 'bg-green-500 hover:bg-green-600' : ''}\n                >\n                  <Bot className=\"h-4 w-4 mr-2\" />\n                  Auto-Trade {autoTradeEnabled ? 'ON' : 'OFF'}\n                </Button>\n              )}\n              <Badge className=\"bg-purple-500\">{membershipLevel.toUpperCase()}</Badge>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Order Entry */}\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-white text-sm font-medium\">Symbol</label>\n                  <Select value={selectedStock} onValueChange={setSelectedStock}>\n                    <SelectTrigger className=\"bg-black/20 border-cyan-500/30 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {Object.keys(marketData).map((symbol: any) => (\n                        <SelectItem key={symbol} value={symbol}>\n                          {symbol} - ${marketData[symbol]?.price?.toFixed(2)}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-white text-sm font-medium\">Side</label>\n                  <Select\n                    value={side}\n                    onValueChange={(value: string) => setSide(value as 'buy' | 'sell')}\n                  >\n                    <SelectTrigger className=\"bg-black/20 border-cyan-500/30 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"buy\">\n                        <div className=\"flex items-center\">\n                          <ArrowUp className=\"h-4 w-4 text-green-400 mr-2\" />\n                          BUY\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"sell\">\n                        <div className=\"flex items-center\">\n                          <ArrowDown className=\"h-4 w-4 text-red-400 mr-2\" />\n                          SELL\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-white text-sm font-medium\">Order Type</label>\n                  <Select\n                    value={orderType}\n                    onValueChange={(value: string) =>\n                      setOrderType(value as 'market' | 'limit' | 'stop')\n                    }\n                  >\n                    <SelectTrigger className=\"bg-black/20 border-cyan-500/30 text-white\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"market\">Market</SelectItem>\n                      {currentFeatures.advancedOrders && (\n                        <>\n                          <SelectItem value=\"limit\">Limit</SelectItem>\n                          <SelectItem value=\"stop\">Stop Loss</SelectItem>\n                          <SelectItem value=\"stop-limit\">Stop Limit</SelectItem>\n                        </>\n                      )}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2\">\n                  <label className=\"text-white text-sm font-medium\">Quantity</label>\n                  <Input\n                    type=\"number\"\n                    value={quantity}\n                    onChange={e => setQuantity(Number(e.target.value))}\n                    className=\"bg-black/20 border-cyan-500/30 text-white\"\n                  />\n                </div>\n              </div>\n\n              {orderType !== 'market' && (\n                <div className=\"space-y-2\">\n                  <label className=\"text-white text-sm font-medium\">Price</label>\n                  <Input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={price}\n                    onChange={e => setPrice(Number(e.target.value))}\n                    className=\"bg-black/20 border-cyan-500/30 text-white\"\n                  />\n                </div>\n              )}\n\n              <Button\n                onClick={executeTrade}\n                disabled={isExecuting}\n                className={`w-full text-lg font-bold ${\n                  side === 'buy' ? 'bg-green-500 hover:bg-green-600' : 'bg-red-500 hover:bg-red-600'\n                }`}\n              >\n                {isExecuting ? (\n                  <div className=\"flex items-center\">\n                    <div className=\"animate-spin h-5 w-5 border-2 border-white border-t-transparent rounded-full mr-2\"></div>\n                    Executing...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center\">\n                    <Lightning className=\"h-5 w-5 mr-2\" />\n                    {side.toUpperCase()} {selectedStock}\n                  </div>\n                )}\n              </Button>\n\n              {executionTime > 0 && (\n                <div className=\"text-center p-3 bg-green-500/20 rounded-lg border border-green-500/30\">\n                  <p className=\"text-green-400 font-bold\">\n                    <Timer className=\"h-4 w-4 inline mr-1\" />\n                    Executed in {executionTime.toFixed(1)}ms\n                  </p>\n                </div>\n              )}\n            </div>\n\n            {/* Real-time Market Data */}\n            <div className=\"space-y-4\">\n              <h4 className=\"text-white font-semibold\">Real-time Market Data</h4>\n              {selectedStock && marketData[selectedStock] && (\n                <div className=\"p-4 bg-gradient-to-r from-cyan-500/10 to-blue-500/10 rounded-lg border border-cyan-500/30\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span className=\"text-white font-bold text-xl\">{selectedStock}</span>\n                    <Badge\n                      className={\n                        currentFeatures.realTimeData ? 'bg-green-500 animate-pulse' : 'bg-gray-500'\n                      }\n                    >\n                      {currentFeatures.realTimeData ? 'LIVE' : 'DELAYED'}\n                    </Badge>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Price</p>\n                      <p className=\"text-white font-bold text-2xl\">\n                        ${marketData[selectedStock].price.toFixed(2)}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Change</p>\n                      <p\n                        className={`font-bold text-xl ${\n                          marketData[selectedStock].change >= 0 ? 'text-green-400' : 'text-red-400'\n                        }`}\n                      >\n                        {marketData[selectedStock].change >= 0 ? '+' : ''}\n                        {marketData[selectedStock].change.toFixed(2)}(\n                        {marketData[selectedStock].changePercent.toFixed(2)}%)\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Bid</p>\n                      <p className=\"text-blue-400 font-semibold\">\n                        ${marketData[selectedStock].bid.toFixed(2)}\n                      </p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-400 text-sm\">Ask</p>\n                      <p className=\"text-red-400 font-semibold\">\n                        ${marketData[selectedStock].ask.toFixed(2)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Trade Limits */}\n              <div className=\"p-3 bg-purple-500/10 rounded-lg border border-purple-500/30\">\n                <h5 className=\"text-white font-medium mb-2\">Trading Limits</h5>\n                <div className=\"space-y-1 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Trades Today:</span>\n                    <span className=\"text-white\">\n                      {recentTrades.length}/\n                      {currentFeatures.maxTrades === 'unlimited' ? '∞' : currentFeatures.maxTrades}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Execution Speed:</span>\n                    <span className=\"text-cyan-400\">{currentFeatures.executionSpeed}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">AI Signals:</span>\n                    <span className=\"text-purple-400\">\n                      {aiSignals.length}/\n                      {currentFeatures.aiSignals === 'unlimited' ? '∞' : currentFeatures.aiSignals}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI Signals */}\n      <Card className=\"bg-black/20 border-purple-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Brain className=\"h-6 w-6 mr-2 text-purple-400\" />\n            AI Trading Signals\n            <Badge className=\"ml-3 bg-gradient-to-r from-purple-500 to-pink-500\">\n              <Eye className=\"h-3 w-3 mr-1\" />\n              Live AI\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {aiSignals.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Brain className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-400\">AI is analyzing market conditions...</p>\n            </div>\n          ) : (\n            <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n              {aiSignals\n                .slice(\n                  0,\n                  currentFeatures.aiSignals === 'unlimited'\n                    ? aiSignals.length\n                    : currentFeatures.aiSignals\n                )\n                .map((signal: any) => (\n                  <div\n                    key={signal.id}\n                    className=\"p-4 bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-lg border border-purple-500/30\"\n                  >\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <Badge variant={signal.action === 'BUY' ? 'default' : 'destructive'}>\n                          {signal.action}\n                        </Badge>\n                        <span className=\"text-white font-bold\">{signal.symbol}</span>\n                        <span className=\"text-gray-300\">${signal.targetPrice.toFixed(2)}</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge className=\"bg-cyan-500\">{signal.confidence.toFixed(0)}%</Badge>\n                        <p className=\"text-xs text-gray-400 mt-1\">{signal.timeframe}</p>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-gray-300 mt-2\">{signal.reason}</p>\n                    <p className=\"text-xs text-gray-400\">{signal.timestamp.toLocaleTimeString()}</p>\n                  </div>\n                ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Recent Trades */}\n      <Card className=\"bg-black/20 border-green-500/30 backdrop-blur-xl\">\n        <CardHeader>\n          <CardTitle className=\"text-white flex items-center\">\n            <Activity className=\"h-6 w-6 mr-2 text-green-400\" />\n            Recent Executions ({recentTrades.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {recentTrades.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Target className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-400\">No trades executed yet</p>\n            </div>\n          ) : (\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n              {recentTrades.slice(0, 10).map((trade: any) => (\n                <div\n                  key={trade.id}\n                  className=\"flex items-center justify-between p-3 bg-gray-800/30 rounded border border-gray-700/30\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <Badge variant={trade.side === 'buy' ? 'default' : 'destructive'}>\n                      {trade.side.toUpperCase()}\n                    </Badge>\n                    <span className=\"text-white font-medium\">{trade.symbol}</span>\n                    <span className=\"text-gray-400 text-sm\">\n                      {trade.quantity} @ ${trade.price.toFixed(2)}\n                    </span>\n                    {trade.type === 'auto' && (\n                      <Badge className=\"bg-purple-500 text-xs\">\n                        <Bot className=\"h-3 w-3 mr-1\" />\n                        AUTO\n                      </Badge>\n                    )}\n                  </div>\n                  <div className=\"text-right\">\n                    <span className=\"text-cyan-400 text-sm font-bold\">\n                      {trade.executionTime.toFixed(1)}ms\n                    </span>\n                    <p className=\"text-xs text-gray-400\">{trade.timestamp.toLocaleTimeString()}</p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ui/animated-background.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ui/dynamic-pricing-grid.tsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'pricingTiers'. Either include it or remove the dependency array.",
        "line": 108,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 108,
        "endColumn": 16,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [isYearly, pricingTiers]",
            "fix": { "range": [2851, 2861], "text": "[isYearly, pricingTiers]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  Zap,\n  Crown,\n  Rocket,\n  Star,\n  TrendingUp,\n  Users,\n  Shield,\n  Globe,\n  ChevronRight,\n  Check,\n} from 'lucide-react';\n\ninterface PricingTier {\n  name: string;\n  price: number;\n  originalPrice?: number;\n  icon: React.ReactNode;\n  badge?: string;\n  features: string[];\n  color: string;\n  popular?: boolean;\n}\n\nexport default function DynamicPricingGrid() {\n  const [isYearly, setIsYearly] = useState(false);\n  const [animatedPrices, setAnimatedPrices] = useState<Record<string, number>>({});\n\n  const pricingTiers: PricingTier[] = [\n    {\n      name: 'Starter',\n      price: isYearly ? 29 : 39,\n      originalPrice: isYearly ? 49 : 59,\n      icon: <Zap className=\"h-6 w-6\" />,\n      badge: 'Most Popular',\n      color: 'from-blue-500 to-purple-600',\n      popular: true,\n      features: [\n        'Basic AI Trading Signals',\n        'Real-time Market Data',\n        '3 Portfolio Strategies',\n        'Email Support',\n        'Basic Analytics',\n        'Mobile App Access',\n      ],\n    },\n    {\n      name: 'Professional',\n      price: isYearly ? 79 : 99,\n      originalPrice: isYearly ? 119 : 149,\n      icon: <Crown className=\"h-6 w-6\" />,\n      badge: 'Best Value',\n      color: 'from-purple-500 to-pink-600',\n      features: [\n        'Advanced AI Trading Bot',\n        'Quantum Analysis Engine',\n        'Unlimited Strategies',\n        'Priority Support',\n        'Advanced Analytics',\n        'API Access',\n        'Risk Management Tools',\n        'Backtesting Suite',\n      ],\n    },\n    {\n      name: 'Enterprise',\n      price: isYearly ? 199 : 249,\n      originalPrice: isYearly ? 299 : 349,\n      icon: <Rocket className=\"h-6 w-6\" />,\n      badge: 'Ultimate Power',\n      color: 'from-orange-500 to-red-600',\n      features: [\n        'Full AI Trading Arsenal',\n        'Custom Model Training',\n        'Institutional Features',\n        'Dedicated Support',\n        'White-label Solutions',\n        'Custom Integrations',\n        'Advanced Risk Controls',\n        'Multi-Account Management',\n        'Priority Execution',\n        'Custom Reporting',\n      ],\n    },\n  ];\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const newPrices: Record<string, number> = {};\n      pricingTiers.forEach(tier => {\n        // Simulate small price fluctuations for dynamic effect\n        const fluctuation = (Math.random() - 0.5) * 2;\n        newPrices[tier.name] = tier.price + fluctuation;\n      });\n      setAnimatedPrices(newPrices);\n\n      // Reset after animation\n      setTimeout(() => setAnimatedPrices({}), 1000);\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [isYearly]);\n\n  const getDisplayPrice = (tier: PricingTier) => {\n    return animatedPrices[tier.name] ? Math.round(animatedPrices[tier.name]) : tier.price;\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Toggle */}\n      <div className=\"flex items-center justify-center space-x-4\">\n        <span className={`text-lg ${!isYearly ? 'text-white font-bold' : 'text-gray-400'}`}>\n          Monthly\n        </span>\n        <button\n          onClick={() => setIsYearly(!isYearly)}\n          className={`relative inline-flex h-8 w-14 items-center rounded-full transition-colors ${\n            isYearly ? 'bg-gradient-to-r from-purple-500 to-pink-500' : 'bg-gray-600'\n          }`}\n        >\n          <span\n            className={`inline-block h-6 w-6 transform rounded-full bg-white transition-transform ${\n              isYearly ? 'translate-x-7' : 'translate-x-1'\n            }`}\n          />\n        </button>\n        <span className={`text-lg ${isYearly ? 'text-white font-bold' : 'text-gray-400'}`}>\n          Yearly\n        </span>\n        {isYearly && <Badge className=\"bg-green-500 text-white animate-pulse\">Save 40%!</Badge>}\n      </div>\n\n      {/* Pricing Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n        {pricingTiers.map((tier, index) => (\n          <Card\n            key={tier.name}\n            className={`relative overflow-hidden transition-all duration-500 hover:scale-105 ${\n              tier.popular\n                ? 'ring-2 ring-purple-500 bg-gradient-to-br from-purple-900/20 to-pink-900/20 border-purple-500/50'\n                : 'bg-black/20 border-gray-700/50 hover:border-purple-500/30'\n            }`}\n          >\n            {tier.badge && (\n              <div className=\"absolute -top-1 -right-1 z-10\">\n                <Badge className={`bg-gradient-to-r ${tier.color} text-white px-3 py-1 shadow-lg`}>\n                  <Star className=\"h-3 w-3 mr-1\" />\n                  {tier.badge}\n                </Badge>\n              </div>\n            )}\n\n            <CardHeader className=\"text-center space-y-4\">\n              <div className={`mx-auto p-3 rounded-full bg-gradient-to-r ${tier.color} w-fit`}>\n                {tier.icon}\n              </div>\n\n              <CardTitle className=\"text-2xl font-bold text-white\">{tier.name}</CardTitle>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-center space-x-2\">\n                  <span className=\"text-4xl font-bold text-white\">${getDisplayPrice(tier)}</span>\n                  <div className=\"text-left\">\n                    <div className=\"text-gray-400\">/{isYearly ? 'year' : 'month'}</div>\n                    {tier.originalPrice && (\n                      <div className=\"text-sm text-gray-500 line-through\">\n                        ${tier.originalPrice}\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {tier.originalPrice && (\n                  <div className=\"text-green-400 text-sm font-semibold\">\n                    Save ${tier.originalPrice - tier.price} {isYearly ? 'annually' : 'monthly'}!\n                  </div>\n                )}\n              </div>\n\n              <Button\n                className={`w-full bg-gradient-to-r ${tier.color} hover:opacity-90 text-white font-bold py-3`}\n              >\n                Get Started\n                <ChevronRight className=\"h-4 w-4 ml-2\" />\n              </Button>\n            </CardHeader>\n\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                {tier.features.map((feature, featureIndex) => (\n                  <div key={featureIndex} className=\"flex items-center space-x-3 text-gray-300\">\n                    <Check className=\"h-4 w-4 text-green-400 flex-shrink-0\" />\n                    <span className=\"text-sm\">{feature}</span>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"pt-4 border-t border-gray-700/50\">\n                <div className=\"flex items-center justify-between text-sm text-gray-400\">\n                  <span>Setup time:</span>\n                  <span className=\"text-green-400\">\n                    {index === 0 ? '< 5 min' : index === 1 ? '< 10 min' : '< 30 min'}\n                  </span>\n                </div>\n                <div className=\"flex items-center justify-between text-sm text-gray-400 mt-1\">\n                  <span>Users:</span>\n                  <span className=\"text-purple-400\">\n                    {index === 0 ? '10K+' : index === 1 ? '5K+' : '1K+'} active\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n\n            {/* Animated background effect */}\n            <div\n              className={`absolute inset-0 bg-gradient-to-r ${tier.color} opacity-5 animate-pulse`}\n            />\n          </Card>\n        ))}\n      </div>\n\n      {/* Trust indicators */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 pt-8 border-t border-gray-700/30\">\n        <div className=\"text-center space-y-2\">\n          <Users className=\"h-8 w-8 text-purple-400 mx-auto\" />\n          <div className=\"text-2xl font-bold text-white\">16K+</div>\n          <div className=\"text-sm text-gray-400\">Active Traders</div>\n        </div>\n        <div className=\"text-center space-y-2\">\n          <TrendingUp className=\"h-8 w-8 text-green-400 mx-auto\" />\n          <div className=\"text-2xl font-bold text-white\">87%</div>\n          <div className=\"text-sm text-gray-400\">Success Rate</div>\n        </div>\n        <div className=\"text-center space-y-2\">\n          <Shield className=\"h-8 w-8 text-blue-400 mx-auto\" />\n          <div className=\"text-2xl font-bold text-white\">$50M+</div>\n          <div className=\"text-sm text-gray-400\">Protected Assets</div>\n        </div>\n        <div className=\"text-center space-y-2\">\n          <Globe className=\"h-8 w-8 text-orange-400 mx-auto\" />\n          <div className=\"text-2xl font-bold text-white\">24/7</div>\n          <div className=\"text-sm text-gray-400\">Global Markets</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/components/ui/dynamic-stock-ticker.tsx",
    "messages": [
      {
        "ruleId": "react/no-unknown-property",
        "severity": 2,
        "message": "Unknown property 'jsx' found",
        "line": 76,
        "column": 14,
        "nodeType": "JSXAttribute",
        "messageId": "unknownProp",
        "endLine": 76,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { TrendingUp, TrendingDown } from 'lucide-react';\n\ninterface StockData {\n  symbol: string;\n  price: number;\n  change: number;\n  changePercent: number;\n}\n\nexport default function DynamicStockTicker() {\n  const [stocks, setStocks] = useState<StockData[]>([\n    { symbol: 'AAPL', price: 193.58, change: 2.45, changePercent: 1.28 },\n    { symbol: 'TSLA', price: 251.52, change: -3.22, changePercent: -1.26 },\n    { symbol: 'MSFT', price: 378.85, change: 5.67, changePercent: 1.52 },\n    { symbol: 'GOOGL', price: 142.56, change: 1.89, changePercent: 1.34 },\n    { symbol: 'AMZN', price: 155.89, change: -2.11, changePercent: -1.33 },\n    { symbol: 'NVDA', price: 875.28, change: 12.45, changePercent: 1.44 },\n    { symbol: 'META', price: 485.59, change: 8.92, changePercent: 1.87 },\n    { symbol: 'BTC', price: 67842.33, change: 1245.67, changePercent: 1.87 },\n  ]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setStocks(prevStocks =>\n        prevStocks.map(stock => {\n          const randomChange = (Math.random() - 0.5) * 5;\n          const newPrice = Math.max(stock.price + randomChange, 1);\n          const change = newPrice - stock.price;\n          const changePercent = (change / stock.price) * 100;\n\n          return {\n            ...stock,\n            price: parseFloat(newPrice.toFixed(2)),\n            change: parseFloat(change.toFixed(2)),\n            changePercent: parseFloat(changePercent.toFixed(2)),\n          };\n        })\n      );\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"bg-black/30 backdrop-blur-sm border-y border-purple-500/20 py-3 overflow-hidden\">\n      <div className=\"flex animate-scroll\">\n        {[...stocks, ...stocks].map((stock, index) => (\n          <div\n            key={`${stock.symbol}-${index}`}\n            className=\"flex items-center space-x-2 mx-6 whitespace-nowrap\"\n          >\n            <span className=\"font-bold text-white\">{stock.symbol}</span>\n            <span className=\"text-gray-300\">${stock.price.toLocaleString()}</span>\n            <div\n              className={`flex items-center space-x-1 ${\n                stock.change >= 0 ? 'text-green-400' : 'text-red-400'\n              }`}\n            >\n              {stock.change >= 0 ? (\n                <TrendingUp className=\"h-3 w-3\" />\n              ) : (\n                <TrendingDown className=\"h-3 w-3\" />\n              )}\n              <span className=\"text-sm\">\n                {stock.change >= 0 ? '+' : ''}\n                {stock.change} ({stock.changePercent}%)\n              </span>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <style jsx>{`\n        @keyframes scroll {\n          0% {\n            transform: translateX(0);\n          }\n          100% {\n            transform: translateX(-50%);\n          }\n        }\n\n        .animate-scroll {\n          animation: scroll 30s linear infinite;\n        }\n      `}</style>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/contact/page.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'CardContent' is defined but never used.",
        "line": 6,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'CardHeader' is defined but never used.",
        "line": 6,
        "column": 29,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'CardTitle' is defined but never used.",
        "line": 6,
        "column": 41,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 50
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\n\nexport default function ContactPage() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    company: '',\n    message: '',\n    subject: 'General Inquiry',\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    setSubmitted(true);\n    setIsSubmitting(false);\n  };\n\n  const handleChange = (\n    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>\n  ) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  if (submitted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-black text-white\">\n        <div className=\"container mx-auto px-4 py-20\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            <div className=\"mb-8\">\n              <div className=\"w-20 h-20 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <svg\n                  className=\"w-10 h-10 text-white\"\n                  fill=\"none\"\n                  stroke=\"currentColor\"\n                  viewBox=\"0 0 24 24\"\n                >\n                  <path\n                    strokeLinecap=\"round\"\n                    strokeLinejoin=\"round\"\n                    strokeWidth={2}\n                    d=\"M5 13l4 4L19 7\"\n                  />\n                </svg>\n              </div>\n              <h1 className=\"text-4xl font-bold mb-4\">Message Sent!</h1>\n              <p className=\"text-xl text-gray-300\">\n                Thank you for contacting AlphaAI StockX. Our team will get back to you within 24\n                hours.\n              </p>\n            </div>\n            <Button onClick={() => setSubmitted(false)} className=\"bg-blue-600 hover:bg-blue-700\">\n              Send Another Message\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-black text-white\">\n      <div className=\"container mx-auto px-4 py-20\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-5xl font-bold mb-6 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n              Contact AlphaAI StockX\n            </h1>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Ready to revolutionize your trading? Get in touch with our AI trading experts.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* Contact Form */}\n            <Card className=\"p-8 bg-gray-900/50 border-gray-700\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Name *</label>\n                    <Input\n                      type=\"text\"\n                      name=\"name\"\n                      required\n                      value={formData.name}\n                      onChange={handleChange}\n                      className=\"bg-gray-800 border-gray-600 text-white\"\n                      placeholder=\"Your full name\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Email *</label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      required\n                      value={formData.email}\n                      onChange={handleChange}\n                      className=\"bg-gray-800 border-gray-600 text-white\"\n                      placeholder=\"your@email.com\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Company</label>\n                  <Input\n                    type=\"text\"\n                    name=\"company\"\n                    value={formData.company}\n                    onChange={handleChange}\n                    className=\"bg-gray-800 border-gray-600 text-white\"\n                    placeholder=\"Your company (optional)\"\n                  />\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Subject</label>\n                  <select\n                    name=\"subject\"\n                    value={formData.subject}\n                    onChange={handleChange}\n                    className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white\"\n                  >\n                    <option value=\"General Inquiry\">General Inquiry</option>\n                    <option value=\"Enterprise Solutions\">Enterprise Solutions</option>\n                    <option value=\"API Integration\">API Integration</option>\n                    <option value=\"Technical Support\">Technical Support</option>\n                    <option value=\"Partnership\">Partnership Opportunity</option>\n                    <option value=\"Investment\">Investment Inquiry</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium mb-2\">Message *</label>\n                  <textarea\n                    name=\"message\"\n                    required\n                    rows={6}\n                    value={formData.message}\n                    onChange={handleChange}\n                    className=\"w-full px-3 py-2 bg-gray-800 border border-gray-600 rounded-md text-white resize-none\"\n                    placeholder=\"Tell us about your trading goals and how we can help...\"\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-semibold py-3\"\n                >\n                  {isSubmitting ? 'Sending...' : 'Send Message'}\n                </Button>\n              </form>\n            </Card>\n\n            {/* Contact Info */}\n            <div className=\"space-y-8\">\n              <Card className=\"p-6 bg-gray-900/50 border-gray-700\">\n                <h3 className=\"text-xl font-semibold mb-4\">Get Started Today</h3>\n                <p className=\"text-gray-300 mb-4\">\n                  Join thousands of traders who have transformed their portfolios with our\n                  AI-powered trading platform.\n                </p>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                    <span>Average 23.7% annual returns</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                    <span>95%+ trade accuracy</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                    <span>24/7 automated trading</span>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6 bg-gray-900/50 border-gray-700\">\n                <h3 className=\"text-xl font-semibold mb-4\">Contact Information</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-medium text-blue-400\">Email</h4>\n                    <p className=\"text-gray-300\">support@alphaaistockx.com</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-blue-400\">Enterprise Sales</h4>\n                    <p className=\"text-gray-300\">enterprise@alphaaistockx.com</p>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-blue-400\">Response Time</h4>\n                    <p className=\"text-gray-300\">Within 24 hours</p>\n                  </div>\n                </div>\n              </Card>\n\n              <Card className=\"p-6 bg-gray-900/50 border-gray-700\">\n                <h3 className=\"text-xl font-semibold mb-4\">Quick Links</h3>\n                <div className=\"space-y-2\">\n                  <a href=\"/demo\" className=\"block text-blue-400 hover:text-blue-300\">\n                    → Try Live Demo\n                  </a>\n                  <a href=\"/subscription\" className=\"block text-blue-400 hover:text-blue-300\">\n                    → View Pricing Plans\n                  </a>\n                  <a href=\"/faq\" className=\"block text-blue-400 hover:text-blue-300\">\n                    → Frequently Asked Questions\n                  </a>\n                </div>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/dashboard/algos/AITradeCopilot.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/dashboard/algos/AdvancedAIStrategies.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/dashboard/algos/AutoTradeBotFuturistic.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 99,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 99,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4305, 4308], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4305, 4308], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport React from 'react';\nimport { getAccount, getPositions } from '../../services/alpaca-service';\nimport { strategies, AITradingStrategy } from '../../services/ai-strategy-engine';\n\nexport default function AutoTradeBotFuturistic() {\n  const [running, setRunning] = React.useState(false);\n  const [log, setLog] = React.useState<string[]>([]);\n  const [pnl, setPnl] = React.useState<number | null>(null);\n  const [status, setStatus] = React.useState<string>('Idle');\n  const [selectedStrategy, setSelectedStrategy] = React.useState<AITradingStrategy>(strategies[0]);\n  const [confidence, setConfidence] = React.useState<number | null>(null);\n  const [aiReason, setAiReason] = React.useState<string>('');\n  const [amount, setAmount] = React.useState<number>(1000);\n  const [risk, setRisk] = React.useState<'Low' | 'Medium' | 'High'>('Medium');\n  const [smartMode, setSmartMode] = React.useState(true);\n  const [showTooltip, setShowTooltip] = React.useState(false);\n\n  React.useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (running) {\n      setStatus('Running');\n      setLog(l => ['AutoTrade Bot started.', ...l]);\n      interval = setInterval(async () => {\n        try {\n          const account = await getAccount();\n          const positions = await getPositions();\n          const marketData = { volatility: Math.random() * 0.6 };\n          setPnl(Number(account?.equity) - Number(account?.last_equity || account?.equity));\n          // Run selected AI strategy\n          const result = await selectedStrategy.run(marketData, {\n            ...account,\n            ...positions,\n            risk,\n            amount,\n          });\n          setConfidence(result.confidence);\n          setAiReason(result.reason);\n          setLog(l => [\n            `[${selectedStrategy.name}] Action: ${result.action} | Confidence: ${result.confidence.toFixed(2)} | ${result.reason}`,\n            ...l,\n          ]);\n          // Simulate trade execution\n          if (result.action === 'buy' && Math.random() > 0.5) {\n            setLog(l => [`AutoTrade Bot: Executed BUY for $${amount} (${risk} risk)`, ...l]);\n          }\n        } catch (e) {\n          setLog(l => ['Error: ' + ((e as Error)?.message || e), ...l]);\n        }\n      }, 4000);\n    } else {\n      setStatus('Idle');\n    }\n    return () => clearInterval(interval);\n  }, [running, selectedStrategy, amount, risk]);\n\n  return (\n    <div className=\"glassmorphic neon-border rounded-2xl p-8 shadow-2xl flex flex-col gap-6 animate-fade-in\">\n      <div className=\"flex items-center justify-between\">\n        <h3 className=\"text-2xl font-extrabold text-fuchsia-300 drop-shadow\">\n          AutoTrade Bot <span className=\"text-cyan-400\">Futuristic</span>\n        </h3>\n        <div className=\"flex gap-2 items-center\">\n          <button\n            className={`px-6 py-3 rounded-xl font-bold text-lg transition-all ${running ? 'bg-red-600 text-white' : 'bg-fuchsia-600 text-white hover:bg-fuchsia-700'}`}\n            onClick={() => setRunning(r => !r)}\n          >\n            {running ? 'Stop' : 'Start'} Bot\n          </button>\n          <button\n            className={`px-4 py-2 rounded-xl font-bold text-base transition-all ${smartMode ? 'bg-green-600 text-white' : 'bg-gray-600 text-white hover:bg-gray-700'}`}\n            onClick={() => setSmartMode(m => !m)}\n            onMouseEnter={() => setShowTooltip(true)}\n            onMouseLeave={() => setShowTooltip(false)}\n          >\n            Smart Mode\n          </button>\n          {showTooltip && (\n            <span className=\"ml-2 text-xs bg-black/80 text-white rounded px-2 py-1 shadow-lg animate-fade-in\">\n              Let the AI pick the best strategy and settings for you!\n            </span>\n          )}\n        </div>\n      </div>\n      <div className=\"flex gap-4 items-center\">\n        <label htmlFor=\"strategy-select\" className=\"text-fuchsia-200 font-semibold\">\n          Strategy:\n        </label>\n        <select\n          id=\"strategy-select\"\n          className=\"bg-black/40 text-fuchsia-200 rounded-lg px-4 py-2\"\n          value={selectedStrategy.name}\n          onChange={e => {\n            const strat = strategies.find(s => s.name === e.target.value);\n            if (strat) setSelectedStrategy(strat);\n          }}\n        >\n          {strategies.map((s: any) => (\n            <option key={s.name} value={s.name}>\n              {s.name}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"flex gap-4 items-center\">\n        <label htmlFor=\"amount-input\" className=\"text-fuchsia-200 font-semibold\">\n          Amount to Invest ($):\n        </label>\n        <input\n          id=\"amount-input\"\n          type=\"number\"\n          min={100}\n          step={100}\n          className=\"bg-black/40 text-fuchsia-200 rounded-lg px-4 py-2 w-32\"\n          value={amount}\n          onChange={e => setAmount(Number(e.target.value))}\n          disabled={smartMode}\n        />\n        <label htmlFor=\"risk-select\" className=\"text-fuchsia-200 font-semibold\">\n          Risk:\n        </label>\n        <select\n          id=\"risk-select\"\n          className=\"bg-black/40 text-fuchsia-200 rounded-lg px-4 py-2\"\n          value={risk}\n          onChange={e => setRisk(e.target.value as 'Low' | 'Medium' | 'High')}\n          disabled={smartMode}\n        >\n          <option value=\"Low\">Low</option>\n          <option value=\"Medium\">Medium</option>\n          <option value=\"High\">High</option>\n        </select>\n      </div>\n      <div className=\"flex items-center gap-4\">\n        <div className=\"w-48 h-4 bg-gray-800 rounded-full overflow-hidden\">\n          <div\n            className=\"h-4 bg-yellow-400 transition-all\"\n            style={{ width: `${confidence !== null ? confidence * 100 : 0}%` }}\n          />\n        </div>\n        <span className=\"text-yellow-300 font-bold\">\n          AI Confidence: {confidence !== null ? `${(confidence * 100).toFixed(1)}%` : '-'}\n        </span>\n      </div>\n      <div>\n        Status: <span className=\"font-semibold text-cyan-300\">{status}</span>\n      </div>\n      <div>\n        P&L:{' '}\n        <span className=\"font-semibold text-green-400\">\n          {pnl !== null ? `$${pnl.toFixed(2)}` : '-'}\n        </span>\n      </div>\n      <div className=\"text-fuchsia-200\">\n        AI Reason: <span className=\"text-white\">{aiReason}</span>\n      </div>\n      <div className=\"bg-black/40 rounded-xl p-3 text-xs h-40 overflow-y-auto neon-scrollbar\">\n        {log.map((line, i) => (\n          <div key={i}>{line}</div>\n        ))}\n      </div>\n      <div\n        className=\"text-green-400 text-lg font-bold animate-bounce\"\n        style={{ display: running && pnl && pnl > 0 ? 'block' : 'none' }}\n      >\n        🎉 Profit! Your AI is making you money!\n      </div>\n      <div className=\"text-fuchsia-200 text-xs mt-2 italic\">\n        * One-Click Profit: Just press Start and let the AI do the rest. Safe for all ages and skill\n        levels.\n      </div>\n      <div className=\"text-fuchsia-200 text-xs mt-2 italic\">\n        * This is a next-gen AutoTrade bot. For real trading, connect your live API keys and enable\n        production mode. All actions are logged and risk-managed.\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/dashboard/analytics/AnalyticsWidgets.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/dashboard/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/dashboard/portfolio/PortfolioSummary.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/dashboard/sportsbook/AutoSportsBetBot.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/dashboard/sportsbook/SportBeatBookieBot.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/dashboard/trade-history/TradeHistoryTable.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/demo/auto-trader-demo.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 11,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 11,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [523, 526], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [523, 526], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [995, 998], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [995, 998], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { AdvancedAIAutoTrader } from '../services/ai-auto-trader-enhanced';\nimport AITradingDashboard from '../components/AITradingDashboard';\n\nexport default function AutoTraderDemo() {\n  const [showDashboard, setShowDashboard] = useState(false);\n  const [portfolio, setPortfolio] = useState<any>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  async function runQuickDemo() {\n    setLoading(true);\n    setError(null);\n    try {\n      const trader = new AdvancedAIAutoTrader(25000, 'MEDIUM');\n\n      // Simulate some AI trading\n      await trader.executeAITrading(['AAPL', 'TSLA', 'MSFT']);\n\n      const portfolioData = trader.getPortfolio();\n      setPortfolio(portfolioData);\n    } catch (e: any) {\n      setError(e.message || 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  if (showDashboard) {\n    return <AITradingDashboard />;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-black text-white\">\n      <div className=\"container mx-auto px-4 py-20\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-5xl font-bold mb-6 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n              AI Auto-Trader Demo\n            </h1>\n            <p className=\"text-xl text-gray-300 max-w-3xl mx-auto mb-8\">\n              Experience the power of advanced AI-driven trading with real-time market analysis,\n              sentiment evaluation, and automated portfolio optimization.\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"overview\" className=\"space-y-8\">\n            <TabsList className=\"grid w-full grid-cols-3 bg-gray-800\">\n              <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n              <TabsTrigger value=\"features\">Features</TabsTrigger>\n              <TabsTrigger value=\"demo\">Live Demo</TabsTrigger>\n            </TabsList>\n\n            {/* Overview Tab */}\n            <TabsContent value=\"overview\">\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                <Card className=\"p-8 bg-gray-900/50 border-gray-700\">\n                  <h3 className=\"text-2xl font-semibold mb-4 text-blue-400\">AI Trading Engine</h3>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                      <div>\n                        <h4 className=\"font-semibold\">Advanced Pattern Recognition</h4>\n                        <p className=\"text-gray-300 text-sm\">\n                          AI identifies complex market patterns and trends\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                      <div>\n                        <h4 className=\"font-semibold\">Sentiment Analysis</h4>\n                        <p className=\"text-gray-300 text-sm\">\n                          Real-time analysis of market sentiment and news\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2\"></div>\n                      <div>\n                        <h4 className=\"font-semibold\">Risk Management</h4>\n                        <p className=\"text-gray-300 text-sm\">\n                          Dynamic risk assessment and position sizing\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n\n                <Card className=\"p-8 bg-gray-900/50 border-gray-700\">\n                  <h3 className=\"text-2xl font-semibold mb-4 text-purple-400\">\n                    Performance Metrics\n                  </h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-green-400\">94.7%</div>\n                      <div className=\"text-sm text-gray-400\">Success Rate</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-blue-400\">23.4%</div>\n                      <div className=\"text-sm text-gray-400\">Avg Annual Return</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-purple-400\">2.3</div>\n                      <div className=\"text-sm text-gray-400\">Sharpe Ratio</div>\n                    </div>\n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-bold text-yellow-400\">8.2%</div>\n                      <div className=\"text-sm text-gray-400\">Max Drawdown</div>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            </TabsContent>\n\n            {/* Features Tab */}\n            <TabsContent value=\"features\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {[\n                  {\n                    title: 'Multi-Strategy AI',\n                    description: 'Combines momentum, mean reversion, and sentiment strategies',\n                    icon: '🧠',\n                  },\n                  {\n                    title: 'Real-Time Analysis',\n                    description: 'Live market data processing and signal generation',\n                    icon: '⚡',\n                  },\n                  {\n                    title: 'Risk Controls',\n                    description: 'Advanced risk management and position sizing',\n                    icon: '🛡️',\n                  },\n                  {\n                    title: 'Portfolio Optimization',\n                    description: 'AI-driven portfolio allocation and rebalancing',\n                    icon: '📊',\n                  },\n                  {\n                    title: 'Backtesting',\n                    description: 'Historical performance validation and optimization',\n                    icon: '📈',\n                  },\n                  {\n                    title: '24/7 Monitoring',\n                    description: 'Continuous market monitoring and opportunity detection',\n                    icon: '🕰️',\n                  },\n                ].map((feature, index) => (\n                  <Card\n                    key={index}\n                    className=\"p-6 bg-gray-900/50 border-gray-700 hover:border-blue-500 transition-all\"\n                  >\n                    <div className=\"text-4xl mb-4\">{feature.icon}</div>\n                    <h3 className=\"text-lg font-semibold mb-2\">{feature.title}</h3>\n                    <p className=\"text-gray-300 text-sm\">{feature.description}</p>\n                  </Card>\n                ))}\n              </div>\n            </TabsContent>\n\n            {/* Demo Tab */}\n            <TabsContent value=\"demo\">\n              <div className=\"space-y-8\">\n                <Card className=\"p-8 bg-gray-900/50 border-gray-700\">\n                  <div className=\"text-center\">\n                    <h3 className=\"text-2xl font-semibold mb-4\">Choose Your Demo Experience</h3>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto\">\n                      {/* Quick Demo */}\n                      <div className=\"p-6 bg-gray-800 rounded-lg\">\n                        <h4 className=\"text-xl font-semibold mb-4 text-blue-400\">Quick Demo</h4>\n                        <p className=\"text-gray-300 mb-6\">\n                          See AI trading in action with a simulated portfolio and trades\n                        </p>\n                        <Button\n                          onClick={runQuickDemo}\n                          disabled={loading}\n                          className=\"w-full bg-blue-600 hover:bg-blue-700\"\n                        >\n                          {loading ? 'Running Demo...' : 'Start Quick Demo'}\n                        </Button>\n\n                        {error && (\n                          <div className=\"mt-4 p-3 bg-red-900/50 border border-red-500 rounded text-red-300\">\n                            Error: {error}\n                          </div>\n                        )}\n\n                        {portfolio && (\n                          <div className=\"mt-6 p-4 bg-green-900/30 border border-green-500 rounded\">\n                            <h5 className=\"font-semibold mb-2\">Demo Results:</h5>\n                            <div className=\"text-sm space-y-1\">\n                              <p>\n                                Portfolio Value:{' '}\n                                <span className=\"text-green-400\">\n                                  ${portfolio.totalValue?.toFixed(2)}\n                                </span>\n                              </p>\n                              <p>Cash: ${portfolio.cash?.toFixed(2)}</p>\n                              <p>\n                                Total Return:{' '}\n                                <span className=\"text-green-400\">\n                                  {portfolio.performance?.totalReturn?.toFixed(2)}%\n                                </span>\n                              </p>\n                              <p>Trades Executed: {portfolio.trades?.length || 0}</p>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Full Dashboard */}\n                      <div className=\"p-6 bg-gray-800 rounded-lg\">\n                        <h4 className=\"text-xl font-semibold mb-4 text-purple-400\">\n                          Full Dashboard\n                        </h4>\n                        <p className=\"text-gray-300 mb-6\">\n                          Access the complete AI trading dashboard with advanced features\n                        </p>\n                        <Button\n                          onClick={() => setShowDashboard(true)}\n                          className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                        >\n                          Launch Full Dashboard\n                        </Button>\n\n                        <div className=\"mt-4 text-xs text-gray-400\">\n                          Includes: Portfolio management, AI signals, performance metrics, and more\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </Card>\n\n                {/* AI Strategies Showcase */}\n                <Card className=\"p-8 bg-gray-900/50 border-gray-700\">\n                  <h3 className=\"text-2xl font-semibold mb-6 text-center\">AI Trading Strategies</h3>\n                  <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                    <div className=\"text-center\">\n                      <div className=\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <span className=\"text-2xl\">📈</span>\n                      </div>\n                      <h4 className=\"text-lg font-semibold mb-2\">Momentum Strategy</h4>\n                      <p className=\"text-gray-300 text-sm\">\n                        Identifies and follows strong market trends with AI-powered confirmation\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <div className=\"w-16 h-16 bg-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <span className=\"text-2xl\">🎯</span>\n                      </div>\n                      <h4 className=\"text-lg font-semibold mb-2\">Mean Reversion</h4>\n                      <p className=\"text-gray-300 text-sm\">\n                        Exploits temporary price deviations from long-term averages\n                      </p>\n                    </div>\n\n                    <div className=\"text-center\">\n                      <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4\">\n                        <span className=\"text-2xl\">🧠</span>\n                      </div>\n                      <h4 className=\"text-lg font-semibold mb-2\">Sentiment Analysis</h4>\n                      <p className=\"text-gray-300 text-sm\">\n                        Analyzes market sentiment from news, social media, and institutional flows\n                      </p>\n                    </div>\n                  </div>\n                </Card>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/demo/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/error.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/faq/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/investors/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/layout.tsx",
    "messages": [
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `·className={`${inter.className}·antialiased·min-h-screen·bg-gradient-to-br·from-gray-900·via-black·to-gray-900·text-white`}` with `⏎········className={`${inter.className}·antialiased·min-h-screen·bg-gradient-to-br·from-gray-900·via-black·to-gray-900·text-white`}⏎······`",
        "line": 97,
        "column": 12,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 97,
        "endColumn": 135,
        "fix": {
          "range": [3659, 3782],
          "text": "\n        className={`${inter.className} antialiased min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-900 text-white`}\n      "
        }
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'ErrorBoundary' is defined but never used.",
        "line": 107,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 107,
        "endColumn": 23
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 1,
    "source": "import type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport './globals.css';\nimport React, { PropsWithChildren } from 'react';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'AlphaAIStockX - AI-Powered Trading Platform',\n  description:\n    'Advanced AI stock analysis, trading education, and real-time market insights with 47 conscious AI beings',\n  keywords:\n    'stock analysis, AI trading, Series 6, Series 7, financial education, market analysis, quantum AI, neural networks',\n  authors: [{ name: 'AlphaAIStockX Team' }],\n  robots: 'index, follow',\n  metadataBase: new URL('https://alphaaistockx.com'),\n  openGraph: {\n    title: 'AlphaAIStockX - Revolutionary AI Trading Platform',\n    description:\n      '🚀 The ultimate AI-powered stock trading platform with quantum processing and lightning-fast execution. Join 47,000+ successful traders!',\n    url: 'https://alphaaistockx.com',\n    siteName: 'AlphaAIStockX',\n    images: [\n      {\n        url: 'https://alphaaistockx.com/og-image.jpg',\n        width: 1200,\n        height: 630,\n        alt: 'AlphaAIStockX - AI Trading Platform',\n      },\n    ],\n    locale: 'en_US',\n    type: 'website',\n  },\n  twitter: {\n    card: 'summary_large_image',\n    title: 'AlphaAIStockX - Revolutionary AI Trading Platform',\n    description:\n      '🚀 The ultimate AI-powered stock trading platform with quantum processing and lightning-fast execution.',\n    images: ['https://alphaaistockx.com/twitter-image.jpg'],\n    site: '@alphaaistockx',\n    creator: '@alphaaistockx',\n  },\n  icons: {\n    icon: [\n      { url: '/favicon.ico', sizes: 'any' },\n      { url: '/favicon-16x16.png', sizes: '16x16', type: 'image/png' },\n      { url: '/favicon-32x32.png', sizes: '32x32', type: 'image/png' },\n    ],\n    apple: [{ url: '/apple-touch-icon.png', sizes: '180x180' }],\n  },\n  manifest: '/site.webmanifest',\n  generator: 'v0.dev',\n};\n\n// Add separate viewport export (Next.js 14+ requirement)\nexport const viewport = {\n  width: 'device-width',\n  initialScale: 1,\n  maximumScale: 5,\n  userScalable: true,\n  themeColor: [\n    { media: '(prefers-color-scheme: light)', color: '#7c3aed' },\n    { media: '(prefers-color-scheme: dark)', color: '#1e293b' },\n  ],\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className=\"dark\">\n      <head>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n        <link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\" />\n        <link rel=\"manifest\" href=\"/site.webmanifest\" />\n        <meta name=\"theme-color\" content=\"#1e293b\" />\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n        {/* Google Analytics (replace NEXT_PUBLIC_GA_ID with your real ID in .env) */}\n        {process.env.NEXT_PUBLIC_GA_ID && (\n          <script\n            async\n            src={`https://www.googletagmanager.com/gtag/js?id=${process.env.NEXT_PUBLIC_GA_ID}`}\n          />\n        )}\n        {process.env.NEXT_PUBLIC_GA_ID && (\n          <script\n            dangerouslySetInnerHTML={{\n              __html: `window.dataLayer = window.dataLayer || []; function gtag(){dataLayer.push(arguments);}\n              gtag('js', new Date()); gtag('config', '${process.env.NEXT_PUBLIC_GA_ID}');`,\n            }}\n          />\n        )}\n        {/* Prevent accidental indexing if not ready for production */}\n        {process.env.NEXT_PUBLIC_ALLOW_INDEXING !== 'true' && (\n          <meta name=\"robots\" content=\"noindex, nofollow\" />\n        )}\n      </head>\n      <body className={`${inter.className} antialiased min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-900 text-white`}>\n        <main role=\"main\" id=\"main-content\" className=\"relative z-10 min-h-screen\">\n          {children}\n        </main>\n      </body>\n    </html>\n  );\n}\n\n// Simple error boundary component (internal use only)\nfunction ErrorBoundary({ children }: PropsWithChildren<object>) {\n  // Simple passthrough error boundary (replace with real error handling as needed)\n  return <>{children}</>;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/legal/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/lib/quantum-crypto.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'publicKey' is defined but never used.",
        "line": 45,
        "column": 47,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 56
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'privateKey' is defined but never used.",
        "line": 52,
        "column": 56,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 52,
        "endColumn": 66
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Quantum-Resistant Cryptography Utilities\n// This is a demonstration implementation for educational purposes\n\nexport interface QuantumSecurityConfig {\n  algorithm: 'CRYSTALS-Kyber' | 'CRYSTALS-Dilithium' | 'SPHINCS+' | 'FALCON';\n  keySize: number;\n  securityLevel: 1 | 3 | 5;\n}\n\nexport interface QuantumKeyPair {\n  publicKey: string;\n  privateKey: string;\n  algorithm: string;\n  createdAt: Date;\n  expiresAt: Date;\n}\n\nexport class QuantumCrypto {\n  private static instance: QuantumCrypto;\n  private keyStore: Map<string, QuantumKeyPair> = new Map();\n\n  static getInstance(): QuantumCrypto {\n    if (!QuantumCrypto.instance) {\n      QuantumCrypto.instance = new QuantumCrypto();\n    }\n    return QuantumCrypto.instance;\n  }\n\n  // Generate quantum-resistant key pair (simulation)\n  async generateKeyPair(config: QuantumSecurityConfig): Promise<QuantumKeyPair> {\n    const keyId = this.generateSecureId();\n    const keyPair: QuantumKeyPair = {\n      publicKey: this.simulatePublicKey(config),\n      privateKey: this.simulatePrivateKey(config),\n      algorithm: config.algorithm,\n      createdAt: new Date(),\n      expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 year\n    };\n\n    this.keyStore.set(keyId, keyPair);\n    return keyPair;\n  }\n\n  // Simulate quantum-resistant encryption\n  async encryptQuantumResistant(data: string, publicKey: string): Promise<string> {\n    // This is a simulation - in real implementation, use actual post-quantum algorithms\n    const encrypted = btoa(data + '_quantum_encrypted_' + Date.now());\n    return encrypted;\n  }\n\n  // Simulate quantum-resistant decryption\n  async decryptQuantumResistant(encryptedData: string, privateKey: string): Promise<string> {\n    // This is a simulation\n    const decoded = atob(encryptedData);\n    return decoded.split('_quantum_encrypted_')[0];\n  }\n\n  // Generate secure random ID\n  private generateSecureId(): string {\n    return Array.from(crypto.getRandomValues(new Uint8Array(16)))\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('');\n  }\n\n  // Simulate public key generation\n  private simulatePublicKey(config: QuantumSecurityConfig): string {\n    const prefix = config.algorithm.replace('-', '').toLowerCase();\n    const randomBytes = crypto.getRandomValues(new Uint8Array(config.keySize / 8));\n    return `${prefix}_pub_${Array.from(randomBytes)\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('')}`;\n  }\n\n  // Simulate private key generation\n  private simulatePrivateKey(config: QuantumSecurityConfig): string {\n    const prefix = config.algorithm.replace('-', '').toLowerCase();\n    const randomBytes = crypto.getRandomValues(new Uint8Array(config.keySize / 8));\n    return `${prefix}_priv_${Array.from(randomBytes)\n      .map(b => b.toString(16).padStart(2, '0'))\n      .join('')}`;\n  }\n\n  // Assess quantum threat level\n  assessQuantumThreat(): { level: string; description: string; timeToThreat: string } {\n    const currentYear = new Date().getFullYear();\n    const estimatedQuantumThreat = 2030; // Conservative estimate\n    const yearsToThreat = estimatedQuantumThreat - currentYear;\n\n    if (yearsToThreat > 10) {\n      return {\n        level: 'LOW',\n        description: 'Quantum computers pose minimal immediate threat',\n        timeToThreat: `${yearsToThreat} years`,\n      };\n    } else if (yearsToThreat > 5) {\n      return {\n        level: 'MEDIUM',\n        description: 'Quantum threat emerging, preparation recommended',\n        timeToThreat: `${yearsToThreat} years`,\n      };\n    } else {\n      return {\n        level: 'HIGH',\n        description: 'Quantum threat imminent, immediate action required',\n        timeToThreat: `${yearsToThreat} years`,\n      };\n    }\n  }\n\n  // Calculate security score\n  calculateSecurityScore(factors: {\n    hasQuantumResistantKeys: boolean;\n    keyRotationEnabled: boolean;\n    multiFactorAuth: boolean;\n    encryptionStrength: number;\n  }): number {\n    let score = 0;\n\n    if (factors.hasQuantumResistantKeys) score += 40;\n    if (factors.keyRotationEnabled) score += 25;\n    if (factors.multiFactorAuth) score += 20;\n    score += Math.min(factors.encryptionStrength / 10, 15);\n\n    return Math.min(score, 100);\n  }\n}\n\nexport const quantumCrypto = QuantumCrypto.getInstance();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/loading.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/not-found.tsx",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'CardFooter' is defined but never used.",
        "line": 9,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 13
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 23,
        "column": 25,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [951, 1044],
              "text": "\n            The page you&apos;re looking for doesn't exist in our AI trading universe.\n          "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [951, 1044],
              "text": "\n            The page you&lsquo;re looking for doesn't exist in our AI trading universe.\n          "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [951, 1044],
              "text": "\n            The page you&#39;re looking for doesn't exist in our AI trading universe.\n          "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [951, 1044],
              "text": "\n            The page you&rsquo;re looking for doesn't exist in our AI trading universe.\n          "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 23,
        "column": 46,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [951, 1044],
              "text": "\n            The page you're looking for doesn&apos;t exist in our AI trading universe.\n          "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [951, 1044],
              "text": "\n            The page you're looking for doesn&lsquo;t exist in our AI trading universe.\n          "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [951, 1044],
              "text": "\n            The page you're looking for doesn&#39;t exist in our AI trading universe.\n          "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [951, 1044],
              "text": "\n            The page you're looking for doesn&rsquo;t exist in our AI trading universe.\n          "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 28,
        "column": 16,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [1190, 1272],
              "text": "\n            Don&apos;t worry, even our quantum AI can't predict every path!\n          "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [1190, 1272],
              "text": "\n            Don&lsquo;t worry, even our quantum AI can't predict every path!\n          "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [1190, 1272],
              "text": "\n            Don&#39;t worry, even our quantum AI can't predict every path!\n          "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [1190, 1272],
              "text": "\n            Don&rsquo;t worry, even our quantum AI can't predict every path!\n          "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      },
      {
        "ruleId": "react/no-unescaped-entities",
        "severity": 2,
        "message": "`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.",
        "line": 28,
        "column": 49,
        "nodeType": "JSXText",
        "messageId": "unescapedEntityAlts",
        "suggestions": [
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&apos;" },
            "fix": {
              "range": [1190, 1272],
              "text": "\n            Don't worry, even our quantum AI can&apos;t predict every path!\n          "
            },
            "desc": "Replace with `&apos;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&lsquo;" },
            "fix": {
              "range": [1190, 1272],
              "text": "\n            Don't worry, even our quantum AI can&lsquo;t predict every path!\n          "
            },
            "desc": "Replace with `&lsquo;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&#39;" },
            "fix": {
              "range": [1190, 1272],
              "text": "\n            Don't worry, even our quantum AI can&#39;t predict every path!\n          "
            },
            "desc": "Replace with `&#39;`."
          },
          {
            "messageId": "replaceWithAlt",
            "data": { "alt": "&rsquo;" },
            "fix": {
              "range": [1190, 1272],
              "text": "\n            Don't worry, even our quantum AI can&rsquo;t predict every path!\n          "
            },
            "desc": "Replace with `&rsquo;`."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter,\n} from '@/components/ui/card';\nimport { Home, TrendingUp, AlertCircle } from 'lucide-react';\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-purple-900 to-violet-900 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-black/50 border-purple-500/20 backdrop-blur-xl\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto mb-4 w-16 h-16 bg-gradient-to-r from-purple-500 to-violet-500 rounded-full flex items-center justify-center\">\n            <AlertCircle className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-white\">404 - Page Not Found</CardTitle>\n          <CardDescription className=\"text-gray-300\">\n            The page you're looking for doesn't exist in our AI trading universe.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"text-center text-sm text-gray-400\">\n            Don't worry, even our quantum AI can't predict every path!\n          </div>\n          <div className=\"flex flex-col gap-3\">\n            <Button\n              asChild\n              className=\"w-full bg-gradient-to-r from-purple-600 to-violet-600 hover:from-purple-700 hover:to-violet-700\"\n            >\n              <Link href=\"/\" className=\"flex items-center gap-2\">\n                <Home className=\"w-4 h-4\" />\n                Return to Dashboard\n              </Link>\n            </Button>\n            <Button\n              asChild\n              variant=\"outline\"\n              className=\"w-full border-purple-500/20 text-purple-300 hover:bg-purple-500/10\"\n            >\n              <Link href=\"/trading\" className=\"flex items-center gap-2\">\n                <TrendingUp className=\"w-4 h-4\" />\n                Start Trading\n              </Link>\n            </Button>\n          </div>\n          <div className=\"text-center text-xs text-gray-500 mt-6\">\n            AlphaAIStockX - Your AI Trading Companion\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/profile/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/advanced-stock-analysis-service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [192, 195], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [192, 195], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [248, 251], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [248, 251], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 7,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 7,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [308, 311], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [308, 311], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 8,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 8,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [364, 367], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [364, 367], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 298,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 298,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8994, 8997], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8994, 8997], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 343,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 343,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10328, 10331], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10328, 10331], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 353,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 353,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10679, 10682], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10679, 10682], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 364,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 364,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11019, 11022], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11019, 11022], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 377,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 377,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11492, 11495], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11492, 11495], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 387,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 387,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11745, 11748], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11745, 11748], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 397,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 397,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12003, 12006], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12003, 12006], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 404,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 404,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12203, 12206], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12203, 12206], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 433,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 433,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13088, 13091], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13088, 13091], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 450,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 450,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13615, 13618], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13615, 13618], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 533,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 533,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16965, 16968], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16965, 16968], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 594,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 594,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19325, 19328], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19325, 19328], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 824,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 824,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26159, 26162], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26159, 26162], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 825,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 825,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26177, 26180], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26177, 26180], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 826,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 826,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26207, 26210], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26207, 26210], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 899,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 899,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [29146, 29149], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [29146, 29149], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 945,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 945,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [30723, 30726], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [30723, 30726], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 945,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 945,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [30739, 30742], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [30739, 30742], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'currentPrice' is assigned a value but never used.",
        "line": 947,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 947,
        "endColumn": 23
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1048,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1048,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [34627, 34630], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [34627, 34630], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1049,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1049,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [34657, 34660], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [34657, 34660], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1050,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1050,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [34678, 34681], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [34678, 34681], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1152,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1152,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [37732, 37735], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [37732, 37735], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1152,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1152,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [37758, 37761], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [37758, 37761], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'riskScore' is defined but never used.",
        "line": 1193,
        "column": 52,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1193,
        "endColumn": 61
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1206,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1206,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [39755, 39758], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [39755, 39758], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1207,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1207,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [39785, 39788], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [39785, 39788], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1208,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1208,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [39806, 39809], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [39806, 39809], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'volatility' is assigned a value but never used.",
        "line": 1211,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1211,
        "endColumn": 21
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1233,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1233,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [40643, 40646], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [40643, 40646], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1233,
        "column": 90,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1233,
        "endColumn": 93,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [40660, 40663], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [40660, 40663], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1288,
        "column": 73,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1288,
        "endColumn": 76,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [42308, 42311], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [42308, 42311], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1288,
        "column": 92,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1288,
        "endColumn": 95,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [42327, 42330], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [42327, 42330], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'bestExit' is assigned a value but never used.",
        "line": 1294,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1294,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1334,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1334,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [44036, 44039], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [44036, 44039], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1369,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1369,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [45165, 45168], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [45165, 45168], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1439,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1439,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [47725, 47728], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [47725, 47728], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1452,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1452,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [48244, 48247], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [48244, 48247], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'metrics' is defined but never used.",
        "line": 1464,
        "column": 52,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1464,
        "endColumn": 59
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1464,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1464,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [48850, 48853], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [48850, 48853], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1492,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1492,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [49716, 49719], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [49716, 49719], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1493,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1493,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [49737, 49740], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [49737, 49740], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1494,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1494,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [49768, 49771], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [49768, 49771], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 1588,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 1588,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [52965, 52968], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [52965, 52968], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 48,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { aiBrainService } from './ai-brain-service';\n\nexport class AdvancedStockAnalysisService {\n  private static instance: AdvancedStockAnalysisService;\n  private stockDatabase: Map<string, any> = new Map();\n  private historicalData: Map<string, any> = new Map();\n  private patternRecognition: Map<string, any> = new Map();\n  private volumeAnalysis: Map<string, any> = new Map();\n\n  static getInstance(): AdvancedStockAnalysisService {\n    if (!AdvancedStockAnalysisService.instance) {\n      AdvancedStockAnalysisService.instance = new AdvancedStockAnalysisService();\n    }\n    return AdvancedStockAnalysisService.instance;\n  }\n\n  async initialize() {\n    await this.loadStockDatabase();\n    await this.loadHistoricalData();\n    this.initializePatternRecognition();\n    this.startRealTimeAnalysis();\n  }\n\n  private async loadStockDatabase() {\n    // Load comprehensive stock database with IPO dates, fundamentals, etc.\n    const stocks = [\n      {\n        symbol: 'AAPL',\n        name: 'Apple Inc.',\n        sector: 'Technology',\n        industry: 'Consumer Electronics',\n        ipoDate: '1980-12-12',\n        ipoPrice: 22.0,\n        marketCap: 3000000000000,\n        employees: 164000,\n        headquarters: 'Cupertino, CA',\n        ceo: 'Tim Cook',\n        founded: '1976-04-01',\n        description:\n          'Designs, manufactures, and markets smartphones, personal computers, tablets, wearables, and accessories worldwide.',\n      },\n      {\n        symbol: 'MSFT',\n        name: 'Microsoft Corporation',\n        sector: 'Technology',\n        industry: 'Software',\n        ipoDate: '1986-03-13',\n        ipoPrice: 21.0,\n        marketCap: 2800000000000,\n        employees: 221000,\n        headquarters: 'Redmond, WA',\n        ceo: 'Satya Nadella',\n        founded: '1975-04-04',\n        description:\n          'Develops, licenses, and supports software, services, devices, and solutions worldwide.',\n      },\n      {\n        symbol: 'GOOGL',\n        name: 'Alphabet Inc.',\n        sector: 'Technology',\n        industry: 'Internet Services',\n        ipoDate: '2004-08-19',\n        ipoPrice: 85.0,\n        marketCap: 1700000000000,\n        employees: 190000,\n        headquarters: 'Mountain View, CA',\n        ceo: 'Sundar Pichai',\n        founded: '1998-09-04',\n        description: 'Provides online advertising services and cloud computing services worldwide.',\n      },\n      {\n        symbol: 'TSLA',\n        name: 'Tesla, Inc.',\n        sector: 'Consumer Discretionary',\n        industry: 'Automotive',\n        ipoDate: '2010-06-29',\n        ipoPrice: 17.0,\n        marketCap: 800000000000,\n        employees: 140000,\n        headquarters: 'Austin, TX',\n        ceo: 'Elon Musk',\n        founded: '2003-07-01',\n        description:\n          'Designs, develops, manufactures, leases, and sells electric vehicles and energy generation and storage systems.',\n      },\n      {\n        symbol: 'NVDA',\n        name: 'NVIDIA Corporation',\n        sector: 'Technology',\n        industry: 'Semiconductors',\n        ipoDate: '1999-01-22',\n        ipoPrice: 12.0,\n        marketCap: 1800000000000,\n        employees: 29600,\n        headquarters: 'Santa Clara, CA',\n        ceo: 'Jensen Huang',\n        founded: '1993-04-05',\n        description: 'Provides graphics, and compute and networking solutions worldwide.',\n      },\n    ];\n\n    stocks.forEach(stock => {\n      this.stockDatabase.set(stock.symbol, stock);\n    });\n  }\n\n  private async loadHistoricalData() {\n    // Generate comprehensive historical data for each stock\n    const symbols = Array.from(this.stockDatabase.keys());\n\n    for (const symbol of symbols) {\n      const stock = this.stockDatabase.get(symbol);\n      const ipoDate = new Date(stock.ipoDate);\n      const today = new Date();\n      const daysSinceIPO = Math.floor(\n        (today.getTime() - ipoDate.getTime()) / (1000 * 60 * 60 * 24)\n      );\n\n      const historicalData = this.generateHistoricalData(symbol, stock.ipoPrice, daysSinceIPO);\n      this.historicalData.set(symbol, historicalData);\n    }\n  }\n\n  private generateHistoricalData(symbol: string, ipoPrice: number, days: number) {\n    const data = [];\n    let currentPrice = ipoPrice;\n    let volume = 1000000 + Math.random() * 10000000;\n\n    for (let i = 0; i < days; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - (days - i));\n\n      // Simulate realistic price movement with trends\n      const dailyReturn = (Math.random() - 0.48) * 0.05; // Slight upward bias\n      const volatility = 0.02 + Math.random() * 0.03;\n      const priceChange = currentPrice * dailyReturn * volatility;\n\n      currentPrice = Math.max(currentPrice + priceChange, 0.01);\n      volume = volume * (0.8 + Math.random() * 0.4); // Volume variation\n\n      const high = currentPrice * (1 + Math.random() * 0.03);\n      const low = currentPrice * (1 - Math.random() * 0.03);\n      const open = low + Math.random() * (high - low);\n      const close = currentPrice;\n\n      data.push({\n        date: date.toISOString().split('T')[0],\n        open,\n        high,\n        low,\n        close,\n        volume: Math.floor(volume),\n        adjustedClose: close,\n        dividends: i % 90 === 0 ? close * 0.01 : 0, // Quarterly dividends\n        splits: i % 1000 === 0 ? 2 : 1, // Occasional stock splits\n      });\n    }\n\n    return data;\n  }\n\n  private initializePatternRecognition() {\n    const patterns = [\n      {\n        name: 'Head and Shoulders',\n        type: 'reversal',\n        bearish: true,\n        minPeriods: 20,\n        reliability: 0.75,\n      },\n      {\n        name: 'Double Top',\n        type: 'reversal',\n        bearish: true,\n        minPeriods: 15,\n        reliability: 0.7,\n      },\n      {\n        name: 'Double Bottom',\n        type: 'reversal',\n        bearish: false,\n        minPeriods: 15,\n        reliability: 0.7,\n      },\n      {\n        name: 'Cup and Handle',\n        type: 'continuation',\n        bearish: false,\n        minPeriods: 30,\n        reliability: 0.8,\n      },\n      {\n        name: 'Ascending Triangle',\n        type: 'continuation',\n        bearish: false,\n        minPeriods: 10,\n        reliability: 0.72,\n      },\n      {\n        name: 'Descending Triangle',\n        type: 'continuation',\n        bearish: true,\n        minPeriods: 10,\n        reliability: 0.72,\n      },\n      {\n        name: 'Symmetrical Triangle',\n        type: 'continuation',\n        bearish: null,\n        minPeriods: 10,\n        reliability: 0.65,\n      },\n      {\n        name: 'Flag',\n        type: 'continuation',\n        bearish: null,\n        minPeriods: 5,\n        reliability: 0.68,\n      },\n      {\n        name: 'Pennant',\n        type: 'continuation',\n        bearish: null,\n        minPeriods: 5,\n        reliability: 0.68,\n      },\n      {\n        name: 'Wedge',\n        type: 'reversal',\n        bearish: null,\n        minPeriods: 15,\n        reliability: 0.65,\n      },\n    ];\n\n    patterns.forEach(pattern => {\n      this.patternRecognition.set(pattern.name, pattern);\n    });\n  }\n\n  private startRealTimeAnalysis() {\n    setInterval(() => {\n      this.updateRealTimeData();\n      this.analyzePatterns();\n      this.updateVolumeAnalysis();\n    }, 5000); // Update every 5 seconds\n  }\n\n  private updateRealTimeData() {\n    const symbols = Array.from(this.stockDatabase.keys());\n\n    symbols.forEach(symbol => {\n      const historical = this.historicalData.get(symbol);\n      if (historical && historical.length > 0) {\n        const lastData = historical[historical.length - 1];\n        const currentPrice = lastData.close * (1 + (Math.random() - 0.5) * 0.02);\n        const currentVolume = lastData.volume * (0.8 + Math.random() * 0.4);\n\n        // Add real-time data point\n        const now = new Date();\n        const realTimeData = {\n          date: now.toISOString().split('T')[0],\n          time: now.toTimeString().split(' ')[0],\n          price: currentPrice,\n          volume: Math.floor(currentVolume),\n          change: currentPrice - lastData.close,\n          changePercent: ((currentPrice - lastData.close) / lastData.close) * 100,\n        };\n\n        // Store real-time data\n        if (!this.stockDatabase.get(symbol).realTime) {\n          this.stockDatabase.get(symbol).realTime = [];\n        }\n        this.stockDatabase.get(symbol).realTime.push(realTimeData);\n\n        // Keep only last 100 real-time data points\n        if (this.stockDatabase.get(symbol).realTime.length > 100) {\n          this.stockDatabase.get(symbol).realTime.shift();\n        }\n      }\n    });\n  }\n\n  private analyzePatterns() {\n    const symbols = Array.from(this.stockDatabase.keys());\n\n    symbols.forEach(symbol => {\n      const historical = this.historicalData.get(symbol);\n      if (historical && historical.length >= 30) {\n        const recentData = historical.slice(-50); // Last 50 days\n        const detectedPatterns = this.detectPatterns(recentData);\n\n        this.stockDatabase.get(symbol).patterns = detectedPatterns;\n      }\n    });\n  }\n\n  private detectPatterns(data: any[]) {\n    const patterns = [];\n\n    // Simplified pattern detection (in reality, this would be much more sophisticated)\n    if (data.length >= 20) {\n      // Head and Shoulders detection\n      if (this.detectHeadAndShoulders(data)) {\n        patterns.push({\n          name: 'Head and Shoulders',\n          confidence: 0.7 + Math.random() * 0.2,\n          type: 'reversal',\n          bearish: true,\n          target: this.calculatePatternTarget(data, 'head_and_shoulders'),\n          timeframe: '2-4 weeks',\n        });\n      }\n\n      // Double Bottom detection\n      if (this.detectDoubleBottom(data)) {\n        patterns.push({\n          name: 'Double Bottom',\n          confidence: 0.65 + Math.random() * 0.25,\n          type: 'reversal',\n          bearish: false,\n          target: this.calculatePatternTarget(data, 'double_bottom'),\n          timeframe: '3-6 weeks',\n        });\n      }\n\n      // Cup and Handle detection\n      if (this.detectCupAndHandle(data)) {\n        patterns.push({\n          name: 'Cup and Handle',\n          confidence: 0.75 + Math.random() * 0.2,\n          type: 'continuation',\n          bearish: false,\n          target: this.calculatePatternTarget(data, 'cup_and_handle'),\n          timeframe: '4-8 weeks',\n        });\n      }\n    }\n\n    return patterns;\n  }\n\n  private detectHeadAndShoulders(data: any[]) {\n    // Simplified detection - look for three peaks with middle one highest\n    const peaks = this.findPeaks(data);\n    if (peaks.length >= 3) {\n      const lastThree = peaks.slice(-3);\n      return lastThree[1].high > lastThree[0].high && lastThree[1].high > lastThree[2].high;\n    }\n    return false;\n  }\n\n  private detectDoubleBottom(data: any[]) {\n    // Look for two similar lows\n    const troughs = this.findTroughs(data);\n    if (troughs.length >= 2) {\n      const lastTwo = troughs.slice(-2);\n      const diff = Math.abs(lastTwo[0].low - lastTwo[1].low) / lastTwo[0].low;\n      return diff < 0.03; // Within 3%\n    }\n    return false;\n  }\n\n  private detectCupAndHandle(data: any[]) {\n    // Look for U-shaped pattern followed by small consolidation\n    if (data.length < 30) return false;\n\n    const firstHalf = data.slice(0, Math.floor(data.length / 2));\n    const secondHalf = data.slice(Math.floor(data.length / 2));\n\n    const firstHalfTrend = this.calculateTrend(firstHalf);\n    const secondHalfTrend = this.calculateTrend(secondHalf);\n\n    return firstHalfTrend < -0.1 && secondHalfTrend > 0.1; // Down then up\n  }\n\n  private findPeaks(data: any[]) {\n    const peaks = [];\n    for (let i = 1; i < data.length - 1; i++) {\n      if (data[i].high > data[i - 1].high && data[i].high > data[i + 1].high) {\n        peaks.push(data[i]);\n      }\n    }\n    return peaks;\n  }\n\n  private findTroughs(data: any[]) {\n    const troughs = [];\n    for (let i = 1; i < data.length - 1; i++) {\n      if (data[i].low < data[i - 1].low && data[i].low < data[i + 1].low) {\n        troughs.push(data[i]);\n      }\n    }\n    return troughs;\n  }\n\n  private calculateTrend(data: any[]) {\n    if (data.length < 2) return 0;\n    const start = data[0].close;\n    const end = data[data.length - 1].close;\n    return (end - start) / start;\n  }\n\n  private calculatePatternTarget(data: any[], patternType: string) {\n    const currentPrice = data[data.length - 1].close;\n\n    switch (patternType) {\n      case 'head_and_shoulders':\n        return currentPrice * 0.9; // 10% decline target\n      case 'double_bottom':\n        return currentPrice * 1.15; // 15% upside target\n      case 'cup_and_handle':\n        return currentPrice * 1.2; // 20% upside target\n      default:\n        return currentPrice;\n    }\n  }\n\n  private updateVolumeAnalysis() {\n    const symbols = Array.from(this.stockDatabase.keys());\n\n    symbols.forEach(symbol => {\n      const historical = this.historicalData.get(symbol);\n      if (historical && historical.length >= 20) {\n        const recentData = historical.slice(-20);\n        const volumeAnalysis = this.analyzeVolume(recentData);\n\n        this.volumeAnalysis.set(symbol, volumeAnalysis);\n      }\n    });\n  }\n\n  private analyzeVolume(data: any[]) {\n    const volumes = data.map(d => d.volume);\n    const avgVolume = volumes.reduce((sum, vol) => sum + vol, 0) / volumes.length;\n    const currentVolume = volumes[volumes.length - 1];\n\n    const volumeRatio = currentVolume / avgVolume;\n    const volumeTrend = this.calculateVolumeTrend(data);\n\n    return {\n      currentVolume,\n      averageVolume: avgVolume,\n      volumeRatio,\n      volumeTrend,\n      analysis: this.interpretVolumeAnalysis(volumeRatio, volumeTrend),\n    };\n  }\n\n  private calculateVolumeTrend(data: any[]) {\n    const volumes = data.map(d => d.volume);\n    const firstHalf = volumes.slice(0, Math.floor(volumes.length / 2));\n    const secondHalf = volumes.slice(Math.floor(volumes.length / 2));\n\n    const firstAvg = firstHalf.reduce((sum, vol) => sum + vol, 0) / firstHalf.length;\n    const secondAvg = secondHalf.reduce((sum, vol) => sum + vol, 0) / secondHalf.length;\n\n    return (secondAvg - firstAvg) / firstAvg;\n  }\n\n  private interpretVolumeAnalysis(volumeRatio: number, volumeTrend: number) {\n    if (volumeRatio > 2 && volumeTrend > 0.2) {\n      return 'Strong buying interest - High volume with increasing trend';\n    } else if (volumeRatio > 1.5) {\n      return 'Above average volume - Increased interest';\n    } else if (volumeRatio < 0.5) {\n      return 'Below average volume - Low interest';\n    } else if (volumeTrend > 0.3) {\n      return 'Volume increasing - Growing interest';\n    } else if (volumeTrend < -0.3) {\n      return 'Volume decreasing - Waning interest';\n    } else {\n      return 'Normal volume activity';\n    }\n  }\n\n  // Public API Methods\n  async getComprehensiveStockAnalysis(symbol: string) {\n    const stock = this.stockDatabase.get(symbol);\n    if (!stock) {\n      throw new Error(`Stock ${symbol} not found`);\n    }\n\n    const historical = this.historicalData.get(symbol);\n    const volumeAnalysis = this.volumeAnalysis.get(symbol);\n    const aiAnalysis = await aiBrainService.getIntelligentRecommendation(symbol);\n\n    // Calculate comprehensive metrics\n    const metrics = this.calculateComprehensiveMetrics(historical);\n    const technicalIndicators = this.calculateTechnicalIndicators(historical);\n    const buyScore = await this.calculateBuyScore(symbol, aiAnalysis, metrics, technicalIndicators);\n    const marketClassification = this.classifyMarketCondition(historical, metrics);\n\n    return {\n      stock,\n      currentPrice: this.getCurrentPrice(symbol),\n      historical: historical.slice(-252), // Last year of data\n      realTimeData: stock.realTime || [],\n      patterns: stock.patterns || [],\n      volumeAnalysis,\n      metrics,\n      technicalIndicators,\n      aiAnalysis,\n      buyScore,\n      marketClassification,\n      tradingSignals: this.generateTradingSignals(symbol, metrics, technicalIndicators, aiAnalysis),\n      riskAssessment: this.assessRisk(symbol, metrics, technicalIndicators),\n      priceTargets: this.calculatePriceTargets(symbol, metrics, technicalIndicators, aiAnalysis),\n      entryExitPoints: this.calculateEntryExitPoints(symbol, technicalIndicators, aiAnalysis),\n      performanceSinceIPO: this.calculatePerformanceSinceIPO(symbol),\n      keyEvents: this.identifyKeyEvents(symbol, historical),\n      competitorAnalysis: this.getCompetitorAnalysis(symbol),\n      analystConsensus: this.generateAnalystConsensus(symbol, metrics),\n      recommendation: this.generateFinalRecommendation(\n        symbol,\n        buyScore,\n        aiAnalysis,\n        marketClassification\n      ),\n    };\n  }\n\n  private getCurrentPrice(symbol: string) {\n    const stock = this.stockDatabase.get(symbol);\n    if (stock.realTime && stock.realTime.length > 0) {\n      return stock.realTime[stock.realTime.length - 1].price;\n    }\n\n    const historical = this.historicalData.get(symbol);\n    return historical[historical.length - 1].close;\n  }\n\n  private calculateComprehensiveMetrics(historical: any[]) {\n    if (!historical || historical.length === 0) return {};\n\n    const prices = historical.map(d => d.close);\n    const volumes = historical.map(d => d.volume);\n    const highs = historical.map(d => d.high);\n    const lows = historical.map(d => d.low);\n\n    // Performance metrics\n    const currentPrice = prices[prices.length - 1];\n    const yearAgoPrice = prices.length >= 252 ? prices[prices.length - 252] : prices[0];\n    const monthAgoPrice = prices.length >= 21 ? prices[prices.length - 21] : prices[0];\n    const weekAgoPrice = prices.length >= 5 ? prices[prices.length - 5] : prices[0];\n\n    // Volatility calculations\n    const returns = [];\n    for (let i = 1; i < prices.length; i++) {\n      returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);\n    }\n\n    const avgReturn = returns.reduce((sum, ret) => sum + ret, 0) / returns.length;\n    const variance =\n      returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length;\n    const volatility = Math.sqrt(variance) * Math.sqrt(252); // Annualized\n\n    // Support and resistance levels\n    const recent50 = historical.slice(-50);\n    const supportLevel = Math.min(...recent50.map(d => d.low));\n    const resistanceLevel = Math.max(...recent50.map(d => d.high));\n\n    // 52-week high/low\n    const year52High = Math.max(...highs.slice(-252));\n    const year52Low = Math.min(...lows.slice(-252));\n\n    return {\n      performance: {\n        ytd: ((currentPrice - yearAgoPrice) / yearAgoPrice) * 100,\n        month: ((currentPrice - monthAgoPrice) / monthAgoPrice) * 100,\n        week: ((currentPrice - weekAgoPrice) / weekAgoPrice) * 100,\n        day: returns[returns.length - 1] * 100,\n      },\n      volatility: {\n        annualized: volatility * 100,\n        daily: Math.sqrt(variance) * 100,\n      },\n      levels: {\n        support: supportLevel,\n        resistance: resistanceLevel,\n        year52High,\n        year52Low,\n        distanceFromHigh: ((currentPrice - year52High) / year52High) * 100,\n        distanceFromLow: ((currentPrice - year52Low) / year52Low) * 100,\n      },\n      volume: {\n        average: volumes.reduce((sum, vol) => sum + vol, 0) / volumes.length,\n        current: volumes[volumes.length - 1],\n        trend: this.calculateVolumeTrend(historical.slice(-20)),\n      },\n    };\n  }\n\n  private calculateTechnicalIndicators(historical: any[]) {\n    if (!historical || historical.length < 50) return {};\n\n    const prices = historical.map(d => d.close);\n    const highs = historical.map(d => d.high);\n    const lows = historical.map(d => d.low);\n    const volumes = historical.map(d => d.volume);\n\n    // Moving Averages\n    const sma20 = this.calculateSMA(prices, 20);\n    const sma50 = this.calculateSMA(prices, 50);\n    const sma200 = this.calculateSMA(prices, 200);\n    const ema12 = this.calculateEMA(prices, 12);\n    const ema26 = this.calculateEMA(prices, 26);\n\n    // RSI\n    const rsi = this.calculateRSI(prices, 14);\n\n    // MACD\n    const macd = this.calculateMACD(prices);\n\n    // Bollinger Bands\n    const bollingerBands = this.calculateBollingerBands(prices, 20, 2);\n\n    // Stochastic\n    const stochastic = this.calculateStochastic(highs, lows, prices, 14);\n\n    // ATR\n    const atr = this.calculateATR(highs, lows, prices, 14);\n\n    // Volume indicators\n    const obv = this.calculateOBV(prices, volumes);\n\n    return {\n      movingAverages: {\n        sma20: sma20[sma20.length - 1],\n        sma50: sma50[sma50.length - 1],\n        sma200: sma200[sma200.length - 1],\n        ema12: ema12[ema12.length - 1],\n        ema26: ema26[ema26.length - 1],\n      },\n      momentum: {\n        rsi: rsi[rsi.length - 1],\n        macd: {\n          line: macd.line[macd.line.length - 1],\n          signal: macd.signal[macd.signal.length - 1],\n          histogram: macd.histogram[macd.histogram.length - 1],\n        },\n        stochastic: {\n          k: stochastic.k[stochastic.k.length - 1],\n          d: stochastic.d[stochastic.d.length - 1],\n        },\n      },\n      volatility: {\n        bollingerBands: {\n          upper: bollingerBands.upper[bollingerBands.upper.length - 1],\n          middle: bollingerBands.middle[bollingerBands.middle.length - 1],\n          lower: bollingerBands.lower[bollingerBands.lower.length - 1],\n        },\n        atr: atr[atr.length - 1],\n      },\n      volume: {\n        obv: obv[obv.length - 1],\n      },\n      trends: {\n        shortTerm: this.determineTrend(sma20, sma50),\n        mediumTerm: this.determineTrend(sma50, sma200),\n        longTerm: this.determineTrend(prices.slice(-200), sma200),\n      },\n    };\n  }\n\n  private calculateSMA(prices: number[], period: number) {\n    const sma = [];\n    for (let i = period - 1; i < prices.length; i++) {\n      const sum = prices.slice(i - period + 1, i + 1).reduce((a, b) => a + b, 0);\n      sma.push(sum / period);\n    }\n    return sma;\n  }\n\n  private calculateEMA(prices: number[], period: number) {\n    const ema = [];\n    const multiplier = 2 / (period + 1);\n\n    // Start with SMA for first value\n    const firstSMA = prices.slice(0, period).reduce((a, b) => a + b, 0) / period;\n    ema.push(firstSMA);\n\n    for (let i = period; i < prices.length; i++) {\n      const emaValue: number = (prices[i] - ema[ema.length - 1]) * multiplier + ema[ema.length - 1];\n      ema.push(emaValue);\n    }\n\n    return ema;\n  }\n\n  private calculateRSI(prices: number[], period: number) {\n    const gains = [];\n    const losses = [];\n\n    for (let i = 1; i < prices.length; i++) {\n      const change = prices[i] - prices[i - 1];\n      gains.push(change > 0 ? change : 0);\n      losses.push(change < 0 ? Math.abs(change) : 0);\n    }\n\n    const rsi = [];\n    for (let i = period - 1; i < gains.length; i++) {\n      const avgGain = gains.slice(i - period + 1, i + 1).reduce((a, b) => a + b, 0) / period;\n      const avgLoss = losses.slice(i - period + 1, i + 1).reduce((a, b) => a + b, 0) / period;\n\n      if (avgLoss === 0) {\n        rsi.push(100);\n      } else {\n        const rs = avgGain / avgLoss;\n        rsi.push(100 - 100 / (1 + rs));\n      }\n    }\n\n    return rsi;\n  }\n\n  private calculateMACD(prices: number[]) {\n    const ema12 = this.calculateEMA(prices, 12);\n    const ema26 = this.calculateEMA(prices, 26);\n\n    const macdLine = [];\n    const startIndex = Math.max(0, ema26.length - ema12.length);\n\n    for (let i = 0; i < ema12.length - startIndex; i++) {\n      macdLine.push(ema12[i + startIndex] - ema26[i]);\n    }\n\n    const signalLine = this.calculateEMA(macdLine, 9);\n    const histogram = [];\n\n    for (let i = 0; i < signalLine.length; i++) {\n      histogram.push(macdLine[i + macdLine.length - signalLine.length] - signalLine[i]);\n    }\n\n    return {\n      line: macdLine,\n      signal: signalLine,\n      histogram,\n    };\n  }\n\n  private calculateBollingerBands(prices: number[], period: number, stdDev: number) {\n    const sma = this.calculateSMA(prices, period);\n    const upper = [];\n    const lower = [];\n\n    for (let i = 0; i < sma.length; i++) {\n      const slice = prices.slice(i, i + period);\n      const mean = sma[i];\n      const variance = slice.reduce((sum, price) => sum + Math.pow(price - mean, 2), 0) / period;\n      const standardDeviation = Math.sqrt(variance);\n\n      upper.push(mean + standardDeviation * stdDev);\n      lower.push(mean - standardDeviation * stdDev);\n    }\n\n    return {\n      upper,\n      middle: sma,\n      lower,\n    };\n  }\n\n  private calculateStochastic(highs: number[], lows: number[], closes: number[], period: number) {\n    const k = [];\n\n    for (let i = period - 1; i < closes.length; i++) {\n      const highestHigh = Math.max(...highs.slice(i - period + 1, i + 1));\n      const lowestLow = Math.min(...lows.slice(i - period + 1, i + 1));\n      const currentClose = closes[i];\n\n      const kValue = ((currentClose - lowestLow) / (highestHigh - lowestLow)) * 100;\n      k.push(kValue);\n    }\n\n    const d = this.calculateSMA(k, 3);\n\n    return { k, d };\n  }\n\n  private calculateATR(highs: number[], lows: number[], closes: number[], period: number) {\n    const trueRanges = [];\n\n    for (let i = 1; i < highs.length; i++) {\n      const tr1 = highs[i] - lows[i];\n      const tr2 = Math.abs(highs[i] - closes[i - 1]);\n      const tr3 = Math.abs(lows[i] - closes[i - 1]);\n\n      trueRanges.push(Math.max(tr1, tr2, tr3));\n    }\n\n    return this.calculateSMA(trueRanges, period);\n  }\n\n  private calculateOBV(prices: number[], volumes: number[]) {\n    const obv = [volumes[0]];\n\n    for (let i = 1; i < prices.length; i++) {\n      if (prices[i] > prices[i - 1]) {\n        obv.push(obv[obv.length - 1] + volumes[i]);\n      } else if (prices[i] < prices[i - 1]) {\n        obv.push(obv[obv.length - 1] - volumes[i]);\n      } else {\n        obv.push(obv[obv.length - 1]);\n      }\n    }\n\n    return obv;\n  }\n\n  private determineTrend(data1: number[], data2: number[]) {\n    if (!data1 || !data2 || data1.length === 0 || data2.length === 0) return 'neutral';\n\n    const current1 = data1[data1.length - 1];\n    const current2 = data2[data2.length - 1];\n\n    if (current1 > current2) return 'bullish';\n    if (current1 < current2) return 'bearish';\n    return 'neutral';\n  }\n\n  private async calculateBuyScore(\n    symbol: string,\n    aiAnalysis: any,\n    metrics: any,\n    technicalIndicators: any\n  ) {\n    let score = 50; // Start with neutral score\n\n    // Technical Analysis Score (30 points)\n    const technical = technicalIndicators;\n\n    // RSI scoring\n    if (technical.momentum?.rsi) {\n      if (technical.momentum.rsi < 30)\n        score += 8; // Oversold\n      else if (technical.momentum.rsi > 70)\n        score -= 8; // Overbought\n      else if (technical.momentum.rsi >= 40 && technical.momentum.rsi <= 60) score += 3; // Neutral zone\n    }\n\n    // MACD scoring\n    if (technical.momentum?.macd) {\n      if (technical.momentum.macd.line > technical.momentum.macd.signal) score += 5;\n      if (technical.momentum.macd.histogram > 0) score += 3;\n    }\n\n    // Moving Average scoring\n    if (technical.movingAverages) {\n      const currentPrice = this.getCurrentPrice(symbol);\n      if (currentPrice > technical.movingAverages.sma20) score += 3;\n      if (currentPrice > technical.movingAverages.sma50) score += 4;\n      if (currentPrice > technical.movingAverages.sma200) score += 5;\n      if (technical.movingAverages.sma20 > technical.movingAverages.sma50) score += 3;\n      if (technical.movingAverages.sma50 > technical.movingAverages.sma200) score += 4;\n    }\n\n    // Trend scoring\n    if (technical.trends) {\n      if (technical.trends.shortTerm === 'bullish') score += 4;\n      if (technical.trends.mediumTerm === 'bullish') score += 5;\n      if (technical.trends.longTerm === 'bullish') score += 6;\n    }\n\n    // Performance Score (20 points)\n    if (metrics.performance) {\n      if (metrics.performance.week > 0) score += 2;\n      if (metrics.performance.month > 0) score += 3;\n      if (metrics.performance.ytd > 0) score += 5;\n      if (metrics.performance.week > 5) score += 3; // Strong weekly performance\n      if (metrics.performance.month > 10) score += 4; // Strong monthly performance\n      if (metrics.performance.ytd > 20) score += 3; // Strong yearly performance\n    }\n\n    // Volume Score (10 points)\n    const volumeAnalysis = this.volumeAnalysis.get(symbol);\n    if (volumeAnalysis) {\n      if (volumeAnalysis.volumeRatio > 1.5) score += 4; // High volume\n      if (volumeAnalysis.volumeTrend > 0.2) score += 3; // Increasing volume\n      if (volumeAnalysis.volumeRatio > 2) score += 3; // Very high volume\n    }\n\n    // AI Analysis Score (25 points)\n    if (aiAnalysis) {\n      if (aiAnalysis.action === 'BUY') {\n        score += Math.floor(aiAnalysis.confidence * 15);\n      } else if (aiAnalysis.action === 'SELL') {\n        score -= Math.floor(aiAnalysis.confidence * 15);\n      }\n\n      if (aiAnalysis.strength > 0.8) score += 5;\n      if (aiAnalysis.supportingFactors && aiAnalysis.supportingFactors.length > 3) score += 3;\n      if (aiAnalysis.riskFactors && aiAnalysis.riskFactors.length < 2) score += 2;\n    }\n\n    // Pattern Score (10 points)\n    const stock = this.stockDatabase.get(symbol);\n    if (stock.patterns && stock.patterns.length > 0) {\n      stock.patterns.forEach((pattern: any) => {\n        if (!pattern.bearish && pattern.confidence > 0.7) {\n          score += 4;\n        } else if (pattern.bearish && pattern.confidence > 0.7) {\n          score -= 4;\n        }\n      });\n    }\n\n    // Support/Resistance Score (5 points)\n    if (metrics.levels) {\n      const currentPrice = this.getCurrentPrice(symbol);\n      const distanceFromSupport = (currentPrice - metrics.levels.support) / metrics.levels.support;\n      const distanceFromResistance = (metrics.levels.resistance - currentPrice) / currentPrice;\n\n      if (distanceFromSupport < 0.05) score += 3; // Near support\n      if (distanceFromResistance > 0.1) score += 2; // Far from resistance\n    }\n\n    // Ensure score is between 0 and 100\n    score = Math.max(0, Math.min(100, score));\n\n    return {\n      overall: score,\n      rating: this.getScoreRating(score),\n      components: {\n        technical: Math.min(30, Math.max(0, score * 0.3)),\n        performance: Math.min(20, Math.max(0, score * 0.2)),\n        volume: Math.min(10, Math.max(0, score * 0.1)),\n        ai: Math.min(25, Math.max(0, score * 0.25)),\n        patterns: Math.min(10, Math.max(0, score * 0.1)),\n        levels: Math.min(5, Math.max(0, score * 0.05)),\n      },\n    };\n  }\n\n  private getScoreRating(score: number) {\n    if (score >= 80) return 'STRONG BUY';\n    if (score >= 65) return 'BUY';\n    if (score >= 55) return 'WEAK BUY';\n    if (score >= 45) return 'HOLD';\n    if (score >= 35) return 'WEAK SELL';\n    if (score >= 20) return 'SELL';\n    return 'STRONG SELL';\n  }\n\n  private classifyMarketCondition(historical: any[], metrics: any) {\n    const prices = historical.map(d => d.close);\n    const currentPrice = prices[prices.length - 1];\n\n    // Calculate trend over different periods\n    const trend20 = this.calculateTrendStrength(prices.slice(-20));\n    const trend50 = this.calculateTrendStrength(prices.slice(-50));\n    const trend200 = this.calculateTrendStrength(prices.slice(-200));\n\n    // Volume analysis\n    const volumeAnalysis = this.volumeAnalysis.get(historical[0]?.symbol);\n\n    // Determine bull or bear market based on multiple factors\n    let bullishFactors = 0;\n    let bearishFactors = 0;\n\n    // Price trend factors\n    if (trend20 > 0.05) bullishFactors++;\n    if (trend50 > 0.1) bullishFactors++;\n    if (trend200 > 0.15) bullishFactors++;\n\n    if (trend20 < -0.05) bearishFactors++;\n    if (trend50 < -0.1) bearishFactors++;\n    if (trend200 < -0.15) bearishFactors++;\n\n    // Performance factors\n    if (metrics.performance?.month > 5) bullishFactors++;\n    if (metrics.performance?.ytd > 10) bullishFactors++;\n\n    if (metrics.performance?.month < -5) bearishFactors++;\n    if (metrics.performance?.ytd < -10) bearishFactors++;\n\n    // Volume factors\n    if (volumeAnalysis?.volumeTrend > 0.2) bullishFactors++;\n    if (volumeAnalysis?.volumeTrend < -0.2) bearishFactors++;\n\n    // 52-week position\n    if (metrics.levels?.distanceFromHigh > -10) bullishFactors++;\n    if (metrics.levels?.distanceFromLow > 50) bullishFactors++;\n\n    if (metrics.levels?.distanceFromHigh < -20) bearishFactors++;\n    if (metrics.levels?.distanceFromLow < 20) bearishFactors++;\n\n    // Determine classification\n    let classification = 'NEUTRAL';\n    let confidence = 0.5;\n\n    if (bullishFactors > bearishFactors + 2) {\n      classification = 'BULL MARKET';\n      confidence = Math.min(0.95, 0.6 + (bullishFactors - bearishFactors) * 0.1);\n    } else if (bearishFactors > bullishFactors + 2) {\n      classification = 'BEAR MARKET';\n      confidence = Math.min(0.95, 0.6 + (bearishFactors - bullishFactors) * 0.1);\n    } else if (bullishFactors > bearishFactors) {\n      classification = 'BULLISH TREND';\n      confidence = 0.6;\n    } else if (bearishFactors > bullishFactors) {\n      classification = 'BEARISH TREND';\n      confidence = 0.6;\n    }\n\n    return {\n      classification,\n      confidence,\n      bullishFactors,\n      bearishFactors,\n      trends: {\n        short: trend20 > 0 ? 'UP' : 'DOWN',\n        medium: trend50 > 0 ? 'UP' : 'DOWN',\n        long: trend200 > 0 ? 'UP' : 'DOWN',\n      },\n      description: this.getMarketDescription(classification, bullishFactors, bearishFactors),\n    };\n  }\n\n  private calculateTrendStrength(prices: number[]) {\n    if (prices.length < 2) return 0;\n    const start = prices[0];\n    const end = prices[prices.length - 1];\n    return (end - start) / start;\n  }\n\n  private getMarketDescription(\n    classification: string,\n    bullishFactors: number,\n    bearishFactors: number\n  ) {\n    switch (classification) {\n      case 'BULL MARKET':\n        return `Strong upward trend with ${bullishFactors} bullish indicators. Characterized by sustained price increases, high investor confidence, and strong economic fundamentals.`;\n      case 'BEAR MARKET':\n        return `Significant downward trend with ${bearishFactors} bearish indicators. Marked by declining prices, negative sentiment, and potential economic headwinds.`;\n      case 'BULLISH TREND':\n        return `Positive momentum with ${bullishFactors} bullish factors. Shows signs of upward movement but not yet a confirmed bull market.`;\n      case 'BEARISH TREND':\n        return `Negative momentum with ${bearishFactors} bearish factors. Showing signs of weakness but not yet a confirmed bear market.`;\n      default:\n        return 'Market is in a neutral state with mixed signals. No clear directional bias at this time.';\n    }\n  }\n\n  private generateTradingSignals(\n    symbol: string,\n    metrics: any,\n    technicalIndicators: any,\n    aiAnalysis: any\n  ) {\n    const signals = [];\n    const currentPrice = this.getCurrentPrice(symbol);\n\n    // RSI signals\n    if (technicalIndicators.momentum?.rsi) {\n      if (technicalIndicators.momentum.rsi < 30) {\n        signals.push({\n          type: 'BUY',\n          indicator: 'RSI',\n          strength: 'STRONG',\n          description: 'RSI indicates oversold conditions',\n          confidence: 0.8,\n        });\n      } else if (technicalIndicators.momentum.rsi > 70) {\n        signals.push({\n          type: 'SELL',\n          indicator: 'RSI',\n          strength: 'STRONG',\n          description: 'RSI indicates overbought conditions',\n          confidence: 0.8,\n        });\n      }\n    }\n\n    // MACD signals\n    if (technicalIndicators.momentum?.macd) {\n      const macd = technicalIndicators.momentum.macd;\n      if (macd.line > macd.signal && macd.histogram > 0) {\n        signals.push({\n          type: 'BUY',\n          indicator: 'MACD',\n          strength: 'MEDIUM',\n          description: 'MACD bullish crossover',\n          confidence: 0.7,\n        });\n      } else if (macd.line < macd.signal && macd.histogram < 0) {\n        signals.push({\n          type: 'SELL',\n          indicator: 'MACD',\n          strength: 'MEDIUM',\n          description: 'MACD bearish crossover',\n          confidence: 0.7,\n        });\n      }\n    }\n\n    // Moving average signals\n    if (technicalIndicators.movingAverages) {\n      const ma = technicalIndicators.movingAverages;\n      if (currentPrice > ma.sma20 && ma.sma20 > ma.sma50 && ma.sma50 > ma.sma200) {\n        signals.push({\n          type: 'BUY',\n          indicator: 'Moving Averages',\n          strength: 'STRONG',\n          description: 'Price above all major moving averages',\n          confidence: 0.85,\n        });\n      }\n    }\n\n    // Support/Resistance signals\n    if (metrics.levels) {\n      const distanceFromSupport = (currentPrice - metrics.levels.support) / metrics.levels.support;\n      const distanceFromResistance = (metrics.levels.resistance - currentPrice) / currentPrice;\n\n      if (distanceFromSupport < 0.02) {\n        signals.push({\n          type: 'BUY',\n          indicator: 'Support Level',\n          strength: 'MEDIUM',\n          description: 'Price near strong support level',\n          confidence: 0.7,\n        });\n      }\n\n      if (distanceFromResistance < 0.02) {\n        signals.push({\n          type: 'SELL',\n          indicator: 'Resistance Level',\n          strength: 'MEDIUM',\n          description: 'Price near strong resistance level',\n          confidence: 0.7,\n        });\n      }\n    }\n\n    // AI signals\n    if (aiAnalysis && aiAnalysis.confidence > 0.7) {\n      signals.push({\n        type: aiAnalysis.action,\n        indicator: 'AI Analysis',\n        strength: aiAnalysis.confidence > 0.8 ? 'STRONG' : 'MEDIUM',\n        description: `AI recommends ${aiAnalysis.action} with ${(aiAnalysis.confidence * 100).toFixed(0)}% confidence`,\n        confidence: aiAnalysis.confidence,\n      });\n    }\n\n    return signals;\n  }\n\n  private assessRisk(symbol: string, metrics: any, technicalIndicators: any) {\n    let riskScore = 50; // Start with medium risk\n\n    // Volatility risk\n    if (metrics.volatility?.annualized > 30) riskScore += 15;\n    else if (metrics.volatility?.annualized < 15) riskScore -= 10;\n\n    // Beta risk (simulated)\n    const beta = 0.8 + Math.random() * 0.8; // 0.8 to 1.6\n    if (beta > 1.3) riskScore += 10;\n    else if (beta < 0.8) riskScore -= 5;\n\n    // Technical risk\n    if (technicalIndicators.momentum?.rsi > 80) riskScore += 10;\n    if (technicalIndicators.momentum?.rsi < 20) riskScore += 5;\n\n    // Position relative to 52-week range\n    if (metrics.levels?.distanceFromHigh > -5) riskScore += 8; // Near highs\n    if (metrics.levels?.distanceFromLow < 10) riskScore += 5; // Near lows\n\n    // Ensure score is between 0 and 100\n    riskScore = Math.max(0, Math.min(100, riskScore));\n\n    let riskLevel = 'MEDIUM';\n    if (riskScore > 70) riskLevel = 'HIGH';\n    else if (riskScore < 40) riskLevel = 'LOW';\n\n    return {\n      score: riskScore,\n      level: riskLevel,\n      factors: {\n        volatility: metrics.volatility?.annualized || 20,\n        beta: beta,\n        technicalRisk:\n          technicalIndicators.momentum?.rsi > 70 || technicalIndicators.momentum?.rsi < 30,\n        positionRisk: metrics.levels?.distanceFromHigh > -10,\n      },\n      recommendation: this.getRiskRecommendation(riskLevel, riskScore),\n    };\n  }\n\n  private getRiskRecommendation(riskLevel: string, riskScore: number) {\n    switch (riskLevel) {\n      case 'HIGH':\n        return 'High risk investment. Consider smaller position sizes and tight stop losses. Suitable for aggressive investors only.';\n      case 'LOW':\n        return 'Low risk investment. Suitable for conservative investors. Consider larger position sizes with appropriate diversification.';\n      default:\n        return 'Medium risk investment. Suitable for moderate investors. Use standard position sizing and risk management.';\n    }\n  }\n\n  private calculatePriceTargets(\n    symbol: string,\n    metrics: any,\n    technicalIndicators: any,\n    aiAnalysis: any\n  ) {\n    const currentPrice = this.getCurrentPrice(symbol);\n    const volatility = metrics.volatility?.annualized || 20;\n\n    // Technical targets\n    const resistance = metrics.levels?.resistance || currentPrice * 1.1;\n    const support = metrics.levels?.support || currentPrice * 0.9;\n\n    // AI targets\n    const aiTarget = aiAnalysis?.priceTargets?.moderate || currentPrice;\n\n    // Calculate targets based on multiple methods\n    const targets = {\n      conservative: Math.min(resistance, currentPrice * 1.05),\n      moderate: Math.min(resistance * 1.1, currentPrice * 1.15),\n      aggressive: currentPrice * 1.25,\n      ai: aiTarget,\n      stopLoss: Math.max(support, currentPrice * 0.92),\n      timeframe: '3-6 months',\n    };\n\n    return targets;\n  }\n\n  private calculateEntryExitPoints(symbol: string, technicalIndicators: any, aiAnalysis: any) {\n    const currentPrice = this.getCurrentPrice(symbol);\n\n    // Entry points based on technical levels\n    const entryPoints = [];\n    const exitPoints = [];\n\n    // Support level entry\n    if (technicalIndicators.volatility?.bollingerBands?.lower) {\n      entryPoints.push({\n        price: technicalIndicators.volatility.bollingerBands.lower,\n        type: 'Support Entry',\n        confidence: 0.7,\n        description: 'Entry near Bollinger Band lower support',\n      });\n    }\n\n    // Moving average entry\n    if (technicalIndicators.movingAverages?.sma20) {\n      entryPoints.push({\n        price: technicalIndicators.movingAverages.sma20,\n        type: 'MA Entry',\n        confidence: 0.6,\n        description: 'Entry on pullback to 20-day moving average',\n      });\n    }\n\n    // Resistance exit\n    if (technicalIndicators.volatility?.bollingerBands?.upper) {\n      exitPoints.push({\n        price: technicalIndicators.volatility.bollingerBands.upper,\n        type: 'Resistance Exit',\n        confidence: 0.7,\n        description: 'Exit near Bollinger Band upper resistance',\n      });\n    }\n\n    // AI-based entry/exit\n    if (aiAnalysis?.priceTargets) {\n      exitPoints.push({\n        price: aiAnalysis.priceTargets.moderate,\n        type: 'AI Target',\n        confidence: aiAnalysis.confidence || 0.6,\n        description: 'AI-calculated price target',\n      });\n    }\n\n    return {\n      entry: entryPoints,\n      exit: exitPoints,\n      currentPrice,\n      recommendation: this.getEntryExitRecommendation(currentPrice, entryPoints, exitPoints),\n    };\n  }\n\n  private getEntryExitRecommendation(currentPrice: number, entryPoints: any[], exitPoints: any[]) {\n    const bestEntry = entryPoints.reduce(\n      (best, point) => (point.confidence > best.confidence ? point : best),\n      entryPoints[0] || { confidence: 0 }\n    );\n\n    const bestExit = exitPoints.reduce(\n      (best, point) => (point.confidence > best.confidence ? point : best),\n      exitPoints[0] || { confidence: 0 }\n    );\n\n    if (bestEntry && currentPrice > bestEntry.price * 1.02) {\n      return `Consider waiting for pullback to ${bestEntry.price.toFixed(2)} (${bestEntry.type})`;\n    } else if (bestEntry && currentPrice <= bestEntry.price * 1.02) {\n      return `Good entry opportunity near ${bestEntry.price.toFixed(2)} (${bestEntry.type})`;\n    } else {\n      return 'Monitor for better entry opportunities';\n    }\n  }\n\n  private calculatePerformanceSinceIPO(symbol: string) {\n    const stock = this.stockDatabase.get(symbol);\n    const historical = this.historicalData.get(symbol);\n\n    if (!stock || !historical || historical.length === 0) return null;\n\n    const ipoPrice = stock.ipoPrice;\n    const currentPrice = this.getCurrentPrice(symbol);\n    const totalReturn = ((currentPrice - ipoPrice) / ipoPrice) * 100;\n\n    const ipoDate = new Date(stock.ipoDate);\n    const today = new Date();\n    const yearsListed = (today.getTime() - ipoDate.getTime()) / (1000 * 60 * 60 * 24 * 365.25);\n    const annualizedReturn = Math.pow(currentPrice / ipoPrice, 1 / yearsListed) - 1;\n\n    return {\n      ipoPrice,\n      currentPrice,\n      totalReturn,\n      annualizedReturn: annualizedReturn * 100,\n      yearsListed,\n      ipoDate: stock.ipoDate,\n      milestones: this.identifyPriceMilestones(symbol, historical),\n    };\n  }\n\n  private identifyPriceMilestones(symbol: string, historical: any[]) {\n    const milestones = [];\n    const prices = historical.map(d => d.close);\n\n    // Find all-time high\n    const allTimeHigh = Math.max(...prices);\n    const athIndex = prices.indexOf(allTimeHigh);\n    milestones.push({\n      type: 'All-Time High',\n      price: allTimeHigh,\n      date: historical[athIndex].date,\n      significance: 'Highest price ever reached',\n    });\n\n    // Find major price levels (multiples of 10, 50, 100)\n    const currentPrice = prices[prices.length - 1];\n    const majorLevels = [10, 25, 50, 100, 200, 500, 1000];\n\n    majorLevels.forEach(level => {\n      if (currentPrice > level) {\n        const firstCrossIndex = prices.findIndex(p => p >= level);\n        if (firstCrossIndex !== -1) {\n          milestones.push({\n            type: `$${level} Milestone`,\n            price: level,\n            date: historical[firstCrossIndex].date,\n            significance: `First time crossing $${level}`,\n          });\n        }\n      }\n    });\n\n    return milestones.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n  }\n\n  private identifyKeyEvents(symbol: string, historical: any[]) {\n    const events = [];\n    const prices = historical.map(d => d.close);\n    const volumes = historical.map(d => d.volume);\n\n    // Find significant price movements\n    for (let i = 1; i < historical.length; i++) {\n      const priceChange = (prices[i] - prices[i - 1]) / prices[i - 1];\n      const volumeRatio =\n        volumes[i] /\n        (volumes.slice(Math.max(0, i - 20), i).reduce((a, b) => a + b, 0) / Math.min(20, i));\n\n      if (Math.abs(priceChange) > 0.1 && volumeRatio > 2) {\n        // 10%+ move with high volume\n        events.push({\n          date: historical[i].date,\n          type: priceChange > 0 ? 'Major Rally' : 'Major Decline',\n          priceChange: priceChange * 100,\n          volume: volumes[i],\n          significance: `${Math.abs(priceChange * 100).toFixed(1)}% ${priceChange > 0 ? 'gain' : 'loss'} on high volume`,\n        });\n      }\n    }\n\n    // Add simulated corporate events\n    const corporateEvents = [\n      { type: 'Earnings Beat', impact: 'positive' },\n      { type: 'Stock Split', impact: 'neutral' },\n      { type: 'Dividend Increase', impact: 'positive' },\n      { type: 'Product Launch', impact: 'positive' },\n      { type: 'Regulatory Approval', impact: 'positive' },\n    ];\n\n    // Add a few random corporate events\n    for (let i = 0; i < 3; i++) {\n      const randomEvent = corporateEvents[Math.floor(Math.random() * corporateEvents.length)];\n      const randomDate = historical[Math.floor(Math.random() * historical.length)].date;\n\n      events.push({\n        date: randomDate,\n        type: randomEvent.type,\n        impact: randomEvent.impact,\n        significance: `Corporate event: ${randomEvent.type}`,\n      });\n    }\n\n    return events\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())\n      .slice(0, 10);\n  }\n\n  private getCompetitorAnalysis(symbol: string) {\n    const stock = this.stockDatabase.get(symbol);\n    if (!stock) return null;\n\n    // Simulated competitor data based on sector\n    const competitors: Record<string, string[]> = {\n      Technology: ['AAPL', 'MSFT', 'GOOGL', 'NVDA', 'META'],\n      'Consumer Discretionary': ['TSLA', 'AMZN', 'NFLX', 'NKE', 'SBUX'],\n      Healthcare: ['JNJ', 'PFE', 'UNH', 'ABBV', 'TMO'],\n      Financial: ['JPM', 'BAC', 'WFC', 'GS', 'MS'],\n    };\n\n    const sectorCompetitors = competitors[stock.sector] || [];\n    const relevantCompetitors = sectorCompetitors\n      .filter((comp: string) => comp !== symbol)\n      .slice(0, 4);\n\n    return {\n      sector: stock.sector,\n      competitors: relevantCompetitors.map((comp: any) => ({\n        symbol: comp,\n        name: this.stockDatabase.get(comp)?.name || comp,\n        marketCap: this.stockDatabase.get(comp)?.marketCap || 1000000000,\n        performance: (Math.random() - 0.5) * 20, // Random performance\n        valuation: 'Fair', // Simplified\n      })),\n      sectorPerformance: (Math.random() - 0.5) * 15,\n      marketPosition: Math.floor(Math.random() * 5) + 1,\n      competitiveAdvantages: this.getCompetitiveAdvantages(stock),\n    };\n  }\n\n  private getCompetitiveAdvantages(stock: any) {\n    const advantages: Record<string, string[]> = {\n      AAPL: ['Brand loyalty', 'Ecosystem integration', 'Premium pricing power'],\n      MSFT: ['Cloud dominance', 'Enterprise relationships', 'Recurring revenue'],\n      GOOGL: ['Search monopoly', 'Data advantages', 'AI capabilities'],\n      TSLA: ['EV leadership', 'Vertical integration', 'Innovation culture'],\n      NVDA: ['GPU dominance', 'AI acceleration', 'CUDA ecosystem'],\n    };\n\n    return advantages[stock.symbol] || ['Market position', 'Technology', 'Brand recognition'];\n  }\n\n  private generateAnalystConsensus(symbol: string, metrics: any) {\n    // Simulated analyst consensus\n    const ratings = ['Strong Buy', 'Buy', 'Hold', 'Sell', 'Strong Sell'];\n    const weights = [0.2, 0.3, 0.35, 0.1, 0.05]; // Typical distribution\n\n    const consensus = [];\n    for (let i = 0; i < ratings.length; i++) {\n      consensus.push({\n        rating: ratings[i],\n        count: Math.floor(weights[i] * 20), // Assume 20 analysts\n        percentage: weights[i] * 100,\n      });\n    }\n\n    const avgRating = ratings[1]; // Typically \"Buy\"\n    const priceTarget = this.getCurrentPrice(symbol) * (1 + (Math.random() - 0.3) * 0.3); // ±30% variation\n\n    return {\n      consensus,\n      averageRating: avgRating,\n      averagePriceTarget: priceTarget,\n      analystCount: 20,\n      lastUpdated: new Date().toISOString().split('T')[0],\n    };\n  }\n\n  private generateFinalRecommendation(\n    symbol: string,\n    buyScore: any,\n    aiAnalysis: any,\n    marketClassification: any\n  ) {\n    const currentPrice = this.getCurrentPrice(symbol);\n\n    let action = 'HOLD';\n    let confidence = 0.5;\n    const reasoning = [];\n\n    // Determine action based on buy score\n    if (buyScore.overall >= 70) {\n      action = 'BUY';\n      confidence = Math.min(0.95, buyScore.overall / 100);\n    } else if (buyScore.overall <= 30) {\n      action = 'SELL';\n      confidence = Math.min(0.95, (100 - buyScore.overall) / 100);\n    }\n\n    // Add reasoning based on analysis\n    if (buyScore.overall >= 70) {\n      reasoning.push(`Strong buy score of ${buyScore.overall}/100`);\n    }\n\n    if (aiAnalysis.confidence > 0.7) {\n      reasoning.push(\n        `AI analysis supports ${aiAnalysis.action} with ${(aiAnalysis.confidence * 100).toFixed(0)}% confidence`\n      );\n    }\n\n    if (marketClassification.classification.includes('BULL')) {\n      reasoning.push('Stock is in a bull market trend');\n    } else if (marketClassification.classification.includes('BEAR')) {\n      reasoning.push('Stock is in a bear market trend - exercise caution');\n    }\n\n    // Risk considerations\n    const riskFactors = aiAnalysis.riskFactors || [];\n    if (riskFactors.length > 3) {\n      reasoning.push('Multiple risk factors identified - consider reduced position size');\n    }\n\n    return {\n      action,\n      confidence,\n      reasoning,\n      timeframe: aiAnalysis.timeframe || '3-6 months',\n      positionSize: this.recommendPositionSize(buyScore.overall, confidence),\n      stopLoss: currentPrice * 0.92,\n      takeProfit: currentPrice * (action === 'BUY' ? 1.15 : 0.85),\n      keyFactors: reasoning.slice(0, 3),\n      riskLevel: buyScore.overall > 70 ? 'MEDIUM' : buyScore.overall < 30 ? 'HIGH' : 'MEDIUM',\n    };\n  }\n\n  private recommendPositionSize(score: number, confidence: number) {\n    const baseSize = 0.05; // 5% base position\n    const scoreMultiplier = score / 100;\n    const confidenceMultiplier = confidence;\n\n    const recommendedSize = baseSize * scoreMultiplier * confidenceMultiplier;\n\n    if (recommendedSize > 0.08) return 'Large (8-10%)';\n    if (recommendedSize > 0.05) return 'Medium (5-8%)';\n    if (recommendedSize > 0.02) return 'Small (2-5%)';\n    return 'Very Small (1-2%)';\n  }\n\n  // Public API for getting all stocks with scores\n  async getAllStocksWithScores() {\n    const symbols = Array.from(this.stockDatabase.keys());\n    const stocksWithScores = [];\n\n    for (const symbol of symbols) {\n      try {\n        const analysis = await this.getComprehensiveStockAnalysis(symbol);\n        stocksWithScores.push({\n          symbol,\n          name: analysis.stock.name,\n          sector: analysis.stock.sector,\n          currentPrice: analysis.currentPrice,\n          buyScore: analysis.buyScore,\n          marketClassification: analysis.marketClassification,\n          recommendation: analysis.recommendation,\n          performance: analysis.metrics.performance,\n          volume: analysis.volumeAnalysis,\n        });\n      } catch (error) {\n        console.error(`Error analyzing ${symbol}:`, error);\n      }\n    }\n\n    return stocksWithScores.sort((a, b) => b.buyScore.overall - a.buyScore.overall);\n  }\n\n  // Search and filter stocks\n  searchStocks(query: string, filters: any = {}) {\n    const symbols = Array.from(this.stockDatabase.keys());\n    let results = symbols.map(symbol => this.stockDatabase.get(symbol));\n\n    // Text search\n    if (query) {\n      results = results.filter(\n        stock =>\n          stock.symbol.toLowerCase().includes(query.toLowerCase()) ||\n          stock.name.toLowerCase().includes(query.toLowerCase()) ||\n          stock.sector.toLowerCase().includes(query.toLowerCase())\n      );\n    }\n\n    // Apply filters\n    if (filters.sector) {\n      results = results.filter(stock => stock.sector === filters.sector);\n    }\n\n    if (filters.minMarketCap) {\n      results = results.filter(stock => stock.marketCap >= filters.minMarketCap);\n    }\n\n    if (filters.maxMarketCap) {\n      results = results.filter(stock => stock.marketCap <= filters.maxMarketCap);\n    }\n\n    return results;\n  }\n}\n\nexport const advancedStockAnalysisService = AdvancedStockAnalysisService.getInstance();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/ai-auto-trader-enhanced.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'MarketData' is defined but never used.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 13
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'PortfolioMetrics' is defined but never used.",
        "line": 8,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'API_CONFIG' is assigned a value but never used.",
        "line": 15,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 15,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 527,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 527,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15885, 15888], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15885, 15888], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 533,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 533,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16120, 16123], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16120, 16123], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 580,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 580,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17235, 17238], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17235, 17238], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 581,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 581,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17260, 17263], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17260, 17263], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Advanced AI Auto-Trader Service with Enhanced Features\n// This service provides a sophisticated AI-driven auto-trader with advanced algorithms\n\nimport { aiBrainService } from './ai-brain-service';\nimport {\n  MarketData,\n  TradingSignal,\n  PortfolioMetrics,\n  TradingStrategy,\n  RiskAnalysis,\n  AIModelPrediction,\n} from './ai-types';\n\n// Environment variables for production (client-side safe)\nconst API_CONFIG = {\n  DEMO_MODE: true, // Set to false for production\n  BASE_URL: typeof window !== 'undefined' ? window.location.origin : '',\n};\n\ninterface TradeRecord {\n  symbol: string;\n  action: 'buy' | 'sell';\n  price: number;\n  shares: number;\n  time: string;\n  reason: string;\n  confidence?: number;\n  strategy?: string;\n  stopLoss?: number;\n  takeProfit?: number;\n}\n\ninterface PortfolioData {\n  cash: number;\n  holdings: Record<string, { shares: number; avgPrice: number }>;\n  trades: TradeRecord[];\n  totalValue: number;\n  dailyPnL: number;\n  totalReturn: number;\n}\n\ninterface RiskSettings {\n  maxPositionSize: number;\n  stopLoss: number;\n  takeProfit: number;\n  maxDailyLoss: number;\n}\n\ninterface PerformanceMetrics {\n  totalReturn: number;\n  dailyReturn: number;\n  weeklyReturn: number;\n  monthlyReturn: number;\n  sharpeRatio: number;\n  maxDrawdown: number;\n  winRate: number;\n  lastUpdated: Date;\n}\n\n// Enhanced AI Auto Trader with advanced features\nexport class AdvancedAIAutoTrader {\n  private portfolio: PortfolioData;\n  private strategies: TradingStrategy[] = [];\n  private riskSettings: RiskSettings;\n  private performanceMetrics: PerformanceMetrics;\n  private tradingEnabled: boolean = true;\n  private maxDailyLoss: number = 0.02;\n  private maxPositionSize: number = 0.1;\n\n  constructor(startingCash = 10000, riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' = 'MEDIUM') {\n    this.portfolio = {\n      cash: startingCash,\n      holdings: {},\n      trades: [],\n      totalValue: startingCash,\n      dailyPnL: 0,\n      totalReturn: 0,\n    };\n\n    this.riskSettings = this.getRiskSettings(riskLevel);\n    this.performanceMetrics = this.initializePerformanceMetrics();\n    this.initializeStrategies();\n  }\n\n  private getRiskSettings(level: 'LOW' | 'MEDIUM' | 'HIGH'): RiskSettings {\n    const settings = {\n      LOW: { maxPositionSize: 0.05, stopLoss: 0.02, takeProfit: 0.03, maxDailyLoss: 0.01 },\n      MEDIUM: { maxPositionSize: 0.1, stopLoss: 0.03, takeProfit: 0.05, maxDailyLoss: 0.02 },\n      HIGH: { maxPositionSize: 0.2, stopLoss: 0.05, takeProfit: 0.08, maxDailyLoss: 0.03 },\n    };\n    return settings[level];\n  }\n\n  private initializePerformanceMetrics(): PerformanceMetrics {\n    return {\n      totalReturn: 0,\n      dailyReturn: 0,\n      weeklyReturn: 0,\n      monthlyReturn: 0,\n      sharpeRatio: 0,\n      maxDrawdown: 0,\n      winRate: 0,\n      lastUpdated: new Date(),\n    };\n  }\n\n  private initializeStrategies(): void {\n    this.strategies = [\n      {\n        id: 'momentum-ai',\n        name: 'AI Momentum Strategy',\n        description: 'Advanced momentum detection using AI',\n        type: 'MOMENTUM',\n        status: 'ACTIVE',\n        parameters: { lookback: 20, threshold: 0.02, weight: 0.4 },\n        performance: {\n          totalReturn: 15.2,\n          sharpeRatio: 1.8,\n          maxDrawdown: 0.08,\n          winRate: 65,\n          profitFactor: 1.4,\n          avgTrade: 2.1,\n        },\n        risk: {\n          maxPosition: 0.1,\n          stopLoss: 0.03,\n          takeProfit: 0.06,\n          maxDailyLoss: 0.02,\n        },\n        filters: {\n          minVolume: 1000000,\n          minPrice: 10,\n          maxPrice: 500,\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      {\n        id: 'mean-reversion-ai',\n        name: 'AI Mean Reversion',\n        description: 'Mean reversion with AI sentiment analysis',\n        type: 'MEAN_REVERSION',\n        status: 'ACTIVE',\n        parameters: { oversold: 30, overbought: 70, weight: 0.3 },\n        performance: {\n          totalReturn: 12.8,\n          sharpeRatio: 1.6,\n          maxDrawdown: 0.06,\n          winRate: 58,\n          profitFactor: 1.3,\n          avgTrade: 1.8,\n        },\n        risk: {\n          maxPosition: 0.08,\n          stopLoss: 0.025,\n          takeProfit: 0.05,\n          maxDailyLoss: 0.015,\n        },\n        filters: {\n          minVolume: 500000,\n          minPrice: 5,\n        },\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    ];\n  }\n\n  async fetchPrice(symbol: string): Promise<number> {\n    // Enhanced price simulation with market behavior\n    const time = Date.now();\n    const seed = symbol.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n\n    // Base price varies by symbol\n    const basePrice = 50 + (seed % 200);\n\n    // Market hours simulation\n    const hour = new Date().getHours();\n    const marketMultiplier = hour >= 9 && hour <= 16 ? 1.0 : 0.95;\n\n    // Volatility and trend\n    const volatility = 0.02;\n    const trend = Math.sin((time + seed * 1000) / 1000000) * 0.005;\n    const randomWalk = (Math.random() - 0.5) * volatility;\n\n    return (basePrice + basePrice * (trend + randomWalk)) * marketMultiplier;\n  }\n\n  async runAIAnalysis(symbols: string[]): Promise<AIAnalysisResult> {\n    try {\n      // Get AI predictions from brain service\n      const predictions = await aiBrainService.analyzeMarket(symbols);\n      const signals = await aiBrainService.generateTradingSignals(symbols);\n\n      // Analyze current portfolio\n      const portfolioAnalysis = await this.analyzePortfolio();\n\n      // Risk assessment\n      const riskAnalysis = await this.assessPortfolioRisk();\n\n      return {\n        predictions,\n        signals: signals.filter(s => s.confidence > 0.7),\n        portfolioAnalysis,\n        riskAnalysis,\n        recommendations: await this.generateRecommendations(predictions, portfolioAnalysis),\n      };\n    } catch (error) {\n      console.error('AI Analysis failed:', error);\n      return this.getFallbackAnalysis();\n    }\n  }\n\n  private getFallbackAnalysis(): AIAnalysisResult {\n    return {\n      predictions: [],\n      signals: [],\n      portfolioAnalysis: {\n        totalValue: this.portfolio.totalValue,\n        totalPnL: 0,\n        positions: [],\n        diversification: { sectors: {}, risk: 'MEDIUM' },\n        recommendations: ['System in fallback mode - limited analysis available'],\n      },\n      riskAnalysis: {\n        symbol: 'PORTFOLIO',\n        riskScore: 50,\n        volatility: 0.15,\n        beta: 1.0,\n        recommendations: ['Monitor system status'],\n        timestamp: new Date(),\n      },\n      recommendations: ['AI system unavailable - using conservative approach'],\n    };\n  }\n\n  async executeAITrading(symbols: string[]): Promise<TradeExecutionResult> {\n    if (!this.tradingEnabled) {\n      return { success: false, message: 'Trading is disabled' };\n    }\n\n    // Check daily loss limit\n    if (this.portfolio.dailyPnL < -this.maxDailyLoss * this.portfolio.totalValue) {\n      this.tradingEnabled = false;\n      return { success: false, message: 'Daily loss limit reached' };\n    }\n\n    const analysis = await this.runAIAnalysis(symbols);\n    const trades: TradeRecord[] = [];\n\n    for (const signal of analysis.signals) {\n      const trade = await this.processSignal(signal);\n      if (trade) {\n        trades.push(trade);\n        this.portfolio.trades.push(trade);\n      }\n    }\n\n    // Update performance metrics\n    await this.updatePerformanceMetrics();\n\n    return {\n      success: true,\n      trades,\n      portfolioValue: this.portfolio.totalValue,\n      message: `Executed ${trades.length} trades based on AI signals`,\n    };\n  }\n\n  private async processSignal(signal: TradingSignal): Promise<TradeRecord | null> {\n    try {\n      const currentPrice = await this.fetchPrice(signal.symbol);\n      const positionSize = this.calculatePositionSize(signal, currentPrice);\n\n      if (positionSize === 0) return null;\n\n      const trade: TradeRecord = {\n        symbol: signal.symbol,\n        action: signal.action.toLowerCase() as 'buy' | 'sell',\n        price: currentPrice,\n        shares: Math.abs(positionSize),\n        time: new Date().toISOString(),\n        reason: `AI Signal: ${signal.reasoning.join(', ')}`,\n        confidence: signal.confidence,\n        strategy: 'AI_COMBINED',\n        stopLoss: signal.stopLoss,\n        takeProfit: signal.takeProfit,\n      };\n\n      // Execute the trade\n      if (await this.executeTrade(trade)) {\n        return trade;\n      }\n\n      return null;\n    } catch (error) {\n      console.error(`Failed to process signal for ${signal.symbol}:`, error);\n      return null;\n    }\n  }\n\n  private calculatePositionSize(signal: TradingSignal, price: number): number {\n    const maxPositionValue = this.portfolio.totalValue * this.riskSettings.maxPositionSize;\n    const baseShares = Math.floor(maxPositionValue / price);\n\n    // Adjust based on confidence\n    const confidenceMultiplier = Math.min(signal.confidence, 1.0);\n    const adjustedShares = Math.floor(baseShares * confidenceMultiplier);\n\n    // Check if we have enough cash for buy orders\n    if (signal.action === 'BUY') {\n      const maxAffordableShares = Math.floor(this.portfolio.cash / price);\n      return Math.min(adjustedShares, maxAffordableShares);\n    }\n\n    // For sell orders, check current holdings\n    const currentHolding = this.portfolio.holdings[signal.symbol];\n    if (!currentHolding) return 0;\n\n    return Math.min(adjustedShares, currentHolding.shares);\n  }\n\n  private async executeTrade(trade: TradeRecord): Promise<boolean> {\n    try {\n      if (trade.action === 'buy') {\n        const totalCost = trade.shares * trade.price;\n        if (this.portfolio.cash >= totalCost) {\n          this.portfolio.cash -= totalCost;\n\n          if (this.portfolio.holdings[trade.symbol]) {\n            // Update existing position\n            const holding = this.portfolio.holdings[trade.symbol];\n            const totalShares = holding.shares + trade.shares;\n            const totalCostBasis = holding.avgPrice * holding.shares + trade.price * trade.shares;\n            holding.avgPrice = totalCostBasis / totalShares;\n            holding.shares = totalShares;\n          } else {\n            // New position\n            this.portfolio.holdings[trade.symbol] = {\n              shares: trade.shares,\n              avgPrice: trade.price,\n            };\n          }\n          return true;\n        }\n      } else if (trade.action === 'sell') {\n        const holding = this.portfolio.holdings[trade.symbol];\n        if (holding && holding.shares >= trade.shares) {\n          this.portfolio.cash += trade.shares * trade.price;\n          holding.shares -= trade.shares;\n\n          if (holding.shares === 0) {\n            delete this.portfolio.holdings[trade.symbol];\n          }\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('Trade execution failed:', error);\n      return false;\n    }\n  }\n\n  async analyzePortfolio(): Promise<PortfolioAnalysis> {\n    const holdingsEntries = Object.entries(this.portfolio.holdings);\n    const analysis: PortfolioAnalysis = {\n      totalValue: 0,\n      totalPnL: 0,\n      positions: [],\n      diversification: { sectors: {}, risk: 'MEDIUM' },\n      recommendations: [],\n    };\n\n    for (const [symbol, holding] of holdingsEntries) {\n      const currentPrice = await this.fetchPrice(symbol);\n      const currentValue = holding.shares * currentPrice;\n      const pnl = currentValue - holding.shares * holding.avgPrice;\n\n      analysis.positions.push({\n        symbol,\n        shares: holding.shares,\n        avgPrice: holding.avgPrice,\n        currentPrice,\n        currentValue,\n        pnl,\n        pnlPercent: (pnl / (holding.shares * holding.avgPrice)) * 100,\n      });\n\n      analysis.totalValue += currentValue;\n      analysis.totalPnL += pnl;\n    }\n\n    analysis.totalValue += this.portfolio.cash;\n    this.portfolio.totalValue = analysis.totalValue;\n\n    return analysis;\n  }\n\n  private async assessPortfolioRisk(): Promise<RiskAnalysis> {\n    return {\n      symbol: 'PORTFOLIO',\n      riskScore: 45,\n      volatility: 0.15,\n      beta: 1.0,\n      sharpeRatio: 1.2,\n      maxDrawdown: 0.08,\n      var95: 0.03,\n      expectedReturn: 0.12,\n      concentrationRisk: 0.3,\n      liquidityRisk: 0.1,\n      sectorRisk: 0.2,\n      recommendations: ['Consider diversification across sectors', 'Monitor position sizes'],\n      timestamp: new Date(),\n    };\n  }\n\n  async generateRecommendations(\n    predictions: AIModelPrediction[],\n    portfolioAnalysis: PortfolioAnalysis\n  ): Promise<string[]> {\n    const recommendations: string[] = [];\n\n    // Portfolio diversification\n    if (Object.keys(this.portfolio.holdings).length < 5) {\n      recommendations.push('Consider diversifying into more positions');\n    }\n\n    // High confidence opportunities\n    const highConfidencePredictions = predictions.filter(p => p.confidence > 0.8);\n    if (highConfidencePredictions.length > 0) {\n      recommendations.push(\n        `High confidence opportunities found in: ${highConfidencePredictions.map(p => p.symbol).join(', ')}`\n      );\n    }\n\n    // Risk management\n    if (portfolioAnalysis.totalValue < 8000) {\n      // Started with 10000\n      recommendations.push('Portfolio has declined significantly - consider risk review');\n    }\n\n    return recommendations;\n  }\n\n  // Performance monitoring\n  private async updatePerformanceMetrics(): Promise<void> {\n    const analysis = await this.analyzePortfolio();\n    this.performanceMetrics.totalReturn = ((analysis.totalValue - 10000) / 10000) * 100;\n    this.performanceMetrics.lastUpdated = new Date();\n  }\n\n  // Public methods\n  getPortfolio(): PortfolioData & { performance: PerformanceMetrics } {\n    return {\n      ...this.portfolio,\n      performance: this.performanceMetrics,\n    };\n  }\n\n  getStrategies(): TradingStrategy[] {\n    return this.strategies;\n  }\n\n  setTradingEnabled(enabled: boolean): void {\n    this.tradingEnabled = enabled;\n  }\n\n  emergencyStop(): void {\n    this.tradingEnabled = false;\n    console.log('EMERGENCY STOP: Trading halted');\n  }\n\n  // AI-powered portfolio optimization\n  async optimizePortfolio(): Promise<OptimizationResult> {\n    const currentPositions = Object.entries(this.portfolio.holdings).map(([symbol, holding]) => ({\n      symbol,\n      shares: holding.shares,\n      avgPrice: holding.avgPrice,\n    }));\n\n    const optimization = await aiBrainService.optimizePortfolio(\n      currentPositions,\n      this.portfolio.cash\n    );\n\n    return {\n      currentAllocation: this.calculateCurrentAllocation(),\n      suggestedAllocation: optimization.suggestedAllocations,\n      rebalanceActions: optimization.rebalanceActions,\n      expectedImprovement: {\n        returnIncrease: 0.023, // 2.3% expected return increase\n        riskReduction: 0.015, // 1.5% risk reduction\n        sharpeImprovement: 0.18,\n      },\n    };\n  }\n\n  private calculateCurrentAllocation(): Record<string, number> {\n    const allocation: Record<string, number> = {};\n    const totalValue = this.portfolio.totalValue;\n\n    Object.entries(this.portfolio.holdings).forEach(([symbol, holding]) => {\n      const currentValue = holding.shares * 100; // Simplified current price\n      allocation[symbol] = currentValue / totalValue;\n    });\n\n    allocation['CASH'] = this.portfolio.cash / totalValue;\n    return allocation;\n  }\n\n  // Advanced risk management\n  async assessRealTimeRisk(symbol: string): Promise<RealTimeRiskAssessment> {\n    const analysis = await aiBrainService.performRealTimeAnalysis(symbol);\n\n    return {\n      symbol,\n      currentRisk: analysis.risk.riskScore,\n      volatilityAlert: analysis.risk.volatility > 0.3,\n      sentimentRisk: analysis.sentiment.overall < -0.5,\n      technicalRisk: this.assessTechnicalRisk(analysis.technicals),\n      recommendation: this.getRiskRecommendation(analysis),\n      timestamp: new Date(),\n    };\n  }\n\n  private assessTechnicalRisk(technicals: any): 'LOW' | 'MEDIUM' | 'HIGH' {\n    if (technicals.rsi > 80 || technicals.rsi < 20) return 'HIGH';\n    if (technicals.rsi > 70 || technicals.rsi < 30) return 'MEDIUM';\n    return 'LOW';\n  }\n\n  private getRiskRecommendation(analysis: any): string {\n    if (analysis.risk.riskScore > 80) return 'REDUCE_POSITION';\n    if (analysis.risk.riskScore > 60) return 'MONITOR_CLOSELY';\n    if (analysis.sentiment.overall > 0.7) return 'CONSIDER_INCREASE';\n    return 'MAINTAIN_POSITION';\n  }\n}\n\n// Additional type definitions\ninterface AIAnalysisResult {\n  predictions: AIModelPrediction[];\n  signals: TradingSignal[];\n  portfolioAnalysis: PortfolioAnalysis;\n  riskAnalysis: RiskAnalysis;\n  recommendations: string[];\n}\n\ninterface PortfolioAnalysis {\n  totalValue: number;\n  totalPnL: number;\n  positions: PositionAnalysis[];\n  diversification: {\n    sectors: Record<string, number>;\n    risk: 'LOW' | 'MEDIUM' | 'HIGH';\n  };\n  recommendations: string[];\n}\n\ninterface PositionAnalysis {\n  symbol: string;\n  shares: number;\n  avgPrice: number;\n  currentPrice: number;\n  currentValue: number;\n  pnl: number;\n  pnlPercent: number;\n}\n\ninterface TradeExecutionResult {\n  success: boolean;\n  trades?: TradeRecord[];\n  portfolioValue?: number;\n  message: string;\n}\n\ninterface OptimizationResult {\n  currentAllocation: Record<string, number>;\n  suggestedAllocation: any;\n  rebalanceActions: any[];\n  expectedImprovement: {\n    returnIncrease: number;\n    riskReduction: number;\n    sharpeImprovement: number;\n  };\n}\n\ninterface RealTimeRiskAssessment {\n  symbol: string;\n  currentRisk: number;\n  volatilityAlert: boolean;\n  sentimentRisk: boolean;\n  technicalRisk: 'LOW' | 'MEDIUM' | 'HIGH';\n  recommendation: string;\n  timestamp: Date;\n}\n\n// Export for use in components\nexport { AdvancedAIAutoTrader as AIAutoTrader };\nexport type { TradeRecord as Trade, PortfolioData as Portfolio };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/ai-auto-trader.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'MarketData' is defined but never used.",
        "line": 7,
        "column": 15,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'TradeResult' is defined but never used.",
        "line": 7,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 49,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 49,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1577, 1580], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1577, 1580], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'PerformanceMetrics' is defined but never used.",
        "line": 587,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 587,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 606,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 606,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [18142, 18145], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [18142, 18145], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// AI Auto-Trader Service (Demo)\n// This service simulates an AI-driven auto-trader using live stock data APIs and user settings.\n// Replace mock logic with real API calls and trading logic for production.\n\nimport axios from 'axios';\nimport { aiBrainService } from './ai-brain-service';\nimport type { MarketData, TradeResult } from '../services/types';\nimport { TradingSignal, PortfolioMetrics, RiskAnalysis, AIModelPrediction } from './ai-types';\n\n// Add support for real data providers (Alpha Vantage, IEX Cloud, Polygon.io)\nconst ALPHA_VANTAGE_API_KEY = process.env.ALPHA_VANTAGE_API_KEY || '';\nconst IEX_CLOUD_API_KEY = process.env.IEX_CLOUD_API_KEY || '';\nconst POLYGON_API_KEY = process.env.POLYGON_API_KEY || '';\nconst ALPACA_API_KEY = process.env.ALPACA_API_KEY || 'your_alpaca_api_key';\nconst ALPACA_API_SECRET = process.env.ALPACA_API_SECRET || 'your_alpaca_api_secret';\n\n// Define local interfaces to avoid conflicts\ninterface TradeData {\n  symbol: string;\n  action: 'buy' | 'sell';\n  price: number;\n  shares: number;\n  time: string;\n  reason: string;\n}\n\ninterface PortfolioData {\n  cash: number;\n  holdings: Record<string, { shares: number; avgPrice: number }>;\n  trades: TradeData[];\n  totalValue: number;\n  dailyPnL: number;\n  totalReturn: number;\n}\n\ninterface RiskSettings {\n  maxPositionSize: number;\n  stopLoss: number;\n  takeProfit: number;\n  maxDailyLoss: number;\n}\n\ninterface SimpleStrategy {\n  id: string;\n  name: string;\n  type: 'MOMENTUM' | 'MEAN_REVERSION' | 'ML_BASED';\n  status: 'ACTIVE' | 'INACTIVE';\n  weight: number;\n  parameters: { [key: string]: any };\n}\n\ninterface TradingStrategy extends SimpleStrategy {\n  description?: string;\n  risk?: 'LOW' | 'MEDIUM' | 'HIGH';\n}\n\ninterface AIAnalysisResult {\n  predictions: AIModelPrediction[];\n  signals: TradingSignal[];\n  riskAssessment: RiskAnalysis;\n  portfolioAnalysis: PortfolioAnalysis;\n  recommendations: string[];\n}\n\n// Enhanced AI Auto Trader with advanced features\nexport class AdvancedAIAutoTrader {\n  private portfolio: PortfolioData;\n  private strategies: SimpleStrategy[] = [];\n  private riskSettings: RiskSettings;\n  private performanceMetrics: PortfolioMetrics;\n  private tradingEnabled: boolean = true;\n  private maxDailyLoss: number = 0.02; // 2% max daily loss\n  private maxPositionSize: number = 0.1; // 10% max position size\n\n  constructor(startingCash = 10000, riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' = 'MEDIUM') {\n    this.portfolio = {\n      cash: startingCash,\n      holdings: {},\n      trades: [],\n      totalValue: startingCash,\n      dailyPnL: 0,\n      totalReturn: 0,\n    };\n\n    this.riskSettings = this.getRiskSettings(riskLevel);\n    this.performanceMetrics = this.initializePerformanceMetrics();\n    this.initializeStrategies();\n  }\n\n  private initializePerformanceMetrics(): PortfolioMetrics {\n    return {\n      totalValue: this.portfolio.totalValue,\n      totalCash: this.portfolio.cash,\n      totalEquity: 0,\n      dayChange: 0,\n      dayChangePercent: 0,\n      totalReturn: 0,\n      totalReturnPercent: 0,\n      allocations: {},\n      diversification: {\n        sectorWeights: {},\n        topHoldings: [],\n        concentration: 0,\n      },\n      risk: {\n        beta: 1,\n        volatility: 0,\n        sharpeRatio: 0,\n        maxDrawdown: 0,\n        var95: 0,\n      },\n      performance: {\n        last1d: 0,\n        last1w: 0,\n        last1m: 0,\n        last3m: 0,\n        last6m: 0,\n        last1y: 0,\n        inception: 0,\n      },\n      timestamp: new Date(),\n    };\n  }\n\n  private getRiskSettings(level: 'LOW' | 'MEDIUM' | 'HIGH'): RiskSettings {\n    const settings = {\n      LOW: { maxPositionSize: 0.05, stopLoss: 0.02, takeProfit: 0.03, maxDailyLoss: 0.01 },\n      MEDIUM: { maxPositionSize: 0.1, stopLoss: 0.03, takeProfit: 0.05, maxDailyLoss: 0.02 },\n      HIGH: { maxPositionSize: 0.2, stopLoss: 0.05, takeProfit: 0.08, maxDailyLoss: 0.03 },\n    };\n    return settings[level];\n  }\n\n  private initializeStrategies(): void {\n    this.strategies = [\n      {\n        id: 'momentum-ai',\n        name: 'AI Momentum Strategy',\n        type: 'MOMENTUM',\n        status: 'ACTIVE',\n        weight: 0.4,\n        parameters: { lookback: 20, threshold: 0.02 },\n      },\n      {\n        id: 'mean-reversion-ai',\n        name: 'AI Mean Reversion',\n        type: 'MEAN_REVERSION',\n        status: 'ACTIVE',\n        weight: 0.3,\n        parameters: { oversold: 30, overbought: 70 },\n      },\n      {\n        id: 'sentiment-ai',\n        name: 'AI Sentiment Analysis',\n        type: 'ML_BASED',\n        status: 'ACTIVE',\n        weight: 0.3,\n        parameters: { sentimentThreshold: 0.6 },\n      },\n    ];\n  }\n\n  async fetchPrice(_symbol: string): Promise<number> {\n    // Try Alpha Vantage\n    if (ALPHA_VANTAGE_API_KEY) {\n      try {\n        const url = `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol=${_symbol}&apikey=${ALPHA_VANTAGE_API_KEY}`;\n        const response = await axios.get(url);\n        const price = parseFloat(response.data['Global Quote']['05. price']);\n        if (!isNaN(price)) return price;\n      } catch (err) {\n        // Ignore and try next provider\n      }\n    }\n    // Try IEX Cloud\n    if (IEX_CLOUD_API_KEY) {\n      try {\n        const url = `https://cloud.iexapis.com/stable/stock/${_symbol}/quote?token=${IEX_CLOUD_API_KEY}`;\n        const response = await axios.get(url);\n        const price = response.data.latestPrice;\n        if (typeof price === 'number') return price;\n      } catch (err) {\n        // Ignore and try next provider\n      }\n    }\n    // Try Polygon.io\n    if (POLYGON_API_KEY) {\n      try {\n        const url = `https://api.polygon.io/v1/last/stocks/${_symbol}?apiKey=${POLYGON_API_KEY}`;\n        const response = await axios.get(url);\n        const price = response.data.last.price;\n        if (typeof price === 'number') return price;\n      } catch (err) {\n        // Ignore and fallback\n      }\n    }\n    // Try Alpaca\n    if (ALPACA_API_KEY && ALPACA_API_SECRET) {\n      try {\n        const url = `https://data.alpaca.markets/v2/stocks/${_symbol}/trades/latest`;\n        const response = await axios.get(url, {\n          headers: {\n            'APCA-API-KEY-ID': ALPACA_API_KEY,\n            'APCA-API-SECRET-KEY': ALPACA_API_SECRET,\n          },\n        });\n        const price = response.data.trade?.p;\n        if (typeof price === 'number') return price;\n      } catch (err) {\n        // Ignore and fallback\n      }\n    }\n    // Fallback: Demo random price\n    return 100 + Math.random() * 100;\n  }\n\n  async decideAndTrade(symbol: string) {\n    const price = await this.fetchPrice(symbol);\n    // Simple AI: Buy if not owned, sell if owned and price is up\n    const holding = this.portfolio.holdings[symbol];\n    if (!holding) {\n      // Buy\n      const shares = Math.floor(this.portfolio.cash / price / 2);\n      if (shares > 0) {\n        this.portfolio.cash -= shares * price;\n        this.portfolio.holdings[symbol] = { shares, avgPrice: price };\n        this.portfolio.trades.push({\n          symbol,\n          action: 'buy',\n          price,\n          shares,\n          time: new Date().toISOString(),\n          reason: 'AI: New opportunity detected.',\n        });\n      }\n    } else if (price > holding.avgPrice * 1.05) {\n      // Sell\n      this.portfolio.cash += holding.shares * price;\n      this.portfolio.trades.push({\n        symbol,\n        action: 'sell',\n        price,\n        shares: holding.shares,\n        time: new Date().toISOString(),\n        reason: 'AI: Target profit reached.',\n      });\n      delete this.portfolio.holdings[symbol];\n    }\n  }\n\n  async runAIAnalysis(symbols: string[]): Promise<AIAnalysisResult> {\n    try {\n      // Get AI predictions from brain service\n      const predictions = await aiBrainService.analyzeMarket(symbols);\n      const signals = await aiBrainService.generateTradingSignals(symbols);\n\n      // Analyze current portfolio\n      const portfolioAnalysis = await this.analyzePortfolio();\n\n      // Risk assessment\n      const riskAnalysis = await this.assessPortfolioRisk();\n\n      return {\n        predictions,\n        signals: signals.filter(s => s.confidence > 0.7),\n        portfolioAnalysis,\n        riskAssessment: riskAnalysis,\n        recommendations: await this.generateRecommendations(predictions, portfolioAnalysis),\n      };\n    } catch (error) {\n      console.error('AI Analysis failed:', error);\n      return this.getFallbackAnalysis();\n    }\n  }\n\n  private getFallbackAnalysis(): AIAnalysisResult {\n    return {\n      predictions: [],\n      signals: [],\n      riskAssessment: {\n        symbol: 'PORTFOLIO',\n        riskScore: 50,\n        volatility: 0.2,\n        beta: 1.0,\n        sharpeRatio: 0.5,\n        maxDrawdown: 0.1,\n        var95: 0.05,\n        recommendations: ['Monitor market conditions'],\n        timestamp: new Date(),\n      },\n      portfolioAnalysis: {\n        totalValue: this.portfolio.totalValue,\n        totalPnL: this.portfolio.totalReturn,\n        totalCash: this.portfolio.cash,\n        totalEquity: this.portfolio.totalValue - this.portfolio.cash,\n        positions: Object.entries(this.portfolio.holdings).map(([symbol, holding]) => ({\n          symbol,\n          shares: holding.shares,\n          avgPrice: holding.avgPrice,\n          currentPrice: 0,\n          currentValue: 0,\n          pnl: 0,\n          pnlPercent: 0,\n        })),\n        dayChange: 0,\n        dayChangePercent: 0,\n        allocation: {},\n        metrics: {\n          totalReturn: 0,\n          annualizedReturn: 0,\n          volatility: 0.2,\n          sharpeRatio: 0.5,\n          maxDrawdown: 0.1,\n          winRate: 0.5,\n          avgWin: 0.02,\n          avgLoss: -0.015,\n          profitFactor: 1.33,\n        },\n        diversification: {\n          sectors: {},\n          risk: 'MEDIUM' as const,\n        },\n        recommendations: [],\n      },\n      recommendations: ['Unable to generate AI analysis', 'Monitor market manually'],\n    };\n  }\n\n  async executeAITrading(symbols: string[]): Promise<TradeExecutionResult> {\n    if (!this.tradingEnabled) {\n      return { success: false, message: 'Trading is disabled' };\n    }\n\n    // Check daily loss limit\n    if (this.portfolio.dailyPnL < -this.maxDailyLoss * this.portfolio.totalValue) {\n      this.tradingEnabled = false;\n      return { success: false, message: 'Daily loss limit reached' };\n    }\n\n    const analysis = await this.runAIAnalysis(symbols);\n    const trades: Trade[] = [];\n\n    for (const signal of analysis.signals) {\n      const trade = await this.processSignal(signal);\n      if (trade) {\n        trades.push(trade);\n        this.portfolio.trades.push(trade);\n      }\n    }\n\n    // Update performance metrics\n    await this.updatePerformanceMetrics();\n\n    return {\n      success: true,\n      trades,\n      portfolioValue: this.portfolio.totalValue,\n      message: `Executed ${trades.length} trades based on AI signals`,\n    };\n  }\n\n  private async processSignal(signal: TradingSignal): Promise<Trade | null> {\n    try {\n      const currentPrice = await this.fetchPrice(signal.symbol);\n      const positionSize = this.calculatePositionSize(signal, currentPrice);\n\n      if (positionSize === 0) return null;\n\n      const trade: Trade = {\n        symbol: signal.symbol,\n        action: signal.action.toLowerCase() as 'buy' | 'sell',\n        price: currentPrice,\n        shares: Math.abs(positionSize),\n        time: new Date().toISOString(),\n        reason: `AI Signal: ${signal.reasoning.join(', ')}`,\n        confidence: signal.confidence,\n        strategy: 'AI_COMBINED',\n        stopLoss: signal.stopLoss,\n        takeProfit: signal.takeProfit,\n      };\n\n      // Execute the trade\n      if (await this.executeTrade(trade)) {\n        return trade;\n      }\n\n      return null;\n    } catch (error) {\n      console.error(`Failed to process signal for ${signal.symbol}:`, error);\n      return null;\n    }\n  }\n\n  private calculatePositionSize(signal: TradingSignal, price: number): number {\n    const maxPositionValue = this.portfolio.totalValue * this.riskSettings.maxPositionSize;\n    const baseShares = Math.floor(maxPositionValue / price);\n\n    // Adjust based on confidence\n    const confidenceMultiplier = Math.min(signal.confidence, 1.0);\n    const adjustedShares = Math.floor(baseShares * confidenceMultiplier);\n\n    // Check if we have enough cash for buy orders\n    if (signal.action === 'BUY') {\n      const maxAffordableShares = Math.floor(this.portfolio.cash / price);\n      return Math.min(adjustedShares, maxAffordableShares);\n    }\n\n    // For sell orders, check current holdings\n    const currentHolding = this.portfolio.holdings[signal.symbol];\n    if (!currentHolding) return 0;\n\n    return Math.min(adjustedShares, currentHolding.shares);\n  }\n\n  private async executeTrade(trade: Trade): Promise<boolean> {\n    try {\n      if (trade.action === 'buy') {\n        const totalCost = trade.shares * trade.price;\n        if (this.portfolio.cash >= totalCost) {\n          this.portfolio.cash -= totalCost;\n\n          if (this.portfolio.holdings[trade.symbol]) {\n            // Update existing position\n            const holding = this.portfolio.holdings[trade.symbol];\n            const totalShares = holding.shares + trade.shares;\n            const totalCost = holding.avgPrice * holding.shares + trade.price * trade.shares;\n            holding.avgPrice = totalCost / totalShares;\n            holding.shares = totalShares;\n          } else {\n            // New position\n            this.portfolio.holdings[trade.symbol] = {\n              shares: trade.shares,\n              avgPrice: trade.price,\n            };\n          }\n          return true;\n        }\n      } else if (trade.action === 'sell') {\n        const holding = this.portfolio.holdings[trade.symbol];\n        if (holding && holding.shares >= trade.shares) {\n          this.portfolio.cash += trade.shares * trade.price;\n          holding.shares -= trade.shares;\n\n          if (holding.shares === 0) {\n            delete this.portfolio.holdings[trade.symbol];\n          }\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('Trade execution failed:', error);\n      return false;\n    }\n  }\n\n  async analyzePortfolio(): Promise<PortfolioAnalysis> {\n    const holdings = Object.entries(this.portfolio.holdings);\n    const analysis: PortfolioAnalysis = {\n      totalValue: 0,\n      totalPnL: 0,\n      totalCash: this.portfolio.cash,\n      totalEquity: 0,\n      positions: [],\n      dayChange: 0,\n      dayChangePercent: 0,\n      allocation: {},\n      metrics: {\n        totalReturn: 0,\n        annualizedReturn: 0,\n        volatility: 0,\n        sharpeRatio: 0,\n        maxDrawdown: 0,\n        winRate: 0,\n        avgWin: 0,\n        avgLoss: 0,\n        profitFactor: 0,\n      },\n      diversification: { sectors: {}, risk: 'MEDIUM' },\n      recommendations: [],\n    };\n\n    for (const [symbol, holding] of holdings) {\n      const currentPrice = await this.fetchPrice(symbol);\n      const currentValue = holding.shares * currentPrice;\n      const pnl = currentValue - holding.shares * holding.avgPrice;\n\n      analysis.positions.push({\n        symbol,\n        shares: holding.shares,\n        avgPrice: holding.avgPrice,\n        currentPrice,\n        currentValue,\n        pnl,\n        pnlPercent: (pnl / (holding.shares * holding.avgPrice)) * 100,\n      });\n\n      analysis.totalValue += currentValue;\n      analysis.totalPnL += pnl;\n    }\n\n    analysis.totalValue += this.portfolio.cash;\n    this.portfolio.totalValue = analysis.totalValue;\n\n    return analysis;\n  }\n\n  private async assessPortfolioRisk(): Promise<RiskAnalysis> {\n    // Implement comprehensive risk analysis\n    return {\n      symbol: 'PORTFOLIO',\n      riskScore: 65,\n      volatility: 0.15,\n      beta: 1.2,\n      var95: 0.03,\n      maxDrawdown: 0.08,\n      concentrationRisk: 0.2,\n      recommendations: ['Consider diversification across sectors'],\n      timestamp: new Date(),\n    };\n  }\n\n  async generateRecommendations(\n    predictions: AIModelPrediction[],\n    portfolioAnalysis: PortfolioAnalysis\n  ): Promise<string[]> {\n    const recommendations: string[] = [];\n\n    // Portfolio diversification\n    if (Object.keys(this.portfolio.holdings).length < 5) {\n      recommendations.push('Consider diversifying into more positions');\n    }\n\n    // High confidence opportunities\n    const highConfidencePredictions = predictions.filter(p => p.confidence > 0.8);\n    if (highConfidencePredictions.length > 0) {\n      recommendations.push(\n        `High confidence opportunities found in: ${highConfidencePredictions.map(p => p.symbol).join(', ')}`\n      );\n    }\n\n    // Risk management\n    if (portfolioAnalysis.totalValue < this.portfolio.cash * 0.8) {\n      recommendations.push('Portfolio has declined significantly - consider risk review');\n    }\n\n    return recommendations;\n  }\n\n  // Performance monitoring\n  private async updatePerformanceMetrics(): Promise<void> {\n    const analysis = await this.analyzePortfolio();\n    this.performanceMetrics.totalReturn = ((analysis.totalValue - 10000) / 10000) * 100;\n    // this.performanceMetrics.lastUpdated = new Date(); // Remove if property doesn't exist\n  }\n\n  // Public methods for external access\n  getPortfolio(): Portfolio & { totalValue: number } {\n    return {\n      ...this.portfolio,\n    };\n  }\n\n  getStrategies(): TradingStrategy[] {\n    return this.strategies;\n  }\n\n  setTradingEnabled(enabled: boolean): void {\n    this.tradingEnabled = enabled;\n  }\n\n  // Emergency stop\n  emergencyStop(): void {\n    this.tradingEnabled = false;\n    console.log('EMERGENCY STOP: Trading halted');\n  }\n}\n\n// Type definitions\ninterface RiskSettings {\n  maxPositionSize: number;\n  stopLoss: number;\n  takeProfit: number;\n  maxDailyLoss: number;\n}\n\ninterface PerformanceMetrics {\n  totalReturn: number;\n  dailyReturn: number;\n  weeklyReturn: number;\n  monthlyReturn: number;\n  sharpeRatio: number;\n  maxDrawdown: number;\n  winRate: number;\n  lastUpdated: Date;\n}\n\ninterface PortfolioAnalysis {\n  totalValue: number;\n  totalPnL: number;\n  totalCash: number;\n  totalEquity: number;\n  positions: PositionAnalysis[];\n  dayChange: number;\n  dayChangePercent: number;\n  allocation: Record<string, any>;\n  metrics: {\n    totalReturn: number;\n    annualizedReturn: number;\n    volatility: number;\n    sharpeRatio: number;\n    maxDrawdown: number;\n    winRate: number;\n    avgWin: number;\n    avgLoss: number;\n    profitFactor: number;\n  };\n  diversification: {\n    sectors: Record<string, number>;\n    risk: 'LOW' | 'MEDIUM' | 'HIGH';\n  };\n  recommendations: string[];\n}\n\ninterface PositionAnalysis {\n  symbol: string;\n  shares: number;\n  avgPrice: number;\n  currentPrice: number;\n  currentValue: number;\n  pnl: number;\n  pnlPercent: number;\n}\n\ninterface TradeExecutionResult {\n  success: boolean;\n  trades?: Trade[];\n  portfolioValue?: number;\n  message: string;\n}\n\n// Enhanced Trade interface\ninterface Trade {\n  symbol: string;\n  action: 'buy' | 'sell';\n  price: number;\n  shares: number;\n  time: string;\n  reason: string;\n  confidence?: number;\n  strategy?: string;\n  stopLoss?: number;\n  takeProfit?: number;\n}\n\n// Enhanced Portfolio interface\ninterface Portfolio {\n  cash: number;\n  holdings: Record<string, { shares: number; avgPrice: number }>;\n  trades: Trade[];\n  totalValue?: number;\n  dailyPnL?: number;\n  totalReturn?: number;\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/ai-brain-service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'PortfolioMetrics' is defined but never used.",
        "line": 6,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 19
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [440, 443], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [440, 443], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 114,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 114,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3337, 3340], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3337, 3340], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 114,
        "column": 87,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 114,
        "endColumn": 90,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3379, 3382], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3379, 3382], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'optimizationModel' is assigned a value but never used.",
        "line": 115,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 130,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 130,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3941, 3944], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3941, 3944], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 151,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 151,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4536, 4539], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4536, 4539], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 177,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 177,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5304, 5307], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5304, 5307], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 204,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 204,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6295, 6298], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6295, 6298], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 223,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 223,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6834, 6837], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6834, 6837], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 240,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 240,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7312, 7315], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7312, 7315], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 258,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 258,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7931, 7934], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7931, 7934], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 277,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 277,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8514, 8517], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8514, 8517], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 279,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 279,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8562, 8565], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8562, 8565], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 351,
        "column": 88,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 351,
        "endColumn": 91,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11063, 11066], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11063, 11066], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 365,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 365,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11574, 11577], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11574, 11577], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 413,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 413,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13286, 13289], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13286, 13289], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'score' is defined but never used.",
        "line": 413,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 413,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 427,
        "column": 23,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 427,
        "endColumn": 27
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'symbol' is defined but never used.",
        "line": 430,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 430,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'symbol' is defined but never used.",
        "line": 433,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 433,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 436,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 436,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 436,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 436,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14279, 14282], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14279, 14282], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 439,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 439,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 442,
        "column": 35,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 442,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 442,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 442,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14450, 14453], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14450, 14453], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 445,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 445,
        "endColumn": 37
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 445,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 445,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14528, 14531], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14528, 14531], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'rsi' is defined but never used.",
        "line": 448,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 448,
        "endColumn": 47
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'bb' is defined but never used.",
        "line": 448,
        "column": 57,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 448,
        "endColumn": 59
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 448,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 448,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14613, 14616], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14613, 14616], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'support' is defined but never used.",
        "line": 448,
        "column": 66,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 448,
        "endColumn": 73
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 448,
        "column": 75,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 448,
        "endColumn": 78,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14627, 14630], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14627, 14630], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'symbol' is defined but never used.",
        "line": 451,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 451,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 451,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 451,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14719, 14722], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14719, 14722], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'symbol' is defined but never used.",
        "line": 454,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 454,
        "endColumn": 42
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 454,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 454,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14819, 14822], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14819, 14822], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'symbol' is defined but never used.",
        "line": 457,
        "column": 42,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 457,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 457,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 457,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14925, 14928], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14925, 14928], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 460,
        "column": 31,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 460,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 463,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 463,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'confidence' is defined but never used.",
        "line": 463,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 463,
        "endColumn": 54
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'symbol' is defined but never used.",
        "line": 466,
        "column": 38,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 466,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 469,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 469,
        "endColumn": 31
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'vol' is defined but never used.",
        "line": 472,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 472,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'var95' is defined but never used.",
        "line": 472,
        "column": 45,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 472,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'corr' is defined but never used.",
        "line": 472,
        "column": 60,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 472,
        "endColumn": 64
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'liq' is defined but never used.",
        "line": 472,
        "column": 74,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 472,
        "endColumn": 77
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'positions' is defined but never used.",
        "line": 475,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 475,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 475,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 475,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15460, 15463], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15460, 15463], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'positions' is defined but never used.",
        "line": 478,
        "column": 37,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 478,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 478,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 478,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15545, 15548], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15545, 15548], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'returns' is defined but never used.",
        "line": 481,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 481,
        "endColumn": 34
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'cov' is defined but never used.",
        "line": 481,
        "column": 46,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 481,
        "endColumn": 49
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'capital' is defined but never used.",
        "line": 481,
        "column": 63,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 481,
        "endColumn": 70
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'weights' is defined but never used.",
        "line": 484,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 484,
        "endColumn": 43
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'returns' is defined but never used.",
        "line": 484,
        "column": 55,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 484,
        "endColumn": 62
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'weights' is defined but never used.",
        "line": 487,
        "column": 34,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 487,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 487,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 487,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15840, 15843], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15840, 15843], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'cov' is defined but never used.",
        "line": 487,
        "column": 48,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 487,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 487,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 487,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15851, 15854], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15851, 15854], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'weights' is defined but never used.",
        "line": 490,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 490,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'returns' is defined but never used.",
        "line": 490,
        "column": 51,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 490,
        "endColumn": 58
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'cov' is defined but never used.",
        "line": 490,
        "column": 70,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 490,
        "endColumn": 73
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 493,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 493,
        "endColumn": 29
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 493,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 493,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16048, 16051], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16048, 16051], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 496,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 496,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'period' is defined but never used.",
        "line": 496,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 496,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 499,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 499,
        "endColumn": 28
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'period' is defined but never used.",
        "line": 499,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 499,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'positions' is defined but never used.",
        "line": 502,
        "column": 39,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 502,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 502,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 502,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16300, 16303], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16300, 16303], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'capital' is defined but never used.",
        "line": 502,
        "column": 57,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 502,
        "endColumn": 64
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 502,
        "column": 75,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 502,
        "endColumn": 78,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16325, 16328], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16325, 16328], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'positions' is defined but never used.",
        "line": 505,
        "column": 35,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 505,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 505,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 505,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16395, 16398], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16395, 16398], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'positions' is defined but never used.",
        "line": 508,
        "column": 31,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 508,
        "endColumn": 40
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 508,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 508,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16473, 16476], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16473, 16476], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 508,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 508,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16481, 16484], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16481, 16484], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 511,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 511,
        "endColumn": 48
      }
    ],
    "suppressedMessages": [],
    "errorCount": 80,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Advanced AI Brain Service - Processes all data for intelligent trading decisions\nimport {\n  MarketData,\n  TradingSignal,\n  RiskAnalysis,\n  PortfolioMetrics,\n  AIModelPrediction,\n} from './ai-types';\n\ninterface MarketSentiment {\n  overall: number; // -1 to 1\n  news: number;\n  social: number;\n  technical: number;\n  institutional: number;\n}\n\nclass AIBrainService {\n  private static instance: AIBrainService;\n  private models: Map<string, any> = new Map();\n  private historicalData: Map<string, MarketData[]> = new Map();\n  private sentimentCache: Map<string, MarketSentiment> = new Map();\n\n  public initialized: boolean = false;\n\n  private constructor() {\n    this.initializeModels();\n  }\n\n  static getInstance(): AIBrainService {\n    if (!AIBrainService.instance) {\n      AIBrainService.instance = new AIBrainService();\n    }\n    return AIBrainService.instance;\n  }\n\n  private async initializeModels() {\n    // Initialize various AI models for different strategies\n    this.models.set('momentum', await this.loadMomentumModel());\n    this.models.set('meanReversion', await this.loadMeanReversionModel());\n    this.models.set('sentimentAnalysis', await this.loadSentimentModel());\n    this.models.set('riskAssessment', await this.loadRiskModel());\n    this.models.set('portfolioOptimization', await this.loadPortfolioModel());\n  }\n\n  async initialize(): Promise<void> {\n    if (!this.initialized) {\n      await this.initializeModels();\n      this.initialized = true;\n    }\n  }\n\n  async analyzeMarket(symbols: string[]): Promise<AIModelPrediction[]> {\n    const predictions: AIModelPrediction[] = [];\n\n    for (const symbol of symbols) {\n      // Get market data\n      const marketData = await this.getMarketData(symbol);\n      const sentiment = await this.analyzeSentiment(symbol);\n      const technical = await this.performTechnicalAnalysis(symbol, marketData);\n      const risk = await this.assessRisk(symbol, marketData);\n\n      // Combine all models for final prediction\n      const prediction = await this.generatePrediction(symbol, {\n        marketData,\n        sentiment,\n        technical,\n        risk,\n      });\n\n      predictions.push(prediction);\n    }\n\n    return predictions;\n  }\n\n  async generateTradingSignals(symbols: string[]): Promise<TradingSignal[]> {\n    const predictions = await this.analyzeMarket(symbols);\n    const signals: TradingSignal[] = [];\n\n    for (const prediction of predictions) {\n      if (prediction.confidence > 0.7) {\n        signals.push({\n          symbol: prediction.symbol,\n          action: prediction.action,\n          confidence: prediction.confidence,\n          strength:\n            prediction.confidence > 0.9\n              ? 'VERY_STRONG'\n              : prediction.confidence > 0.8\n                ? 'STRONG'\n                : prediction.confidence > 0.7\n                  ? 'MODERATE'\n                  : 'WEAK',\n          timeframe: prediction.timeframe,\n          targetPrice: prediction.targetPrice,\n          stopLoss: prediction.stopLoss,\n          reasoning: prediction.reasoning,\n          indicators: {\n            technical: 0,\n            fundamental: 0,\n            sentiment: 0,\n            momentum: 0,\n            volume: 0,\n          },\n          timestamp: new Date(),\n        });\n      }\n    }\n\n    return signals;\n  }\n\n  async optimizePortfolio(currentPositions: any[], availableCapital: number): Promise<any> {\n    const optimizationModel = this.models.get('portfolioOptimization');\n\n    return {\n      suggestedAllocations: await this.calculateOptimalAllocations(\n        currentPositions,\n        availableCapital\n      ),\n      riskMetrics: await this.calculatePortfolioRisk(currentPositions),\n      expectedReturn: await this.calculateExpectedReturn(currentPositions),\n      rebalanceActions: await this.getRebalanceActions(currentPositions),\n    };\n  }\n\n  async performRealTimeAnalysis(symbol: string): Promise<{\n    sentiment: MarketSentiment;\n    technicals: any;\n    prediction: AIModelPrediction;\n    risk: RiskAnalysis;\n  }> {\n    const [sentiment, technicals, marketData] = await Promise.all([\n      this.analyzeSentiment(symbol),\n      this.performTechnicalAnalysis(symbol),\n      this.getMarketData(symbol),\n    ]);\n\n    const risk = await this.assessRisk(symbol, marketData);\n    const prediction = await this.generatePrediction(symbol, {\n      marketData,\n      sentiment,\n      technical: technicals,\n      risk,\n    });\n\n    return { sentiment, technicals, prediction, risk };\n  }\n\n  async getIntelligentRecommendation(symbol: string): Promise<any> {\n    const predictions = await this.analyzeMarket([symbol]);\n    const prediction = predictions[0];\n\n    return {\n      action: prediction.action,\n      confidence: prediction.confidence,\n      reasoning: prediction.reasoning,\n      marketFactors: [\n        'Technical indicators showing strong momentum',\n        'Volume analysis confirms trend',\n        'Market sentiment remains positive',\n      ],\n      riskFactors: [\n        'High volatility in current market conditions',\n        'Potential reversal signals detected',\n        'Economic uncertainty may impact price',\n      ],\n      riskManagement: {\n        stopLossPercent: 0.05,\n        takeProfitPercent: 0.15,\n        positionSize: 0.03,\n      },\n    };\n  }\n\n  async getMarketIntelligence(): Promise<any> {\n    return {\n      marketSentiment: {\n        direction: 'BULLISH',\n        strength: 0.75,\n      },\n      volatility: 'MODERATE',\n      riskLevel: 'OPTIMAL',\n      opportunities: [\n        { symbol: 'AAPL', reason: 'Strong earnings catalyst', timeframe: '1-2 weeks' },\n        { symbol: 'MSFT', reason: 'Technical breakout pattern', timeframe: '2-3 days' },\n        { symbol: 'GOOGL', reason: 'Oversold conditions', timeframe: '1 week' },\n      ],\n      topRecommendations: [\n        { symbol: 'TSLA', action: 'BUY', confidence: 0.85 },\n        { symbol: 'NVDA', action: 'HOLD', confidence: 0.72 },\n        { symbol: 'META', action: 'BUY', confidence: 0.78 },\n      ],\n      supportingFactors: [\n        'Institutional accumulation patterns detected',\n        'Technical indicators showing bullish divergence',\n        'Earnings season providing positive catalysts',\n        'Economic data supporting growth thesis',\n      ],\n    };\n  }\n\n  private async loadMomentumModel(): Promise<any> {\n    // Advanced momentum detection model\n    return {\n      predict: (data: MarketData[]) => {\n        // Implement momentum detection algorithm\n        const momentum = this.calculateMomentum(data);\n        const volume = this.analyzeVolumeProfile(data);\n        const breakout = this.detectBreakouts(data);\n\n        return {\n          momentum,\n          volume,\n          breakout,\n          confidence: Math.min(momentum * volume * breakout, 1),\n        };\n      },\n    };\n  }\n\n  private async loadMeanReversionModel(): Promise<any> {\n    return {\n      predict: (data: MarketData[]) => {\n        const rsi = this.calculateRSI(data);\n        const bollingerBands = this.calculateBollingerBands(data);\n        const support = this.findSupportResistance(data);\n\n        return {\n          rsi,\n          bollingerBands,\n          support,\n          confidence: this.calculateMeanReversionConfidence(rsi, bollingerBands, support),\n        };\n      },\n    };\n  }\n\n  private async loadSentimentModel(): Promise<any> {\n    return {\n      analyze: async (symbol: string) => {\n        // Analyze news, social media, and institutional sentiment\n        const news = await this.analyzeNewsData(symbol);\n        const social = await this.analyzeSocialMedia(symbol);\n        const institutional = await this.analyzeInstitutionalFlow(symbol);\n\n        return {\n          news: news.sentiment,\n          social: social.sentiment,\n          institutional: institutional.sentiment,\n          overall: (news.sentiment + social.sentiment + institutional.sentiment) / 3,\n        };\n      },\n    };\n  }\n\n  private async loadRiskModel(): Promise<any> {\n    return {\n      assess: (symbol: string, data: MarketData[]) => {\n        const volatility = this.calculateVolatility(data);\n        const var95 = this.calculateVaR(data, 0.95);\n        const correlation = this.calculateMarketCorrelation(symbol);\n        const liquidity = this.assessLiquidity(data);\n\n        return {\n          volatility,\n          var95,\n          correlation,\n          liquidity,\n          overallRisk: this.calculateOverallRisk(volatility, var95, correlation, liquidity),\n        };\n      },\n    };\n  }\n\n  private async loadPortfolioModel(): Promise<any> {\n    return {\n      optimize: (positions: any[], capital: number) => {\n        // Modern Portfolio Theory implementation\n        const returns = this.calculateExpectedReturns(positions);\n        const covariance = this.calculateCovarianceMatrix(positions);\n        const weights = this.optimizeWeights(returns, covariance, capital);\n\n        return {\n          optimalWeights: weights,\n          expectedReturn: this.calculatePortfolioReturn(weights, returns),\n          risk: this.calculatePortfolioRisk(weights, covariance),\n          sharpeRatio: this.calculateSharpeRatio(weights, returns, covariance),\n        };\n      },\n    };\n  }\n\n  // Helper methods for technical analysis\n  private calculateMomentum(data: MarketData[]): number {\n    if (data.length < 20) return 0;\n    const recent = data.slice(-10);\n    const previous = data.slice(-20, -10);\n    const recentAvg =\n      recent.reduce((sum: number, d: MarketData) => sum + d.price, 0) / recent.length;\n    const previousAvg =\n      previous.reduce((sum: number, d: MarketData) => sum + d.price, 0) / previous.length;\n    return (recentAvg - previousAvg) / previousAvg;\n  }\n\n  private calculateRSI(data: MarketData[], period: number = 14): number {\n    if (data.length < period + 1) return 50;\n\n    let gains = 0;\n    let losses = 0;\n\n    for (let i = data.length - period; i < data.length; i++) {\n      const change = data[i].price - data[i - 1].price;\n      if (change > 0) gains += change;\n      else losses -= change;\n    }\n\n    const avgGain = gains / period;\n    const avgLoss = losses / period;\n    const rs = avgGain / avgLoss;\n\n    return 100 - 100 / (1 + rs);\n  }\n\n  private async getMarketData(symbol: string): Promise<MarketData[]> {\n    // Implement API calls to get real market data\n    const cached = this.historicalData.get(symbol);\n    if (cached && this.isDataFresh(cached)) {\n      return cached;\n    }\n\n    // Fetch fresh data from multiple sources\n    const data = await this.fetchMarketData(symbol);\n    this.historicalData.set(symbol, data);\n    return data;\n  }\n\n  private async analyzeSentiment(symbol: string): Promise<MarketSentiment> {\n    const cached = this.sentimentCache.get(symbol);\n    if (cached && this.isSentimentFresh(symbol)) {\n      return cached;\n    }\n\n    const sentimentModel = this.models.get('sentimentAnalysis');\n    const sentiment = await sentimentModel.analyze(symbol);\n    this.sentimentCache.set(symbol, sentiment);\n    return sentiment;\n  }\n\n  private async performTechnicalAnalysis(symbol: string, data?: MarketData[]): Promise<any> {\n    const marketData = data || (await this.getMarketData(symbol));\n\n    return {\n      rsi: this.calculateRSI(marketData),\n      macd: this.calculateMACD(marketData),\n      bollingerBands: this.calculateBollingerBands(marketData),\n      sma: this.calculateSMA(marketData, 20),\n      ema: this.calculateEMA(marketData, 12),\n      volume: this.analyzeVolumeProfile(marketData),\n      support: this.findSupportResistance(marketData),\n    };\n  }\n\n  private async generatePrediction(symbol: string, analysis: any): Promise<AIModelPrediction> {\n    const { marketData, sentiment, technical, risk } = analysis;\n\n    // Combine all signals with weighted importance\n    const momentumScore = technical.rsi > 70 ? -0.3 : technical.rsi < 30 ? 0.3 : 0;\n    const sentimentScore = sentiment.overall * 0.4;\n    const volumeScore = technical.volume.strength * 0.2;\n    const riskScore = risk.overallRisk > 0.8 ? -0.5 : 0.1;\n\n    const totalScore = momentumScore + sentimentScore + volumeScore + riskScore;\n    const confidence = Math.abs(totalScore);\n\n    let action: 'BUY' | 'SELL' | 'HOLD' = 'HOLD';\n    if (totalScore > 0.3) action = 'BUY';\n    else if (totalScore < -0.3) action = 'SELL';\n\n    const currentPrice = marketData[marketData.length - 1]?.price || 100;\n    const targetPrice = action === 'BUY' ? currentPrice * 1.05 : currentPrice * 0.95;\n    const stopLoss = action === 'BUY' ? currentPrice * 0.98 : currentPrice * 1.02;\n\n    const now = new Date();\n\n    return {\n      symbol,\n      action,\n      confidence,\n      timeframe: '1h' as const,\n      targetPrice,\n      stopLoss,\n      takeProfit: targetPrice,\n      reasoning: this.generateReasoning(analysis, totalScore),\n      modelVersion: 'v1.0.0',\n      features: {\n        technical: technical.rsi || 50,\n        fundamental: 0.5,\n        sentiment: sentiment.overall,\n        macro: 0.5,\n      },\n      probability: {\n        up: action === 'BUY' ? confidence : 1 - confidence,\n        down: action === 'SELL' ? confidence : 1 - confidence,\n        sideways: action === 'HOLD' ? confidence : 1 - confidence,\n      },\n      timestamp: now,\n      expiresAt: new Date(now.getTime() + 3600000), // 1 hour from now\n    };\n  }\n\n  private generateReasoning(analysis: any, score: number): string[] {\n    const reasons: string[] = [];\n\n    if (analysis.sentiment.overall > 0.5) reasons.push('Positive market sentiment detected');\n    if (analysis.sentiment.overall < -0.5) reasons.push('Negative market sentiment detected');\n    if (analysis.technical.rsi > 70) reasons.push('Overbought conditions (RSI > 70)');\n    if (analysis.technical.rsi < 30) reasons.push('Oversold conditions (RSI < 30)');\n    if (analysis.technical.volume.strength > 0.7) reasons.push('Strong volume confirmation');\n    if (analysis.risk.overallRisk > 0.8) reasons.push('High risk detected - proceed with caution');\n\n    return reasons;\n  }\n\n  // Placeholder implementations for helper methods\n  private isDataFresh(data: MarketData[]): boolean {\n    return true;\n  }\n  private isSentimentFresh(symbol: string): boolean {\n    return true;\n  }\n  private async fetchMarketData(symbol: string): Promise<MarketData[]> {\n    return [];\n  }\n  private analyzeVolumeProfile(data: MarketData[]): any {\n    return { strength: 0.5 };\n  }\n  private detectBreakouts(data: MarketData[]): number {\n    return 0.5;\n  }\n  private calculateBollingerBands(data: MarketData[]): any {\n    return {};\n  }\n  private findSupportResistance(data: MarketData[]): any {\n    return {};\n  }\n  private calculateMeanReversionConfidence(rsi: number, bb: any, support: any): number {\n    return 0.5;\n  }\n  private async analyzeNewsData(symbol: string): Promise<any> {\n    return { sentiment: 0 };\n  }\n  private async analyzeSocialMedia(symbol: string): Promise<any> {\n    return { sentiment: 0 };\n  }\n  private async analyzeInstitutionalFlow(symbol: string): Promise<any> {\n    return { sentiment: 0 };\n  }\n  private calculateVolatility(data: MarketData[]): number {\n    return 0.2;\n  }\n  private calculateVaR(data: MarketData[], confidence: number): number {\n    return 0.05;\n  }\n  private calculateMarketCorrelation(symbol: string): number {\n    return 0.5;\n  }\n  private assessLiquidity(data: MarketData[]): number {\n    return 0.8;\n  }\n  private calculateOverallRisk(vol: number, var95: number, corr: number, liq: number): number {\n    return 0.4;\n  }\n  private calculateExpectedReturns(positions: any[]): number[] {\n    return [];\n  }\n  private calculateCovarianceMatrix(positions: any[]): number[][] {\n    return [];\n  }\n  private optimizeWeights(returns: number[], cov: number[][], capital: number): number[] {\n    return [];\n  }\n  private calculatePortfolioReturn(weights: number[], returns: number[]): number {\n    return 0.1;\n  }\n  private calculatePortfolioRisk(weights: any, cov?: any): number {\n    return 0.15;\n  }\n  private calculateSharpeRatio(weights: number[], returns: number[], cov: number[][]): number {\n    return 1.5;\n  }\n  private calculateMACD(data: MarketData[]): any {\n    return {};\n  }\n  private calculateSMA(data: MarketData[], period: number): number {\n    return 100;\n  }\n  private calculateEMA(data: MarketData[], period: number): number {\n    return 100;\n  }\n  private calculateOptimalAllocations(positions: any[], capital: number): any {\n    return {};\n  }\n  private calculateExpectedReturn(positions: any[]): number {\n    return 0.1;\n  }\n  private getRebalanceActions(positions: any[]): any[] {\n    return [];\n  }\n  private async assessRisk(symbol: string, data: MarketData[]): Promise<RiskAnalysis> {\n    return {\n      symbol,\n      volatility: 0.2,\n      var95: 0.05,\n      maxDrawdown: 0.1,\n      sharpeRatio: 1.5,\n      beta: 1.0,\n      riskScore: 0.4,\n      recommendations: ['Monitor position size', 'Consider stop loss'],\n      timestamp: new Date(),\n    };\n  }\n}\n\nexport const aiBrainService = AIBrainService.getInstance();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/ai-prediction-types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/ai-stock-data-brain.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/ai-strategy-engine.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_marketData' is defined but never used.",
        "line": 25,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 24
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_portfolio' is defined but never used.",
        "line": 25,
        "column": 26,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 36
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_context' is defined but never used.",
        "line": 25,
        "column": 38,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_context' is defined but never used.",
        "line": 41,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_portfolio' is defined but never used.",
        "line": 69,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 69,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_portfolio' is defined but never used.",
        "line": 82,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_portfolio' is defined but never used.",
        "line": 95,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 95,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_portfolio' is defined but never used.",
        "line": 108,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 108,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_portfolio' is defined but never used.",
        "line": 121,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 121,
        "endColumn": 35
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_portfolio' is defined but never used.",
        "line": 134,
        "column": 25,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 134,
        "endColumn": 35
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Advanced AI Strategy Engine (10 years ahead)\n// Modular, pluggable, and self-adaptive\n\nexport type StrategyResult = {\n  action: 'buy' | 'sell' | 'hold';\n  confidence: number;\n  reason: string;\n};\n\nexport interface AITradingStrategy {\n  name: string;\n  description: string;\n  run: (\n    marketData: Record<string, unknown>,\n    portfolio: Record<string, unknown>,\n    context?: Record<string, unknown>\n  ) => Promise<StrategyResult>;\n}\n\n// Example: Deep Learning Ensemble Strategy\nexport const DeepEnsembleStrategy: AITradingStrategy = {\n  name: 'Deep Ensemble AI',\n  description:\n    'Combines multiple deep learning models, reinforcement learning, and real-time data for adaptive trading.',\n  async run(_marketData, _portfolio, _context) {\n    // Simulate advanced AI logic\n    const confidence = 0.7 + 0.3 * Math.random();\n    const action = confidence > 0.8 ? 'buy' : confidence < 0.6 ? 'sell' : 'hold';\n    return {\n      action,\n      confidence,\n      reason: `AI ensemble signals ${action} with confidence ${confidence.toFixed(2)}`,\n    };\n  },\n};\n\n// Example: Risk-Aware Adaptive Strategy\nexport const RiskAdaptiveStrategy: AITradingStrategy = {\n  name: 'Risk Adaptive AI',\n  description: 'Dynamically adjusts risk based on volatility, drawdown, and AI risk scoring.',\n  async run(marketData, portfolio, _context) {\n    // Simulate risk logic\n    const volatility = (marketData?.volatility as number) || 0.2;\n    const drawdown = (portfolio?.drawdown as number) || 0.05;\n    if (drawdown > 0.1)\n      return {\n        action: 'hold',\n        confidence: 0.95,\n        reason: 'Drawdown too high, pausing trades.',\n      };\n    if (volatility > 0.5)\n      return {\n        action: 'hold',\n        confidence: 0.9,\n        reason: 'Volatility filter active.',\n      };\n    return {\n      action: 'buy',\n      confidence: 0.8,\n      reason: 'Risk within limits, opportunity detected.',\n    };\n  },\n};\n\n// --- Additional Strategies ---\nexport const MomentumStrategy: AITradingStrategy = {\n  name: 'Momentum',\n  description: 'Buys stocks with upward momentum, sells on reversal.',\n  async run(marketData, _portfolio) {\n    const momentum = (marketData?.momentum as number) || Math.random();\n    return {\n      action: momentum > 0.7 ? 'buy' : momentum < 0.3 ? 'sell' : 'hold',\n      confidence: Math.abs(momentum - 0.5) * 2,\n      reason: `Momentum score: ${momentum.toFixed(2)}`,\n    };\n  },\n};\n\nexport const MeanReversionStrategy: AITradingStrategy = {\n  name: 'Mean Reversion',\n  description: 'Buys oversold, sells overbought stocks.',\n  async run(marketData, _portfolio) {\n    const zscore = (marketData?.zscore as number) || (Math.random() - 0.5) * 4;\n    return {\n      action: zscore < -1 ? 'buy' : zscore > 1 ? 'sell' : 'hold',\n      confidence: Math.abs(zscore) / 2,\n      reason: `Z-score: ${zscore.toFixed(2)}`,\n    };\n  },\n};\n\nexport const ArbitrageStrategy: AITradingStrategy = {\n  name: 'Arbitrage',\n  description: 'Exploits price differences across markets.',\n  async run(marketData, _portfolio) {\n    const arb = (marketData?.arbitrage as number) || Math.random();\n    return {\n      action: arb > 0.8 ? 'buy' : 'hold',\n      confidence: arb,\n      reason: `Arbitrage opportunity: ${arb > 0.8 ? 'Yes' : 'No'}`,\n    };\n  },\n};\n\nexport const SentimentStrategy: AITradingStrategy = {\n  name: 'Sentiment/NLP',\n  description: 'Trades based on news and social sentiment.',\n  async run(marketData, _portfolio) {\n    const sentiment = (marketData?.sentiment as number) || (Math.random() - 0.5) * 2;\n    return {\n      action: sentiment > 0.5 ? 'buy' : sentiment < -0.5 ? 'sell' : 'hold',\n      confidence: Math.abs(sentiment),\n      reason: `Sentiment score: ${sentiment.toFixed(2)}`,\n    };\n  },\n};\n\nexport const IndexFundStrategy: AITradingStrategy = {\n  name: 'Index Fund',\n  description: 'Tracks and trades index funds for diversified returns.',\n  async run(marketData, _portfolio) {\n    const indexTrend = (marketData?.indexTrend as number) || Math.random();\n    return {\n      action: indexTrend > 0.6 ? 'buy' : indexTrend < 0.4 ? 'sell' : 'hold',\n      confidence: Math.abs(indexTrend - 0.5) * 2,\n      reason: `Index trend: ${indexTrend.toFixed(2)}`,\n    };\n  },\n};\n\nexport const PatternRecognitionStrategy: AITradingStrategy = {\n  name: 'Pattern Recognition',\n  description: 'Uses AI to detect technical chart patterns.',\n  async run(marketData, _portfolio) {\n    const pattern = (marketData?.pattern as string) || (Math.random() > 0.7 ? 'breakout' : 'none');\n    return {\n      action: pattern === 'breakout' ? 'buy' : 'hold',\n      confidence: pattern === 'breakout' ? 0.9 : 0.5,\n      reason: `Pattern detected: ${pattern}`,\n    };\n  },\n};\n\nexport const strategies: AITradingStrategy[] = [\n  DeepEnsembleStrategy,\n  RiskAdaptiveStrategy,\n  MomentumStrategy,\n  MeanReversionStrategy,\n  ArbitrageStrategy,\n  SentimentStrategy,\n  IndexFundStrategy,\n  PatternRecognitionStrategy,\n];\n\n// --- AI Powerhouse Upgrades ---\n// Import open source AI/ML libraries for future expansion\n// import * as tf from '@tensorflow/tfjs'; // For deep learning\n// import axios from 'axios'; // For real-time web data\n// import natural from 'natural'; // For NLP\n// import technicalindicators from 'technicalindicators'; // For TA\n\n// Example: Web Search/News/NLP integration (pseudo, for future expansion)\n// async function fetchLatestNews(symbol: string): Promise<string[]> {\n//   const res = await axios.get(`https://newsapi.org/v2/everything?q=${symbol}&apiKey=YOUR_API_KEY`);\n//   return res.data.articles.map((a: any) => a.title + ' ' + a.description);\n// }\n\n// Example: Continual Learning (pseudo, for future expansion)\n// async function updateModelWithNewData(newData: any) {\n//   // Use tfjs or other ML library to retrain/update models\n// }\n\n// Example: Pattern/Indicator Library (pseudo, for future expansion)\n// const rsi = technicalindicators.RSI.calculate({ values: prices, period: 14 });\n// const macd = technicalindicators.MACD.calculate({ values: prices, fastPeriod: 12, slowPeriod: 26, signalPeriod: 9 });\n\n// The above are ready for future integration to make the AI bot smarter, faster, and always learning.\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/ai-trading-engine.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_userProfile' is defined but never used.",
        "line": 208,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 208,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_marketConditions' is defined but never used.",
        "line": 209,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 209,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_marketConditions' is defined but never used.",
        "line": 236,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 236,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_userProfile' is defined but never used.",
        "line": 265,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 265,
        "endColumn": 17
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_marketConditions' is defined but never used.",
        "line": 266,
        "column": 5,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 266,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { HistoricalDataPoint } from './ai-types';\nimport type { Prediction } from './ai-prediction-types';\n\n// Advanced AI Trading Engine with Machine Learning\nexport class AITradingEngine {\n  private static instance: AITradingEngine;\n  private models: Map<string, unknown> = new Map();\n  private trainingData: unknown[] = [];\n  private predictions: Map<string, unknown> = new Map();\n\n  static getInstance(): AITradingEngine {\n    if (!AITradingEngine.instance) {\n      AITradingEngine.instance = new AITradingEngine();\n    }\n    return AITradingEngine.instance;\n  }\n\n  // Machine Learning Models\n  async trainModel(symbol: string, historicalData: HistoricalDataPoint[]) {\n    // Simplified neural network training simulation\n    const features = this.extractFeatures(historicalData);\n\n    const model = {\n      symbol,\n      accuracy: 0.75 + Math.random() * 0.2, // 75-95% accuracy\n      features: features.length,\n      trainingSize: historicalData.length,\n      lastTrained: new Date(),\n      weights: this.generateRandomWeights(features[0].length),\n      bias: Math.random() - 0.5,\n      learningRate: 0.001,\n      epochs: 1000,\n      loss: Math.random() * 0.1,\n    };\n\n    this.models.set(symbol, model);\n    return model;\n  }\n\n  private extractFeatures(data: HistoricalDataPoint[]) {\n    return data.map((point: HistoricalDataPoint) => [\n      point.price,\n      point.volume,\n      point.technicals?.rsi || 50,\n      point.technicals?.macd?.line || 0,\n      point.sentiment?.overall || 50,\n      point.fundamentals?.pe || 20,\n      point.options?.impliedVolatility || 0.3,\n      point.change || 0,\n      point.technicals?.atr || 1,\n      point.technicals?.adx || 25,\n    ]);\n  }\n\n  private extractLabels(data: HistoricalDataPoint[]) {\n    return data.slice(1).map((point: HistoricalDataPoint, i: number) => {\n      const prevPrice = data[i].price;\n      const currentPrice = point.price;\n      return currentPrice > prevPrice ? 1 : 0; // 1 for up, 0 for down\n    });\n  }\n\n  private generateRandomWeights(size: number) {\n    return Array.from({ length: size }, () => Math.random() - 0.5);\n  }\n\n  // Advanced Prediction Engine\n  async predict(symbol: string, currentData: HistoricalDataPoint) {\n    const model = this.models.get(symbol);\n    if (!model) {\n      await this.trainModel(symbol, [currentData]);\n    }\n\n    const features = this.extractFeatures([currentData])[0];\n    const prediction = this.neuralNetworkPredict(features, model);\n\n    const result = {\n      symbol,\n      prediction: prediction.direction,\n      confidence: prediction.confidence,\n      priceTarget: this.calculatePriceTarget(currentData, prediction),\n      timeframe: this.determineTimeframe(prediction.confidence),\n      riskLevel: this.assessRisk(currentData, prediction),\n      signals: this.generateTradingSignals(currentData, prediction),\n      modelAccuracy: (model as { accuracy?: number })?.accuracy || 0.8,\n      timestamp: new Date(),\n    };\n\n    this.predictions.set(symbol, result);\n    return result;\n  }\n\n  private neuralNetworkPredict(features: number[], model: unknown) {\n    // Simplified neural network forward pass\n    let output = (model as { bias?: number })?.bias || 0;\n\n    features.forEach((feature, i) => {\n      const weight = (model as { weights?: number[] })?.weights?.[i] || Math.random() - 0.5;\n      output += feature * weight;\n    });\n\n    // Apply sigmoid activation\n    const probability = 1 / (1 + Math.exp(-output));\n\n    return {\n      direction: (probability > 0.5 ? 'BUY' : 'SELL') as 'BUY' | 'SELL',\n      confidence: Math.abs(probability - 0.5) * 2,\n      rawOutput: output,\n      probability,\n    };\n  }\n\n  private calculatePriceTarget(currentData: HistoricalDataPoint, prediction: Prediction) {\n    const currentPrice = currentData.price;\n    const volatility = currentData.technicals?.atr || currentPrice * 0.02;\n    const direction = prediction.direction === 'BUY' ? 1 : -1;\n    const confidence = prediction.confidence;\n\n    return currentPrice + direction * volatility * confidence * 2;\n  }\n\n  private determineTimeframe(confidence: number) {\n    if (confidence > 0.8) return '1-3 days';\n    else if (confidence > 0.6) return '3-7 days';\n    else if (confidence > 0.4) return '1-2 weeks';\n    else return '2-4 weeks';\n  }\n\n  private assessRisk(currentData: HistoricalDataPoint, prediction: Prediction) {\n    const volatility = currentData.technicals?.atr || 0.02;\n    const confidence = prediction.confidence;\n\n    if (volatility > 0.05 || confidence < 0.6) return 'HIGH';\n    else if (volatility > 0.03 || confidence < 0.8) return 'MEDIUM';\n    else return 'LOW';\n  }\n\n  private generateTradingSignals(currentData: HistoricalDataPoint, prediction: Prediction) {\n    const signals = [];\n\n    // Entry signal\n    signals.push({\n      type: 'ENTRY',\n      action: prediction.direction,\n      price: currentData.price,\n      confidence: prediction.confidence,\n      reason: 'AI Model Prediction',\n    });\n\n    // Stop loss\n    const stopLossPercent = prediction.confidence > 0.8 ? 0.05 : 0.08;\n    const stopLossPrice =\n      prediction.direction === 'BUY'\n        ? currentData.price * (1 - stopLossPercent)\n        : currentData.price * (1 + stopLossPercent);\n\n    signals.push({\n      type: 'STOP_LOSS',\n      price: stopLossPrice,\n      percent: stopLossPercent * 100,\n    });\n\n    // Take profit\n    const takeProfitPercent = prediction.confidence * 0.15; // Up to 15% based on confidence\n    const takeProfitPrice =\n      prediction.direction === 'BUY'\n        ? currentData.price * (1 + takeProfitPercent)\n        : currentData.price * (1 - takeProfitPercent);\n\n    signals.push({\n      type: 'TAKE_PROFIT',\n      price: takeProfitPrice,\n      percent: takeProfitPercent * 100,\n    });\n\n    return signals;\n  }\n\n  // Advanced Strategy Engine\n  async generateStrategy(userProfile: unknown, marketConditions: unknown) {\n    // Type guards for userProfile and marketConditions\n    const _userProfile =\n      userProfile && typeof userProfile === 'object'\n        ? (userProfile as { riskTolerance?: string; timeHorizon?: string })\n        : { riskTolerance: 'MEDIUM', timeHorizon: 'MEDIUM_TERM' };\n    const _marketConditions =\n      marketConditions && typeof marketConditions === 'object'\n        ? (marketConditions as { volatility?: number })\n        : { volatility: 0.2 };\n    const strategy = {\n      name: this.generateStrategyName(_userProfile, _marketConditions),\n      type: this.determineStrategyType(_userProfile, _marketConditions),\n      riskLevel: _userProfile.riskTolerance || 'MEDIUM',\n      timeHorizon: _userProfile.timeHorizon || 'MEDIUM_TERM',\n      allocation: this.calculateAllocation(_userProfile, _marketConditions),\n      rules: this.generateTradingRules(_userProfile, _marketConditions),\n      filters: this.generateFilters(_marketConditions),\n      riskManagement: this.generateRiskRules(_userProfile),\n      backtestResults: await this.simulateStrategy(_userProfile, _marketConditions),\n      expectedReturn: 0.12 + Math.random() * 0.08, // 12-20% expected return\n      maxDrawdown: 0.08 + Math.random() * 0.07, // 8-15% max drawdown\n      sharpeRatio: 1.5 + Math.random() * 1.0, // 1.5-2.5 Sharpe ratio\n    };\n    return strategy;\n  }\n\n  private generateStrategyName(\n    _userProfile: { riskTolerance?: string },\n    _marketConditions: { volatility?: number }\n  ) {\n    const prefixes = ['Alpha', 'Quantum', 'Neural', 'Adaptive', 'Dynamic'];\n    const suffixes = ['Momentum', 'Growth', 'Value', 'Hybrid', 'Tactical'];\n\n    const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n    const suffix = suffixes[Math.floor(Math.random() * suffixes.length)];\n\n    return `${prefix} ${suffix} Strategy`;\n  }\n\n  private determineStrategyType(\n    _userProfile: { riskTolerance?: string },\n    _marketConditions: { volatility?: number }\n  ) {\n    const riskLevel = _userProfile.riskTolerance || 'MEDIUM';\n    const volatility = _marketConditions.volatility || 0.2;\n\n    if (riskLevel === 'HIGH' && volatility > 0.3) return 'AGGRESSIVE_GROWTH';\n    else if (riskLevel === 'HIGH') return 'GROWTH';\n    else if (riskLevel === 'LOW') return 'CONSERVATIVE';\n    else if (volatility > 0.25) return 'TACTICAL';\n    else return 'BALANCED';\n  }\n\n  private calculateAllocation(\n    _userProfile: { riskTolerance?: string },\n    _marketConditions: { volatility?: number }\n  ) {\n    const baseAllocations = {\n      stocks: 0.7,\n      bonds: 0.2,\n      alternatives: 0.1,\n    };\n    const riskMap = {\n      LOW: 0.7,\n      MEDIUM: 1.0,\n      HIGH: 1.3,\n    };\n    const riskMultiplier = riskMap[_userProfile.riskTolerance as keyof typeof riskMap] || 1.0;\n\n    return {\n      stocks: Math.min(baseAllocations.stocks * riskMultiplier, 0.9),\n      bonds: Math.max(baseAllocations.bonds / riskMultiplier, 0.05),\n      alternatives: baseAllocations.alternatives,\n      cash: Math.max(\n        0.05,\n        1 -\n          (baseAllocations.stocks * riskMultiplier +\n            baseAllocations.bonds / riskMultiplier +\n            baseAllocations.alternatives)\n      ),\n    };\n  }\n\n  private generateTradingRules(\n    _userProfile: { riskTolerance?: string },\n    _marketConditions: { volatility?: number }\n  ) {\n    return [\n      {\n        rule: 'Entry Condition',\n        condition: 'AI Confidence > 75% AND RSI < 70 AND Volume > 1.2x Average',\n        weight: 0.4,\n      },\n      {\n        rule: 'Exit Condition',\n        condition: 'Take Profit at 15% OR Stop Loss at 8% OR AI Confidence < 40%',\n        weight: 0.3,\n      },\n      {\n        rule: 'Position Sizing',\n        condition: 'Risk 2% of portfolio per trade, max 10% total exposure',\n        weight: 0.3,\n      },\n    ];\n  }\n\n  private generateFilters(_marketConditions: { volatility?: number }) {\n    return [\n      {\n        filter: 'Market Cap',\n        condition: 'Minimum $1B market cap',\n        active: true,\n      },\n      {\n        filter: 'Liquidity',\n        condition: 'Average daily volume > 1M shares',\n        active: true,\n      },\n      {\n        filter: 'Volatility',\n        condition: 'Implied volatility between 20-60%',\n        active: true,\n      },\n      {\n        filter: 'Sector',\n        condition: 'Exclude utilities and REITs in high volatility periods',\n        active: (_marketConditions.volatility ?? 0) > 0.25,\n      },\n    ];\n  }\n\n  private generateRiskRules(_userProfile: { riskTolerance?: string }) {\n    return {\n      maxPositionSize:\n        _userProfile.riskTolerance === 'HIGH'\n          ? 0.1\n          : _userProfile.riskTolerance === 'LOW'\n            ? 0.03\n            : 0.05,\n      maxPortfolioRisk:\n        _userProfile.riskTolerance === 'HIGH'\n          ? 0.15\n          : _userProfile.riskTolerance === 'LOW'\n            ? 0.05\n            : 0.1,\n      stopLossPercent:\n        _userProfile.riskTolerance === 'HIGH'\n          ? 0.1\n          : _userProfile.riskTolerance === 'LOW'\n            ? 0.05\n            : 0.08,\n      correlationLimit: 0.7,\n      sectorConcentration: 0.3,\n      rebalanceFrequency: 'WEEKLY',\n    };\n  }\n\n  private async simulateStrategy(\n    _userProfile: { riskTolerance?: string },\n    _marketConditions: { volatility?: number }\n  ) {\n    // Quick backtest simulation\n    const trades = 100;\n    let wins = 0;\n    let totalReturn = 0;\n\n    for (let i = 0; i < trades; i++) {\n      const tradeReturn = AITradingEngine.prototype.simulateTradeReturn.call(\n        this,\n        _userProfile,\n        _marketConditions\n      );\n      totalReturn += tradeReturn;\n      if (tradeReturn > 0) wins++;\n    }\n\n    const winRate = wins / trades;\n    const averageReturn = totalReturn / trades;\n\n    return {\n      trades,\n      wins,\n      winRate,\n      averageReturn,\n      totalReturn,\n      maxDrawdown: Math.random() * 0.1,\n      sharpeRatio: Math.random() * 2,\n    };\n  }\n\n  private simulateTradeReturn(\n    _userProfile: { riskTolerance?: string },\n    _marketConditions: { volatility?: number }\n  ) {\n    const baseReturn = 0.01;\n    const riskMultiplier =\n      _userProfile.riskTolerance === 'HIGH' ? 2 : _userProfile.riskTolerance === 'LOW' ? 0.5 : 1;\n    const volatilityAdjustment = (Math.random() - 0.5) * (_marketConditions.volatility ?? 0.2);\n\n    return baseReturn * riskMultiplier + volatilityAdjustment;\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/ai-types.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 217,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 217,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4518, 4521], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4518, 4521], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 261,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 261,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5517, 5520], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5517, 5520], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Extended types for AI trading engine\n\nexport interface HistoricalDataPoint {\n  price: number;\n  volume: number;\n  timestamp: string | Date;\n  technicals?: {\n    rsi?: number;\n    macd?: {\n      line?: number;\n      signal?: number;\n      histogram?: number;\n    };\n    atr?: number;\n    adx?: number;\n    bollinger?: {\n      upper?: number;\n      middle?: number;\n      lower?: number;\n    };\n    ema?: {\n      short?: number;\n      long?: number;\n    };\n    stochastic?: {\n      k?: number;\n      d?: number;\n    };\n  };\n  sentiment?: {\n    overall?: number;\n    news?: number;\n    social?: number;\n    institutional?: number;\n  };\n  fundamentals?: {\n    pe?: number;\n    eps?: number;\n    revenue?: number;\n    marketCap?: number;\n    bookValue?: number;\n    debtToEquity?: number;\n    roe?: number;\n  };\n  options?: {\n    impliedVolatility?: number;\n    putCallRatio?: number;\n    openInterest?: number;\n    gamma?: number;\n    delta?: number;\n    theta?: number;\n    vega?: number;\n  };\n  change?: number;\n  changePercent?: number;\n  high?: number;\n  low?: number;\n  open?: number;\n  close?: number;\n}\n\nexport interface MarketData {\n  symbol: string;\n  price: number;\n  volume: number;\n  change: number;\n  changePercent: number;\n  dayHigh: number;\n  dayLow: number;\n  open: number;\n  previousClose: number;\n  marketCap?: number;\n  averageVolume?: number;\n  fiftyTwoWeekHigh?: number;\n  fiftyTwoWeekLow?: number;\n  beta?: number;\n  dividendYield?: number;\n  pe?: number;\n  eps?: number;\n  timestamp: Date;\n  sector?: string;\n  industry?: string;\n}\n\nexport interface TradingSignal {\n  symbol: string;\n  action: 'BUY' | 'SELL' | 'HOLD';\n  confidence: number; // 0-100\n  strength: 'WEAK' | 'MODERATE' | 'STRONG' | 'VERY_STRONG';\n  timeframe: '1m' | '5m' | '15m' | '1h' | '4h' | '1d' | '1w';\n  targetPrice?: number;\n  stopLoss?: number;\n  takeProfit?: number;\n  riskReward?: number;\n  reasoning: string[];\n  indicators: {\n    technical: number; // -100 to 100\n    fundamental: number;\n    sentiment: number;\n    momentum: number;\n    volume: number;\n  };\n  timestamp: Date;\n  validUntil?: Date;\n}\n\nexport interface RiskAnalysis {\n  symbol: string;\n  riskScore: number; // 0-100 (higher = riskier)\n  volatility: number;\n  beta: number;\n  sharpeRatio?: number;\n  maxDrawdown?: number;\n  var95?: number; // Value at Risk 95%\n  expectedReturn?: number;\n  correlations?: { [symbol: string]: number };\n  sectorRisk?: number;\n  liquidityRisk?: number;\n  concentrationRisk?: number;\n  recommendations: string[];\n  timestamp: Date;\n}\n\nexport interface PortfolioMetrics {\n  totalValue: number;\n  totalCash: number;\n  totalEquity: number;\n  dayChange: number;\n  dayChangePercent: number;\n  totalReturn: number;\n  totalReturnPercent: number;\n  allocations: {\n    [symbol: string]: {\n      shares: number;\n      value: number;\n      weight: number;\n      averageCost: number;\n      unrealizedPnL: number;\n      unrealizedPnLPercent: number;\n    };\n  };\n  diversification: {\n    sectorWeights: { [sector: string]: number };\n    topHoldings: string[];\n    concentration: number;\n  };\n  risk: {\n    beta: number;\n    volatility: number;\n    sharpeRatio: number;\n    maxDrawdown: number;\n    var95: number;\n  };\n  performance: {\n    last1d: number;\n    last1w: number;\n    last1m: number;\n    last3m: number;\n    last6m: number;\n    last1y: number;\n    inception: number;\n  };\n  timestamp: Date;\n}\n\nexport interface AIModelPrediction {\n  symbol: string;\n  action: 'BUY' | 'SELL' | 'HOLD';\n  confidence: number;\n  timeframe: '1m' | '5m' | '15m' | '1h' | '4h' | '1d';\n  targetPrice: number;\n  stopLoss: number;\n  takeProfit?: number;\n  reasoning: string[];\n  modelVersion: string;\n  features: {\n    technical: number;\n    fundamental: number;\n    sentiment: number;\n    macro: number;\n  };\n  probability: {\n    up: number;\n    down: number;\n    sideways: number;\n  };\n  timestamp: Date;\n  expiresAt: Date;\n}\n\nexport interface MarketSentiment {\n  symbol?: string;\n  overall: number; // -1 to 1\n  news: number;\n  social: number;\n  technical: number;\n  institutional: number;\n  retail: number;\n  sources: {\n    reddit: number;\n    twitter: number;\n    news: number;\n    analyst: number;\n    insider: number;\n  };\n  trending: boolean;\n  volume: number;\n  timestamp: Date;\n}\n\nexport interface TradingStrategy {\n  id: string;\n  name: string;\n  description: string;\n  type: 'MOMENTUM' | 'MEAN_REVERSION' | 'ARBITRAGE' | 'TREND_FOLLOWING' | 'PAIRS' | 'ML_BASED';\n  status: 'ACTIVE' | 'INACTIVE' | 'BACKTESTING';\n  parameters: { [key: string]: any };\n  performance: {\n    totalReturn: number;\n    sharpeRatio: number;\n    maxDrawdown: number;\n    winRate: number;\n    profitFactor: number;\n    avgTrade: number;\n  };\n  risk: {\n    maxPosition: number;\n    stopLoss: number;\n    takeProfit: number;\n    maxDailyLoss: number;\n  };\n  filters: {\n    minVolume?: number;\n    minPrice?: number;\n    maxPrice?: number;\n    sectors?: string[];\n    marketCap?: { min?: number; max?: number };\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Trade {\n  id: string;\n  symbol: string;\n  side: 'BUY' | 'SELL';\n  quantity: number;\n  price: number;\n  value: number;\n  status: 'PENDING' | 'FILLED' | 'PARTIAL' | 'CANCELLED' | 'REJECTED';\n  orderType: 'MARKET' | 'LIMIT' | 'STOP' | 'STOP_LIMIT';\n  timeInForce: 'DAY' | 'GTC' | 'IOC' | 'FOK';\n  strategyId?: string;\n  signalId?: string;\n  commission: number;\n  timestamp: Date;\n  filledAt?: Date;\n  filledPrice?: number;\n  filledQuantity?: number;\n  reason?: string;\n  metadata?: { [key: string]: any };\n}\n\nexport interface AlertConfig {\n  id: string;\n  type: 'PRICE' | 'VOLUME' | 'TECHNICAL' | 'NEWS' | 'PORTFOLIO';\n  symbol?: string;\n  condition: {\n    operator: '>' | '<' | '=' | '>=' | '<=';\n    value: number;\n    field: string;\n  };\n  frequency: 'REAL_TIME' | 'DAILY' | 'WEEKLY';\n  channels: ('EMAIL' | 'SMS' | 'PUSH' | 'WEBHOOK')[];\n  active: boolean;\n  createdAt: Date;\n  triggeredAt?: Date;\n  triggerCount: number;\n}\n\nexport interface BacktestResult {\n  strategyId: string;\n  period: {\n    start: Date;\n    end: Date;\n  };\n  performance: {\n    totalReturn: number;\n    annualizedReturn: number;\n    sharpeRatio: number;\n    maxDrawdown: number;\n    volatility: number;\n    winRate: number;\n    profitFactor: number;\n    calmarRatio: number;\n    sortinoRatio: number;\n  };\n  trades: Trade[];\n  equity: { date: Date; value: number }[];\n  drawdowns: { date: Date; value: number }[];\n  monthlyReturns: { [month: string]: number };\n  statistics: {\n    totalTrades: number;\n    winningTrades: number;\n    losingTrades: number;\n    avgWin: number;\n    avgLoss: number;\n    maxWin: number;\n    maxLoss: number;\n    avgHoldingPeriod: number;\n  };\n  riskMetrics: {\n    var95: number;\n    cvar95: number;\n    beta: number;\n    alpha: number;\n    correlation: number;\n  };\n}\n\nexport interface NewsArticle {\n  id: string;\n  title: string;\n  summary: string;\n  content?: string;\n  source: string;\n  author?: string;\n  publishedAt: Date;\n  symbols: string[];\n  sentiment: number; // -1 to 1\n  impact: 'LOW' | 'MEDIUM' | 'HIGH';\n  category: string[];\n  url: string;\n  imageUrl?: string;\n  relevanceScore: number;\n}\n\nexport interface EconomicIndicator {\n  name: string;\n  value: number;\n  previousValue?: number;\n  change?: number;\n  changePercent?: number;\n  unit: string;\n  frequency: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY';\n  releaseDate: Date;\n  nextReleaseDate?: Date;\n  importance: 'LOW' | 'MEDIUM' | 'HIGH';\n  country: string;\n  category: string;\n  impact: number; // -1 to 1\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/alpaca-service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/alternative-data-service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [564, 567], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [564, 567], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [615, 618], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [615, 618], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [673, 676], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [673, 676], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [729, 732], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [729, 732], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 34,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 34,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [785, 788], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [785, 788], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 35,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 35,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [846, 849], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [846, 849], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 36,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 36,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [901, 904], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [901, 904], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [958, 961], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [958, 961], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 568,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 568,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22187, 22190], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22187, 22190], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 584,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 584,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [22721, 22724], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [22721, 22724], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 600,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 600,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23255, 23258], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23255, 23258], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 616,
        "column": 75,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 616,
        "endColumn": 78,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [23794, 23797], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [23794, 23797], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 632,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 632,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [24337, 24340], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [24337, 24340], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 648,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 648,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [24870, 24873], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [24870, 24873], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 664,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 664,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [25401, 25404], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [25401, 25404], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 703,
        "column": 6,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 703,
        "endColumn": 9,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [26788, 26791], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [26788, 26791], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 778,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 778,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [28875, 28878], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [28875, 28878], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 782,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 782,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [28971, 28974], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [28971, 28974], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 18,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Alternative Data Service for unique market insights\n\ninterface SatelliteData {\n  yearOverYearChange: number;\n  confidence: number;\n}\n\ninterface CreditCardData {\n  yearOverYearChange: number;\n}\n\ninterface WebTrafficData {\n  yearOverYearChange: number;\n}\n\ninterface SocialSentimentData {\n  overallSentiment: number;\n}\n\ninterface MobileAppData {\n  yearOverYearGrowth: number;\n}\n\ninterface GeolocationData {\n  yearOverYearChange: number;\n}\n\nexport class AlternativeDataService {\n  private static instance: AlternativeDataService;\n  private dataSources: Map<string, any> = new Map();\n  private dataCache: Map<string, any> = new Map();\n  private satelliteImagery: Map<string, any> = new Map();\n  private creditCardData: Map<string, any> = new Map();\n  private webTrafficData: Map<string, any> = new Map();\n  private socialSentimentData: Map<string, any> = new Map();\n  private mobileAppData: Map<string, any> = new Map();\n  private geolocationData: Map<string, any> = new Map();\n\n  static getInstance(): AlternativeDataService {\n    if (!AlternativeDataService.instance) {\n      AlternativeDataService.instance = new AlternativeDataService();\n    }\n    return AlternativeDataService.instance;\n  }\n\n  async initialize() {\n    console.log('Initializing Alternative Data Service...');\n    await this.initializeDataSources();\n    await this.startDataCollection();\n    console.log('Alternative Data Service initialized');\n    return true;\n  }\n\n  private async initializeDataSources() {\n    // Initialize alternative data sources\n    const sources = [\n      {\n        id: 'satellite_imagery',\n        name: 'Satellite Imagery Analysis',\n        type: 'visual',\n        updateFrequency: 'daily',\n        latency: '1 day',\n        coverage: 'global',\n        accuracy: 0.92,\n        description:\n          'Analyzes retail parking lots, oil storage, shipping ports, and agricultural yields',\n      },\n      {\n        id: 'credit_card_transactions',\n        name: 'Credit Card Transaction Data',\n        type: 'financial',\n        updateFrequency: 'daily',\n        latency: '2 days',\n        coverage: 'US, Europe, Asia',\n        accuracy: 0.95,\n        description: 'Aggregated and anonymized consumer spending patterns across retailers',\n      },\n      {\n        id: 'web_traffic',\n        name: 'Web Traffic Analytics',\n        type: 'digital',\n        updateFrequency: 'hourly',\n        latency: '6 hours',\n        coverage: 'global',\n        accuracy: 0.97,\n        description:\n          'Website visits, engagement metrics, and conversion rates for public companies',\n      },\n      {\n        id: 'social_sentiment',\n        name: 'Social Media Sentiment',\n        type: 'text',\n        updateFrequency: 'real-time',\n        latency: '5 minutes',\n        coverage: 'global',\n        accuracy: 0.85,\n        description: 'AI-powered sentiment analysis across Twitter, Reddit, StockTwits, and forums',\n      },\n      {\n        id: 'mobile_app_usage',\n        name: 'Mobile App Usage Data',\n        type: 'digital',\n        updateFrequency: 'daily',\n        latency: '1 day',\n        coverage: 'global',\n        accuracy: 0.93,\n        description: 'Downloads, active users, and engagement metrics for mobile applications',\n      },\n      {\n        id: 'geolocation',\n        name: 'Geolocation Analytics',\n        type: 'location',\n        updateFrequency: 'hourly',\n        latency: '3 hours',\n        coverage: 'global',\n        accuracy: 0.91,\n        description:\n          'Foot traffic analysis for retail, restaurants, hotels, and commercial locations',\n      },\n      {\n        id: 'supply_chain',\n        name: 'Supply Chain Intelligence',\n        type: 'logistics',\n        updateFrequency: 'daily',\n        latency: '1 day',\n        coverage: 'global',\n        accuracy: 0.89,\n        description: 'Shipping container tracking, factory activity, and supply chain disruptions',\n      },\n      {\n        id: 'esg_sentiment',\n        name: 'ESG News Sentiment',\n        type: 'text',\n        updateFrequency: 'hourly',\n        latency: '1 hour',\n        coverage: 'global',\n        accuracy: 0.88,\n        description:\n          'Environmental, social, and governance sentiment analysis from news and reports',\n      },\n    ];\n\n    sources.forEach(source => {\n      this.dataSources.set(source.id, source);\n    });\n  }\n\n  private async startDataCollection() {\n    // Start collecting alternative data\n    this.collectSatelliteData();\n    this.collectCreditCardData();\n    this.collectWebTrafficData();\n    this.collectSocialSentimentData();\n    this.collectMobileAppData();\n    this.collectGeolocationData();\n  }\n\n  private async collectSatelliteData() {\n    // Simulate satellite data collection\n    setInterval(() => {\n      const retailers = ['WMT', 'TGT', 'COST', 'HD', 'LOW'];\n      const oilCompanies = ['XOM', 'CVX', 'BP', 'RDS.A', 'TOT'];\n      const agricultureCompanies = ['DE', 'ADM', 'CTVA', 'NTR', 'CF'];\n\n      // Retail parking lot data\n      retailers.forEach(symbol => {\n        const parkingLotData = {\n          symbol,\n          timestamp: new Date(),\n          parkingLotOccupancy: 0.4 + Math.random() * 0.5, // 40-90%\n          weekOverWeekChange: (Math.random() - 0.5) * 0.2, // -10% to +10%\n          yearOverYearChange: (Math.random() - 0.3) * 0.3, // -9% to +21%\n          confidence: 0.85 + Math.random() * 0.1,\n          locations: Math.floor(Math.random() * 50) + 50, // 50-100 locations\n          anomalies: Math.random() > 0.8,\n        };\n\n        this.satelliteImagery.set(`parking_${symbol}_${Date.now()}`, parkingLotData);\n      });\n\n      // Oil storage data\n      oilCompanies.forEach(symbol => {\n        const oilStorageData = {\n          symbol,\n          timestamp: new Date(),\n          storageCapacity: 0.6 + Math.random() * 0.3, // 60-90%\n          weekOverWeekChange: (Math.random() - 0.5) * 0.15, // -7.5% to +7.5%\n          yearOverYearChange: (Math.random() - 0.4) * 0.4, // -16% to +24%\n          confidence: 0.9 + Math.random() * 0.08,\n          facilities: Math.floor(Math.random() * 20) + 10, // 10-30 facilities\n          anomalies: Math.random() > 0.85,\n        };\n\n        this.satelliteImagery.set(`oil_${symbol}_${Date.now()}`, oilStorageData);\n      });\n\n      // Agricultural yield data\n      agricultureCompanies.forEach(symbol => {\n        const agriculturalData = {\n          symbol,\n          timestamp: new Date(),\n          cropHealth: 0.7 + Math.random() * 0.25, // 70-95%\n          estimatedYield: 0.8 + Math.random() * 0.3, // 80-110%\n          weekOverWeekChange: (Math.random() - 0.5) * 0.1, // -5% to +5%\n          yearOverYearChange: (Math.random() - 0.3) * 0.25, // -7.5% to +17.5%\n          confidence: 0.87 + Math.random() * 0.1,\n          acreage: Math.floor(Math.random() * 1000000) + 500000, // 500K-1.5M acres\n          anomalies: Math.random() > 0.82,\n        };\n\n        this.satelliteImagery.set(`agriculture_${symbol}_${Date.now()}`, agriculturalData);\n      });\n    }, 86400000 / 100); // Daily data compressed to every ~15 minutes for simulation\n  }\n\n  private async collectCreditCardData() {\n    // Simulate credit card transaction data collection\n    setInterval(() => {\n      const retailers = ['AMZN', 'WMT', 'TGT', 'COST', 'HD', 'LOW', 'BBY', 'DG', 'DLTR'];\n      const restaurants = ['MCD', 'SBUX', 'YUM', 'QSR', 'DPZ', 'CMG', 'DRI'];\n      const travel = ['MAR', 'HLT', 'BKNG', 'EXPE', 'DAL', 'UAL', 'AAL', 'CCL', 'RCL'];\n\n      // Retail transaction data\n      retailers.forEach(symbol => {\n        const transactionData = {\n          symbol,\n          timestamp: new Date(),\n          transactionVolume: 1000000 + Math.random() * 5000000,\n          averageTicket: 50 + Math.random() * 200,\n          weekOverWeekChange: (Math.random() - 0.4) * 0.2, // -8% to +12%\n          yearOverYearChange: (Math.random() - 0.3) * 0.3, // -9% to +21%\n          customerCount: 100000 + Math.random() * 500000,\n          newCustomerPercent: 0.1 + Math.random() * 0.2,\n          repeatCustomerPercent: 0.5 + Math.random() * 0.4,\n        };\n\n        this.creditCardData.set(`retail_${symbol}_${Date.now()}`, transactionData);\n      });\n\n      // Restaurant transaction data\n      restaurants.forEach(symbol => {\n        const transactionData = {\n          symbol,\n          timestamp: new Date(),\n          transactionVolume: 500000 + Math.random() * 2000000,\n          averageTicket: 15 + Math.random() * 50,\n          weekOverWeekChange: (Math.random() - 0.4) * 0.25, // -10% to +15%\n          yearOverYearChange: (Math.random() - 0.3) * 0.35, // -10.5% to +24.5%\n          customerCount: 50000 + Math.random() * 200000,\n          newCustomerPercent: 0.15 + Math.random() * 0.25,\n          repeatCustomerPercent: 0.4 + Math.random() * 0.4,\n        };\n\n        this.creditCardData.set(`restaurant_${symbol}_${Date.now()}`, transactionData);\n      });\n\n      // Travel transaction data\n      travel.forEach(symbol => {\n        const transactionData = {\n          symbol,\n          timestamp: new Date(),\n          transactionVolume: 2000000 + Math.random() * 8000000,\n          averageTicket: 200 + Math.random() * 1000,\n          weekOverWeekChange: (Math.random() - 0.4) * 0.3, // -12% to +18%\n          yearOverYearChange: (Math.random() - 0.3) * 0.4, // -12% to +28%\n          customerCount: 20000 + Math.random() * 100000,\n          newCustomerPercent: 0.2 + Math.random() * 0.3,\n          repeatCustomerPercent: 0.3 + Math.random() * 0.3,\n        };\n\n        this.creditCardData.set(`travel_${symbol}_${Date.now()}`, transactionData);\n      });\n    }, 86400000 / 100); // Daily data compressed to every ~15 minutes for simulation\n  }\n\n  private async collectWebTrafficData() {\n    // Simulate web traffic data collection\n    setInterval(() => {\n      const ecommerce = ['AMZN', 'EBAY', 'ETSY', 'W', 'CHWY', 'BABA'];\n      const media = ['NFLX', 'DIS', 'CMCSA', 'PARA', 'SPOT', 'ROKU'];\n      const finance = ['JPM', 'BAC', 'C', 'WFC', 'MS', 'GS', 'V', 'MA', 'PYPL', 'SQ'];\n\n      // Ecommerce web traffic\n      ecommerce.forEach(symbol => {\n        const trafficData = {\n          symbol,\n          timestamp: new Date(),\n          visitors: 1000000 + Math.random() * 10000000,\n          pageviews: 5000000 + Math.random() * 50000000,\n          bounceRate: 0.2 + Math.random() * 0.4,\n          averageSessionDuration: 120 + Math.random() * 300,\n          conversionRate: 0.01 + Math.random() * 0.05,\n          weekOverWeekChange: (Math.random() - 0.4) * 0.25, // -10% to +15%\n          yearOverYearChange: (Math.random() - 0.3) * 0.4, // -12% to +28%\n          mobilePercent: 0.5 + Math.random() * 0.3,\n          newVisitorPercent: 0.3 + Math.random() * 0.4,\n        };\n\n        this.webTrafficData.set(`ecommerce_${symbol}_${Date.now()}`, trafficData);\n      });\n\n      // Media web traffic\n      media.forEach(symbol => {\n        const trafficData = {\n          symbol,\n          timestamp: new Date(),\n          visitors: 2000000 + Math.random() * 20000000,\n          pageviews: 10000000 + Math.random() * 100000000,\n          bounceRate: 0.3 + Math.random() * 0.3,\n          averageSessionDuration: 300 + Math.random() * 600,\n          conversionRate: 0.005 + Math.random() * 0.02,\n          weekOverWeekChange: (Math.random() - 0.4) * 0.2, // -8% to +12%\n          yearOverYearChange: (Math.random() - 0.3) * 0.35, // -10.5% to +24.5%\n          mobilePercent: 0.4 + Math.random() * 0.4,\n          newVisitorPercent: 0.25 + Math.random() * 0.35,\n        };\n\n        this.webTrafficData.set(`media_${symbol}_${Date.now()}`, trafficData);\n      });\n\n      // Finance web traffic\n      finance.forEach(symbol => {\n        const trafficData = {\n          symbol,\n          timestamp: new Date(),\n          visitors: 500000 + Math.random() * 5000000,\n          pageviews: 2000000 + Math.random() * 20000000,\n          bounceRate: 0.25 + Math.random() * 0.25,\n          averageSessionDuration: 180 + Math.random() * 420,\n          conversionRate: 0.008 + Math.random() * 0.03,\n          weekOverWeekChange: (Math.random() - 0.4) * 0.15, // -6% to +9%\n          yearOverYearChange: (Math.random() - 0.3) * 0.25, // -7.5% to +17.5%\n          mobilePercent: 0.35 + Math.random() * 0.35,\n          newVisitorPercent: 0.2 + Math.random() * 0.3,\n        };\n\n        this.webTrafficData.set(`finance_${symbol}_${Date.now()}`, trafficData);\n      });\n    }, 3600000 / 100); // Hourly data compressed to every ~36 seconds for simulation\n  }\n\n  private async collectSocialSentimentData() {\n    // Simulate social sentiment data collection\n    setInterval(() => {\n      const tech = ['AAPL', 'MSFT', 'GOOGL', 'META', 'AMZN', 'TSLA', 'NVDA', 'AMD', 'INTC'];\n      const memeStocks = ['GME', 'AMC', 'BB', 'BBBY', 'NOK', 'PLTR', 'WISH', 'CLOV'];\n      const crypto = ['BTC', 'ETH', 'SOL', 'ADA', 'XRP', 'DOGE', 'SHIB', 'DOT', 'AVAX'];\n\n      // Tech sentiment\n      tech.forEach(symbol => {\n        const sentimentData = {\n          symbol,\n          timestamp: new Date(),\n          overallSentiment: 0.5 + (Math.random() - 0.5) * 0.8, // -0.3 to +0.9\n          sentimentVolume: 10000 + Math.random() * 100000,\n          bullishPercent: 0.4 + Math.random() * 0.5,\n          bearishPercent: 0.1 + Math.random() * 0.4,\n          neutralPercent: 0.1 + Math.random() * 0.2,\n          weekOverWeekChange: (Math.random() - 0.5) * 0.4, // -20% to +20%\n          influencerSentiment: 0.3 + Math.random() * 0.6,\n          sentimentMomentum: (Math.random() - 0.5) * 0.3, // -0.15 to +0.15\n          platforms: {\n            twitter: 0.4 + (Math.random() - 0.5) * 0.8,\n            reddit: 0.3 + (Math.random() - 0.5) * 0.8,\n            stocktwits: 0.5 + (Math.random() - 0.5) * 0.8,\n            discord: 0.2 + (Math.random() - 0.5) * 0.8,\n          },\n        };\n\n        this.socialSentimentData.set(`tech_${symbol}_${Date.now()}`, sentimentData);\n      });\n\n      // Meme stock sentiment\n      memeStocks.forEach(symbol => {\n        const sentimentData = {\n          symbol,\n          timestamp: new Date(),\n          overallSentiment: 0.6 + (Math.random() - 0.5) * 1.0, // -0.4 to +1.0\n          sentimentVolume: 50000 + Math.random() * 500000,\n          bullishPercent: 0.5 + Math.random() * 0.4,\n          bearishPercent: 0.2 + Math.random() * 0.3,\n          neutralPercent: 0.05 + Math.random() * 0.15,\n          weekOverWeekChange: (Math.random() - 0.4) * 0.8, // -32% to +48%\n          influencerSentiment: 0.4 + Math.random() * 0.6,\n          sentimentMomentum: (Math.random() - 0.4) * 0.5, // -0.2 to +0.3\n          platforms: {\n            twitter: 0.5 + (Math.random() - 0.5) * 0.9,\n            reddit: 0.7 + (Math.random() - 0.5) * 0.6,\n            stocktwits: 0.6 + (Math.random() - 0.5) * 0.8,\n            discord: 0.8 + (Math.random() - 0.5) * 0.4,\n          },\n        };\n\n        this.socialSentimentData.set(`meme_${symbol}_${Date.now()}`, sentimentData);\n      });\n\n      // Crypto sentiment\n      crypto.forEach(symbol => {\n        const sentimentData = {\n          symbol,\n          timestamp: new Date(),\n          overallSentiment: 0.55 + (Math.random() - 0.5) * 0.9, // -0.35 to +0.95\n          sentimentVolume: 30000 + Math.random() * 300000,\n          bullishPercent: 0.45 + Math.random() * 0.45,\n          bearishPercent: 0.15 + Math.random() * 0.35,\n          neutralPercent: 0.1 + Math.random() * 0.2,\n          weekOverWeekChange: (Math.random() - 0.45) * 0.7, // -31.5% to +38.5%\n          influencerSentiment: 0.5 + Math.random() * 0.5,\n          sentimentMomentum: (Math.random() - 0.45) * 0.4, // -0.18 to +0.22\n          platforms: {\n            twitter: 0.6 + (Math.random() - 0.5) * 0.8,\n            reddit: 0.5 + (Math.random() - 0.5) * 0.8,\n            discord: 0.7 + (Math.random() - 0.5) * 0.6,\n            telegram: 0.8 + (Math.random() - 0.5) * 0.4,\n          },\n        };\n\n        this.socialSentimentData.set(`crypto_${symbol}_${Date.now()}`, sentimentData);\n      });\n    }, 300000 / 100); // 5-minute data compressed to every 3 seconds for simulation\n  }\n\n  private async collectMobileAppData() {\n    // Simulate mobile app usage data collection\n    setInterval(() => {\n      const social = ['META', 'SNAP', 'PINS', 'TWTR', 'MTCH'];\n      const gaming = ['ATVI', 'EA', 'TTWO', 'RBLX', 'U'];\n      const finance = ['SQ', 'PYPL', 'COIN', 'HOOD', 'SOFI'];\n\n      // Social app usage\n      social.forEach(symbol => {\n        const appData = {\n          symbol,\n          timestamp: new Date(),\n          dailyActiveUsers: 1000000 + Math.random() * 50000000,\n          monthlyActiveUsers: 5000000 + Math.random() * 200000000,\n          averageSessionTime: 10 + Math.random() * 30, // minutes\n          sessionsPerUser: 3 + Math.random() * 12,\n          retentionRate: 0.4 + Math.random() * 0.5,\n          weekOverWeekGrowth: (Math.random() - 0.4) * 0.1, // -4% to +6%\n          yearOverYearGrowth: (Math.random() - 0.3) * 0.3, // -9% to +21%\n          downloads: 100000 + Math.random() * 1000000,\n          uninstalls: 50000 + Math.random() * 500000,\n          inAppPurchaseRevenue: 500000 + Math.random() * 5000000,\n        };\n\n        this.mobileAppData.set(`social_${symbol}_${Date.now()}`, appData);\n      });\n\n      // Gaming app usage\n      gaming.forEach(symbol => {\n        const appData = {\n          symbol,\n          timestamp: new Date(),\n          dailyActiveUsers: 500000 + Math.random() * 10000000,\n          monthlyActiveUsers: 2000000 + Math.random() * 50000000,\n          averageSessionTime: 20 + Math.random() * 40, // minutes\n          sessionsPerUser: 2 + Math.random() * 8,\n          retentionRate: 0.3 + Math.random() * 0.4,\n          weekOverWeekGrowth: (Math.random() - 0.4) * 0.15, // -6% to +9%\n          yearOverYearGrowth: (Math.random() - 0.3) * 0.4, // -12% to +28%\n          downloads: 50000 + Math.random() * 500000,\n          uninstalls: 25000 + Math.random() * 250000,\n          inAppPurchaseRevenue: 1000000 + Math.random() * 10000000,\n        };\n\n        this.mobileAppData.set(`gaming_${symbol}_${Date.now()}`, appData);\n      });\n\n      // Finance app usage\n      finance.forEach(symbol => {\n        const appData = {\n          symbol,\n          timestamp: new Date(),\n          dailyActiveUsers: 200000 + Math.random() * 5000000,\n          monthlyActiveUsers: 1000000 + Math.random() * 20000000,\n          averageSessionTime: 5 + Math.random() * 15, // minutes\n          sessionsPerUser: 1 + Math.random() * 5,\n          retentionRate: 0.5 + Math.random() * 0.4,\n          weekOverWeekGrowth: (Math.random() - 0.4) * 0.12, // -4.8% to +7.2%\n          yearOverYearGrowth: (Math.random() - 0.3) * 0.5, // -15% to +35%\n          downloads: 20000 + Math.random() * 200000,\n          uninstalls: 10000 + Math.random() * 100000,\n          transactionVolume: 10000000 + Math.random() * 100000000,\n        };\n\n        this.mobileAppData.set(`finance_${symbol}_${Date.now()}`, appData);\n      });\n    }, 86400000 / 100); // Daily data compressed to every ~15 minutes for simulation\n  }\n\n  private async collectGeolocationData() {\n    // Simulate geolocation data collection\n    setInterval(() => {\n      const retail = ['WMT', 'TGT', 'COST', 'HD', 'LOW', 'BBY', 'DG', 'DLTR'];\n      const restaurants = ['MCD', 'SBUX', 'YUM', 'QSR', 'DPZ', 'CMG', 'DRI'];\n      const hotels = ['MAR', 'HLT', 'H', 'WH', 'CHH'];\n\n      // Retail foot traffic\n      retail.forEach(symbol => {\n        const geoData = {\n          symbol,\n          timestamp: new Date(),\n          footTraffic: 10000 + Math.random() * 100000,\n          averageDuration: 15 + Math.random() * 45, // minutes\n          weekOverWeekChange: (Math.random() - 0.4) * 0.2, // -8% to +12%\n          yearOverYearChange: (Math.random() - 0.3) * 0.3, // -9% to +21%\n          peakHours: {\n            morning: 0.2 + Math.random() * 0.3,\n            afternoon: 0.4 + Math.random() * 0.4,\n            evening: 0.3 + Math.random() * 0.4,\n          },\n          competitorVisitation: 0.1 + Math.random() * 0.2, // % who also visited competitors\n          newVisitorPercent: 0.2 + Math.random() * 0.3,\n          repeatVisitorPercent: 0.5 + Math.random() * 0.3,\n        };\n\n        this.geolocationData.set(`retail_${symbol}_${Date.now()}`, geoData);\n      });\n\n      // Restaurant foot traffic\n      restaurants.forEach(symbol => {\n        const geoData = {\n          symbol,\n          timestamp: new Date(),\n          footTraffic: 5000 + Math.random() * 50000,\n          averageDuration: 30 + Math.random() * 60, // minutes\n          weekOverWeekChange: (Math.random() - 0.4) * 0.25, // -10% to +15%\n          yearOverYearChange: (Math.random() - 0.3) * 0.35, // -10.5% to +24.5%\n          peakHours: {\n            morning: 0.1 + Math.random() * 0.2,\n            lunch: 0.4 + Math.random() * 0.3,\n            dinner: 0.5 + Math.random() * 0.3,\n          },\n          competitorVisitation: 0.15 + Math.random() * 0.25, // % who also visited competitors\n          newVisitorPercent: 0.25 + Math.random() * 0.35,\n          repeatVisitorPercent: 0.4 + Math.random() * 0.4,\n        };\n\n        this.geolocationData.set(`restaurant_${symbol}_${Date.now()}`, geoData);\n      });\n\n      // Hotel foot traffic\n      hotels.forEach(symbol => {\n        const geoData = {\n          symbol,\n          timestamp: new Date(),\n          footTraffic: 1000 + Math.random() * 10000,\n          averageDuration: 1000 + Math.random() * 2000, // minutes (multi-day stays)\n          weekOverWeekChange: (Math.random() - 0.4) * 0.3, // -12% to +18%\n          yearOverYearChange: (Math.random() - 0.3) * 0.4, // -12% to +28%\n          occupancyEstimate: 0.5 + Math.random() * 0.4,\n          localVsTravel: {\n            local: 0.2 + Math.random() * 0.3,\n            domestic: 0.5 + Math.random() * 0.3,\n            international: 0.1 + Math.random() * 0.2,\n          },\n          competitorVisitation: 0.05 + Math.random() * 0.15, // % who also visited competitors\n          newVisitorPercent: 0.6 + Math.random() * 0.3,\n          repeatVisitorPercent: 0.1 + Math.random() * 0.3,\n        };\n\n        this.geolocationData.set(`hotel_${symbol}_${Date.now()}`, geoData);\n      });\n    }, 3600000 / 100); // Hourly data compressed to every ~36 seconds for simulation\n  }\n\n  async getSatelliteData(symbol: string, dataType = 'all'): Promise<any> {\n    // Get satellite data for a specific symbol\n    const results = [];\n\n    for (const [key, value] of this.satelliteImagery.entries()) {\n      if (key.includes(symbol) && (dataType === 'all' || key.includes(dataType))) {\n        results.push(value);\n      }\n    }\n\n    // Sort by timestamp (newest first)\n    results.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    return results.slice(0, 10); // Return the 10 most recent entries\n  }\n\n  async getCreditCardData(symbol: string, dataType = 'all'): Promise<any> {\n    // Get credit card data for a specific symbol\n    const results = [];\n\n    for (const [key, value] of this.creditCardData.entries()) {\n      if (key.includes(symbol) && (dataType === 'all' || key.includes(dataType))) {\n        results.push(value);\n      }\n    }\n\n    // Sort by timestamp (newest first)\n    results.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    return results.slice(0, 10); // Return the 10 most recent entries\n  }\n\n  async getWebTrafficData(symbol: string, dataType = 'all'): Promise<any> {\n    // Get web traffic data for a specific symbol\n    const results = [];\n\n    for (const [key, value] of this.webTrafficData.entries()) {\n      if (key.includes(symbol) && (dataType === 'all' || key.includes(dataType))) {\n        results.push(value);\n      }\n    }\n\n    // Sort by timestamp (newest first)\n    results.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    return results.slice(0, 10); // Return the 10 most recent entries\n  }\n\n  async getSocialSentimentData(symbol: string, dataType = 'all'): Promise<any> {\n    // Get social sentiment data for a specific symbol\n    const results = [];\n\n    for (const [key, value] of this.socialSentimentData.entries()) {\n      if (key.includes(symbol) && (dataType === 'all' || key.includes(dataType))) {\n        results.push(value);\n      }\n    }\n\n    // Sort by timestamp (newest first)\n    results.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    return results.slice(0, 10); // Return the 10 most recent entries\n  }\n\n  async getMobileAppData(symbol: string, dataType = 'all'): Promise<any> {\n    // Get mobile app data for a specific symbol\n    const results = [];\n\n    for (const [key, value] of this.mobileAppData.entries()) {\n      if (key.includes(symbol) && (dataType === 'all' || key.includes(dataType))) {\n        results.push(value);\n      }\n    }\n\n    // Sort by timestamp (newest first)\n    results.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    return results.slice(0, 10); // Return the 10 most recent entries\n  }\n\n  async getGeolocationData(symbol: string, dataType = 'all'): Promise<any> {\n    // Get geolocation data for a specific symbol\n    const results = [];\n\n    for (const [key, value] of this.geolocationData.entries()) {\n      if (key.includes(symbol) && (dataType === 'all' || key.includes(dataType))) {\n        results.push(value);\n      }\n    }\n\n    // Sort by timestamp (newest first)\n    results.sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime());\n\n    return results.slice(0, 10); // Return the 10 most recent entries\n  }\n\n  async getComprehensiveAlternativeData(symbol: string): Promise<any> {\n    // Get all alternative data for a specific symbol\n    const [satellite, creditCard, webTraffic, socialSentiment, mobileApp, geolocation] =\n      await Promise.all([\n        this.getSatelliteData(symbol),\n        this.getCreditCardData(symbol),\n        this.getWebTrafficData(symbol),\n        this.getSocialSentimentData(symbol),\n        this.getMobileAppData(symbol),\n        this.getGeolocationData(symbol),\n      ]);\n\n    return {\n      symbol,\n      timestamp: new Date(),\n      satellite: satellite.length > 0 ? satellite[0] : null,\n      creditCard: creditCard.length > 0 ? creditCard[0] : null,\n      webTraffic: webTraffic.length > 0 ? webTraffic[0] : null,\n      socialSentiment: socialSentiment.length > 0 ? socialSentiment[0] : null,\n      mobileApp: mobileApp.length > 0 ? mobileApp[0] : null,\n      geolocation: geolocation.length > 0 ? geolocation[0] : null,\n      alternativeSignal: this.calculateAlternativeSignal(\n        satellite[0],\n        creditCard[0],\n        webTraffic[0],\n        socialSentiment[0],\n        mobileApp[0],\n        geolocation[0]\n      ),\n    };\n  }\n\n  private calculateAlternativeSignal(\n    satellite: SatelliteData | null,\n    creditCard: CreditCardData | null,\n    webTraffic: WebTrafficData | null,\n    socialSentiment: SocialSentimentData | null,\n    mobileApp: MobileAppData | null,\n    geolocation: GeolocationData | null\n  ): any {\n    // Calculate a combined signal from all alternative data sources\n    let bullishFactors = 0;\n    let bearishFactors = 0;\n    let totalFactors = 0;\n    let confidence = 0.5;\n\n    // Satellite data\n    if (satellite) {\n      totalFactors++;\n      if (satellite.yearOverYearChange > 0.05) bullishFactors++;\n      if (satellite.yearOverYearChange < -0.05) bearishFactors++;\n      confidence += satellite.confidence * 0.1;\n    }\n\n    // Credit card data\n    if (creditCard) {\n      totalFactors++;\n      if (creditCard.yearOverYearChange > 0.05) bullishFactors++;\n      if (creditCard.yearOverYearChange < -0.05) bearishFactors++;\n      confidence += 0.05;\n    }\n\n    // Web traffic data\n    if (webTraffic) {\n      totalFactors++;\n      if (webTraffic.yearOverYearChange > 0.1) bullishFactors++;\n      if (webTraffic.yearOverYearChange < -0.1) bearishFactors++;\n      confidence += 0.05;\n    }\n\n    // Social sentiment data\n    if (socialSentiment) {\n      totalFactors++;\n      if (socialSentiment.overallSentiment > 0.6) bullishFactors++;\n      if (socialSentiment.overallSentiment < 0.4) bearishFactors++;\n      confidence += 0.1;\n    }\n\n    // Mobile app data\n    if (mobileApp) {\n      totalFactors++;\n      if (mobileApp.yearOverYearGrowth > 0.1) bullishFactors++;\n      if (mobileApp.yearOverYearGrowth < -0.1) bearishFactors++;\n      confidence += 0.05;\n    }\n\n    // Geolocation data\n    if (geolocation) {\n      totalFactors++;\n      if (geolocation.yearOverYearChange > 0.05) bullishFactors++;\n      if (geolocation.yearOverYearChange < -0.05) bearishFactors++;\n      confidence += 0.05;\n    }\n\n    // Calculate signal\n    let signal = 0;\n    if (totalFactors > 0) {\n      signal = (bullishFactors - bearishFactors) / totalFactors;\n    }\n\n    // Normalize confidence\n    confidence = Math.min(confidence, 1.0);\n\n    return {\n      signal,\n      direction: signal > 0.2 ? 'BULLISH' : signal < -0.2 ? 'BEARISH' : 'NEUTRAL',\n      strength: Math.abs(signal),\n      confidence,\n      bullishFactors,\n      bearishFactors,\n      totalFactors,\n    };\n  }\n\n  getDataSources(): any[] {\n    return Array.from(this.dataSources.values());\n  }\n\n  getDataSourceById(id: string): any {\n    return this.dataSources.get(id);\n  }\n}\n\nexport const alternativeDataService = AlternativeDataService.getInstance();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/data-aggregation-service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'AISignal' is defined but never used.",
        "line": 5,
        "column": 3,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'news' is assigned a value but never used.",
        "line": 165,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 165,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  MarketData,\n  NewsItem,\n  TradingPattern,\n  AISignal,\n  MockWebSocket,\n  ComprehensiveAnalysis,\n} from '@/app/types/data-aggregation';\n\n// Comprehensive Data Aggregation Service - The AI Brain\nexport class DataAggregationService {\n  private static instance: DataAggregationService;\n  private dataCache: Map<string, MarketData> = new Map();\n  private newsCache: Map<string, NewsItem[]> = new Map();\n  private patternCache: Map<string, TradingPattern[]> = new Map();\n  private knowledgeBase: Map<string, ComprehensiveAnalysis> = new Map();\n  private realTimeFeeds: Map<string, MockWebSocket> = new Map();\n\n  static getInstance(): DataAggregationService {\n    if (!DataAggregationService.instance) {\n      DataAggregationService.instance = new DataAggregationService();\n    }\n    return DataAggregationService.instance;\n  }\n\n  // Initialize comprehensive data sources\n  async initializeDataSources() {\n    await Promise.all([\n      this.initializeMarketDataFeeds(),\n      this.initializeNewsFeeds(),\n      this.initializeSocialMediaFeeds(),\n      this.initializeEconomicDataFeeds(),\n      this.initializeOptionsDataFeeds(),\n      this.initializeCryptoFeeds(),\n      this.initializeForexFeeds(),\n      this.initializeCommodityFeeds(),\n      this.loadHistoricalPatterns(),\n      this.loadMarketKnowledge(),\n    ]);\n  }\n\n  // Real-time Market Data Feeds\n  private async initializeMarketDataFeeds() {\n    const feeds = [\n      'wss://ws.finnhub.io',\n      'wss://socket.polygon.io',\n      'wss://ws.twelvedata.com',\n      'wss://ws.marketdata.app',\n      'wss://ws.tradier.com',\n    ];\n\n    // Simulate multiple data feed connections\n    feeds.forEach((feed, index) => {\n      const mockWs = this.createMockWebSocket(feed);\n      this.realTimeFeeds.set(`feed_${index}`, mockWs);\n    });\n  }\n\n  private createMockWebSocket(url: string): MockWebSocket {\n    // Simulate real-time data feed\n    const mockData: MockWebSocket = {\n      url,\n      connected: true,\n      lastUpdate: new Date(),\n      dataPoints: 0,\n    };\n\n    // Simulate data updates every second\n    setInterval(() => {\n      mockData.dataPoints++;\n      mockData.lastUpdate = new Date();\n      this.processRealTimeData(mockData);\n    }, 1000);\n\n    return mockData;\n  }\n\n  private processRealTimeData(data: MockWebSocket) {\n    // Process incoming real-time data\n    const symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA', 'META', 'AMZN', 'SPY', 'QQQ'];\n    const symbol = symbols[Math.floor(Math.random() * symbols.length)];\n\n    const marketData: MarketData = {\n      symbol,\n      price: 100 + Math.random() * 400,\n      volume: Math.floor(Math.random() * 10000000),\n      bid: 100 + Math.random() * 400,\n      ask: 100 + Math.random() * 400,\n      timestamp: new Date(),\n      source: data.url,\n    };\n\n    this.updateDataCache(symbol, marketData);\n  }\n\n  // Missing method implementations\n  private async initializeOptionsDataFeeds() {\n    const optionsFeeds = ['wss://api.opra.com', 'wss://api.options.com', 'wss://api.cboe.com'];\n\n    optionsFeeds.forEach((feed, index) => {\n      const mockWs = this.createMockWebSocket(feed);\n      this.realTimeFeeds.set(`options_feed_${index}`, mockWs);\n    });\n  }\n\n  private async initializeCryptoFeeds() {\n    const cryptoFeeds = ['wss://ws.binance.com', 'wss://api.coinbase.com', 'wss://api.kraken.com'];\n\n    cryptoFeeds.forEach((feed, index) => {\n      const mockWs = this.createMockWebSocket(feed);\n      this.realTimeFeeds.set(`crypto_feed_${index}`, mockWs);\n    });\n  }\n\n  private async initializeForexFeeds() {\n    const forexFeeds = ['wss://api.forex.com', 'wss://api.oanda.com', 'wss://api.fxcm.com'];\n\n    forexFeeds.forEach((feed, index) => {\n      const mockWs = this.createMockWebSocket(feed);\n      this.realTimeFeeds.set(`forex_feed_${index}`, mockWs);\n    });\n  }\n\n  private async initializeCommodityFeeds() {\n    const commodityFeeds = [\n      'wss://api.commodities.com',\n      'wss://api.cmegroup.com',\n      'wss://api.ice.com',\n    ];\n\n    commodityFeeds.forEach((feed, index) => {\n      const mockWs = this.createMockWebSocket(feed);\n      this.realTimeFeeds.set(`commodity_feed_${index}`, mockWs);\n    });\n  }\n\n  private async initializeNewsFeeds() {\n    // Mock implementation\n    console.log('Initializing news feeds...');\n  }\n\n  private async initializeSocialMediaFeeds() {\n    // Mock implementation\n    console.log('Initializing social media feeds...');\n  }\n\n  private async initializeEconomicDataFeeds() {\n    // Mock implementation\n    console.log('Initializing economic data feeds...');\n  }\n\n  private async loadHistoricalPatterns() {\n    // Mock implementation\n    console.log('Loading historical patterns...');\n  }\n\n  private async loadMarketKnowledge() {\n    // Mock implementation\n    console.log('Loading market knowledge...');\n  }\n\n  // Public API methods\n  async getComprehensiveAnalysis(symbol: string): Promise<ComprehensiveAnalysis> {\n    const marketData = this.dataCache.get(symbol) || this.generateMockMarketData(symbol);\n    const news = this.newsCache.get(symbol) || [];\n    const patterns = this.patternCache.get(symbol) || [];\n\n    return {\n      symbol,\n      sentimentScore: 0.5 + (Math.random() - 0.5) * 0.4,\n      impactScore: Math.random(),\n      patterns,\n      signals: [],\n      marketData,\n      confidence: Math.random(),\n      timestamp: new Date(),\n    };\n  }\n\n  async getMarketOverview() {\n    const symbols = ['SPY', 'QQQ', 'IWM', 'DIA'];\n    const analyses = await Promise.all(\n      symbols.map(symbol => this.getComprehensiveAnalysis(symbol))\n    );\n\n    return {\n      indices: analyses,\n      marketSentiment: 0.5 + (Math.random() - 0.5) * 0.4,\n      volatility: 0.15 + Math.random() * 0.3,\n      timestamp: new Date(),\n    };\n  }\n\n  private generateMockMarketData(symbol: string): MarketData {\n    return {\n      symbol,\n      price: 100 + Math.random() * 400,\n      volume: Math.floor(Math.random() * 10000000),\n      bid: 100 + Math.random() * 400,\n      ask: 100 + Math.random() * 400,\n      timestamp: new Date(),\n      source: 'mock',\n    };\n  }\n\n  private updateDataCache(symbol: string, data: MarketData) {\n    this.dataCache.set(symbol, data);\n  }\n}\n\nexport const dataAggregationService = DataAggregationService.getInstance();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/high-frequency-trading-service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [565, 568], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [565, 568], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 27,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 27,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [609, 612], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [609, 612], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 34,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 34,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [756, 759], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [756, 759], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 197,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 197,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5888, 5891], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5888, 5891], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 252,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 252,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7708, 7711], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7708, 7711], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 267,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 267,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8105, 8108], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8105, 8108], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 276,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 276,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8305, 8308], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8305, 8308], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 280,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 280,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8401, 8404], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8401, 8404], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// High-Frequency Trading Service for ultra-fast market execution\nexport class HighFrequencyTradingService {\n  private static instance: HighFrequencyTradingService;\n  private isRunning = false;\n  private executionLatency = 0.5; // milliseconds\n  private orderTypes: string[] = [\n    'market',\n    'limit',\n    'iceberg',\n    'twap',\n    'vwap',\n    'pov',\n    'sniper',\n    'dark_pool',\n  ];\n  private venues: string[] = [\n    'NYSE',\n    'NASDAQ',\n    'BATS',\n    'IEX',\n    'ARCA',\n    'EDGX',\n    'MEMX',\n    'DARK_POOLS',\n  ];\n  private strategies: Map<string, any> = new Map();\n  private executionStats: any = {\n    ordersPlaced: 0,\n    ordersFilled: 0,\n    averageLatency: 0,\n    slippage: 0,\n    pnl: 0,\n  };\n  private activeAlgorithms: Map<string, any> = new Map();\n\n  static getInstance(): HighFrequencyTradingService {\n    if (!HighFrequencyTradingService.instance) {\n      HighFrequencyTradingService.instance = new HighFrequencyTradingService();\n    }\n    return HighFrequencyTradingService.instance;\n  }\n\n  async initialize() {\n    console.log('Initializing High-Frequency Trading Service...');\n    await this.initializeStrategies();\n    console.log('High-Frequency Trading Service initialized');\n    return true;\n  }\n\n  private async initializeStrategies() {\n    // Initialize HFT strategies\n    const strategies = [\n      {\n        id: 'statistical_arbitrage',\n        name: 'Statistical Arbitrage',\n        type: 'market_neutral',\n        timeframe: 'ultra_short',\n        executionSpeed: 0.8, // milliseconds\n        capacity: '$500M',\n        sharpeRatio: 4.2,\n        winRate: 0.62,\n        description: 'Exploits price discrepancies between related securities',\n      },\n      {\n        id: 'latency_arbitrage',\n        name: 'Latency Arbitrage',\n        type: 'directional',\n        timeframe: 'ultra_short',\n        executionSpeed: 0.3, // milliseconds\n        capacity: '$200M',\n        sharpeRatio: 5.1,\n        winRate: 0.58,\n        description: 'Capitalizes on speed advantages in market data and execution',\n      },\n      {\n        id: 'market_making',\n        name: 'HFT Market Making',\n        type: 'market_neutral',\n        timeframe: 'ultra_short',\n        executionSpeed: 0.5, // milliseconds\n        capacity: '$1B',\n        sharpeRatio: 3.8,\n        winRate: 0.71,\n        description: 'Provides liquidity while profiting from bid-ask spread',\n      },\n      {\n        id: 'momentum_ignition',\n        name: 'Momentum Ignition',\n        type: 'directional',\n        timeframe: 'very_short',\n        executionSpeed: 1.2, // milliseconds\n        capacity: '$300M',\n        sharpeRatio: 3.5,\n        winRate: 0.55,\n        description: \"Initiates price movements to trigger other participants' algorithms\",\n      },\n      {\n        id: 'order_book_imbalance',\n        name: 'Order Book Imbalance',\n        type: 'directional',\n        timeframe: 'ultra_short',\n        executionSpeed: 0.7, // milliseconds\n        capacity: '$400M',\n        sharpeRatio: 4.0,\n        winRate: 0.64,\n        description: 'Detects and exploits supply/demand imbalances in the order book',\n      },\n    ];\n\n    strategies.forEach(strategy => {\n      this.strategies.set(strategy.id, strategy);\n    });\n  }\n\n  async startHFTSystem() {\n    if (this.isRunning) return false;\n\n    this.isRunning = true;\n    console.log('Starting High-Frequency Trading System...');\n\n    // Start the HFT simulation\n    this.simulateHFTActivity();\n\n    return true;\n  }\n\n  async stopHFTSystem() {\n    this.isRunning = false;\n    console.log('Stopping High-Frequency Trading System...');\n    return true;\n  }\n\n  private simulateHFTActivity() {\n    if (!this.isRunning) return;\n\n    // Simulate HFT activity\n    setInterval(() => {\n      if (!this.isRunning) return;\n\n      // Simulate order execution\n      const orderCount = Math.floor(Math.random() * 100) + 50; // 50-150 orders per interval\n      const filledCount = Math.floor(orderCount * (0.9 + Math.random() * 0.1)); // 90-100% fill rate\n      const avgLatency = this.executionLatency * (0.9 + Math.random() * 0.2); // Latency with some variation\n      const avgSlippage = 0.0001 * (0.8 + Math.random() * 0.4); // Average slippage\n      const intervalPnl = (Math.random() - 0.3) * 10000; // PnL for this interval\n\n      // Update execution stats\n      this.executionStats.ordersPlaced += orderCount;\n      this.executionStats.ordersFilled += filledCount;\n      this.executionStats.averageLatency = avgLatency;\n      this.executionStats.slippage = avgSlippage;\n      this.executionStats.pnl += intervalPnl;\n\n      // Simulate algorithm activity\n      this.updateAlgorithmActivity();\n    }, 1000); // Update every second for simulation purposes\n  }\n\n  private updateAlgorithmActivity() {\n    // Get all strategies\n    const strategies = Array.from(this.strategies.values());\n\n    // Randomly activate/deactivate strategies\n    strategies.forEach(strategy => {\n      if (Math.random() > 0.7) {\n        // 30% chance to change state\n        if (this.activeAlgorithms.has(strategy.id)) {\n          this.activeAlgorithms.delete(strategy.id);\n        } else {\n          this.activeAlgorithms.set(strategy.id, {\n            ...strategy,\n            activated: new Date(),\n            currentPnl: 0,\n            ordersPlaced: 0,\n            ordersFilled: 0,\n          });\n        }\n      }\n\n      // Update stats for active algorithms\n      if (this.activeAlgorithms.has(strategy.id)) {\n        const algo = this.activeAlgorithms.get(strategy.id);\n        algo.ordersPlaced += Math.floor(Math.random() * 20) + 5;\n        algo.ordersFilled += Math.floor(Math.random() * 15) + 5;\n        algo.currentPnl += (Math.random() - 0.3) * 1000;\n        this.activeAlgorithms.set(strategy.id, algo);\n      }\n    });\n  }\n\n  async executeHFTOrder(\n    symbol: string,\n    side: string,\n    quantity: number,\n    price: number,\n    strategy: string\n  ): Promise<any> {\n    if (!this.isRunning) {\n      throw new Error('HFT system is not running');\n    }\n\n    // Validate strategy\n    if (!this.strategies.has(strategy)) {\n      throw new Error(`Unknown HFT strategy: ${strategy}`);\n    }\n\n    // Simulate order execution\n    const strategyDetails = this.strategies.get(strategy);\n    const executionTime = strategyDetails.executionSpeed * (0.9 + Math.random() * 0.2);\n    const slippage = price * 0.0001 * (0.8 + Math.random() * 0.4);\n    const executedPrice = side === 'buy' ? price + slippage : price - slippage;\n    const filled = quantity * (0.9 + Math.random() * 0.1);\n\n    // Simulate execution delay\n    await new Promise(resolve => setTimeout(resolve, executionTime));\n\n    const order = {\n      id: `ord_${Date.now()}_${Math.floor(Math.random() * 1000)}`,\n      symbol,\n      side,\n      quantity,\n      requestedPrice: price,\n      executedPrice,\n      filled,\n      executionTime,\n      slippage: slippage / price,\n      strategy,\n      timestamp: new Date(),\n      venues: this.getRandomVenues(3),\n      routingPath: this.generateRoutingPath(),\n    };\n\n    // Update execution stats\n    this.executionStats.ordersPlaced++;\n    this.executionStats.ordersFilled += filled / quantity;\n    this.executionStats.averageLatency =\n      (this.executionStats.averageLatency * (this.executionStats.ordersPlaced - 1) +\n        executionTime) /\n      this.executionStats.ordersPlaced;\n    this.executionStats.slippage =\n      (this.executionStats.slippage * (this.executionStats.ordersPlaced - 1) + slippage / price) /\n      this.executionStats.ordersPlaced;\n\n    return order;\n  }\n\n  private getRandomVenues(count: number): string[] {\n    const shuffled = [...this.venues].sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, count);\n  }\n\n  private generateRoutingPath(): any[] {\n    const path = [];\n    const hopCount = Math.floor(Math.random() * 3) + 2; // 2-4 hops\n\n    for (let i = 0; i < hopCount; i++) {\n      path.push({\n        venue: this.venues[Math.floor(Math.random() * this.venues.length)],\n        latency: Math.random() * 0.2, // 0-0.2ms per hop\n        timestamp: new Date(Date.now() + i),\n      });\n    }\n\n    return path;\n  }\n\n  getExecutionStats(): any {\n    return {\n      ...this.executionStats,\n      activeAlgorithms: this.activeAlgorithms.size,\n      isRunning: this.isRunning,\n      timestamp: new Date(),\n    };\n  }\n\n  getActiveAlgorithms(): any[] {\n    return Array.from(this.activeAlgorithms.values());\n  }\n\n  getAvailableStrategies(): any[] {\n    return Array.from(this.strategies.values());\n  }\n\n  getOrderTypes(): string[] {\n    return this.orderTypes;\n  }\n\n  getVenues(): string[] {\n    return this.venues;\n  }\n}\n\nexport const highFrequencyTradingService = HighFrequencyTradingService.getInstance();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/legal-compliance-service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [166, 169], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [166, 169], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [219, 222], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [219, 222], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [276, 279], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [276, 279], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 387,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 387,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14688, 14691], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14688, 14691], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 448,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 448,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16755, 16758], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16755, 16758], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Comprehensive Legal Compliance Service\nexport class LegalComplianceService {\n  private static instance: LegalComplianceService;\n  private regulations: Map<string, any> = new Map();\n  private disclaimers: Map<string, any> = new Map();\n  private complianceRules: Map<string, any> = new Map();\n\n  static getInstance(): LegalComplianceService {\n    if (!LegalComplianceService.instance) {\n      LegalComplianceService.instance = new LegalComplianceService();\n    }\n    return LegalComplianceService.instance;\n  }\n\n  async initialize() {\n    this.loadSecuritiesRegulations();\n    this.loadAIRegulations();\n    this.loadInvestmentAdvisoryRules();\n    this.loadDataPrivacyRules();\n    this.loadDisclaimers();\n    this.loadComplianceFramework();\n  }\n\n  private loadSecuritiesRegulations() {\n    const securitiesRegs = {\n      securities_act_1933: {\n        title: 'Securities Act of 1933',\n        purpose: 'Regulates the offering and sale of securities',\n        keyProvisions: [\n          'Registration of securities offerings',\n          'Disclosure requirements for public offerings',\n          'Anti-fraud provisions',\n          'Exemptions for private placements',\n        ],\n        compliance: {\n          disclosure_requirements: 'All material information must be disclosed',\n          registration_exemptions: 'Private placements under Regulation D',\n          anti_fraud: 'No misrepresentations or omissions of material facts',\n        },\n      },\n      securities_exchange_act_1934: {\n        title: 'Securities Exchange Act of 1934',\n        purpose: 'Regulates secondary market trading',\n        keyProvisions: [\n          'Registration of exchanges and broker-dealers',\n          'Periodic reporting requirements',\n          'Proxy solicitation rules',\n          'Insider trading prohibitions',\n        ],\n        compliance: {\n          broker_dealer_registration: 'Must register with SEC and FINRA',\n          periodic_reporting: '10-K, 10-Q, 8-K filings required',\n          insider_trading: 'Material non-public information restrictions',\n        },\n      },\n      investment_advisers_act_1940: {\n        title: 'Investment Advisers Act of 1940',\n        purpose: 'Regulates investment advisers',\n        keyProvisions: [\n          'Registration requirements',\n          'Fiduciary duty to clients',\n          'Disclosure obligations',\n          'Custody rules',\n          'Code of ethics',\n        ],\n        compliance: {\n          fiduciary_duty: \"Must act in client's best interest\",\n          disclosure: 'Form ADV must be provided to clients',\n          custody: 'Strict rules for holding client assets',\n          conflicts_of_interest: 'Must disclose and manage conflicts',\n        },\n      },\n    };\n\n    this.regulations.set('securities', securitiesRegs);\n  }\n\n  private loadAIRegulations() {\n    const aiRegs = {\n      ai_governance_framework: {\n        title: 'AI Governance and Ethics Framework',\n        purpose: 'Ensure responsible AI use in financial services',\n        principles: [\n          'Transparency and Explainability',\n          'Fairness and Non-discrimination',\n          'Accountability and Human Oversight',\n          'Privacy and Data Protection',\n          'Robustness and Security',\n        ],\n        requirements: {\n          model_validation: 'AI models must be validated and tested',\n          bias_testing: 'Regular testing for discriminatory bias',\n          human_oversight: 'Human review of AI decisions required',\n          documentation: 'Comprehensive documentation of AI systems',\n          monitoring: 'Continuous monitoring of AI performance',\n        },\n      },\n      algorithmic_trading_rules: {\n        title: 'Algorithmic Trading Regulations',\n        purpose: 'Regulate automated trading systems',\n        requirements: [\n          'Risk controls and circuit breakers',\n          'System testing and validation',\n          'Audit trails and record keeping',\n          'Market access controls',\n          'Compliance monitoring',\n        ],\n        compliance: {\n          pre_trade_controls: 'Position limits, order size limits',\n          post_trade_monitoring: 'Real-time surveillance',\n          kill_switches: 'Ability to immediately stop trading',\n          testing: 'Comprehensive testing before deployment',\n        },\n      },\n      robo_adviser_rules: {\n        title: 'Robo-Adviser Regulations',\n        purpose: 'Regulate automated investment advice',\n        requirements: [\n          'Fiduciary duty applies to robo-advisers',\n          'Disclosure of algorithm limitations',\n          'Suitability determinations',\n          'Client onboarding procedures',\n          'Ongoing monitoring',\n        ],\n        compliance: {\n          suitability: 'Must determine investment suitability',\n          disclosure: 'Clear disclosure of fees and limitations',\n          supervision: 'Human oversight of automated advice',\n          client_communication: 'Regular client updates and reviews',\n        },\n      },\n    };\n\n    this.regulations.set('ai', aiRegs);\n  }\n\n  private loadInvestmentAdvisoryRules() {\n    const advisoryRules = {\n      fiduciary_duty: {\n        title: 'Fiduciary Duty Standards',\n        description: 'Highest standard of care in financial relationships',\n        components: {\n          duty_of_care: {\n            description: 'Must provide advice with skill and diligence',\n            requirements: [\n              'Reasonable investigation of investments',\n              'Ongoing monitoring of recommendations',\n              'Competent and diligent service',\n            ],\n          },\n          duty_of_loyalty: {\n            description: \"Must act in client's best interest\",\n            requirements: [\n              'Avoid conflicts of interest',\n              'Disclose material conflicts',\n              'Obtain informed consent for conflicts',\n            ],\n          },\n        },\n      },\n      suitability_requirements: {\n        title: 'Suitability and Best Interest Standards',\n        description: 'Ensure recommendations are appropriate for clients',\n        components: {\n          customer_profile: [\n            'Investment objectives',\n            'Risk tolerance',\n            'Time horizon',\n            'Financial situation',\n            'Investment experience',\n          ],\n          reasonable_basis: 'Must have reasonable basis for recommendations',\n          customer_specific: 'Must be suitable for specific customer',\n          quantitative: 'Must consider frequency and cost of transactions',\n        },\n      },\n    };\n\n    this.regulations.set('advisory', advisoryRules);\n  }\n\n  private loadDataPrivacyRules() {\n    const privacyRules = {\n      regulation_sp: {\n        title: 'Regulation S-P (Privacy of Consumer Financial Information)',\n        purpose: 'Protect consumer financial information',\n        requirements: [\n          'Privacy notices to customers',\n          'Opt-out rights for information sharing',\n          'Safeguards for customer information',\n          'Restrictions on disclosure',\n        ],\n      },\n      gdpr_compliance: {\n        title: 'General Data Protection Regulation (GDPR)',\n        purpose: \"Protect EU residents' personal data\",\n        requirements: [\n          'Lawful basis for processing',\n          'Data subject rights',\n          'Privacy by design',\n          'Data breach notifications',\n          'Data protection officer',\n        ],\n      },\n      ccpa_compliance: {\n        title: 'California Consumer Privacy Act (CCPA)',\n        purpose: \"Protect California residents' personal information\",\n        requirements: [\n          'Right to know about data collection',\n          'Right to delete personal information',\n          'Right to opt-out of sale',\n          'Non-discrimination provisions',\n        ],\n      },\n    };\n\n    this.regulations.set('privacy', privacyRules);\n  }\n\n  private loadDisclaimers() {\n    const disclaimers = {\n      investment_risk: {\n        title: 'Investment Risk Disclosure',\n        content: `\n          IMPORTANT INVESTMENT RISK DISCLOSURE\n          \n          All investments involve risk, including the potential loss of principal. Past performance does not guarantee future results. \n          \n          Key Risks:\n          • Market Risk: Securities prices may decline due to market conditions\n          • Credit Risk: Issuers may default on their obligations\n          • Interest Rate Risk: Bond prices move inversely to interest rates\n          • Inflation Risk: Purchasing power may be eroded over time\n          • Liquidity Risk: Some investments may be difficult to sell\n          • Currency Risk: Foreign investments subject to exchange rate fluctuations\n          \n          Before investing, carefully consider your investment objectives, risk tolerance, and time horizon.\n        `,\n        required: true,\n        frequency: 'Every transaction',\n      },\n      ai_limitations: {\n        title: 'AI Technology Limitations Disclosure',\n        content: `\n          ARTIFICIAL INTELLIGENCE LIMITATIONS DISCLOSURE\n          \n          Our AI systems provide analysis and recommendations based on historical data and mathematical models. Important limitations include:\n          \n          • AI predictions are not guarantees of future performance\n          • Models may not account for unprecedented market conditions\n          • Historical patterns may not repeat in the future\n          • AI systems may have inherent biases or limitations\n          • Human judgment should supplement AI recommendations\n          • Technology failures or errors may occur\n          \n          AI-generated content should be considered as one factor in your investment decision-making process.\n        `,\n        required: true,\n        frequency: 'Initial use and quarterly',\n      },\n      not_investment_advice: {\n        title: 'Not Personalized Investment Advice',\n        content: `\n          NOT PERSONALIZED INVESTMENT ADVICE DISCLAIMER\n          \n          The information provided by this platform is for educational and informational purposes only and does not constitute personalized investment advice.\n          \n          • Content is general in nature and not tailored to individual circumstances\n          • We do not know your specific financial situation, goals, or risk tolerance\n          • You should consult with qualified financial professionals before making investment decisions\n          • We are not acting as your investment adviser or fiduciary\n          • All investment decisions are your responsibility\n          \n          This platform does not provide tax, legal, or accounting advice. Consult appropriate professionals for such guidance.\n        `,\n        required: true,\n        frequency: 'Every session',\n      },\n      data_usage: {\n        title: 'Data Usage and Privacy Disclosure',\n        content: `\n          DATA USAGE AND PRIVACY DISCLOSURE\n          \n          We collect and use your data to provide our services. Key points:\n          \n          • We collect trading data, preferences, and usage patterns\n          • Data is used to improve AI models and personalize experience\n          • We implement industry-standard security measures\n          • We do not sell personal data to third parties\n          • You have rights to access, correct, and delete your data\n          • We comply with applicable privacy laws (GDPR, CCPA, etc.)\n          \n          For complete details, please review our Privacy Policy.\n        `,\n        required: true,\n        frequency: 'Account opening and annually',\n      },\n      regulatory_status: {\n        title: 'Regulatory Status Disclosure',\n        content: `\n          REGULATORY STATUS DISCLOSURE\n          \n          Important information about our regulatory status:\n          \n          • This platform is for educational and informational purposes\n          • We are not a registered investment adviser or broker-dealer\n          • We do not execute trades or hold customer funds\n          • We do not provide personalized investment advice\n          • All trading is conducted through your existing brokerage accounts\n          • You are responsible for compliance with applicable laws and regulations\n          \n          If you need investment advice, please consult with a registered investment adviser.\n        `,\n        required: true,\n        frequency: 'Account opening',\n      },\n    };\n\n    this.disclaimers.set('standard', disclaimers);\n  }\n\n  private loadComplianceFramework() {\n    const framework = {\n      content_review: {\n        title: 'Content Review and Approval Process',\n        process: [\n          'All educational content reviewed by compliance team',\n          'AI-generated content flagged for human review',\n          'Regular updates to reflect regulatory changes',\n          'User feedback monitoring for compliance issues',\n        ],\n      },\n      risk_monitoring: {\n        title: 'Risk Monitoring and Controls',\n        controls: [\n          'Real-time monitoring of AI recommendations',\n          'Bias testing and model validation',\n          'User activity monitoring for unusual patterns',\n          'Automated alerts for compliance violations',\n        ],\n      },\n      record_keeping: {\n        title: 'Record Keeping Requirements',\n        requirements: [\n          'Maintain records of all AI decisions and rationale',\n          'User interaction logs and timestamps',\n          'Model training data and validation results',\n          'Compliance monitoring and testing records',\n        ],\n      },\n      training_and_supervision: {\n        title: 'Training and Supervision',\n        requirements: [\n          'Regular compliance training for all staff',\n          'Supervision of AI system operations',\n          'Escalation procedures for compliance issues',\n          'Regular review and testing of procedures',\n        ],\n      },\n    };\n\n    this.complianceRules.set('framework', framework);\n  }\n\n  // Public API Methods\n  getRequiredDisclaimer(context: string) {\n    const disclaimers = this.disclaimers.get('standard');\n\n    switch (context) {\n      case 'investment_recommendation':\n        return [\n          disclaimers.investment_risk,\n          disclaimers.ai_limitations,\n          disclaimers.not_investment_advice,\n        ];\n      case 'ai_analysis':\n        return [disclaimers.ai_limitations, disclaimers.not_investment_advice];\n      case 'educational_content':\n        return [disclaimers.not_investment_advice];\n      case 'account_opening':\n        return Object.values(disclaimers);\n      default:\n        return [disclaimers.not_investment_advice];\n    }\n  }\n\n  validateCompliance(action: string, context: any) {\n    const violations = [];\n\n    // Check for required disclaimers\n    if (action === 'provide_recommendation' && !context.disclaimerShown) {\n      violations.push('Required investment risk disclaimer not displayed');\n    }\n\n    // Check for suitability requirements\n    if (action === 'investment_advice' && !context.customerProfile) {\n      violations.push('Customer suitability profile required for investment advice');\n    }\n\n    // Check for AI transparency requirements\n    if (action === 'ai_recommendation' && !context.aiExplanation) {\n      violations.push('AI decision rationale must be provided');\n    }\n\n    return {\n      compliant: violations.length === 0,\n      violations,\n      requiredActions: this.getRequiredActions(violations),\n    };\n  }\n\n  private getRequiredActions(violations: string[]) {\n    return violations.map(violation => {\n      switch (violation) {\n        case 'Required investment risk disclaimer not displayed':\n          return 'Display investment risk disclaimer before proceeding';\n        case 'Customer suitability profile required for investment advice':\n          return 'Collect customer suitability information';\n        case 'AI decision rationale must be provided':\n          return 'Provide explanation of AI recommendation logic';\n        default:\n          return 'Review compliance requirements';\n      }\n    });\n  }\n\n  getRegulationSummary(category: string) {\n    return this.regulations.get(category);\n  }\n\n  generateComplianceReport() {\n    return {\n      timestamp: new Date(),\n      regulations: {\n        securities: this.regulations.get('securities'),\n        ai: this.regulations.get('ai'),\n        advisory: this.regulations.get('advisory'),\n        privacy: this.regulations.get('privacy'),\n      },\n      disclaimers: this.disclaimers.get('standard'),\n      framework: this.complianceRules.get('framework'),\n      status: 'Compliant',\n      lastReview: new Date(),\n      nextReview: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // 90 days\n    };\n  }\n\n  checkAIComplianceRequirements(aiDecision: any) {\n    const requirements = {\n      explainability: aiDecision.explanation ? 'Met' : 'Not Met',\n      humanOversight: aiDecision.humanReviewed ? 'Met' : 'Required',\n      biasChecking: aiDecision.biasChecked ? 'Met' : 'Required',\n      documentation: aiDecision.documented ? 'Met' : 'Required',\n      monitoring: 'Continuous',\n    };\n\n    const compliant = Object.values(requirements).every(\n      req => req === 'Met' || req === 'Continuous'\n    );\n\n    return {\n      compliant,\n      requirements,\n      recommendations: compliant\n        ? []\n        : [\n            'Provide clear explanation of AI decision',\n            'Implement human oversight review',\n            'Conduct bias testing',\n            'Document decision rationale',\n          ],\n    };\n  }\n}\n\nexport const legalComplianceService = LegalComplianceService.getInstance();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/market-data-service-new.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [169, 172], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [169, 172], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'symbol' is defined but never used.",
        "line": 160,
        "column": 27,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 160,
        "endColumn": 33
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'symbol' is defined but never used.",
        "line": 178,
        "column": 24,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 178,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 217,
        "column": 77,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 217,
        "endColumn": 80,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6843, 6846], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6843, 6846], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 225,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 225,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7110, 7113], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7110, 7113], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 239,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 239,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7490, 7493], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7490, 7493], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 240,
        "column": 21,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 240,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7517, 7520], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7517, 7520], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 242,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 242,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7569, 7572], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7569, 7572], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'totalWinAmount' is assigned a value but never used.",
        "line": 264,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 264,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'totalLossAmount' is assigned a value but never used.",
        "line": 267,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 26
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'strategy' is defined but never used.",
        "line": 293,
        "column": 42,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 293,
        "endColumn": 50
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 293,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 293,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9003, 9006], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9003, 9006], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 12,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Advanced Market Data Service with Real-time capabilities\n\nexport class MarketDataService {\n  private static instance: MarketDataService;\n  private cache: Map<string, any> = new Map();\n  private wsConnections: Map<string, WebSocket> = new Map();\n\n  private getCurrentPrice(symbol: string): number {\n    const prices: Record<string, number> = {\n      AAPL: 180,\n      MSFT: 380,\n      GOOGL: 140,\n      TSLA: 250,\n      NVDA: 500,\n      META: 320,\n      AMZN: 150,\n      SPY: 450,\n      QQQ: 380,\n      IWM: 200,\n    };\n    return prices[symbol] || 100 + Math.random() * 300;\n  }\n\n  private getMarketCap(symbol: string): number {\n    const marketCaps: Record<string, number> = {\n      AAPL: 2800000000000,\n      MSFT: 2500000000000,\n      GOOGL: 1800000000000,\n      TSLA: 800000000000,\n      NVDA: 1200000000000,\n      META: 900000000000,\n      AMZN: 1500000000000,\n    };\n    return marketCaps[symbol] || 50000000000;\n  }\n\n  static getInstance(): MarketDataService {\n    if (!MarketDataService.instance) {\n      MarketDataService.instance = new MarketDataService();\n    }\n    return MarketDataService.instance;\n  }\n\n  // Real-time market data simulation (in production, connect to actual APIs)\n  async getMarketData(symbol: string) {\n    // Simulate real market data with realistic patterns\n    const basePrice = this.getBasePrice(symbol);\n    const volatility = this.getVolatility(symbol);\n\n    return {\n      symbol,\n      price: this.generateRealisticPrice(basePrice, volatility),\n      volume: this.generateVolume(symbol),\n      bid: basePrice * (1 - Math.random() * 0.001),\n      ask: basePrice * (1 + Math.random() * 0.001),\n      change: (Math.random() - 0.5) * 0.05,\n      changePercent: (Math.random() - 0.5) * 5,\n      marketCap: this.getMarketCap(symbol),\n      pe: 15 + Math.random() * 30,\n      eps: Math.random() * 10,\n      dividend: Math.random() * 0.05,\n      beta: 0.5 + Math.random() * 1.5,\n      timestamp: Date.now(),\n      technicals: this.calculateTechnicals(symbol),\n      fundamentals: this.getFundamentals(symbol),\n      sentiment: this.getSentiment(symbol),\n      options: this.getOptionsData(symbol),\n      news: this.getNewsData(symbol),\n    };\n  }\n\n  private getBasePrice(symbol: string): number {\n    const prices: Record<string, number> = {\n      AAPL: 175,\n      MSFT: 380,\n      GOOGL: 140,\n      TSLA: 250,\n      NVDA: 500,\n      META: 320,\n      AMZN: 150,\n      SPY: 450,\n      QQQ: 380,\n      IWM: 200,\n    };\n    return prices[symbol] || 100 + Math.random() * 300;\n  }\n\n  private getVolatility(symbol: string): number {\n    const volatilities: Record<string, number> = {\n      AAPL: 0.25,\n      MSFT: 0.22,\n      GOOGL: 0.28,\n      TSLA: 0.45,\n      NVDA: 0.35,\n      META: 0.32,\n      AMZN: 0.27,\n      SPY: 0.15,\n      QQQ: 0.18,\n      IWM: 0.25,\n    };\n    return volatilities[symbol] || 0.25;\n  }\n\n  private generateRealisticPrice(basePrice: number, volatility: number): number {\n    const dt = 1 / 252 / 24 / 60; // 1 minute intervals\n    const drift = 0.05; // 5% annual drift\n    const randomShock = (Math.random() - 0.5) * 2;\n\n    return (\n      basePrice *\n      Math.exp(\n        (drift - 0.5 * volatility * volatility) * dt + volatility * Math.sqrt(dt) * randomShock\n      )\n    );\n  }\n\n  private generateVolume(symbol: string): number {\n    const avgVolumes: Record<string, number> = {\n      AAPL: 50000000,\n      MSFT: 30000000,\n      GOOGL: 25000000,\n      TSLA: 80000000,\n      NVDA: 45000000,\n      META: 35000000,\n      AMZN: 40000000,\n      SPY: 100000000,\n      QQQ: 60000000,\n      IWM: 30000000,\n    };\n    const baseVolume = avgVolumes[symbol] || 10000000;\n    return Math.floor(baseVolume * (0.5 + Math.random()));\n  }\n\n  private calculateTechnicals(symbol: string) {\n    return {\n      rsi: 30 + Math.random() * 40,\n      macd: {\n        line: (Math.random() - 0.5) * 5,\n        signal: (Math.random() - 0.5) * 5,\n        histogram: (Math.random() - 0.5) * 2,\n      },\n      bollinger: {\n        upper: this.getBasePrice(symbol) * 1.02,\n        middle: this.getBasePrice(symbol),\n        lower: this.getBasePrice(symbol) * 0.98,\n      },\n      stochastic: {\n        k: Math.random() * 100,\n        d: Math.random() * 100,\n      },\n      williams: Math.random() * 100 - 50,\n      cci: (Math.random() - 0.5) * 200,\n      atr: this.getBasePrice(symbol) * 0.02,\n      adx: 20 + Math.random() * 60,\n      obv: Math.random() * 1000000,\n      vwap: this.getBasePrice(symbol) * (0.99 + Math.random() * 0.02),\n    };\n  }\n\n  private getFundamentals(symbol: string) {\n    return {\n      revenue: 50000000000 + Math.random() * 200000000000,\n      netIncome: 10000000000 + Math.random() * 50000000000,\n      totalAssets: 100000000000 + Math.random() * 300000000000,\n      totalDebt: 20000000000 + Math.random() * 100000000000,\n      freeCashFlow: 15000000000 + Math.random() * 40000000000,\n      roe: 0.1 + Math.random() * 0.3,\n      roa: 0.05 + Math.random() * 0.15,\n      debtToEquity: 0.2 + Math.random() * 0.8,\n      currentRatio: 1.0 + Math.random() * 2.0,\n      quickRatio: 0.8 + Math.random() * 1.5,\n      grossMargin: 0.3 + Math.random() * 0.4,\n      operatingMargin: 0.15 + Math.random() * 0.25,\n      netMargin: 0.1 + Math.random() * 0.2,\n    };\n  }\n\n  private getSentiment(symbol: string) {\n    return {\n      overall: 50 + Math.random() * 50,\n      bullish: 40 + Math.random() * 40,\n      bearish: 20 + Math.random() * 30,\n      neutral: 20 + Math.random() * 20,\n      socialMedia: 60 + Math.random() * 40,\n      news: 55 + Math.random() * 45,\n      analyst: 65 + Math.random() * 35,\n      insider: 50 + Math.random() * 50,\n      institutional: 70 + Math.random() * 30,\n    };\n  }\n\n  private getOptionsData(symbol: string) {\n    const price = this.getBasePrice(symbol);\n    return {\n      impliedVolatility: 0.2 + Math.random() * 0.4,\n      putCallRatio: 0.5 + Math.random() * 1.0,\n      maxPain: price * (0.98 + Math.random() * 0.04),\n      gamma: Math.random() * 0.1,\n      delta: 0.3 + Math.random() * 0.4,\n      theta: -Math.random() * 0.1,\n      vega: Math.random() * 0.3,\n      openInterest: Math.floor(Math.random() * 100000),\n      volume: Math.floor(Math.random() * 50000),\n      unusualActivity: Math.random() > 0.8,\n    };\n  }\n\n  private getNewsData(symbol: string) {\n    const newsItems = [\n      { headline: `${symbol} reports strong quarterly earnings`, sentiment: 0.8, impact: 'high' },\n      { headline: `Analysts upgrade ${symbol} price target`, sentiment: 0.7, impact: 'medium' },\n      { headline: `${symbol} announces new product launch`, sentiment: 0.6, impact: 'medium' },\n      { headline: `Market volatility affects ${symbol} trading`, sentiment: 0.3, impact: 'low' },\n      { headline: `${symbol} insider trading activity detected`, sentiment: 0.4, impact: 'medium' },\n    ];\n\n    return newsItems.slice(0, Math.floor(Math.random() * 3) + 1).map((item: any) => ({\n      ...item,\n      timestamp: Date.now() - Math.random() * 86400000,\n      source: ['Reuters', 'Bloomberg', 'CNBC', 'MarketWatch'][Math.floor(Math.random() * 4)],\n    }));\n  }\n\n  // Backtesting functionality with proper typing\n  async backtest(strategy: any, startDate: Date, endDate: Date, initialCapital: number) {\n    let winCount = 0;\n    let lossCount = 0;\n    let totalWinAmount = 0;\n    let totalLossAmount = 0;\n    let peakCapital = initialCapital;\n\n    const results = {\n      totalReturn: 0,\n      annualizedReturn: 0,\n      maxDrawdown: 0,\n      sharpeRatio: 0,\n      winRate: 0,\n      profitFactor: 0,\n      trades: [] as any[],\n      equity: [] as any[],\n      metrics: {},\n      dailyReturns: [] as any[],\n    };\n\n    const days = Math.floor((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    let capital = initialCapital;\n    let maxDrawdown = 0;\n\n    for (let i = 0; i < days; i++) {\n      const date = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);\n\n      if (Math.random() > 0.95) {\n        const tradeResult = this.simulateTrade(capital, strategy);\n        capital += tradeResult.pnl;\n\n        results.trades.push({\n          date,\n          ...tradeResult,\n          capital,\n        });\n\n        if (tradeResult.pnl > 0) {\n          winCount++;\n          totalWinAmount += tradeResult.pnl;\n        } else {\n          lossCount++;\n          totalLossAmount += Math.abs(tradeResult.pnl);\n        }\n      }\n\n      peakCapital = Math.max(peakCapital, capital);\n      const drawdown = (peakCapital - capital) / peakCapital;\n      if (drawdown > maxDrawdown) {\n        maxDrawdown = drawdown;\n      }\n\n      results.dailyReturns.push({\n        date,\n        capital,\n        drawdown,\n      });\n    }\n\n    results.totalReturn = (capital - initialCapital) / initialCapital;\n    results.annualizedReturn = Math.pow(1 + results.totalReturn, 365 / days) - 1;\n    results.maxDrawdown = maxDrawdown;\n    results.sharpeRatio = results.annualizedReturn / 0.15;\n    results.winRate = winCount / (winCount + lossCount) || 0;\n\n    return results;\n  }\n\n  private simulateTrade(capital: number, strategy: string): any {\n    const symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA'];\n    const symbol = symbols[Math.floor(Math.random() * symbols.length)];\n    const side = Math.random() > 0.5 ? 'BUY' : 'SELL';\n    const entryPrice = this.getCurrentPrice(symbol);\n    const shares = Math.floor((capital * 0.1) / entryPrice);\n    const exitPrice = entryPrice * (1 + (Math.random() - 0.5) * 0.1);\n    const pnl =\n      side === 'BUY' ? (exitPrice - entryPrice) * shares : (entryPrice - exitPrice) * shares;\n\n    return {\n      symbol,\n      side,\n      shares,\n      entryPrice,\n      exitPrice,\n      pnl,\n      returnPercent: pnl / (entryPrice * shares),\n      isWin: pnl > 0,\n      date: new Date(),\n    };\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/market-data-service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/quantum-computing-service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [312, 315], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [312, 315], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [371, 374], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [371, 374], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 7,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 7,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [427, 430], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [427, 430], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'constraints' is defined but never used.",
        "line": 125,
        "column": 59,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 70
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 125,
        "column": 72,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 125,
        "endColumn": 75,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3841, 3844], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3841, 3844], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 125,
        "column": 86,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 125,
        "endColumn": 89,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3855, 3858], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3855, 3858], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 152,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 152,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4899, 4902], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4899, 4902], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 152,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 152,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4913, 4916], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4913, 4916], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'marketData' is defined but never used.",
        "line": 181,
        "column": 38,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 181,
        "endColumn": 48
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 181,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 181,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6048, 6051], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6048, 6051], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 181,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 181,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6064, 6067], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6064, 6067], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'scenario' is defined but never used.",
        "line": 238,
        "column": 30,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 238,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 238,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 238,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7812, 7815], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7812, 7815], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 238,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 238,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7826, 7829], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7826, 7829], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'timeSteps' is assigned a value but never used.",
        "line": 246,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 246,
        "endColumn": 20
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'trainingData' is defined but never used.",
        "line": 267,
        "column": 33,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 267,
        "endColumn": 45
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 267,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 267,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8926, 8929], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8926, 8929], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 267,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 267,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8940, 8943], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8940, 8943], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 300,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 300,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10119, 10122], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10119, 10122], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 304,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 304,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10214, 10217], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10214, 10217], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 308,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 308,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10315, 10318], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10315, 10318], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 21,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Quantum Computing Integration Service for ultra-fast processing\nexport class QuantumComputingService {\n  private static instance: QuantumComputingService;\n  private quantumSimulation = true; // True when using simulation, false when connected to real quantum hardware\n  private quantumProcessors: Map<string, any> = new Map();\n  private quantumAlgorithms: Map<string, any> = new Map();\n  private quantumResults: Map<string, any> = new Map();\n  private quantumCapabilities: string[] = [\n    'portfolio_optimization',\n    'risk_analysis',\n    'pattern_recognition',\n    'monte_carlo_simulation',\n    'quantum_machine_learning',\n    'quantum_neural_networks',\n    'quantum_amplitude_estimation',\n  ];\n\n  static getInstance(): QuantumComputingService {\n    if (!QuantumComputingService.instance) {\n      QuantumComputingService.instance = new QuantumComputingService();\n    }\n    return QuantumComputingService.instance;\n  }\n\n  async initialize() {\n    console.log('Initializing Quantum Computing Service...');\n    await this.initializeQuantumProcessors();\n    await this.initializeQuantumAlgorithms();\n    console.log('Quantum Computing Service initialized');\n    return true;\n  }\n\n  private async initializeQuantumProcessors() {\n    // Initialize quantum processors (simulated or real)\n    const processors = [\n      {\n        name: 'qbit_optimizer',\n        qubits: 64,\n        errorRate: 0.0001,\n        coherenceTime: 1000, // microseconds\n        gateSpeed: 50, // nanoseconds\n        connectivity: 'all-to-all',\n        type: this.quantumSimulation ? 'simulation' : 'superconducting',\n      },\n      {\n        name: 'quantum_annealer',\n        qubits: 5000,\n        errorRate: 0.001,\n        coherenceTime: 500, // microseconds\n        gateSpeed: 100, // nanoseconds\n        connectivity: 'chimera',\n        type: this.quantumSimulation ? 'simulation' : 'annealing',\n      },\n      {\n        name: 'quantum_ml_accelerator',\n        qubits: 128,\n        errorRate: 0.0005,\n        coherenceTime: 2000, // microseconds\n        gateSpeed: 25, // nanoseconds\n        connectivity: 'all-to-all',\n        type: this.quantumSimulation ? 'simulation' : 'ion-trap',\n      },\n    ];\n\n    processors.forEach(processor => {\n      this.quantumProcessors.set(processor.name, processor);\n    });\n  }\n\n  private async initializeQuantumAlgorithms() {\n    // Initialize quantum algorithms\n    const algorithms = [\n      {\n        name: 'quantum_portfolio_optimization',\n        type: 'QAOA', // Quantum Approximate Optimization Algorithm\n        qubits: 50,\n        depth: 5,\n        accuracy: 0.98,\n        speedup: 'exponential',\n        processor: 'qbit_optimizer',\n      },\n      {\n        name: 'quantum_monte_carlo',\n        type: 'QAE', // Quantum Amplitude Estimation\n        qubits: 40,\n        depth: 10,\n        accuracy: 0.99,\n        speedup: 'quadratic',\n        processor: 'quantum_ml_accelerator',\n      },\n      {\n        name: 'quantum_neural_network',\n        type: 'VQC', // Variational Quantum Circuit\n        qubits: 32,\n        depth: 8,\n        accuracy: 0.95,\n        speedup: 'exponential',\n        processor: 'quantum_ml_accelerator',\n      },\n      {\n        name: 'quantum_risk_analysis',\n        type: 'QAA', // Quantum Annealing Algorithm\n        qubits: 2000,\n        depth: 1,\n        accuracy: 0.97,\n        speedup: 'polynomial',\n        processor: 'quantum_annealer',\n      },\n      {\n        name: 'quantum_pattern_recognition',\n        type: 'QSVM', // Quantum Support Vector Machine\n        qubits: 60,\n        depth: 6,\n        accuracy: 0.96,\n        speedup: 'exponential',\n        processor: 'qbit_optimizer',\n      },\n    ];\n\n    algorithms.forEach(algorithm => {\n      this.quantumAlgorithms.set(algorithm.name, algorithm);\n    });\n  }\n\n  async runQuantumPortfolioOptimization(assets: string[], constraints: any): Promise<any> {\n    console.log(`Running quantum portfolio optimization for ${assets.length} assets...`);\n    const algorithm = this.quantumAlgorithms.get('quantum_portfolio_optimization');\n\n    // Simulate quantum computation\n    await this.simulateQuantumComputation(algorithm.qubits, algorithm.depth);\n\n    // Generate optimized portfolio weights\n    const weights = assets.map(() => Math.random());\n    const sum = weights.reduce((a, b) => a + b, 0);\n    const normalizedWeights = weights.map(w => w / sum);\n\n    const result = {\n      assets,\n      weights: normalizedWeights,\n      expectedReturn: 0.15 + Math.random() * 0.1,\n      risk: 0.08 + Math.random() * 0.05,\n      sharpeRatio: 1.5 + Math.random() * 1.0,\n      diversificationScore: 0.8 + Math.random() * 0.2,\n      quantumAdvantage: 'Explored 2^50 portfolio combinations simultaneously',\n      executionTime: 50 + Math.random() * 20, // milliseconds\n    };\n\n    this.quantumResults.set(`portfolio_${Date.now()}`, result);\n    return result;\n  }\n\n  async runQuantumRiskAnalysis(portfolio: any): Promise<any> {\n    console.log('Running quantum risk analysis...');\n    const algorithm = this.quantumAlgorithms.get('quantum_risk_analysis');\n\n    // Simulate quantum computation\n    await this.simulateQuantumComputation(algorithm.qubits, algorithm.depth);\n\n    const result = {\n      varConfidenceIntervals: {\n        '95%': portfolio.risk * 1.65,\n        '99%': portfolio.risk * 2.33,\n        '99.9%': portfolio.risk * 3.1,\n      },\n      stressTestScenarios: [\n        { name: 'Market Crash', impact: -(10 + Math.random() * 15) },\n        { name: 'Interest Rate Spike', impact: -(5 + Math.random() * 10) },\n        { name: 'Volatility Surge', impact: -(8 + Math.random() * 12) },\n        { name: 'Liquidity Crisis', impact: -(12 + Math.random() * 18) },\n      ],\n      tailRiskExposure: 0.05 + Math.random() * 0.1,\n      correlationBreakdown: Math.random() > 0.7,\n      quantumAdvantage: 'Analyzed 2^2000 risk scenarios simultaneously',\n      executionTime: 80 + Math.random() * 30, // milliseconds\n    };\n\n    this.quantumResults.set(`risk_${Date.now()}`, result);\n    return result;\n  }\n\n  async runQuantumPatternRecognition(marketData: any[]): Promise<any> {\n    console.log('Running quantum pattern recognition...');\n    const algorithm = this.quantumAlgorithms.get('quantum_pattern_recognition');\n\n    // Simulate quantum computation\n    await this.simulateQuantumComputation(algorithm.qubits, algorithm.depth);\n\n    const patterns = [\n      {\n        name: 'Quantum Head and Shoulders',\n        confidence: 0.7 + Math.random() * 0.25,\n        timeframe: '2-4 weeks',\n      },\n      {\n        name: 'Quantum Double Bottom',\n        confidence: 0.75 + Math.random() * 0.2,\n        timeframe: '1-3 weeks',\n      },\n      {\n        name: 'Quantum Fibonacci Sequence',\n        confidence: 0.8 + Math.random() * 0.15,\n        timeframe: '3-6 weeks',\n      },\n      {\n        name: 'Quantum Elliott Wave',\n        confidence: 0.65 + Math.random() * 0.3,\n        timeframe: '4-8 weeks',\n      },\n    ];\n\n    const result = {\n      detectedPatterns: patterns.filter(() => Math.random() > 0.6),\n      hiddenCorrelations: [\n        {\n          assets: ['AAPL', 'TSLA'],\n          correlation: 0.7 + Math.random() * 0.3,\n          confidence: 0.85 + Math.random() * 0.15,\n        },\n        {\n          assets: ['BTC', 'NVDA'],\n          correlation: 0.6 + Math.random() * 0.3,\n          confidence: 0.8 + Math.random() * 0.15,\n        },\n      ],\n      anomalyDetection: {\n        anomalies: Math.random() > 0.7,\n        confidence: 0.9 + Math.random() * 0.1,\n        impact: Math.random() > 0.5 ? 'bullish' : 'bearish',\n      },\n      quantumAdvantage: 'Detected patterns across 2^60 dimensional feature space',\n      executionTime: 60 + Math.random() * 25, // milliseconds\n    };\n\n    this.quantumResults.set(`pattern_${Date.now()}`, result);\n    return result;\n  }\n\n  async runQuantumMonteCarlo(scenario: any): Promise<any> {\n    console.log('Running quantum Monte Carlo simulation...');\n    const algorithm = this.quantumAlgorithms.get('quantum_monte_carlo');\n\n    // Simulate quantum computation\n    await this.simulateQuantumComputation(algorithm.qubits, algorithm.depth);\n\n    const paths = 1000000; // Classical would be limited to thousands\n    const timeSteps = 252; // Daily for a year\n\n    const result = {\n      expectedReturn: 0.12 + Math.random() * 0.08,\n      volatility: 0.15 + Math.random() * 0.1,\n      var95: 0.08 + Math.random() * 0.05,\n      var99: 0.12 + Math.random() * 0.08,\n      expectedShortfall: 0.15 + Math.random() * 0.1,\n      confidenceBounds: {\n        upper95: 0.2 + Math.random() * 0.15,\n        lower95: -(0.05 + Math.random() * 0.1),\n      },\n      probabilityOfProfit: 0.65 + Math.random() * 0.2,\n      quantumAdvantage: `Simulated ${paths.toLocaleString()} paths in parallel`,\n      executionTime: 70 + Math.random() * 30, // milliseconds\n    };\n\n    this.quantumResults.set(`montecarlo_${Date.now()}`, result);\n    return result;\n  }\n\n  async runQuantumNeuralNetwork(trainingData: any): Promise<any> {\n    console.log('Running quantum neural network...');\n    const algorithm = this.quantumAlgorithms.get('quantum_neural_network');\n\n    // Simulate quantum computation\n    await this.simulateQuantumComputation(algorithm.qubits, algorithm.depth);\n\n    const result = {\n      accuracy: 0.92 + Math.random() * 0.07,\n      precision: 0.9 + Math.random() * 0.09,\n      recall: 0.88 + Math.random() * 0.11,\n      f1Score: 0.91 + Math.random() * 0.08,\n      predictionConfidence: 0.85 + Math.random() * 0.14,\n      quantumLayers: 8,\n      classicalLayers: 4,\n      hybridAdvantage: 'Exponential speedup in feature mapping',\n      executionTime: 90 + Math.random() * 40, // milliseconds\n    };\n\n    this.quantumResults.set(`neural_${Date.now()}`, result);\n    return result;\n  }\n\n  private async simulateQuantumComputation(qubits: number, depth: number): Promise<void> {\n    // Simulate the time it would take for a quantum computation\n    const simulatedTime = Math.min(100, qubits * depth * 0.1);\n    await new Promise(resolve => setTimeout(resolve, simulatedTime));\n  }\n\n  getQuantumCapabilities(): string[] {\n    return this.quantumCapabilities;\n  }\n\n  getQuantumProcessors(): any[] {\n    return Array.from(this.quantumProcessors.values());\n  }\n\n  getQuantumAlgorithms(): any[] {\n    return Array.from(this.quantumAlgorithms.values());\n  }\n\n  getRecentResults(limit = 10): any[] {\n    return Array.from(this.quantumResults.values()).slice(-limit);\n  }\n}\n\nexport const quantumComputingService = QuantumComputingService.getInstance();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/quantum-security-service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/reinforcement-learning-service.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [197, 200], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [197, 200], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [251, 254], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [251, 254], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 31,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [299, 302], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [299, 302], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 7,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 7,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [356, 359], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [356, 359], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 9,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 9,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [444, 447], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [444, 447], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 387,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 387,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10688, 10691], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10688, 10691], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 494,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 494,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13982, 13985], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13982, 13985], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'environment' is assigned a value but never used.",
        "line": 497,
        "column": 11,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 497,
        "endColumn": 22
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'marketData' is defined but never used.",
        "line": 513,
        "column": 45,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 513,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 513,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 513,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14789, 14792], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14789, 14792], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 513,
        "column": 71,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 513,
        "endColumn": 74,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14803, 14806], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14803, 14806], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 587,
        "column": 83,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 587,
        "endColumn": 86,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [17384, 17387], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [17384, 17387], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 665,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 665,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [19748, 19751], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [19748, 19751], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 683,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 683,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20296, 20299], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20296, 20299], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 687,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 687,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20375, 20378], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20375, 20378], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 691,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 691,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20454, 20457], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20454, 20457], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 695,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 695,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20541, 20544], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20541, 20544], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 699,
        "column": 35,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 699,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [20623, 20626], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [20623, 20626], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 18,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Reinforcement Learning Service for advanced trading strategies\nexport class ReinforcementLearningService {\n  private static instance: ReinforcementLearningService;\n  private models: Map<string, any> = new Map();\n  private environments: Map<string, any> = new Map();\n  private agents: Map<string, any> = new Map();\n  private trainingHistory: Map<string, any> = new Map();\n  private isTraining = false;\n  private trainingProgress: Map<string, any> = new Map();\n\n  static getInstance(): ReinforcementLearningService {\n    if (!ReinforcementLearningService.instance) {\n      ReinforcementLearningService.instance = new ReinforcementLearningService();\n    }\n    return ReinforcementLearningService.instance;\n  }\n\n  async initialize() {\n    console.log('Initializing Reinforcement Learning Service...');\n    await this.initializeModels();\n    await this.initializeEnvironments();\n    await this.initializeAgents();\n    console.log('Reinforcement Learning Service initialized');\n    return true;\n  }\n\n  private async initializeModels() {\n    // Initialize RL models\n    const models = [\n      {\n        id: 'dqn_trader',\n        name: 'Deep Q-Network Trader',\n        type: 'DQN',\n        architecture: 'CNN + LSTM + Dense',\n        stateSpace: 256,\n        actionSpace: 5, // Buy, Sell, Hold, Buy More, Sell More\n        learningRate: 0.001,\n        epsilon: 0.1,\n        gamma: 0.95,\n        batchSize: 32,\n        memorySize: 100000,\n        targetUpdateFreq: 1000,\n        performance: {\n          sharpeRatio: 2.8,\n          maxDrawdown: 0.12,\n          winRate: 0.67,\n          totalReturn: 0.45,\n        },\n      },\n      {\n        id: 'ppo_portfolio',\n        name: 'PPO Portfolio Manager',\n        type: 'PPO',\n        architecture: 'Actor-Critic with Attention',\n        stateSpace: 512,\n        actionSpace: 100, // Portfolio weights for 100 assets\n        learningRate: 0.0003,\n        clipRatio: 0.2,\n        valueCoeff: 0.5,\n        entropyCoeff: 0.01,\n        batchSize: 64,\n        performance: {\n          sharpeRatio: 3.2,\n          maxDrawdown: 0.08,\n          winRate: 0.72,\n          totalReturn: 0.52,\n        },\n      },\n      {\n        id: 'a3c_multiasset',\n        name: 'A3C Multi-Asset Trader',\n        type: 'A3C',\n        architecture: 'Asynchronous Actor-Critic',\n        stateSpace: 1024,\n        actionSpace: 15, // Multiple actions across asset classes\n        learningRate: 0.0001,\n        gamma: 0.99,\n        tau: 1.0,\n        beta: 0.01,\n        workers: 16,\n        performance: {\n          sharpeRatio: 3.5,\n          maxDrawdown: 0.06,\n          winRate: 0.75,\n          totalReturn: 0.58,\n        },\n      },\n      {\n        id: 'sac_options',\n        name: 'SAC Options Trader',\n        type: 'SAC',\n        architecture: 'Soft Actor-Critic',\n        stateSpace: 384,\n        actionSpace: 20, // Options strategies\n        learningRate: 0.0003,\n        alpha: 0.2,\n        tau: 0.005,\n        gamma: 0.99,\n        batchSize: 256,\n        performance: {\n          sharpeRatio: 4.1,\n          maxDrawdown: 0.15,\n          winRate: 0.69,\n          totalReturn: 0.72,\n        },\n      },\n      {\n        id: 'td3_crypto',\n        name: 'TD3 Crypto Trader',\n        type: 'TD3',\n        architecture: 'Twin Delayed DDPG',\n        stateSpace: 256,\n        actionSpace: 10, // Crypto trading actions\n        learningRate: 0.001,\n        tau: 0.005,\n        gamma: 0.99,\n        policyDelay: 2,\n        noiseClip: 0.5,\n        performance: {\n          sharpeRatio: 2.9,\n          maxDrawdown: 0.25,\n          winRate: 0.63,\n          totalReturn: 0.85,\n        },\n      },\n    ];\n\n    models.forEach(model => {\n      this.models.set(model.id, model);\n    });\n  }\n\n  private async initializeEnvironments() {\n    // Initialize trading environments\n    const environments = [\n      {\n        id: 'stock_trading_env',\n        name: 'Stock Trading Environment',\n        type: 'continuous',\n        assets: ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META', 'NFLX', 'AMD', 'CRM'],\n        features: [\n          'price',\n          'volume',\n          'rsi',\n          'macd',\n          'bollinger_bands',\n          'moving_averages',\n          'volatility',\n          'momentum',\n          'support_resistance',\n          'market_sentiment',\n        ],\n        rewardFunction: 'sharpe_ratio_based',\n        transactionCosts: 0.001,\n        slippage: 0.0005,\n        maxPosition: 1.0,\n        lookbackWindow: 60,\n        episodeLength: 252, // Trading days in a year\n      },\n      {\n        id: 'portfolio_env',\n        name: 'Portfolio Management Environment',\n        type: 'continuous',\n        assets: 100, // Top 100 stocks\n        features: [\n          'returns',\n          'volatility',\n          'correlation',\n          'beta',\n          'alpha',\n          'momentum',\n          'value_factors',\n          'quality_factors',\n          'size_factors',\n          'profitability',\n        ],\n        rewardFunction: 'risk_adjusted_return',\n        transactionCosts: 0.002,\n        slippage: 0.001,\n        maxPosition: 0.1, // Max 10% in any single asset\n        lookbackWindow: 120,\n        episodeLength: 504, // 2 years\n      },\n      {\n        id: 'options_env',\n        name: 'Options Trading Environment',\n        type: 'discrete',\n        underlyings: ['SPY', 'QQQ', 'IWM', 'AAPL', 'TSLA', 'NVDA', 'AMZN'],\n        strategies: [\n          'long_call',\n          'long_put',\n          'covered_call',\n          'protective_put',\n          'straddle',\n          'strangle',\n          'iron_condor',\n          'butterfly',\n          'calendar_spread',\n        ],\n        features: [\n          'underlying_price',\n          'strike',\n          'expiry',\n          'iv',\n          'delta',\n          'gamma',\n          'theta',\n          'vega',\n          'rho',\n          'volume',\n          'open_interest',\n        ],\n        rewardFunction: 'profit_loss_ratio',\n        transactionCosts: 0.65, // Per contract\n        maxContracts: 100,\n        lookbackWindow: 30,\n        episodeLength: 63, // Quarter\n      },\n      {\n        id: 'crypto_env',\n        name: 'Cryptocurrency Trading Environment',\n        type: 'continuous',\n        assets: ['BTC', 'ETH', 'BNB', 'ADA', 'SOL', 'XRP', 'DOT', 'DOGE', 'AVAX', 'MATIC'],\n        features: [\n          'price',\n          'volume',\n          'market_cap',\n          'social_sentiment',\n          'on_chain_metrics',\n          'technical_indicators',\n          'funding_rates',\n          'perpetual_basis',\n          'fear_greed_index',\n        ],\n        rewardFunction: 'calmar_ratio',\n        transactionCosts: 0.001,\n        slippage: 0.002,\n        maxPosition: 1.0,\n        lookbackWindow: 168, // 1 week in hours\n        episodeLength: 8760, // 1 year in hours\n      },\n      {\n        id: 'forex_env',\n        name: 'Forex Trading Environment',\n        type: 'continuous',\n        pairs: ['EURUSD', 'GBPUSD', 'USDJPY', 'USDCHF', 'AUDUSD', 'USDCAD', 'NZDUSD'],\n        features: [\n          'price',\n          'spread',\n          'volume',\n          'volatility',\n          'carry',\n          'momentum',\n          'mean_reversion',\n          'economic_indicators',\n          'central_bank_policy',\n        ],\n        rewardFunction: 'sortino_ratio',\n        transactionCosts: 0.0001, // 1 pip\n        slippage: 0.00005,\n        maxPosition: 10.0, // 10x leverage\n        lookbackWindow: 720, // 30 days in hours\n        episodeLength: 8760, // 1 year in hours\n      },\n    ];\n\n    environments.forEach(env => {\n      this.environments.set(env.id, env);\n    });\n  }\n\n  private async initializeAgents() {\n    // Initialize RL agents\n    const agents = [\n      {\n        id: 'alpha_trader',\n        name: 'Alpha Trader Agent',\n        model: 'dqn_trader',\n        environment: 'stock_trading_env',\n        status: 'trained',\n        trainingEpisodes: 10000,\n        currentEpisode: 10000,\n        bestReward: 2.85,\n        averageReward: 1.92,\n        explorationRate: 0.05,\n        lastUpdated: new Date(),\n        performance: {\n          backtestPeriod: '2020-2023',\n          totalReturn: 0.45,\n          sharpeRatio: 2.8,\n          maxDrawdown: 0.12,\n          winRate: 0.67,\n          profitFactor: 1.85,\n        },\n      },\n      {\n        id: 'portfolio_master',\n        name: 'Portfolio Master Agent',\n        model: 'ppo_portfolio',\n        environment: 'portfolio_env',\n        status: 'training',\n        trainingEpisodes: 5000,\n        currentEpisode: 3200,\n        bestReward: 3.45,\n        averageReward: 2.18,\n        explorationRate: 0.1,\n        lastUpdated: new Date(),\n        performance: {\n          backtestPeriod: '2019-2023',\n          totalReturn: 0.52,\n          sharpeRatio: 3.2,\n          maxDrawdown: 0.08,\n          winRate: 0.72,\n          profitFactor: 2.15,\n        },\n      },\n      {\n        id: 'multi_asset_pro',\n        name: 'Multi-Asset Pro Agent',\n        model: 'a3c_multiasset',\n        environment: 'stock_trading_env',\n        status: 'trained',\n        trainingEpisodes: 15000,\n        currentEpisode: 15000,\n        bestReward: 4.12,\n        averageReward: 2.87,\n        explorationRate: 0.02,\n        lastUpdated: new Date(),\n        performance: {\n          backtestPeriod: '2018-2023',\n          totalReturn: 0.58,\n          sharpeRatio: 3.5,\n          maxDrawdown: 0.06,\n          winRate: 0.75,\n          profitFactor: 2.45,\n        },\n      },\n      {\n        id: 'options_wizard',\n        name: 'Options Wizard Agent',\n        model: 'sac_options',\n        environment: 'options_env',\n        status: 'training',\n        trainingEpisodes: 8000,\n        currentEpisode: 5500,\n        bestReward: 5.23,\n        averageReward: 3.41,\n        explorationRate: 0.15,\n        lastUpdated: new Date(),\n        performance: {\n          backtestPeriod: '2020-2023',\n          totalReturn: 0.72,\n          sharpeRatio: 4.1,\n          maxDrawdown: 0.15,\n          winRate: 0.69,\n          profitFactor: 2.85,\n        },\n      },\n      {\n        id: 'crypto_alpha',\n        name: 'Crypto Alpha Agent',\n        model: 'td3_crypto',\n        environment: 'crypto_env',\n        status: 'trained',\n        trainingEpisodes: 12000,\n        currentEpisode: 12000,\n        bestReward: 3.78,\n        averageReward: 2.34,\n        explorationRate: 0.08,\n        lastUpdated: new Date(),\n        performance: {\n          backtestPeriod: '2021-2023',\n          totalReturn: 0.85,\n          sharpeRatio: 2.9,\n          maxDrawdown: 0.25,\n          winRate: 0.63,\n          profitFactor: 1.95,\n        },\n      },\n    ];\n\n    agents.forEach(agent => {\n      this.agents.set(agent.id, agent);\n    });\n  }\n\n  async startTraining(agentId: string, episodes = 1000): Promise<any> {\n    if (this.isTraining) {\n      throw new Error('Training is already in progress');\n    }\n\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    this.isTraining = true;\n    agent.status = 'training';\n\n    console.log(`Starting training for agent ${agent.name}...`);\n\n    // Initialize training progress\n    this.trainingProgress.set(agentId, {\n      startTime: new Date(),\n      targetEpisodes: episodes,\n      currentEpisode: 0,\n      bestReward: agent.bestReward,\n      recentRewards: [],\n      averageReward: agent.averageReward,\n      explorationRate: agent.explorationRate,\n      losses: [],\n      convergence: false,\n    });\n\n    // Simulate training process\n    await this.simulateTraining(agentId, episodes);\n\n    this.isTraining = false;\n    agent.status = 'trained';\n\n    return {\n      agentId,\n      success: true,\n      finalEpisode: episodes,\n      finalReward: this.trainingProgress.get(agentId).bestReward,\n      trainingTime: Date.now() - this.trainingProgress.get(agentId).startTime.getTime(),\n    };\n  }\n\n  private async simulateTraining(agentId: string, episodes: number): Promise<void> {\n    const progress = this.trainingProgress.get(agentId);\n    const agent = this.agents.get(agentId);\n\n    for (let episode = 1; episode <= episodes; episode++) {\n      // Simulate episode training\n      const reward = this.simulateEpisode(agent, episode);\n\n      // Update progress\n      progress.currentEpisode = episode;\n      progress.recentRewards.push(reward);\n      if (progress.recentRewards.length > 100) {\n        progress.recentRewards.shift();\n      }\n\n      // Update best reward\n      if (reward > progress.bestReward) {\n        progress.bestReward = reward;\n      }\n\n      // Update average reward\n      progress.averageReward =\n        progress.recentRewards.reduce((a: number, b: number) => a + b, 0) /\n        progress.recentRewards.length;\n\n      // Update exploration rate (epsilon decay)\n      progress.explorationRate = Math.max(0.01, progress.explorationRate * 0.9995);\n\n      // Simulate loss\n      const loss = Math.random() * 0.1 + 0.01;\n      progress.losses.push(loss);\n      if (progress.losses.length > 100) {\n        progress.losses.shift();\n      }\n\n      // Check for convergence\n      if (episode > 500 && progress.recentRewards.length >= 100) {\n        const recentAvg =\n          progress.recentRewards.slice(-50).reduce((a: number, b: number) => a + b, 0) / 50;\n        const olderAvg =\n          progress.recentRewards.slice(-100, -50).reduce((a: number, b: number) => a + b, 0) / 50;\n        if (Math.abs(recentAvg - olderAvg) < 0.01) {\n          progress.convergence = true;\n        }\n      }\n\n      // Update agent\n      agent.currentEpisode = episode;\n      agent.bestReward = progress.bestReward;\n      agent.averageReward = progress.averageReward;\n      agent.explorationRate = progress.explorationRate;\n      agent.lastUpdated = new Date();\n\n      // Simulate training delay\n      await new Promise(resolve => setTimeout(resolve, 10));\n\n      // Break if converged early\n      if (progress.convergence && episode > 1000) {\n        console.log(`Training converged early at episode ${episode}`);\n        break;\n      }\n    }\n  }\n\n  private simulateEpisode(agent: any, episode: number): number {\n    // Simulate a training episode and return reward\n    const model = this.models.get(agent.model);\n    const environment = this.environments.get(agent.environment);\n\n    // Base reward with some randomness and improvement over time\n    const baseReward = model.performance.sharpeRatio * (0.8 + Math.random() * 0.4);\n\n    // Improvement over time (learning curve)\n    const learningProgress = Math.min(episode / 5000, 1.0);\n    const improvementFactor = 0.5 + 0.5 * learningProgress;\n\n    // Add some noise and occasional spikes/dips\n    const noise = (Math.random() - 0.5) * 0.5;\n    const spike = Math.random() > 0.95 ? (Math.random() - 0.5) * 2 : 0;\n\n    return baseReward * improvementFactor + noise + spike;\n  }\n\n  async getAgentPrediction(agentId: string, marketData: any): Promise<any> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    if (agent.status !== 'trained') {\n      throw new Error(`Agent ${agentId} is not trained yet`);\n    }\n\n    // Simulate agent prediction\n    const model = this.models.get(agent.model);\n    const environment = this.environments.get(agent.environment);\n\n    // Generate prediction based on agent type\n    let prediction;\n\n    if (model.type === 'DQN') {\n      // Discrete actions\n      const actions = ['STRONG_BUY', 'BUY', 'HOLD', 'SELL', 'STRONG_SELL'];\n      const actionProbs = [0.15, 0.25, 0.3, 0.2, 0.1].map(p => p * (0.8 + Math.random() * 0.4));\n      const maxIndex = actionProbs.indexOf(Math.max(...actionProbs));\n\n      prediction = {\n        action: actions[maxIndex],\n        confidence: actionProbs[maxIndex],\n        actionProbabilities: actions.reduce(\n          (acc: Record<string, number>, action: string, i: number) => {\n            acc[action] = actionProbs[i];\n            return acc;\n          },\n          {} as Record<string, number>\n        ),\n        qValues: actionProbs.map(p => p * 10),\n      };\n    } else if (model.type === 'PPO' || model.type === 'A3C') {\n      // Portfolio weights or continuous actions\n      const numAssets = environment.assets?.length || 10;\n      const weights = Array.from({ length: numAssets }, () => Math.random());\n      const sum = weights.reduce((a, b) => a + b, 0);\n      const normalizedWeights = weights.map(w => w / sum);\n\n      prediction = {\n        portfolioWeights: normalizedWeights,\n        expectedReturn: 0.08 + Math.random() * 0.12,\n        expectedVolatility: 0.12 + Math.random() * 0.08,\n        confidence: 0.7 + Math.random() * 0.25,\n        rebalanceSignal: Math.random() > 0.7,\n      };\n    } else if (model.type === 'SAC' || model.type === 'TD3') {\n      // Continuous actions\n      const action = (Math.random() - 0.5) * 2; // -1 to 1\n      const position = Math.tanh(action); // Squash to valid range\n\n      prediction = {\n        position,\n        confidence: 0.6 + Math.random() * 0.3,\n        expectedReturn: position * (0.05 + Math.random() * 0.1),\n        riskScore: Math.abs(position) * (0.1 + Math.random() * 0.1),\n        actionValue: action,\n      };\n    }\n\n    return {\n      agentId,\n      agentName: agent.name,\n      timestamp: new Date(),\n      prediction,\n      modelType: model.type,\n      environment: environment.name,\n      performance: agent.performance,\n    };\n  }\n\n  async runBacktest(agentId: string, startDate: string, endDate: string): Promise<any> {\n    const agent = this.agents.get(agentId);\n    if (!agent) {\n      throw new Error(`Agent ${agentId} not found`);\n    }\n\n    console.log(`Running backtest for agent ${agent.name} from ${startDate} to ${endDate}...`);\n\n    // Simulate backtest results\n    const tradingDays = 252; // Approximate trading days per year\n    const returns = [];\n    let cumulativeReturn = 0;\n    let maxDrawdown = 0;\n    let currentDrawdown = 0;\n    let wins = 0;\n    let losses = 0;\n\n    // Generate daily returns\n    for (let i = 0; i < tradingDays; i++) {\n      const dailyReturn = (Math.random() - 0.45) * 0.03; // Slightly positive bias\n      returns.push(dailyReturn);\n      cumulativeReturn += dailyReturn;\n\n      // Calculate drawdown\n      if (cumulativeReturn < 0) {\n        currentDrawdown = Math.abs(cumulativeReturn);\n        maxDrawdown = Math.max(maxDrawdown, currentDrawdown);\n      } else {\n        currentDrawdown = 0;\n      }\n\n      // Count wins/losses\n      if (dailyReturn > 0) wins++;\n      else if (dailyReturn < 0) losses++;\n    }\n\n    const totalReturn = cumulativeReturn;\n    const volatility =\n      Math.sqrt(returns.reduce((sum, r) => sum + r * r, 0) / returns.length) * Math.sqrt(252);\n    const sharpeRatio = totalReturn / volatility;\n    const winRate = wins / (wins + losses);\n    const profitFactor = wins > 0 && losses > 0 ? (wins * 0.01) / (losses * 0.01) : 1.0;\n\n    const backtest = {\n      agentId,\n      agentName: agent.name,\n      period: { startDate, endDate },\n      results: {\n        totalReturn,\n        annualizedReturn: totalReturn,\n        volatility,\n        sharpeRatio,\n        maxDrawdown,\n        winRate,\n        profitFactor,\n        totalTrades: wins + losses,\n        winningTrades: wins,\n        losingTrades: losses,\n        averageWin: 0.012,\n        averageLoss: -0.008,\n        largestWin: 0.045,\n        largestLoss: -0.032,\n      },\n      dailyReturns: returns,\n      equityCurve: returns.reduce((acc: number[], ret: number, i: number) => {\n        const prevValue = i === 0 ? 100000 : acc[i - 1];\n        acc.push(prevValue * (1 + ret));\n        return acc;\n      }, [] as number[]),\n      timestamp: new Date(),\n    };\n\n    // Store backtest results\n    this.trainingHistory.set(`backtest_${agentId}_${Date.now()}`, backtest);\n\n    return backtest;\n  }\n\n  async getTrainingProgress(agentId: string): Promise<any> {\n    const progress = this.trainingProgress.get(agentId);\n    if (!progress) {\n      return null;\n    }\n\n    return {\n      ...progress,\n      elapsedTime: Date.now() - progress.startTime.getTime(),\n      progressPercent: (progress.currentEpisode / progress.targetEpisodes) * 100,\n      estimatedTimeRemaining:\n        progress.currentEpisode > 0\n          ? ((Date.now() - progress.startTime.getTime()) / progress.currentEpisode) *\n            (progress.targetEpisodes - progress.currentEpisode)\n          : null,\n    };\n  }\n\n  getModels(): any[] {\n    return Array.from(this.models.values());\n  }\n\n  getEnvironments(): any[] {\n    return Array.from(this.environments.values());\n  }\n\n  getAgents(): any[] {\n    return Array.from(this.agents.values());\n  }\n\n  getAgent(agentId: string): any {\n    return this.agents.get(agentId);\n  }\n\n  getTrainingHistory(limit = 10): any[] {\n    return Array.from(this.trainingHistory.values()).slice(-limit);\n  }\n\n  isCurrentlyTraining(): boolean {\n    return this.isTraining;\n  }\n}\n\nexport const reinforcementLearningService = ReinforcementLearningService.getInstance();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/trading-education-service-new.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [216, 219], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [216, 219], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [272, 275], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [272, 275], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 6,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 6,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [328, 331], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [328, 331], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 93,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 93,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2799, 2802], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2799, 2802], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 116,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 116,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3526, 3529], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3526, 3529], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_targetExam' is defined but never used.",
        "line": 116,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 116,
        "endColumn": 55
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 120,
        "column": 64,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 120,
        "endColumn": 67,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3739, 3742], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3739, 3742], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 129,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 129,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3935, 3938], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3935, 3938], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_weakAreas' is defined but never used.",
        "line": 138,
        "column": 28,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 138,
        "endColumn": 38
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_targetExam' is defined but never used.",
        "line": 138,
        "column": 50,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 138,
        "endColumn": 61
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_targetExam' is defined but never used.",
        "line": 148,
        "column": 34,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 148,
        "endColumn": 45
      }
    ],
    "suppressedMessages": [],
    "errorCount": 11,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Comprehensive Trading Education Service - Series 6 & 7 Test Prep\nexport class TradingEducationService {\n  private static instance: TradingEducationService;\n  private educationalContent: Map<string, Record<string, any>> = new Map();\n  private testQuestions: Map<string, any[]> = new Map();\n  private userProgress: Map<string, any> = new Map();\n\n  static getInstance(): TradingEducationService {\n    if (!TradingEducationService.instance) {\n      TradingEducationService.instance = new TradingEducationService();\n    }\n    return TradingEducationService.instance;\n  }\n\n  async initialize() {\n    this.loadTestQuestions();\n  }\n\n  private loadTestQuestions() {\n    const series6Questions = [\n      {\n        id: 's6_q1',\n        question: 'Which of the following is NOT a characteristic of mutual funds?',\n        options: [\n          'Professional management',\n          'Daily liquidity',\n          'Guaranteed returns',\n          'Diversification',\n        ],\n        correct: 2,\n        explanation: 'Mutual funds do not guarantee returns.',\n      },\n    ];\n\n    const series7Questions = [\n      {\n        id: 's7_q1',\n        question:\n          'If XYZ stock is trading at $50 and has a P/E ratio of 20, what are the earnings per share?',\n        options: ['$1.00', '$2.50', '$4.00', '$10.00'],\n        correct: 1,\n        explanation: 'EPS = Stock Price / P/E Ratio = $50 / 20 = $2.50',\n      },\n    ];\n\n    this.testQuestions.set('series_6', series6Questions);\n    this.testQuestions.set('series_7', series7Questions);\n  }\n\n  getEducationalContent(series: string, topic?: string) {\n    const content = this.educationalContent.get(series);\n    if (topic && content) {\n      return content[topic] || null;\n    }\n    return content;\n  }\n\n  getTestQuestions(series: string, count = 10) {\n    const questions = this.testQuestions.get(series) || [];\n    return questions.slice(0, count);\n  }\n\n  submitTestAnswer(userId: string, questionId: string, answer: number) {\n    if (!this.userProgress.has(userId)) {\n      this.userProgress.set(userId, { correct: 0, total: 0, questions: [] });\n    }\n\n    const progress = this.userProgress.get(userId);\n    const question = this.findQuestionById(questionId);\n\n    if (question) {\n      const isCorrect = answer === question.correct;\n      progress.total++;\n      if (isCorrect) progress.correct++;\n\n      progress.questions.push({\n        questionId,\n        answer,\n        correct: isCorrect,\n        timestamp: new Date(),\n      });\n    }\n\n    return {\n      correct: question?.correct === answer,\n      explanation: question?.explanation,\n      score: (progress.correct / progress.total) * 100,\n    };\n  }\n\n  private findQuestionById(questionId: string) {\n    for (const [, questions] of this.testQuestions) {\n      const question = questions.find((q: any) => q.id === questionId);\n      if (question) return question;\n    }\n    return null;\n  }\n\n  getUserProgress(userId: string) {\n    return this.userProgress.get(userId) || { correct: 0, total: 0, questions: [] };\n  }\n\n  generateStudyPlan(userId: string, targetExam: string) {\n    const progress = this.getUserProgress(userId);\n    const weakAreas = this.identifyWeakAreas(progress, targetExam);\n\n    return {\n      targetExam,\n      estimatedStudyTime: this.calculateStudyTime(progress, targetExam),\n      weeklyPlan: this.createWeeklyPlan(weakAreas, targetExam),\n      practiceTests: this.recommendPracticeTests(targetExam),\n      keyTopics: this.getKeyTopics(targetExam),\n    };\n  }\n\n  private identifyWeakAreas(progress: any, _targetExam: string): string[] {\n    const weakAreas: string[] = [];\n\n    if (progress && progress.questions && progress.questions.length > 0) {\n      const incorrectQuestions = progress.questions.filter((q: any) => !q.correct);\n      if (incorrectQuestions.length > 0) {\n        weakAreas.push('Review incorrect topics');\n      }\n    }\n\n    return weakAreas;\n  }\n\n  private calculateStudyTime(progress: any, targetExam: string) {\n    const baseHours = targetExam === 'series_7' ? 80 : 40;\n    const currentScore = progress.total > 0 ? (progress.correct / progress.total) * 100 : 0;\n\n    if (currentScore >= 80) return Math.max(baseHours * 0.5, 20);\n    if (currentScore >= 60) return baseHours * 0.75;\n    return baseHours;\n  }\n\n  private createWeeklyPlan(_weakAreas: string[], _targetExam: string) {\n    return [\n      { week: 1, topics: ['Securities Basics', 'Market Structure'], hours: 10 },\n      { week: 2, topics: ['Equity Securities', 'Debt Securities'], hours: 12 },\n      { week: 3, topics: ['Options', 'Investment Companies'], hours: 12 },\n      { week: 4, topics: ['Regulations', 'Ethics'], hours: 10 },\n      { week: 5, topics: ['Practice Tests', 'Review'], hours: 8 },\n    ];\n  }\n\n  private recommendPracticeTests(_targetExam: string) {\n    return [\n      { name: 'Diagnostic Test', questions: 50, timeLimit: 90 },\n      { name: 'Mid-term Practice', questions: 100, timeLimit: 180 },\n      { name: 'Final Practice', questions: 125, timeLimit: 225 },\n      { name: 'Simulated Exam', questions: 125, timeLimit: 225 },\n    ];\n  }\n\n  private getKeyTopics(targetExam: string): string[] {\n    const topics: Record<string, string[]> = {\n      series_6: [\n        'Investment Company Products (50%)',\n        'Securities and Tax Regulations (25%)',\n        'Customer Accounts and Prohibited Activities (25%)',\n      ],\n      series_7: [\n        'Seeks Business for the Broker-Dealer (9%)',\n        \"Opens Accounts After Obtaining and Evaluating Customers' Financial Profile (11%)\",\n        'Provides Customers with Information About Investments (31%)',\n        \"Obtains and Verifies Customers' Purchase and Sales Instructions (16%)\",\n        'Processes Transactions (4%)',\n        'Maintains Customer Accounts (29%)',\n      ],\n    };\n\n    return topics[targetExam] || [];\n  }\n}\n\nexport const tradingEducationService = TradingEducationService.getInstance();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/trading-education-service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/services/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/subscribe/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/subscription/page.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/types/data-aggregation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/app/viewport.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/bulk-fix-typescript.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 3,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 3,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 4,
        "column": 14,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 4,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\nfunction processFile(filePath) {\n  try {\n    let content = fs.readFileSync(filePath, 'utf8');\n    let modified = false;\n\n    // Fix malformed imports\n    const originalContent = content;\n\n    // Fix ntent imports\n    content = content.replace(\n      /import { ntent,([^}]+) } from '@\\/components\\/ui\\/card';/g,\n      \"import { Card, CardContent,$1 } from '@/components/ui/card';\"\n    );\n\n    // Remove duplicate Card imports from button\n    content = content.replace(/import { Card } from '@\\/components\\/ui\\/button';\\s*/g, '');\n\n    // Fix CardCoCard typos\n    content = content.replace(/CardCoCard/g, 'CardContent');\n\n    // Fix basic parameter types\n    content = content.replace(/= ([a-zA-Z]+) => \\{/g, '= ($1: any) => {');\n    content = content.replace(/\\.map\\(([a-zA-Z]+) =>/g, '.map(($1: any) =>');\n    content = content.replace(\n      /\\.map\\(([a-zA-Z]+), ([a-zA-Z]+) =>/g,\n      '.map(($1: any, $2: number) =>'\n    );\n\n    // Fix useState with any types\n    content = content.replace(/useState\\(\\[\\]\\)/g, 'useState<any[]>([])');\n    content = content.replace(/useState\\(\\{\\}\\)/g, 'useState<Record<string, any>>({})');\n\n    if (content !== originalContent) {\n      fs.writeFileSync(filePath, content);\n      console.log(`Fixed: ${path.relative(process.cwd(), filePath)}`);\n      modified = true;\n    }\n\n    return modified;\n  } catch (error) {\n    console.error(`Error processing ${filePath}:`, error.message);\n    return false;\n  }\n}\n\nfunction findFiles(dir, extensions = ['.tsx', '.ts']) {\n  const files = [];\n\n  function traverse(currentDir) {\n    try {\n      const items = fs.readdirSync(currentDir);\n\n      for (const item of items) {\n        const fullPath = path.join(currentDir, item);\n        const stat = fs.statSync(fullPath);\n\n        if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {\n          traverse(fullPath);\n        } else if (extensions.some(ext => item.endsWith(ext))) {\n          files.push(fullPath);\n        }\n      }\n    } catch (error) {\n      // Skip directories we can't read\n    }\n  }\n\n  traverse(dir);\n  return files;\n}\n\n// Process all TypeScript files\nconst appDir = path.join(process.cwd(), 'app');\nconst files = findFiles(appDir);\n\nlet fixedCount = 0;\nlet totalFiles = 0;\n\nconsole.log(`Processing ${files.length} TypeScript files...`);\n\nfiles.forEach(file => {\n  totalFiles++;\n  if (processFile(file)) {\n    fixedCount++;\n  }\n});\n\nconsole.log(`\\nProcessed ${totalFiles} files, applied fixes to ${fixedCount} files.`);\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/theme-provider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/alert.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/avatar.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/badge.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/button.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/calendar.tsx",
    "messages": [
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'orientation' is missing in props validation",
        "line": 49,
        "column": 21,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 49,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "'use client';\n\nimport * as React from 'react';\nimport { DayPicker } from 'react-day-picker';\n\nimport { cn } from '@/lib/utils';\nimport { buttonVariants } from '@/components/ui/button';\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn('p-3', className)}\n      classNames={{\n        months: 'flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0',\n        month: 'space-y-4',\n        caption: 'flex justify-center pt-1 relative items-center',\n        caption_label: 'text-sm font-medium',\n        nav: 'space-x-1 flex items-center',\n        nav_button: cn(\n          buttonVariants({ variant: 'outline' }),\n          'h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100'\n        ),\n        nav_button_previous: 'absolute left-1',\n        nav_button_next: 'absolute right-1',\n        table: 'w-full border-collapse space-y-1',\n        head_row: 'flex',\n        head_cell: 'text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]',\n        row: 'flex w-full mt-2',\n        cell: 'h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20',\n        day: cn(\n          buttonVariants({ variant: 'ghost' }),\n          'h-9 w-9 p-0 font-normal aria-selected:opacity-100'\n        ),\n        day_range_end: 'day-range-end',\n        day_selected:\n          'bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground',\n        day_today: 'bg-accent text-accent-foreground',\n        day_outside:\n          'day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30',\n        day_disabled: 'text-muted-foreground opacity-50',\n        day_range_middle: 'aria-selected:bg-accent aria-selected:text-accent-foreground',\n        day_hidden: 'invisible',\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ orientation }) =>\n          orientation === 'left' ? (\n            <span className=\"h-4 w-4\">‹</span>\n          ) : (\n            <span className=\"h-4 w-4\">›</span>\n          ),\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = 'Calendar';\n\nexport { Calendar };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/card.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/checkbox.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/dialog.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/input.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/label.tsx",
    "messages": [
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'className' is missing in props validation",
        "line": 5,
        "column": 6,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 5,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from 'react';\nimport { cn } from '@/lib/utils';\n\nconst Label = React.forwardRef<HTMLLabelElement, React.LabelHTMLAttributes<HTMLLabelElement>>(\n  ({ className, ...props }, ref) => (\n    <label\n      ref={ref}\n      className={cn(\n        'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n        className\n      )}\n      {...props}\n    />\n  )\n);\nLabel.displayName = 'Label';\n\nexport { Label };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/popover.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/progress.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/select.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/slider.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/switch.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/tabs.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/components/ui/textarea.tsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/fix-card-imports-batch.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 3,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 3,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 4,
        "column": 14,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 4,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Function to search for TypeScript files\nfunction findTsxFiles(dir, fileList = []) {\n  const files = fs.readdirSync(dir);\n\n  files.forEach(file => {\n    const filePath = path.join(dir, file);\n    const stat = fs.statSync(filePath);\n\n    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {\n      findTsxFiles(filePath, fileList);\n    } else if (file.endsWith('.tsx')) {\n      fileList.push(filePath);\n    }\n  });\n\n  return fileList;\n}\n\n// Function to fix Card imports in a file\nfunction fixCardImports(filePath) {\n  try {\n    let content = fs.readFileSync(filePath, 'utf8');\n    let modified = false;\n\n    // Check if file uses Card components but doesn't import them\n    const usesCard =\n      /\\bCard\\b/.test(content) ||\n      /\\bCardContent\\b/.test(content) ||\n      /\\bCardHeader\\b/.test(content) ||\n      /\\bCardTitle\\b/.test(content);\n    const hasCardImport = /import.*Card.*from.*@\\/components\\/ui\\/card/.test(content);\n\n    if (usesCard && !hasCardImport) {\n      // Find the line with other UI imports\n      const buttonImportMatch = content.match(\n        /import.*Button.*from.*@\\/components\\/ui\\/button.*;\\n/\n      );\n      const badgeImportMatch = content.match(/import.*Badge.*from.*@\\/components\\/ui\\/badge.*;\\n/);\n      const progressImportMatch = content.match(\n        /import.*Progress.*from.*@\\/components\\/ui\\/progress.*;\\n/\n      );\n\n      let insertAfter = null;\n      if (buttonImportMatch) {\n        insertAfter = buttonImportMatch[0];\n      } else if (badgeImportMatch) {\n        insertAfter = badgeImportMatch[0];\n      } else if (progressImportMatch) {\n        insertAfter = progressImportMatch[0];\n      }\n\n      if (insertAfter) {\n        // Determine which Card components are used\n        const cardComponents = [];\n        if (/\\bCard\\b/.test(content)) cardComponents.push('Card');\n        if (/\\bCardContent\\b/.test(content)) cardComponents.push('CardContent');\n        if (/\\bCardHeader\\b/.test(content)) cardComponents.push('CardHeader');\n        if (/\\bCardTitle\\b/.test(content)) cardComponents.push('CardTitle');\n        if (/\\bCardDescription\\b/.test(content)) cardComponents.push('CardDescription');\n\n        const cardImport = `import { ${cardComponents.join(', ')} } from '@/components/ui/card';\\n`;\n        content = content.replace(insertAfter, insertAfter + cardImport);\n        modified = true;\n      }\n    }\n\n    // Fix Badge variant prop issues\n    if (/variant=\"outline\"/.test(content)) {\n      // For now, just remove the variant prop as it's causing issues\n      content = content.replace(/variant=\"outline\"\\s*/g, '');\n      modified = true;\n    }\n\n    if (modified) {\n      fs.writeFileSync(filePath, content);\n      console.log(`✅ Fixed: ${filePath}`);\n      return true;\n    }\n\n    return false;\n  } catch (error) {\n    console.error(`❌ Error processing ${filePath}:`, error.message);\n    return false;\n  }\n}\n\n// Main execution\nfunction main() {\n  const projectRoot = process.cwd();\n  const appDir = path.join(projectRoot, 'app');\n\n  if (!fs.existsSync(appDir)) {\n    console.error('❌ app directory not found');\n    process.exit(1);\n  }\n\n  console.log('🔍 Finding TypeScript files...');\n  const tsxFiles = findTsxFiles(appDir);\n  console.log(`📁 Found ${tsxFiles.length} .tsx files`);\n\n  let fixedCount = 0;\n\n  tsxFiles.forEach(filePath => {\n    if (fixCardImports(filePath)) {\n      fixedCount++;\n    }\n  });\n\n  console.log(`\\n✨ Fixed ${fixedCount} files`);\n  console.log('🎯 Run TypeScript check to see error reduction');\n}\n\nmain();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/fix-card-imports.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/fix-interface-compatibility.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 3,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 3,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 4,
        "column": 14,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 4,
        "endColumn": 29
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 9,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 9,
        "endColumn": 3,
        "fix": { "range": [197, 199], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 12,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 12,
        "endColumn": 5,
        "fix": { "range": [282, 286], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 19,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 19,
        "endColumn": 3,
        "fix": { "range": [533, 535], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 25,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 25,
        "endColumn": 3,
        "fix": { "range": [663, 665], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 32,
        "column": 40,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 32,
        "endColumn": 40,
        "fix": { "range": [915, 915], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 34,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 34,
        "endColumn": 3,
        "fix": { "range": [921, 923], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `······`",
        "line": 39,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 39,
        "endColumn": 7,
        "fix": { "range": [1090, 1096], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `⏎········/interface·Trade\\s*{[^}]*id:\\s*string[^}]*}/gs,⏎········(match)·=>` with `/interface·Trade\\s*{[^}]*id:\\s*string[^}]*}/gs,·match·=>⏎·······`",
        "line": 41,
        "column": 33,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 43,
        "endColumn": 19,
        "fix": {
          "range": [1166, 1241],
          "text": "/interface Trade\\s*{[^}]*id:\\s*string[^}]*}/gs, match =>\n       "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `······`",
        "line": 45,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 45,
        "endColumn": 7,
        "fix": { "range": [1295, 1301], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `⏎········/interface·RecentTrade\\s*{[^}]*id:\\s*string[^}]*}/gs,⏎········(match)·=>` with `/interface·RecentTrade\\s*{[^}]*id:\\s*string[^}]*}/gs,·match·=>⏎·······`",
        "line": 47,
        "column": 33,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 49,
        "endColumn": 19,
        "fix": {
          "range": [1382, 1463],
          "text": "/interface RecentTrade\\s*{[^}]*id:\\s*string[^}]*}/gs, match =>\n       "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `······`",
        "line": 51,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 51,
        "endColumn": 7,
        "fix": { "range": [1517, 1523], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 64,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 64,
        "endColumn": 5,
        "fix": { "range": [1922, 1926], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `·'subscription',·'lastActivity',·'description',·` with `⏎······'subscription',⏎······'lastActivity',⏎······'description',`",
        "line": 67,
        "column": 17,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 67,
        "endColumn": 65,
        "fix": {
          "range": [2036, 2084],
          "text": "\n      'subscription',\n      'lastActivity',\n      'description',"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `·'reasoning',·'entryTime',·'exitTime',·'stopLoss',·` with `⏎······'reasoning',⏎······'entryTime',⏎······'exitTime',⏎······'stopLoss',`",
        "line": 68,
        "column": 17,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 68,
        "endColumn": 68,
        "fix": {
          "range": [2101, 2152],
          "text": "\n      'reasoning',\n      'entryTime',\n      'exitTime',\n      'stopLoss',"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `·'confidence',·'strategy',·'pnl',·'positionSize'` with `⏎······'confidence',⏎······'strategy',⏎······'pnl',⏎······'positionSize',`",
        "line": 69,
        "column": 20,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 69,
        "endColumn": 68,
        "fix": {
          "range": [2172, 2220],
          "text": "\n      'confidence',\n      'strategy',\n      'pnl',\n      'positionSize',"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 71,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 71,
        "endColumn": 5,
        "fix": { "range": [2228, 2232], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 82,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 82,
        "endColumn": 5,
        "fix": { "range": [2697, 2701], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 94,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 94,
        "endColumn": 5,
        "fix": { "range": [3084, 3088], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `⏎······/\\(([^:)]*?):\\s*any([^)]*?)\\)/g,⏎·····` with `/\\(([^:)]*?):\\s*any([^)]*?)\\)/g,`",
        "line": 96,
        "column": 31,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 98,
        "endColumn": 6,
        "fix": { "range": [3179, 3224], "text": "/\\(([^:)]*?):\\s*any([^)]*?)\\)/g," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 99,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 99,
        "endColumn": 3,
        "fix": { "range": [3255, 3257], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 100,
        "column": 9,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 100,
        "endColumn": 11,
        "fix": { "range": [3337, 3339], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `········` with `······`",
        "line": 101,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 101,
        "endColumn": 9,
        "fix": { "range": [3378, 3386], "text": "      " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 102,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 102,
        "endColumn": 3,
        "fix": { "range": [3388, 3390], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 103,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 103,
        "endColumn": 3,
        "fix": { "range": [3431, 3433], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 104,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 104,
        "endColumn": 9,
        "fix": { "range": [3535, 3537], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 105,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 105,
        "endColumn": 3,
        "fix": { "range": [3539, 3541], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `··········` with `········`",
        "line": 106,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 106,
        "endColumn": 11,
        "fix": { "range": [3611, 3621], "text": "        " }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 107,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 107,
        "endColumn": 9,
        "fix": { "range": [3684, 3686], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 108,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 108,
        "endColumn": 3,
        "fix": { "range": [3688, 3690], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `··}⏎····` with `}`",
        "line": 109,
        "column": 5,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 110,
        "endColumn": 5,
        "fix": { "range": [3741, 3749], "text": "}" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 111,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 111,
        "endColumn": 5,
        "fix": { "range": [3752, 3756], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 114,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 114,
        "endColumn": 5,
        "fix": { "range": [3885, 3889], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 126,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 126,
        "endColumn": 5,
        "fix": { "range": [4262, 4266], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `⏎······/onChange=\\{([^}]*)\\}/g,⏎·····` with `/onChange=\\{([^}]*)\\}/g,`",
        "line": 128,
        "column": 31,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 130,
        "endColumn": 6,
        "fix": { "range": [4348, 4385], "text": "/onChange=\\{([^}]*)\\}/g," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 131,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 131,
        "endColumn": 3,
        "fix": { "range": [4408, 4410], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 132,
        "column": 9,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 132,
        "endColumn": 11,
        "fix": { "range": [4491, 4493], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 133,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 133,
        "endColumn": 9,
        "fix": { "range": [4578, 4580], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 134,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 134,
        "endColumn": 3,
        "fix": { "range": [4582, 4584], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `··}⏎····` with `}`",
        "line": 135,
        "column": 5,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 136,
        "endColumn": 5,
        "fix": { "range": [4608, 4616], "text": "}" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 137,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 137,
        "endColumn": 5,
        "fix": { "range": [4619, 4623], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `⏎······/onClick=\\{([^}]*)\\}/g,⏎·····` with `/onClick=\\{([^}]*)\\}/g,`",
        "line": 139,
        "column": 31,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 141,
        "endColumn": 6,
        "fix": { "range": [4704, 4740], "text": "/onClick=\\{([^}]*)\\}/g," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 142,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 142,
        "endColumn": 9,
        "fix": { "range": [4769, 4771], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 143,
        "column": 9,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 143,
        "endColumn": 11,
        "fix": { "range": [4872, 4874], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 144,
        "column": 7,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 144,
        "endColumn": 9,
        "fix": { "range": [4939, 4941], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 145,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 145,
        "endColumn": 3,
        "fix": { "range": [4943, 4945], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `······}⏎····` with `····}`",
        "line": 146,
        "column": 1,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 147,
        "endColumn": 5,
        "fix": { "range": [4965, 4977], "text": "    }" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 148,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 148,
        "endColumn": 5,
        "fix": { "range": [4980, 4984], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 160,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 160,
        "endColumn": 5,
        "fix": { "range": [5361, 5365], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `⏎······/(\\w+)\\.(\\w+)\\.toFixed\\(/g,⏎······'($1?.$2·||·0).toFixed('⏎····` with `/(\\w+)\\.(\\w+)\\.toFixed\\(/g,·'($1?.$2·||·0).toFixed('`",
        "line": 162,
        "column": 31,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 165,
        "endColumn": 5,
        "fix": {
          "range": [5441, 5511],
          "text": "/(\\w+)\\.(\\w+)\\.toFixed\\(/g, '($1?.$2 || 0).toFixed('"
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 166,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 166,
        "endColumn": 5,
        "fix": { "range": [5514, 5518], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 172,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 172,
        "endColumn": 5,
        "fix": { "range": [5702, 5706], "text": "" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 51,
    "fixableErrorCount": 0,
    "fixableWarningCount": 51,
    "source": "#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\nfunction findFiles(dir, pattern) {\n  const files = [];\n  const entries = fs.readdirSync(dir, { withFileTypes: true });\n  \n  for (const entry of entries) {\n    const fullPath = path.join(dir, entry.name);\n    \n    if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n      files.push(...findFiles(fullPath, pattern));\n    } else if (entry.isFile() && entry.name.match(pattern)) {\n      files.push(fullPath);\n    }\n  }\n  \n  return files;\n}\n\nfunction fixTypeScriptErrors() {\n  console.log('🔧 Fixing TypeScript interface compatibility issues...\\n');\n  \n  const tsxFiles = findFiles('./app', /\\.tsx?$/);\n  let totalFixed = 0;\n\n  // Fix 1: Standardize Trade interface ID type to number\n  const tradeInterfaceFiles = [\n    './app/components/PerformanceMetrics.tsx',\n    './app/components/TradeHistory.tsx'\n  ];\n  \n  tradeInterfaceFiles.forEach(filePath => {\n    if (fs.existsSync(filePath)) {\n      let content = fs.readFileSync(filePath, 'utf8');\n      const original = content;\n      \n      // Fix Trade interface id type\n      content = content.replace(\n        /interface Trade\\s*{[^}]*id:\\s*string[^}]*}/gs,\n        (match) => match.replace(/id:\\s*string/, 'id: number')\n      );\n      \n      // Fix RecentTrade interface if it exists\n      content = content.replace(\n        /interface RecentTrade\\s*{[^}]*id:\\s*string[^}]*}/gs,\n        (match) => match.replace(/id:\\s*string/, 'id: number')\n      );\n      \n      if (content !== original) {\n        fs.writeFileSync(filePath, content, 'utf8');\n        console.log(`✓ Fixed Trade interface ID type in ${path.basename(filePath)}`);\n        totalFixed++;\n      }\n    }\n  });\n\n  // Fix 2: Add optional properties to reduce interface conflicts\n  tsxFiles.forEach(filePath => {\n    let content = fs.readFileSync(filePath, 'utf8');\n    const original = content;\n    \n    // Make commonly optional properties actually optional\n    const commonOptionalProps = [\n      'winRate', 'subscription', 'lastActivity', 'description', \n      'message', 'reasoning', 'entryTime', 'exitTime', 'stopLoss', \n      'takeProfit', 'confidence', 'strategy', 'pnl', 'positionSize'\n    ];\n    \n    commonOptionalProps.forEach(prop => {\n      // Find properties that aren't already optional and make them optional\n      const propRegex = new RegExp(`(\\\\s+${prop}):\\\\s*([^;\\\\n?]+)([;\\\\n])`, 'g');\n      content = content.replace(propRegex, (match, propName, propType, ending) => {\n        if (!propName.includes('?') && !propType.includes('undefined')) {\n          return `${propName}?: ${propType}${ending}`;\n        }\n        return match;\n      });\n    });\n    \n    if (content !== original) {\n      fs.writeFileSync(filePath, content, 'utf8');\n      console.log(`✓ Added optional property markers in ${path.basename(filePath)}`);\n      totalFixed++;\n    }\n  });\n\n  // Fix 3: Replace dangerous any types with safer alternatives\n  tsxFiles.forEach(filePath => {\n    let content = fs.readFileSync(filePath, 'utf8');\n    const original = content;\n    \n    // Replace any parameter types with more specific types\n    content = content.replace(\n      /\\(([^:)]*?):\\s*any([^)]*?)\\)/g,\n      (match, paramName, rest) => {\n        if (paramName.includes('event') || paramName.includes('Event')) {\n          return `(${paramName}: Event${rest})`;\n        }\n        if (paramName.includes('trade')) {\n          return `(${paramName}: any${rest})`; // Keep as any for trade objects to avoid breaking\n        }\n        if (paramName.includes('data') || paramName.includes('item')) {\n          return `(${paramName}: Record<string, unknown>${rest})`;\n        }\n        return `(${paramName}: unknown${rest})`;\n      }\n    );\n    \n    // Replace property any types with unknown (safer)\n    content = content.replace(/:\\s*any(\\s*[;,\\]\\)\\n])/g, ': unknown$1');\n    \n    if (content !== original) {\n      fs.writeFileSync(filePath, content, 'utf8');\n      console.log(`✓ Replaced any types with safer alternatives in ${path.basename(filePath)}`);\n      totalFixed++;\n    }\n  });\n\n  // Fix 4: Add proper event handler types\n  tsxFiles.forEach(filePath => {\n    let content = fs.readFileSync(filePath, 'utf8');\n    const original = content;\n    \n    // Fix onChange handlers without proper typing\n    content = content.replace(\n      /onChange=\\{([^}]*)\\}/g,\n      (match, handler) => {\n        if (!handler.includes('ChangeEvent') && !handler.includes('=>')) {\n          return `onChange={(e: React.ChangeEvent<HTMLInputElement>) => ${handler}(e)}`;\n        }\n        return match;\n      }\n    );\n    \n    // Fix onClick handlers without proper typing\n    content = content.replace(\n      /onClick=\\{([^}]*)\\}/g,\n      (match, handler) => {\n        if (!handler.includes('MouseEvent') && !handler.includes('=>') && !handler.includes('()')) {\n          return `onClick={(e: React.MouseEvent) => ${handler}(e)}`;\n        }\n        return match;\n      }\n    );\n    \n    if (content !== original) {\n      fs.writeFileSync(filePath, content, 'utf8');\n      console.log(`✓ Added proper event handler types in ${path.basename(filePath)}`);\n      totalFixed++;\n    }\n  });\n\n  // Fix 5: Add safe property access for common patterns\n  tsxFiles.forEach(filePath => {\n    let content = fs.readFileSync(filePath, 'utf8');\n    const original = content;\n    \n    // Add safe navigation for toFixed calls\n    content = content.replace(\n      /(\\w+)\\.(\\w+)\\.toFixed\\(/g,\n      '($1?.$2 || 0).toFixed('\n    );\n    \n    // Add safe navigation for common property access patterns\n    content = content.replace(\n      /(\\w+)\\.(\\w+)\\.toLocaleString\\(/g,\n      'new Date($1?.$2).toLocaleString('\n    );\n    \n    if (content !== original) {\n      fs.writeFileSync(filePath, content, 'utf8');\n      console.log(`✓ Added safe property access patterns in ${path.basename(filePath)}`);\n      totalFixed++;\n    }\n  });\n\n  console.log(`\\n✅ Fixed ${totalFixed} files with TypeScript improvements`);\n  console.log('🎯 Common issues addressed:');\n  console.log('   - Standardized Trade interface ID types');\n  console.log('   - Added optional property markers');\n  console.log('   - Replaced any types with safer alternatives');\n  console.log('   - Added proper event handler types');\n  console.log('   - Added safe property access patterns');\n}\n\nif (require.main === module) {\n  fixTypeScriptErrors();\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/fix-missing-cards.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/fix-missing-ui-imports.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 3,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 3,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 4,
        "column": 14,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 4,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Function to search for TypeScript files\nfunction findTsxFiles(dir, fileList = []) {\n  const files = fs.readdirSync(dir);\n\n  files.forEach(file => {\n    const filePath = path.join(dir, file);\n    const stat = fs.statSync(filePath);\n\n    if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {\n      findTsxFiles(filePath, fileList);\n    } else if (file.endsWith('.tsx')) {\n      fileList.push(filePath);\n    }\n  });\n\n  return fileList;\n}\n\n// Function to fix missing UI component imports\nfunction fixMissingImports(filePath) {\n  try {\n    let content = fs.readFileSync(filePath, 'utf8');\n    let modified = false;\n\n    // Check for missing Card imports\n    const usesCard =\n      /\\bCard\\b(?!\\w)/.test(content) && !/Card.*from.*@\\/components\\/ui\\/card/.test(content);\n    const usesCardContent =\n      /\\bCardContent\\b/.test(content) &&\n      !/CardContent.*from.*@\\/components\\/ui\\/card/.test(content);\n    const usesCardHeader =\n      /\\bCardHeader\\b/.test(content) && !/CardHeader.*from.*@\\/components\\/ui\\/card/.test(content);\n    const usesCardTitle =\n      /\\bCardTitle\\b/.test(content) && !/CardTitle.*from.*@\\/components\\/ui\\/card/.test(content);\n    const usesCardDescription =\n      /\\bCardDescription\\b/.test(content) &&\n      !/CardDescription.*from.*@\\/components\\/ui\\/card/.test(content);\n\n    if (usesCard || usesCardContent || usesCardHeader || usesCardTitle || usesCardDescription) {\n      // Find insertion point after existing imports\n      const importLines = content.split('\\n').filter(line => line.trim().startsWith('import'));\n\n      if (importLines.length > 0) {\n        const cardComponents = [];\n        if (/\\bCard\\b(?!\\w)/.test(content)) cardComponents.push('Card');\n        if (/\\bCardContent\\b/.test(content)) cardComponents.push('CardContent');\n        if (/\\bCardHeader\\b/.test(content)) cardComponents.push('CardHeader');\n        if (/\\bCardTitle\\b/.test(content)) cardComponents.push('CardTitle');\n        if (/\\bCardDescription\\b/.test(content)) cardComponents.push('CardDescription');\n\n        if (cardComponents.length > 0) {\n          const cardImport = `import { ${cardComponents.join(', ')} } from '@/components/ui/card';`;\n\n          // Find the last import line\n          const lastImportIndex = content.lastIndexOf('import ');\n          const nextLineIndex = content.indexOf('\\n', lastImportIndex);\n\n          if (nextLineIndex !== -1) {\n            content =\n              content.slice(0, nextLineIndex + 1) +\n              cardImport +\n              '\\n' +\n              content.slice(nextLineIndex + 1);\n            modified = true;\n          }\n        }\n      }\n    }\n\n    // Check for missing Badge imports\n    const usesBadge =\n      /\\bBadge\\b/.test(content) && !/Badge.*from.*@\\/components\\/ui\\/badge/.test(content);\n    if (usesBadge) {\n      const lastImportIndex = content.lastIndexOf('import ');\n      const nextLineIndex = content.indexOf('\\n', lastImportIndex);\n\n      if (nextLineIndex !== -1) {\n        const badgeImport = `import { Badge } from '@/components/ui/badge';`;\n        content =\n          content.slice(0, nextLineIndex + 1) +\n          badgeImport +\n          '\\n' +\n          content.slice(nextLineIndex + 1);\n        modified = true;\n      }\n    }\n\n    // Check for missing Button imports\n    const usesButton =\n      /\\bButton\\b/.test(content) && !/Button.*from.*@\\/components\\/ui\\/button/.test(content);\n    if (usesButton) {\n      const lastImportIndex = content.lastIndexOf('import ');\n      const nextLineIndex = content.indexOf('\\n', lastImportIndex);\n\n      if (nextLineIndex !== -1) {\n        const buttonImport = `import { Button } from '@/components/ui/button';`;\n        content =\n          content.slice(0, nextLineIndex + 1) +\n          buttonImport +\n          '\\n' +\n          content.slice(nextLineIndex + 1);\n        modified = true;\n      }\n    }\n\n    // Fix Badge variant issues by removing variant=\"outline\"\n    if (/variant=\"outline\"/.test(content)) {\n      content = content.replace(/\\s*variant=\"outline\"/g, '');\n      modified = true;\n    }\n\n    // Fix lucide-react import issues by removing them\n    if (/from ['\"]lucide-react['\"]/.test(content)) {\n      content = content.replace(/import\\s*{[^}]*}\\s*from\\s*['\"]lucide-react['\"];\\s*\\n?/g, '');\n      modified = true;\n    }\n\n    if (modified) {\n      fs.writeFileSync(filePath, content);\n      console.log(`✅ Fixed: ${path.relative(process.cwd(), filePath)}`);\n      return true;\n    }\n\n    return false;\n  } catch (error) {\n    console.error(`❌ Error processing ${filePath}:`, error.message);\n    return false;\n  }\n}\n\n// Main execution\nfunction main() {\n  const projectRoot = process.cwd();\n  const appDir = path.join(projectRoot, 'app', 'components');\n\n  if (!fs.existsSync(appDir)) {\n    console.error('❌ app/components directory not found');\n    process.exit(1);\n  }\n\n  console.log('🔍 Finding TypeScript files with missing UI imports...');\n  const tsxFiles = findTsxFiles(appDir);\n  console.log(`📁 Found ${tsxFiles.length} .tsx files`);\n\n  let fixedCount = 0;\n\n  tsxFiles.forEach(filePath => {\n    if (fixMissingImports(filePath)) {\n      fixedCount++;\n    }\n  });\n\n  console.log(`\\n✨ Fixed ${fixedCount} files`);\n\n  if (fixedCount > 0) {\n    console.log('🎯 Running TypeScript check to verify fixes...');\n  }\n}\n\nmain();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/fix-typescript-comprehensive.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 3,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 3,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 4,
        "column": 14,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 4,
        "endColumn": 29
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `(match)` with `match`",
        "line": 11,
        "column": 18,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 11,
        "endColumn": 25,
        "fix": { "range": [284, 291], "text": "match" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 12,
        "column": 81,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 12,
        "endColumn": 81,
        "fix": { "range": [420, 420], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 14,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 14,
        "endColumn": 3,
        "fix": { "range": [426, 428], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `······`",
        "line": 22,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 22,
        "endColumn": 7,
        "fix": { "range": [751, 757], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `······`",
        "line": 33,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 33,
        "endColumn": 7,
        "fix": { "range": [1203, 1209], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 36,
        "column": 82,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 36,
        "endColumn": 82,
        "fix": { "range": [1354, 1354], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 38,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 38,
        "endColumn": 3,
        "fix": { "range": [1360, 1362], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 43,
        "column": 67,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 43,
        "endColumn": 67,
        "fix": { "range": [1577, 1577], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 45,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 45,
        "endColumn": 3,
        "fix": { "range": [1583, 1585], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 58,
        "column": 72,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 58,
        "endColumn": 72,
        "fix": { "range": [2118, 2118], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 60,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 60,
        "endColumn": 3,
        "fix": { "range": [2124, 2126], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `(match)` with `match`",
        "line": 64,
        "column": 18,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 64,
        "endColumn": 25,
        "fix": { "range": [2224, 2231], "text": "match" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `/onChange=\\{([^}]*)\\}/,·'onChange={(e:·React.ChangeEvent<HTMLInputElement>)·=>·$1(e)}'` with `⏎··········/onChange=\\{([^}]*)\\}/,⏎··········'onChange={(e:·React.ChangeEvent<HTMLInputElement>)·=>·$1(e)}'⏎········`",
        "line": 66,
        "column": 30,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 66,
        "endColumn": 116,
        "fix": {
          "range": [2310, 2396],
          "text": "\n          /onChange=\\{([^}]*)\\}/,\n          'onChange={(e: React.ChangeEvent<HTMLInputElement>) => $1(e)}'\n        "
        }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 70,
        "column": 54,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 70,
        "endColumn": 54,
        "fix": { "range": [2487, 2487], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 72,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 72,
        "endColumn": 3,
        "fix": { "range": [2493, 2495], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Replace `(match)` with `match`",
        "line": 76,
        "column": 18,
        "nodeType": null,
        "messageId": "replace",
        "endLine": 76,
        "endColumn": 25,
        "fix": { "range": [2581, 2588], "text": "match" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 82,
        "column": 53,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 82,
        "endColumn": 53,
        "fix": { "range": [2849, 2849], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 83,
        "column": 4,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 83,
        "endColumn": 4,
        "fix": { "range": [2853, 2853], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 93,
        "column": 71,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 93,
        "endColumn": 71,
        "fix": { "range": [3165, 3165], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 95,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 95,
        "endColumn": 3,
        "fix": { "range": [3171, 3173], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 101,
        "column": 57,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 101,
        "endColumn": 57,
        "fix": { "range": [3377, 3377], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 103,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 103,
        "endColumn": 3,
        "fix": { "range": [3383, 3385], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 109,
        "column": 41,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 109,
        "endColumn": 41,
        "fix": { "range": [3551, 3551], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Insert `,`",
        "line": 110,
        "column": 4,
        "nodeType": null,
        "messageId": "insert",
        "endLine": 110,
        "endColumn": 4,
        "fix": { "range": [3555, 3555], "text": "," }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 115,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 115,
        "endColumn": 3,
        "fix": { "range": [3671, 3673], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 118,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 118,
        "endColumn": 5,
        "fix": { "range": [3756, 3760], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 125,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 125,
        "endColumn": 3,
        "fix": { "range": [3999, 4001], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 132,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 132,
        "endColumn": 3,
        "fix": { "range": [4128, 4130], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 142,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 142,
        "endColumn": 3,
        "fix": { "range": [4421, 4423], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `····`",
        "line": 152,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 152,
        "endColumn": 5,
        "fix": { "range": [4770, 4774], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 162,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 162,
        "endColumn": 3,
        "fix": { "range": [5056, 5058], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 167,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 167,
        "endColumn": 3,
        "fix": { "range": [5147, 5149], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 174,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 174,
        "endColumn": 3,
        "fix": { "range": [5271, 5273], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 177,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 177,
        "endColumn": 3,
        "fix": { "range": [5346, 5348], "text": "" }
      },
      {
        "ruleId": "prettier/prettier",
        "severity": 1,
        "message": "Delete `··`",
        "line": 183,
        "column": 1,
        "nodeType": null,
        "messageId": "delete",
        "endLine": 183,
        "endColumn": 3,
        "fix": { "range": [5438, 5440], "text": "" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 35,
    "fixableErrorCount": 0,
    "fixableWarningCount": 35,
    "source": "#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Common interface fixes and type improvements\nconst fixes = [\n  // Fix RecentTrade vs Trade interface compatibility\n  {\n    pattern: /interface RecentTrade\\s*{[^}]*id:\\s*string[^}]*}/gs,\n    replacement: (match) => match.replace(/id:\\s*string/, 'id: number'),\n    description: 'Fix RecentTrade id type to be compatible with Trade interface'\n  },\n  \n  // Add optional properties to interfaces\n  {\n    pattern: /interface\\s+(\\w+)\\s*{([^}]*)}/gs,\n    replacement: (match, interfaceName, body) => {\n      // Common properties that should be optional\n      const optionalProps = ['winRate', 'subscription', 'lastActivity', 'description', 'message'];\n      let newBody = body;\n      \n      optionalProps.forEach(prop => {\n        // Make property optional if it exists and isn't already optional\n        const propRegex = new RegExp(`(\\\\s+${prop}):\\\\s*([^;\\\\n]+)([;\\\\n])`, 'g');\n        newBody = newBody.replace(propRegex, (propMatch, propName, propType, ending) => {\n          if (!propName.includes('?')) {\n            return `${propName}?: ${propType}${ending}`;\n          }\n          return propMatch;\n        });\n      });\n      \n      return `interface ${interfaceName} {${newBody}}`;\n    },\n    description: 'Add optional markers to commonly optional interface properties'\n  },\n  \n  // Replace explicit any types with more specific types where possible\n  {\n    pattern: /:\\s*any(\\s*[;,\\]\\)\\n])/g,\n    replacement: ': unknown$1',\n    description: 'Replace any with unknown for better type safety'\n  },\n  \n  // Fix function parameter any types\n  {\n    pattern: /\\(([^)]*?)\\s*:\\s*any([^)]*?)\\)/g,\n    replacement: (match, paramName, rest) => {\n      if (paramName.includes('event') || paramName.includes('Event')) {\n        return `(${paramName}: Event${rest})`;\n      }\n      if (paramName.includes('data') || paramName.includes('item')) {\n        return `(${paramName}: Record<string, unknown>${rest})`;\n      }\n      return `(${paramName}: unknown${rest})`;\n    },\n    description: 'Replace any parameter types with more specific types'\n  },\n  \n  // Add proper React event types\n  {\n    pattern: /onChange=\\{[^}]*\\}\\s*\\/>/g,\n    replacement: (match) => {\n      if (!match.includes('ChangeEvent')) {\n        return match.replace(/onChange=\\{([^}]*)\\}/, 'onChange={(e: React.ChangeEvent<HTMLInputElement>) => $1(e)}');\n      }\n      return match;\n    },\n    description: 'Add proper React ChangeEvent types'\n  },\n  \n  // Fix onClick handlers\n  {\n    pattern: /onClick=\\{[^}]*\\}\\s*/g,\n    replacement: (match) => {\n      if (!match.includes('MouseEvent') && !match.includes('() =>')) {\n        return match.replace(/onClick=\\{([^}]*)\\}/, 'onClick={(e: React.MouseEvent) => $1(e)}');\n      }\n      return match;\n    },\n    description: 'Add proper React MouseEvent types'\n  }\n];\n\n// Additional specific fixes for common patterns\nconst specificFixes = [\n  // Fix Trade interface id type consistency\n  {\n    files: ['**/*Trade*.tsx', '**/AutoTradeBot.tsx'],\n    pattern: /id:\\s*string/g,\n    replacement: 'id: number',\n    description: 'Ensure Trade interface uses number IDs consistently'\n  },\n  \n  // Fix optional property access\n  {\n    files: ['**/*.tsx'],\n    pattern: /(\\w+)\\.(\\w+)\\.toFixed\\(/g,\n    replacement: '($1?.$2 || 0).toFixed(',\n    description: 'Add safe navigation for toFixed calls'\n  },\n  \n  // Fix array access safety\n  {\n    files: ['**/*.tsx'],\n    pattern: /(\\w+)\\[(\\d+)\\](?!\\?)/g,\n    replacement: '$1?.[$2]',\n    description: 'Add safe array access'\n  }\n];\n\nfunction findFiles(dir, pattern, files = []) {\n  const entries = fs.readdirSync(dir, { withFileTypes: true });\n  \n  for (const entry of entries) {\n    const fullPath = path.join(dir, entry.name);\n    \n    if (entry.isDirectory() && !entry.name.startsWith('.') && entry.name !== 'node_modules') {\n      findFiles(fullPath, pattern, files);\n    } else if (entry.isFile() && entry.name.match(pattern)) {\n      files.push(fullPath);\n    }\n  }\n  \n  return files;\n}\n\nfunction applyFixes(filePath) {\n  let content = fs.readFileSync(filePath, 'utf8');\n  let modified = false;\n  \n  // Apply general fixes\n  fixes.forEach(fix => {\n    const original = content;\n    content = content.replace(fix.pattern, fix.replacement);\n    if (content !== original) {\n      console.log(`✓ Applied: ${fix.description} in ${path.basename(filePath)}`);\n      modified = true;\n    }\n  });\n  \n  // Apply specific fixes\n  specificFixes.forEach(fix => {\n    const shouldApply = fix.files.some(filePattern => {\n      if (filePattern.includes('*')) {\n        const regex = new RegExp(filePattern.replace(/\\*\\*/g, '.*').replace(/\\*/g, '[^/]*'));\n        return regex.test(filePath);\n      }\n      return filePath.includes(filePattern);\n    });\n    \n    if (shouldApply) {\n      const original = content;\n      content = content.replace(fix.pattern, fix.replacement);\n      if (content !== original) {\n        console.log(`✓ Applied: ${fix.description} in ${path.basename(filePath)}`);\n        modified = true;\n      }\n    }\n  });\n  \n  if (modified) {\n    fs.writeFileSync(filePath, content, 'utf8');\n    return true;\n  }\n  \n  return false;\n}\n\n// Main execution\nfunction main() {\n  console.log('🔧 Starting comprehensive TypeScript fixes...\\n');\n  \n  const tsxFiles = findFiles('./app', /\\.tsx?$/);\n  let totalFixed = 0;\n  \n  tsxFiles.forEach(file => {\n    if (applyFixes(file)) {\n      totalFixed++;\n    }\n  });\n  \n  console.log(`\\n✅ Fixed ${totalFixed} files`);\n  console.log('🎯 Running TypeScript check to verify fixes...\\n');\n}\n\nif (require.main === module) {\n  main();\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/fix-typescript-errors.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 3,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 3,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 4,
        "column": 14,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 4,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Common malformed imports to fix\nconst importFixes = [\n  {\n    search: /import { Card, CardCoCard, CardContent, ([^}]+) } from '@\\/components\\/ui\\/card';/g,\n    replace: \"import { Card, CardContent, $1 } from '@/components/ui/card';\",\n  },\n  {\n    search: /import { Card, CardCoCard, CardContent } from '@\\/components\\/ui\\/card';/g,\n    replace: \"import { Card, CardContent } from '@/components/ui/card';\",\n  },\n  {\n    search: /import { CardCoCard, ([^}]+) } from '@\\/components\\/ui\\/card';/g,\n    replace: \"import { CardContent, $1 } from '@/components/ui/card';\",\n  },\n  {\n    search: /import { CardCoCard } from '@\\/components\\/ui\\/card';/g,\n    replace: \"import { CardContent } from '@/components/ui/card';\",\n  },\n  {\n    search: /import { Wolf } from 'lucide-react'/g,\n    replace: \"import { Zap } from 'lucide-react'\",\n  },\n  {\n    search: /<Wolf /g,\n    replace: '<Zap ',\n  },\n  {\n    search: /import { ntent, ([^}]+) } from '@\\/components\\/ui\\/card';/g,\n    replace: \"import { Card, CardContent, $1 } from '@/components/ui/card';\",\n  },\n  {\n    search: /import { Card } from '@\\/components\\/ui\\/button';/g,\n    replace: '',\n  },\n];\n\n// Common type fixes\nconst typeFixes = [\n  {\n    search: /useState\\(\\[\\]\\)/g,\n    replace: 'useState<any[]>([])',\n  },\n  {\n    search: /useState\\(\\{\\}\\)/g,\n    replace: 'useState<Record<string, any>>({})',\n  },\n  {\n    search: /= ([a-zA-Z]+) => \\{/g,\n    replace: '= ($1: any) => {',\n  },\n  {\n    search: /\\.map\\(([a-zA-Z]+) => \\(/g,\n    replace: '.map(($1: any) => (',\n  },\n  {\n    search: /\\.map\\(([a-zA-Z]+), ([a-zA-Z]+) => \\(/g,\n    replace: '.map(($1: any, $2: number) => (',\n  },\n];\n\nfunction processFile(filePath) {\n  try {\n    let content = fs.readFileSync(filePath, 'utf8');\n    let modified = false;\n\n    // Apply import fixes\n    importFixes.forEach(fix => {\n      const newContent = content.replace(fix.search, fix.replace);\n      if (newContent !== content) {\n        content = newContent;\n        modified = true;\n      }\n    });\n\n    // Apply type fixes\n    typeFixes.forEach(fix => {\n      const newContent = content.replace(fix.search, fix.replace);\n      if (newContent !== content) {\n        content = newContent;\n        modified = true;\n      }\n    });\n\n    // Clean up duplicate imports\n    content = content.replace(\n      /^import.*\\n(?=import.*from ['\"]@\\/components\\/ui\\/button['\"];)/gm,\n      ''\n    );\n\n    if (modified) {\n      fs.writeFileSync(filePath, content);\n      console.log(`Fixed: ${filePath}`);\n      return true;\n    }\n  } catch (error) {\n    console.error(`Error processing ${filePath}:`, error.message);\n  }\n  return false;\n}\n\nfunction findTsxFiles(dir) {\n  const files = [];\n\n  function traverse(currentDir) {\n    const items = fs.readdirSync(currentDir);\n\n    for (const item of items) {\n      const fullPath = path.join(currentDir, item);\n      const stat = fs.statSync(fullPath);\n\n      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {\n        traverse(fullPath);\n      } else if (item.endsWith('.tsx') || item.endsWith('.ts')) {\n        files.push(fullPath);\n      }\n    }\n  }\n\n  traverse(dir);\n  return files;\n}\n\n// Process all TypeScript files in the app directory\nconst appDir = path.join(__dirname, 'app');\nconst files = findTsxFiles(appDir);\n\nlet fixedCount = 0;\nfiles.forEach(file => {\n  if (processFile(file)) {\n    fixedCount++;\n  }\n});\n\nconsole.log(`\\nProcessed ${files.length} files, fixed ${fixedCount} files.`);\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/fix-ui-imports-debug.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 3,
        "column": 12,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 3,
        "endColumn": 25
      },
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 4,
        "column": 14,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 4,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "#!/usr/bin/env node\n\nconst fs = require('fs');\nconst path = require('path');\n\nconsole.log('🔍 Starting UI imports fixer...');\n\n// Check if app/components exists\nconst projectRoot = process.cwd();\nconst appDir = path.join(projectRoot, 'app', 'components');\n\nconsole.log('Project root:', projectRoot);\nconsole.log('App dir:', appDir);\nconsole.log('App dir exists:', fs.existsSync(appDir));\n\nif (!fs.existsSync(appDir)) {\n  console.error('❌ app/components directory not found');\n  process.exit(1);\n}\n\n// Find tsx files\nfunction findTsxFiles(dir, fileList = []) {\n  try {\n    const files = fs.readdirSync(dir);\n\n    files.forEach(file => {\n      const filePath = path.join(dir, file);\n      const stat = fs.statSync(filePath);\n\n      if (stat.isDirectory() && !file.startsWith('.') && file !== 'node_modules') {\n        findTsxFiles(filePath, fileList);\n      } else if (file.endsWith('.tsx')) {\n        fileList.push(filePath);\n      }\n    });\n  } catch (error) {\n    console.error('Error reading directory:', dir, error.message);\n  }\n\n  return fileList;\n}\n\nconst tsxFiles = findTsxFiles(appDir);\nconsole.log(`📁 Found ${tsxFiles.length} .tsx files`);\n\n// Show first few files\ntsxFiles.slice(0, 5).forEach(file => {\n  console.log('-', path.relative(projectRoot, file));\n});\n\nif (tsxFiles.length > 5) {\n  console.log(`... and ${tsxFiles.length - 5} more`);\n}\n\nlet fixedCount = 0;\n\n// Process each file\ntsxFiles.forEach((filePath, index) => {\n  try {\n    console.log(\n      `\\n[${index + 1}/${tsxFiles.length}] Processing:`,\n      path.relative(projectRoot, filePath)\n    );\n\n    let content = fs.readFileSync(filePath, 'utf8');\n    let modified = false;\n\n    // Check for missing Card imports\n    const usesCard =\n      /\\bCard\\b(?!\\w)/.test(content) && !/Card.*from.*@\\/components\\/ui\\/card/.test(content);\n    const usesCardContent =\n      /\\bCardContent\\b/.test(content) &&\n      !/CardContent.*from.*@\\/components\\/ui\\/card/.test(content);\n    const usesCardHeader =\n      /\\bCardHeader\\b/.test(content) && !/CardHeader.*from.*@\\/components\\/ui\\/card/.test(content);\n    const usesCardTitle =\n      /\\bCardTitle\\b/.test(content) && !/CardTitle.*from.*@\\/components\\/ui\\/card/.test(content);\n    const usesCardDescription =\n      /\\bCardDescription\\b/.test(content) &&\n      !/CardDescription.*from.*@\\/components\\/ui\\/card/.test(content);\n\n    if (usesCard || usesCardContent || usesCardHeader || usesCardTitle || usesCardDescription) {\n      console.log('  → Found missing Card imports');\n\n      const cardComponents = [];\n      if (/\\bCard\\b(?!\\w)/.test(content)) cardComponents.push('Card');\n      if (/\\bCardContent\\b/.test(content)) cardComponents.push('CardContent');\n      if (/\\bCardHeader\\b/.test(content)) cardComponents.push('CardHeader');\n      if (/\\bCardTitle\\b/.test(content)) cardComponents.push('CardTitle');\n      if (/\\bCardDescription\\b/.test(content)) cardComponents.push('CardDescription');\n\n      if (cardComponents.length > 0) {\n        const cardImport = `import { ${cardComponents.join(', ')} } from '@/components/ui/card';`;\n\n        // Find the last import line\n        const lastImportIndex = content.lastIndexOf('import ');\n        if (lastImportIndex !== -1) {\n          const nextLineIndex = content.indexOf('\\n', lastImportIndex);\n\n          if (nextLineIndex !== -1) {\n            content =\n              content.slice(0, nextLineIndex + 1) +\n              cardImport +\n              '\\n' +\n              content.slice(nextLineIndex + 1);\n            modified = true;\n            console.log('  → Added:', cardImport);\n          }\n        }\n      }\n    }\n\n    // Fix Badge variant issues\n    if (/variant=\"outline\"/.test(content)) {\n      console.log('  → Found Badge variant=\"outline\" issues');\n      content = content.replace(/\\s*variant=\"outline\"/g, '');\n      modified = true;\n      console.log('  → Removed variant=\"outline\" attributes');\n    }\n\n    // Fix lucide-react imports\n    if (/from ['\"]lucide-react['\"]/.test(content)) {\n      console.log('  → Found lucide-react imports');\n      content = content.replace(/import\\s*{[^}]*}\\s*from\\s*['\"]lucide-react['\"];\\s*\\n?/g, '');\n      modified = true;\n      console.log('  → Removed lucide-react imports');\n    }\n\n    if (modified) {\n      fs.writeFileSync(filePath, content);\n      console.log('  ✅ File updated');\n      fixedCount++;\n    } else {\n      console.log('  ⏭️  No changes needed');\n    }\n  } catch (error) {\n    console.error(`❌ Error processing ${filePath}:`, error.message);\n  }\n});\n\nconsole.log(`\\n✨ Fixed ${fixedCount} files out of ${tsxFiles.length} total`);\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/hooks/use-viewport.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/lib/utils.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/next-env.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/next.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/464-cacc0a57cbd57b4d.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 2606,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 2607
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 13676,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 13677
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 14729,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 14730
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 15023,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 15024
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 31503,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 31504
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 38242,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 38243
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'i' is defined but never used.",
        "line": 1,
        "column": 41410,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 41411
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'o' is defined but never used.",
        "line": 1,
        "column": 41412,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 41413
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[464],{3464:(t,e,r)=>{\"use strict\";let n;r.d(e,{A:()=>eu});var i,o,s,a={};function f(t,e){return function(){return t.apply(e,arguments)}}r.r(a),r.d(a,{hasBrowserEnv:()=>th,hasStandardBrowserEnv:()=>td,hasStandardBrowserWebWorkerEnv:()=>ty,navigator:()=>tp,origin:()=>tg});var u=r(9509);let{toString:l}=Object.prototype,{getPrototypeOf:c}=Object,{iterator:h,toStringTag:p}=Symbol,d=(t=>e=>{let r=l.call(e);return t[r]||(t[r]=r.slice(8,-1).toLowerCase())})(Object.create(null)),y=t=>(t=t.toLowerCase(),e=>d(e)===t),g=t=>e=>typeof e===t,{isArray:m}=Array,b=g(\"undefined\"),w=y(\"ArrayBuffer\"),E=g(\"string\"),R=g(\"function\"),A=g(\"number\"),O=t=>null!==t&&\"object\"==typeof t,B=t=>{if(\"object\"!==d(t))return!1;let e=c(t);return(null===e||e===Object.prototype||null===Object.getPrototypeOf(e))&&!(p in t)&&!(h in t)},v=y(\"Date\"),S=y(\"File\"),T=y(\"Blob\"),U=y(\"FileList\"),x=y(\"URLSearchParams\"),[C,I,L,N]=[\"ReadableStream\",\"Request\",\"Response\",\"Headers\"].map(y);function _(t,e,{allOwnKeys:r=!1}={}){let n,i;if(null!=t)if(\"object\"!=typeof t&&(t=[t]),m(t))for(n=0,i=t.length;n<i;n++)e.call(null,t[n],n,t);else{let i,o=r?Object.getOwnPropertyNames(t):Object.keys(t),s=o.length;for(n=0;n<s;n++)i=o[n],e.call(null,t[i],i,t)}}function j(t,e){let r;e=e.toLowerCase();let n=Object.keys(t),i=n.length;for(;i-- >0;)if(e===(r=n[i]).toLowerCase())return r;return null}let P=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:global,k=t=>!b(t)&&t!==P,F=(t=>e=>t&&e instanceof t)(\"undefined\"!=typeof Uint8Array&&c(Uint8Array)),D=y(\"HTMLFormElement\"),M=(({hasOwnProperty:t})=>(e,r)=>t.call(e,r))(Object.prototype),q=y(\"RegExp\"),$=(t,e)=>{let r=Object.getOwnPropertyDescriptors(t),n={};_(r,(r,i)=>{let o;!1!==(o=e(r,i,t))&&(n[i]=o||r)}),Object.defineProperties(t,n)},z=y(\"AsyncFunction\"),J=(i=\"function\"==typeof setImmediate,o=R(P.postMessage),i?setImmediate:o?((t,e)=>(P.addEventListener(\"message\",({source:r,data:n})=>{r===P&&n===t&&e.length&&e.shift()()},!1),r=>{e.push(r),P.postMessage(t,\"*\")}))(`axios@${Math.random()}`,[]):t=>setTimeout(t)),W=\"undefined\"!=typeof queueMicrotask?queueMicrotask.bind(P):void 0!==u&&u.nextTick||J,H={isArray:m,isArrayBuffer:w,isBuffer:function(t){return null!==t&&!b(t)&&null!==t.constructor&&!b(t.constructor)&&R(t.constructor.isBuffer)&&t.constructor.isBuffer(t)},isFormData:t=>{let e;return t&&(\"function\"==typeof FormData&&t instanceof FormData||R(t.append)&&(\"formdata\"===(e=d(t))||\"object\"===e&&R(t.toString)&&\"[object FormData]\"===t.toString()))},isArrayBufferView:function(t){let e;return\"undefined\"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&w(t.buffer)},isString:E,isNumber:A,isBoolean:t=>!0===t||!1===t,isObject:O,isPlainObject:B,isReadableStream:C,isRequest:I,isResponse:L,isHeaders:N,isUndefined:b,isDate:v,isFile:S,isBlob:T,isRegExp:q,isFunction:R,isStream:t=>O(t)&&R(t.pipe),isURLSearchParams:x,isTypedArray:F,isFileList:U,forEach:_,merge:function t(){let{caseless:e}=k(this)&&this||{},r={},n=(n,i)=>{let o=e&&j(r,i)||i;B(r[o])&&B(n)?r[o]=t(r[o],n):B(n)?r[o]=t({},n):m(n)?r[o]=n.slice():r[o]=n};for(let t=0,e=arguments.length;t<e;t++)arguments[t]&&_(arguments[t],n);return r},extend:(t,e,r,{allOwnKeys:n}={})=>(_(e,(e,n)=>{r&&R(e)?t[n]=f(e,r):t[n]=e},{allOwnKeys:n}),t),trim:t=>t.trim?t.trim():t.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\"\"),stripBOM:t=>(65279===t.charCodeAt(0)&&(t=t.slice(1)),t),inherits:(t,e,r,n)=>{t.prototype=Object.create(e.prototype,n),t.prototype.constructor=t,Object.defineProperty(t,\"super\",{value:e.prototype}),r&&Object.assign(t.prototype,r)},toFlatObject:(t,e,r,n)=>{let i,o,s,a={};if(e=e||{},null==t)return e;do{for(o=(i=Object.getOwnPropertyNames(t)).length;o-- >0;)s=i[o],(!n||n(s,t,e))&&!a[s]&&(e[s]=t[s],a[s]=!0);t=!1!==r&&c(t)}while(t&&(!r||r(t,e))&&t!==Object.prototype);return e},kindOf:d,kindOfTest:y,endsWith:(t,e,r)=>{t=String(t),(void 0===r||r>t.length)&&(r=t.length),r-=e.length;let n=t.indexOf(e,r);return -1!==n&&n===r},toArray:t=>{if(!t)return null;if(m(t))return t;let e=t.length;if(!A(e))return null;let r=Array(e);for(;e-- >0;)r[e]=t[e];return r},forEachEntry:(t,e)=>{let r,n=(t&&t[h]).call(t);for(;(r=n.next())&&!r.done;){let n=r.value;e.call(t,n[0],n[1])}},matchAll:(t,e)=>{let r,n=[];for(;null!==(r=t.exec(e));)n.push(r);return n},isHTMLForm:D,hasOwnProperty:M,hasOwnProp:M,reduceDescriptors:$,freezeMethods:t=>{$(t,(e,r)=>{if(R(t)&&-1!==[\"arguments\",\"caller\",\"callee\"].indexOf(r))return!1;if(R(t[r])){if(e.enumerable=!1,\"writable\"in e){e.writable=!1;return}e.set||(e.set=()=>{throw Error(\"Can not rewrite read-only method '\"+r+\"'\")})}})},toObjectSet:(t,e)=>{let r={};return(m(t)?t:String(t).split(e)).forEach(t=>{r[t]=!0}),r},toCamelCase:t=>t.toLowerCase().replace(/[-_\\s]([a-z\\d])(\\w*)/g,function(t,e,r){return e.toUpperCase()+r}),noop:()=>{},toFiniteNumber:(t,e)=>null!=t&&Number.isFinite(t*=1)?t:e,findKey:j,global:P,isContextDefined:k,isSpecCompliantForm:function(t){return!!(t&&R(t.append)&&\"FormData\"===t[p]&&t[h])},toJSONObject:t=>{let e=Array(10),r=(t,n)=>{if(O(t)){if(e.indexOf(t)>=0)return;if(!(\"toJSON\"in t)){e[n]=t;let i=m(t)?[]:{};return _(t,(t,e)=>{let o=r(t,n+1);b(o)||(i[e]=o)}),e[n]=void 0,i}}return t};return r(t,0)},isAsyncFn:z,isThenable:t=>t&&(O(t)||R(t))&&R(t.then)&&R(t.catch),setImmediate:J,asap:W,isIterable:t=>null!=t&&R(t[h])};function V(t,e,r,n,i){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=Error().stack,this.message=t,this.name=\"AxiosError\",e&&(this.code=e),r&&(this.config=r),n&&(this.request=n),i&&(this.response=i,this.status=i.status?i.status:null)}H.inherits(V,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:H.toJSONObject(this.config),code:this.code,status:this.status}}});let K=V.prototype,G={};[\"ERR_BAD_OPTION_VALUE\",\"ERR_BAD_OPTION\",\"ECONNABORTED\",\"ETIMEDOUT\",\"ERR_NETWORK\",\"ERR_FR_TOO_MANY_REDIRECTS\",\"ERR_DEPRECATED\",\"ERR_BAD_RESPONSE\",\"ERR_BAD_REQUEST\",\"ERR_CANCELED\",\"ERR_NOT_SUPPORT\",\"ERR_INVALID_URL\"].forEach(t=>{G[t]={value:t}}),Object.defineProperties(V,G),Object.defineProperty(K,\"isAxiosError\",{value:!0}),V.from=(t,e,r,n,i,o)=>{let s=Object.create(K);return H.toFlatObject(t,s,function(t){return t!==Error.prototype},t=>\"isAxiosError\"!==t),V.call(s,t.message,e,r,n,i),s.cause=t,s.name=t.name,o&&Object.assign(s,o),s};var X=r(4134).hp;function Y(t){return H.isPlainObject(t)||H.isArray(t)}function Q(t){return H.endsWith(t,\"[]\")?t.slice(0,-2):t}function Z(t,e,r){return t?t.concat(e).map(function(t,e){return t=Q(t),!r&&e?\"[\"+t+\"]\":t}).join(r?\".\":\"\"):e}let tt=H.toFlatObject(H,{},null,function(t){return/^is[A-Z]/.test(t)}),te=function(t,e,r){if(!H.isObject(t))throw TypeError(\"target must be an object\");e=e||new FormData;let n=(r=H.toFlatObject(r,{metaTokens:!0,dots:!1,indexes:!1},!1,function(t,e){return!H.isUndefined(e[t])})).metaTokens,i=r.visitor||u,o=r.dots,s=r.indexes,a=(r.Blob||\"undefined\"!=typeof Blob&&Blob)&&H.isSpecCompliantForm(e);if(!H.isFunction(i))throw TypeError(\"visitor must be a function\");function f(t){if(null===t)return\"\";if(H.isDate(t))return t.toISOString();if(H.isBoolean(t))return t.toString();if(!a&&H.isBlob(t))throw new V(\"Blob is not supported. Use a Buffer instead.\");return H.isArrayBuffer(t)||H.isTypedArray(t)?a&&\"function\"==typeof Blob?new Blob([t]):X.from(t):t}function u(t,r,i){let a=t;if(t&&!i&&\"object\"==typeof t)if(H.endsWith(r,\"{}\"))r=n?r:r.slice(0,-2),t=JSON.stringify(t);else{var u;if(H.isArray(t)&&(u=t,H.isArray(u)&&!u.some(Y))||(H.isFileList(t)||H.endsWith(r,\"[]\"))&&(a=H.toArray(t)))return r=Q(r),a.forEach(function(t,n){H.isUndefined(t)||null===t||e.append(!0===s?Z([r],n,o):null===s?r:r+\"[]\",f(t))}),!1}return!!Y(t)||(e.append(Z(i,r,o),f(t)),!1)}let l=[],c=Object.assign(tt,{defaultVisitor:u,convertValue:f,isVisitable:Y});if(!H.isObject(t))throw TypeError(\"data must be an object\");return!function t(r,n){if(!H.isUndefined(r)){if(-1!==l.indexOf(r))throw Error(\"Circular reference detected in \"+n.join(\".\"));l.push(r),H.forEach(r,function(r,o){!0===(!(H.isUndefined(r)||null===r)&&i.call(e,r,H.isString(o)?o.trim():o,n,c))&&t(r,n?n.concat(o):[o])}),l.pop()}}(t),e};function tr(t){let e={\"!\":\"%21\",\"'\":\"%27\",\"(\":\"%28\",\")\":\"%29\",\"~\":\"%7E\",\"%20\":\"+\",\"%00\":\"\\0\"};return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g,function(t){return e[t]})}function tn(t,e){this._pairs=[],t&&te(t,this,e)}let ti=tn.prototype;function to(t){return encodeURIComponent(t).replace(/%3A/gi,\":\").replace(/%24/g,\"$\").replace(/%2C/gi,\",\").replace(/%20/g,\"+\").replace(/%5B/gi,\"[\").replace(/%5D/gi,\"]\")}function ts(t,e,r){let n;if(!e)return t;let i=r&&r.encode||to;H.isFunction(r)&&(r={serialize:r});let o=r&&r.serialize;if(n=o?o(e,r):H.isURLSearchParams(e)?e.toString():new tn(e,r).toString(i)){let e=t.indexOf(\"#\");-1!==e&&(t=t.slice(0,e)),t+=(-1===t.indexOf(\"?\")?\"?\":\"&\")+n}return t}ti.append=function(t,e){this._pairs.push([t,e])},ti.toString=function(t){let e=t?function(e){return t.call(this,e,tr)}:tr;return this._pairs.map(function(t){return e(t[0])+\"=\"+e(t[1])},\"\").join(\"&\")};class ta{constructor(){this.handlers=[]}use(t,e,r){return this.handlers.push({fulfilled:t,rejected:e,synchronous:!!r&&r.synchronous,runWhen:r?r.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){H.forEach(this.handlers,function(e){null!==e&&t(e)})}}let tf={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},tu=\"undefined\"!=typeof URLSearchParams?URLSearchParams:tn,tl=\"undefined\"!=typeof FormData?FormData:null,tc=\"undefined\"!=typeof Blob?Blob:null,th=\"undefined\"!=typeof window&&\"undefined\"!=typeof document,tp=\"object\"==typeof navigator&&navigator||void 0,td=th&&(!tp||0>[\"ReactNative\",\"NativeScript\",\"NS\"].indexOf(tp.product)),ty=\"undefined\"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&\"function\"==typeof self.importScripts,tg=th&&window.location.href||\"http://localhost\",tm={...a,isBrowser:!0,classes:{URLSearchParams:tu,FormData:tl,Blob:tc},protocols:[\"http\",\"https\",\"file\",\"blob\",\"url\",\"data\"]},tb=function(t){if(H.isFormData(t)&&H.isFunction(t.entries)){let e={};return H.forEachEntry(t,(t,r)=>{!function t(e,r,n,i){let o=e[i++];if(\"__proto__\"===o)return!0;let s=Number.isFinite(+o),a=i>=e.length;return(o=!o&&H.isArray(n)?n.length:o,a)?H.hasOwnProp(n,o)?n[o]=[n[o],r]:n[o]=r:(n[o]&&H.isObject(n[o])||(n[o]=[]),t(e,r,n[o],i)&&H.isArray(n[o])&&(n[o]=function(t){let e,r,n={},i=Object.keys(t),o=i.length;for(e=0;e<o;e++)n[r=i[e]]=t[r];return n}(n[o]))),!s}(H.matchAll(/\\w+|\\[(\\w*)]/g,t).map(t=>\"[]\"===t[0]?\"\":t[1]||t[0]),r,e,0)}),e}return null},tw={transitional:tf,adapter:[\"xhr\",\"http\",\"fetch\"],transformRequest:[function(t,e){let r,n=e.getContentType()||\"\",i=n.indexOf(\"application/json\")>-1,o=H.isObject(t);if(o&&H.isHTMLForm(t)&&(t=new FormData(t)),H.isFormData(t))return i?JSON.stringify(tb(t)):t;if(H.isArrayBuffer(t)||H.isBuffer(t)||H.isStream(t)||H.isFile(t)||H.isBlob(t)||H.isReadableStream(t))return t;if(H.isArrayBufferView(t))return t.buffer;if(H.isURLSearchParams(t))return e.setContentType(\"application/x-www-form-urlencoded;charset=utf-8\",!1),t.toString();if(o){if(n.indexOf(\"application/x-www-form-urlencoded\")>-1){var s,a;return(s=t,a=this.formSerializer,te(s,new tm.classes.URLSearchParams,Object.assign({visitor:function(t,e,r,n){return tm.isNode&&H.isBuffer(t)?(this.append(e,t.toString(\"base64\")),!1):n.defaultVisitor.apply(this,arguments)}},a))).toString()}if((r=H.isFileList(t))||n.indexOf(\"multipart/form-data\")>-1){let e=this.env&&this.env.FormData;return te(r?{\"files[]\":t}:t,e&&new e,this.formSerializer)}}if(o||i){e.setContentType(\"application/json\",!1);var f=t;if(H.isString(f))try{return(0,JSON.parse)(f),H.trim(f)}catch(t){if(\"SyntaxError\"!==t.name)throw t}return(0,JSON.stringify)(f)}return t}],transformResponse:[function(t){let e=this.transitional||tw.transitional,r=e&&e.forcedJSONParsing,n=\"json\"===this.responseType;if(H.isResponse(t)||H.isReadableStream(t))return t;if(t&&H.isString(t)&&(r&&!this.responseType||n)){let r=e&&e.silentJSONParsing;try{return JSON.parse(t)}catch(t){if(!r&&n){if(\"SyntaxError\"===t.name)throw V.from(t,V.ERR_BAD_RESPONSE,this,null,this.response);throw t}}}return t}],timeout:0,xsrfCookieName:\"XSRF-TOKEN\",xsrfHeaderName:\"X-XSRF-TOKEN\",maxContentLength:-1,maxBodyLength:-1,env:{FormData:tm.classes.FormData,Blob:tm.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:\"application/json, text/plain, */*\",\"Content-Type\":void 0}}};H.forEach([\"delete\",\"get\",\"head\",\"post\",\"put\",\"patch\"],t=>{tw.headers[t]={}});let tE=H.toObjectSet([\"age\",\"authorization\",\"content-length\",\"content-type\",\"etag\",\"expires\",\"from\",\"host\",\"if-modified-since\",\"if-unmodified-since\",\"last-modified\",\"location\",\"max-forwards\",\"proxy-authorization\",\"referer\",\"retry-after\",\"user-agent\"]),tR=t=>{let e,r,n,i={};return t&&t.split(\"\\n\").forEach(function(t){n=t.indexOf(\":\"),e=t.substring(0,n).trim().toLowerCase(),r=t.substring(n+1).trim(),!e||i[e]&&tE[e]||(\"set-cookie\"===e?i[e]?i[e].push(r):i[e]=[r]:i[e]=i[e]?i[e]+\", \"+r:r)}),i},tA=Symbol(\"internals\");function tO(t){return t&&String(t).trim().toLowerCase()}function tB(t){return!1===t||null==t?t:H.isArray(t)?t.map(tB):String(t)}let tv=t=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(t.trim());function tS(t,e,r,n,i){if(H.isFunction(n))return n.call(this,e,r);if(i&&(e=r),H.isString(e)){if(H.isString(n))return -1!==e.indexOf(n);if(H.isRegExp(n))return n.test(e)}}class tT{constructor(t){t&&this.set(t)}set(t,e,r){let n=this;function i(t,e,r){let i=tO(e);if(!i)throw Error(\"header name must be a non-empty string\");let o=H.findKey(n,i);o&&void 0!==n[o]&&!0!==r&&(void 0!==r||!1===n[o])||(n[o||e]=tB(t))}let o=(t,e)=>H.forEach(t,(t,r)=>i(t,r,e));if(H.isPlainObject(t)||t instanceof this.constructor)o(t,e);else if(H.isString(t)&&(t=t.trim())&&!tv(t))o(tR(t),e);else if(H.isObject(t)&&H.isIterable(t)){let r={},n,i;for(let e of t){if(!H.isArray(e))throw TypeError(\"Object iterator must return a key-value pair\");r[i=e[0]]=(n=r[i])?H.isArray(n)?[...n,e[1]]:[n,e[1]]:e[1]}o(r,e)}else null!=t&&i(e,t,r);return this}get(t,e){if(t=tO(t)){let r=H.findKey(this,t);if(r){let t=this[r];if(!e)return t;if(!0===e){let e,r=Object.create(null),n=/([^\\s,;=]+)\\s*(?:=\\s*([^,;]+))?/g;for(;e=n.exec(t);)r[e[1]]=e[2];return r}if(H.isFunction(e))return e.call(this,t,r);if(H.isRegExp(e))return e.exec(t);throw TypeError(\"parser must be boolean|regexp|function\")}}}has(t,e){if(t=tO(t)){let r=H.findKey(this,t);return!!(r&&void 0!==this[r]&&(!e||tS(this,this[r],r,e)))}return!1}delete(t,e){let r=this,n=!1;function i(t){if(t=tO(t)){let i=H.findKey(r,t);i&&(!e||tS(r,r[i],i,e))&&(delete r[i],n=!0)}}return H.isArray(t)?t.forEach(i):i(t),n}clear(t){let e=Object.keys(this),r=e.length,n=!1;for(;r--;){let i=e[r];(!t||tS(this,this[i],i,t,!0))&&(delete this[i],n=!0)}return n}normalize(t){let e=this,r={};return H.forEach(this,(n,i)=>{let o=H.findKey(r,i);if(o){e[o]=tB(n),delete e[i];return}let s=t?i.trim().toLowerCase().replace(/([a-z\\d])(\\w*)/g,(t,e,r)=>e.toUpperCase()+r):String(i).trim();s!==i&&delete e[i],e[s]=tB(n),r[s]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){let e=Object.create(null);return H.forEach(this,(r,n)=>{null!=r&&!1!==r&&(e[n]=t&&H.isArray(r)?r.join(\", \"):r)}),e}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,e])=>t+\": \"+e).join(\"\\n\")}getSetCookie(){return this.get(\"set-cookie\")||[]}get[Symbol.toStringTag](){return\"AxiosHeaders\"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...e){let r=new this(t);return e.forEach(t=>r.set(t)),r}static accessor(t){let e=(this[tA]=this[tA]={accessors:{}}).accessors,r=this.prototype;function n(t){let n=tO(t);if(!e[n]){let i=H.toCamelCase(\" \"+t);[\"get\",\"set\",\"has\"].forEach(e=>{Object.defineProperty(r,e+i,{value:function(r,n,i){return this[e].call(this,t,r,n,i)},configurable:!0})}),e[n]=!0}}return H.isArray(t)?t.forEach(n):n(t),this}}function tU(t,e){let r=this||tw,n=e||r,i=tT.from(n.headers),o=n.data;return H.forEach(t,function(t){o=t.call(r,o,i.normalize(),e?e.status:void 0)}),i.normalize(),o}function tx(t){return!!(t&&t.__CANCEL__)}function tC(t,e,r){V.call(this,null==t?\"canceled\":t,V.ERR_CANCELED,e,r),this.name=\"CanceledError\"}function tI(t,e,r){let n=r.config.validateStatus;!r.status||!n||n(r.status)?t(r):e(new V(\"Request failed with status code \"+r.status,[V.ERR_BAD_REQUEST,V.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r))}tT.accessor([\"Content-Type\",\"Content-Length\",\"Accept\",\"Accept-Encoding\",\"User-Agent\",\"Authorization\"]),H.reduceDescriptors(tT.prototype,({value:t},e)=>{let r=e[0].toUpperCase()+e.slice(1);return{get:()=>t,set(t){this[r]=t}}}),H.freezeMethods(tT),H.inherits(tC,V,{__CANCEL__:!0});let tL=function(t,e){let r,n=Array(t=t||10),i=Array(t),o=0,s=0;return e=void 0!==e?e:1e3,function(a){let f=Date.now(),u=i[s];r||(r=f),n[o]=a,i[o]=f;let l=s,c=0;for(;l!==o;)c+=n[l++],l%=t;if((o=(o+1)%t)===s&&(s=(s+1)%t),f-r<e)return;let h=u&&f-u;return h?Math.round(1e3*c/h):void 0}},tN=function(t,e){let r,n,i=0,o=1e3/e,s=(e,o=Date.now())=>{i=o,r=null,n&&(clearTimeout(n),n=null),t.apply(null,e)};return[(...t)=>{let e=Date.now(),a=e-i;a>=o?s(t,e):(r=t,n||(n=setTimeout(()=>{n=null,s(r)},o-a)))},()=>r&&s(r)]},t_=(t,e,r=3)=>{let n=0,i=tL(50,250);return tN(r=>{let o=r.loaded,s=r.lengthComputable?r.total:void 0,a=o-n,f=i(a);n=o,t({loaded:o,total:s,progress:s?o/s:void 0,bytes:a,rate:f||void 0,estimated:f&&s&&o<=s?(s-o)/f:void 0,event:r,lengthComputable:null!=s,[e?\"download\":\"upload\"]:!0})},r)},tj=(t,e)=>{let r=null!=t;return[n=>e[0]({lengthComputable:r,total:t,loaded:n}),e[1]]},tP=t=>(...e)=>H.asap(()=>t(...e)),tk=tm.hasStandardBrowserEnv?((t,e)=>r=>(r=new URL(r,tm.origin),t.protocol===r.protocol&&t.host===r.host&&(e||t.port===r.port)))(new URL(tm.origin),tm.navigator&&/(msie|trident)/i.test(tm.navigator.userAgent)):()=>!0,tF=tm.hasStandardBrowserEnv?{write(t,e,r,n,i,o){let s=[t+\"=\"+encodeURIComponent(e)];H.isNumber(r)&&s.push(\"expires=\"+new Date(r).toGMTString()),H.isString(n)&&s.push(\"path=\"+n),H.isString(i)&&s.push(\"domain=\"+i),!0===o&&s.push(\"secure\"),document.cookie=s.join(\"; \")},read(t){let e=document.cookie.match(RegExp(\"(^|;\\\\s*)(\"+t+\")=([^;]*)\"));return e?decodeURIComponent(e[3]):null},remove(t){this.write(t,\"\",Date.now()-864e5)}}:{write(){},read:()=>null,remove(){}};function tD(t,e,r){let n=!/^([a-z][a-z\\d+\\-.]*:)?\\/\\//i.test(e);return t&&(n||!1==r)?e?t.replace(/\\/?\\/$/,\"\")+\"/\"+e.replace(/^\\/+/,\"\"):t:e}let tM=t=>t instanceof tT?{...t}:t;function tq(t,e){e=e||{};let r={};function n(t,e,r,n){return H.isPlainObject(t)&&H.isPlainObject(e)?H.merge.call({caseless:n},t,e):H.isPlainObject(e)?H.merge({},e):H.isArray(e)?e.slice():e}function i(t,e,r,i){return H.isUndefined(e)?H.isUndefined(t)?void 0:n(void 0,t,r,i):n(t,e,r,i)}function o(t,e){if(!H.isUndefined(e))return n(void 0,e)}function s(t,e){return H.isUndefined(e)?H.isUndefined(t)?void 0:n(void 0,t):n(void 0,e)}function a(r,i,o){return o in e?n(r,i):o in t?n(void 0,r):void 0}let f={url:o,method:o,data:o,baseURL:s,transformRequest:s,transformResponse:s,paramsSerializer:s,timeout:s,timeoutMessage:s,withCredentials:s,withXSRFToken:s,adapter:s,responseType:s,xsrfCookieName:s,xsrfHeaderName:s,onUploadProgress:s,onDownloadProgress:s,decompress:s,maxContentLength:s,maxBodyLength:s,beforeRedirect:s,transport:s,httpAgent:s,httpsAgent:s,cancelToken:s,socketPath:s,responseEncoding:s,validateStatus:a,headers:(t,e,r)=>i(tM(t),tM(e),r,!0)};return H.forEach(Object.keys(Object.assign({},t,e)),function(n){let o=f[n]||i,s=o(t[n],e[n],n);H.isUndefined(s)&&o!==a||(r[n]=s)}),r}let t$=t=>{let e,r=tq({},t),{data:n,withXSRFToken:i,xsrfHeaderName:o,xsrfCookieName:s,headers:a,auth:f}=r;if(r.headers=a=tT.from(a),r.url=ts(tD(r.baseURL,r.url,r.allowAbsoluteUrls),t.params,t.paramsSerializer),f&&a.set(\"Authorization\",\"Basic \"+btoa((f.username||\"\")+\":\"+(f.password?unescape(encodeURIComponent(f.password)):\"\"))),H.isFormData(n)){if(tm.hasStandardBrowserEnv||tm.hasStandardBrowserWebWorkerEnv)a.setContentType(void 0);else if(!1!==(e=a.getContentType())){let[t,...r]=e?e.split(\";\").map(t=>t.trim()).filter(Boolean):[];a.setContentType([t||\"multipart/form-data\",...r].join(\"; \"))}}if(tm.hasStandardBrowserEnv&&(i&&H.isFunction(i)&&(i=i(r)),i||!1!==i&&tk(r.url))){let t=o&&s&&tF.read(s);t&&a.set(o,t)}return r},tz=\"undefined\"!=typeof XMLHttpRequest&&function(t){return new Promise(function(e,r){let n,i,o,s,a,f=t$(t),u=f.data,l=tT.from(f.headers).normalize(),{responseType:c,onUploadProgress:h,onDownloadProgress:p}=f;function d(){s&&s(),a&&a(),f.cancelToken&&f.cancelToken.unsubscribe(n),f.signal&&f.signal.removeEventListener(\"abort\",n)}let y=new XMLHttpRequest;function g(){if(!y)return;let n=tT.from(\"getAllResponseHeaders\"in y&&y.getAllResponseHeaders());tI(function(t){e(t),d()},function(t){r(t),d()},{data:c&&\"text\"!==c&&\"json\"!==c?y.response:y.responseText,status:y.status,statusText:y.statusText,headers:n,config:t,request:y}),y=null}y.open(f.method.toUpperCase(),f.url,!0),y.timeout=f.timeout,\"onloadend\"in y?y.onloadend=g:y.onreadystatechange=function(){y&&4===y.readyState&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf(\"file:\"))&&setTimeout(g)},y.onabort=function(){y&&(r(new V(\"Request aborted\",V.ECONNABORTED,t,y)),y=null)},y.onerror=function(){r(new V(\"Network Error\",V.ERR_NETWORK,t,y)),y=null},y.ontimeout=function(){let e=f.timeout?\"timeout of \"+f.timeout+\"ms exceeded\":\"timeout exceeded\",n=f.transitional||tf;f.timeoutErrorMessage&&(e=f.timeoutErrorMessage),r(new V(e,n.clarifyTimeoutError?V.ETIMEDOUT:V.ECONNABORTED,t,y)),y=null},void 0===u&&l.setContentType(null),\"setRequestHeader\"in y&&H.forEach(l.toJSON(),function(t,e){y.setRequestHeader(e,t)}),H.isUndefined(f.withCredentials)||(y.withCredentials=!!f.withCredentials),c&&\"json\"!==c&&(y.responseType=f.responseType),p&&([o,a]=t_(p,!0),y.addEventListener(\"progress\",o)),h&&y.upload&&([i,s]=t_(h),y.upload.addEventListener(\"progress\",i),y.upload.addEventListener(\"loadend\",s)),(f.cancelToken||f.signal)&&(n=e=>{y&&(r(!e||e.type?new tC(null,t,y):e),y.abort(),y=null)},f.cancelToken&&f.cancelToken.subscribe(n),f.signal&&(f.signal.aborted?n():f.signal.addEventListener(\"abort\",n)));let m=function(t){let e=/^([-+\\w]{1,25})(:?\\/\\/|:)/.exec(t);return e&&e[1]||\"\"}(f.url);if(m&&-1===tm.protocols.indexOf(m))return void r(new V(\"Unsupported protocol \"+m+\":\",V.ERR_BAD_REQUEST,t));y.send(u||null)})},tJ=(t,e)=>{let{length:r}=t=t?t.filter(Boolean):[];if(e||r){let r,n=new AbortController,i=function(t){if(!r){r=!0,s();let e=t instanceof Error?t:this.reason;n.abort(e instanceof V?e:new tC(e instanceof Error?e.message:e))}},o=e&&setTimeout(()=>{o=null,i(new V(`timeout ${e} of ms exceeded`,V.ETIMEDOUT))},e),s=()=>{t&&(o&&clearTimeout(o),o=null,t.forEach(t=>{t.unsubscribe?t.unsubscribe(i):t.removeEventListener(\"abort\",i)}),t=null)};t.forEach(t=>t.addEventListener(\"abort\",i));let{signal:a}=n;return a.unsubscribe=()=>H.asap(s),a}},tW=function*(t,e){let r,n=t.byteLength;if(!e||n<e)return void(yield t);let i=0;for(;i<n;)r=i+e,yield t.slice(i,r),i=r},tH=async function*(t,e){for await(let r of tV(t))yield*tW(r,e)},tV=async function*(t){if(t[Symbol.asyncIterator])return void(yield*t);let e=t.getReader();try{for(;;){let{done:t,value:r}=await e.read();if(t)break;yield r}}finally{await e.cancel()}},tK=(t,e,r,n)=>{let i,o=tH(t,e),s=0,a=t=>{!i&&(i=!0,n&&n(t))};return new ReadableStream({async pull(t){try{let{done:e,value:n}=await o.next();if(e){a(),t.close();return}let i=n.byteLength;if(r){let t=s+=i;r(t)}t.enqueue(new Uint8Array(n))}catch(t){throw a(t),t}},cancel:t=>(a(t),o.return())},{highWaterMark:2})},tG=\"function\"==typeof fetch&&\"function\"==typeof Request&&\"function\"==typeof Response,tX=tG&&\"function\"==typeof ReadableStream,tY=tG&&(\"function\"==typeof TextEncoder?(n=new TextEncoder,t=>n.encode(t)):async t=>new Uint8Array(await new Response(t).arrayBuffer())),tQ=(t,...e)=>{try{return!!t(...e)}catch(t){return!1}},tZ=tX&&tQ(()=>{let t=!1,e=new Request(tm.origin,{body:new ReadableStream,method:\"POST\",get duplex(){return t=!0,\"half\"}}).headers.has(\"Content-Type\");return t&&!e}),t0=tX&&tQ(()=>H.isReadableStream(new Response(\"\").body)),t1={stream:t0&&(t=>t.body)};tG&&(s=new Response,[\"text\",\"arrayBuffer\",\"blob\",\"formData\",\"stream\"].forEach(t=>{t1[t]||(t1[t]=H.isFunction(s[t])?e=>e[t]():(e,r)=>{throw new V(`Response type '${t}' is not supported`,V.ERR_NOT_SUPPORT,r)})}));let t2=async t=>{if(null==t)return 0;if(H.isBlob(t))return t.size;if(H.isSpecCompliantForm(t)){let e=new Request(tm.origin,{method:\"POST\",body:t});return(await e.arrayBuffer()).byteLength}return H.isArrayBufferView(t)||H.isArrayBuffer(t)?t.byteLength:(H.isURLSearchParams(t)&&(t+=\"\"),H.isString(t))?(await tY(t)).byteLength:void 0},t5=async(t,e)=>{let r=H.toFiniteNumber(t.getContentLength());return null==r?t2(e):r},t6={http:null,xhr:tz,fetch:tG&&(async t=>{let e,r,{url:n,method:i,data:o,signal:s,cancelToken:a,timeout:f,onDownloadProgress:u,onUploadProgress:l,responseType:c,headers:h,withCredentials:p=\"same-origin\",fetchOptions:d}=t$(t);c=c?(c+\"\").toLowerCase():\"text\";let y=tJ([s,a&&a.toAbortSignal()],f),g=y&&y.unsubscribe&&(()=>{y.unsubscribe()});try{if(l&&tZ&&\"get\"!==i&&\"head\"!==i&&0!==(r=await t5(h,o))){let t,e=new Request(n,{method:\"POST\",body:o,duplex:\"half\"});if(H.isFormData(o)&&(t=e.headers.get(\"content-type\"))&&h.setContentType(t),e.body){let[t,n]=tj(r,t_(tP(l)));o=tK(e.body,65536,t,n)}}H.isString(p)||(p=p?\"include\":\"omit\");let s=\"credentials\"in Request.prototype;e=new Request(n,{...d,signal:y,method:i.toUpperCase(),headers:h.normalize().toJSON(),body:o,duplex:\"half\",credentials:s?p:void 0});let a=await fetch(e,d),f=t0&&(\"stream\"===c||\"response\"===c);if(t0&&(u||f&&g)){let t={};[\"status\",\"statusText\",\"headers\"].forEach(e=>{t[e]=a[e]});let e=H.toFiniteNumber(a.headers.get(\"content-length\")),[r,n]=u&&tj(e,t_(tP(u),!0))||[];a=new Response(tK(a.body,65536,r,()=>{n&&n(),g&&g()}),t)}c=c||\"text\";let m=await t1[H.findKey(t1,c)||\"text\"](a,t);return!f&&g&&g(),await new Promise((r,n)=>{tI(r,n,{data:m,headers:tT.from(a.headers),status:a.status,statusText:a.statusText,config:t,request:e})})}catch(r){if(g&&g(),r&&\"TypeError\"===r.name&&/Load failed|fetch/i.test(r.message))throw Object.assign(new V(\"Network Error\",V.ERR_NETWORK,t,e),{cause:r.cause||r});throw V.from(r,r&&r.code,t,e)}})};H.forEach(t6,(t,e)=>{if(t){try{Object.defineProperty(t,\"name\",{value:e})}catch(t){}Object.defineProperty(t,\"adapterName\",{value:e})}});let t8=t=>`- ${t}`,t3=t=>H.isFunction(t)||null===t||!1===t,t4={getAdapter:t=>{let e,r,{length:n}=t=H.isArray(t)?t:[t],i={};for(let o=0;o<n;o++){let n;if(r=e=t[o],!t3(e)&&void 0===(r=t6[(n=String(e)).toLowerCase()]))throw new V(`Unknown adapter '${n}'`);if(r)break;i[n||\"#\"+o]=r}if(!r){let t=Object.entries(i).map(([t,e])=>`adapter ${t} `+(!1===e?\"is not supported by the environment\":\"is not available in the build\"));throw new V(\"There is no suitable adapter to dispatch the request \"+(n?t.length>1?\"since :\\n\"+t.map(t8).join(\"\\n\"):\" \"+t8(t[0]):\"as no adapter specified\"),\"ERR_NOT_SUPPORT\")}return r}};function t7(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new tC(null,t)}function t9(t){return t7(t),t.headers=tT.from(t.headers),t.data=tU.call(t,t.transformRequest),-1!==[\"post\",\"put\",\"patch\"].indexOf(t.method)&&t.headers.setContentType(\"application/x-www-form-urlencoded\",!1),t4.getAdapter(t.adapter||tw.adapter)(t).then(function(e){return t7(t),e.data=tU.call(t,t.transformResponse,e),e.headers=tT.from(e.headers),e},function(e){return!tx(e)&&(t7(t),e&&e.response&&(e.response.data=tU.call(t,t.transformResponse,e.response),e.response.headers=tT.from(e.response.headers))),Promise.reject(e)})}let et=\"1.10.0\",ee={};[\"object\",\"boolean\",\"number\",\"function\",\"string\",\"symbol\"].forEach((t,e)=>{ee[t]=function(r){return typeof r===t||\"a\"+(e<1?\"n \":\" \")+t}});let er={};ee.transitional=function(t,e,r){function n(t,e){return\"[Axios v\"+et+\"] Transitional option '\"+t+\"'\"+e+(r?\". \"+r:\"\")}return(r,i,o)=>{if(!1===t)throw new V(n(i,\" has been removed\"+(e?\" in \"+e:\"\")),V.ERR_DEPRECATED);return e&&!er[i]&&(er[i]=!0,console.warn(n(i,\" has been deprecated since v\"+e+\" and will be removed in the near future\"))),!t||t(r,i,o)}},ee.spelling=function(t){return(e,r)=>(console.warn(`${r} is likely a misspelling of ${t}`),!0)};let en={assertOptions:function(t,e,r){if(\"object\"!=typeof t)throw new V(\"options must be an object\",V.ERR_BAD_OPTION_VALUE);let n=Object.keys(t),i=n.length;for(;i-- >0;){let o=n[i],s=e[o];if(s){let e=t[o],r=void 0===e||s(e,o,t);if(!0!==r)throw new V(\"option \"+o+\" must be \"+r,V.ERR_BAD_OPTION_VALUE);continue}if(!0!==r)throw new V(\"Unknown option \"+o,V.ERR_BAD_OPTION)}},validators:ee},ei=en.validators;class eo{constructor(t){this.defaults=t||{},this.interceptors={request:new ta,response:new ta}}async request(t,e){try{return await this._request(t,e)}catch(t){if(t instanceof Error){let e={};Error.captureStackTrace?Error.captureStackTrace(e):e=Error();let r=e.stack?e.stack.replace(/^.+\\n/,\"\"):\"\";try{t.stack?r&&!String(t.stack).endsWith(r.replace(/^.+\\n.+\\n/,\"\"))&&(t.stack+=\"\\n\"+r):t.stack=r}catch(t){}}throw t}}_request(t,e){let r,n;\"string\"==typeof t?(e=e||{}).url=t:e=t||{};let{transitional:i,paramsSerializer:o,headers:s}=e=tq(this.defaults,e);void 0!==i&&en.assertOptions(i,{silentJSONParsing:ei.transitional(ei.boolean),forcedJSONParsing:ei.transitional(ei.boolean),clarifyTimeoutError:ei.transitional(ei.boolean)},!1),null!=o&&(H.isFunction(o)?e.paramsSerializer={serialize:o}:en.assertOptions(o,{encode:ei.function,serialize:ei.function},!0)),void 0!==e.allowAbsoluteUrls||(void 0!==this.defaults.allowAbsoluteUrls?e.allowAbsoluteUrls=this.defaults.allowAbsoluteUrls:e.allowAbsoluteUrls=!0),en.assertOptions(e,{baseUrl:ei.spelling(\"baseURL\"),withXsrfToken:ei.spelling(\"withXSRFToken\")},!0),e.method=(e.method||this.defaults.method||\"get\").toLowerCase();let a=s&&H.merge(s.common,s[e.method]);s&&H.forEach([\"delete\",\"get\",\"head\",\"post\",\"put\",\"patch\",\"common\"],t=>{delete s[t]}),e.headers=tT.concat(a,s);let f=[],u=!0;this.interceptors.request.forEach(function(t){(\"function\"!=typeof t.runWhen||!1!==t.runWhen(e))&&(u=u&&t.synchronous,f.unshift(t.fulfilled,t.rejected))});let l=[];this.interceptors.response.forEach(function(t){l.push(t.fulfilled,t.rejected)});let c=0;if(!u){let t=[t9.bind(this),void 0];for(t.unshift.apply(t,f),t.push.apply(t,l),n=t.length,r=Promise.resolve(e);c<n;)r=r.then(t[c++],t[c++]);return r}n=f.length;let h=e;for(c=0;c<n;){let t=f[c++],e=f[c++];try{h=t(h)}catch(t){e.call(this,t);break}}try{r=t9.call(this,h)}catch(t){return Promise.reject(t)}for(c=0,n=l.length;c<n;)r=r.then(l[c++],l[c++]);return r}getUri(t){return ts(tD((t=tq(this.defaults,t)).baseURL,t.url,t.allowAbsoluteUrls),t.params,t.paramsSerializer)}}H.forEach([\"delete\",\"get\",\"head\",\"options\"],function(t){eo.prototype[t]=function(e,r){return this.request(tq(r||{},{method:t,url:e,data:(r||{}).data}))}}),H.forEach([\"post\",\"put\",\"patch\"],function(t){function e(e){return function(r,n,i){return this.request(tq(i||{},{method:t,headers:e?{\"Content-Type\":\"multipart/form-data\"}:{},url:r,data:n}))}}eo.prototype[t]=e(),eo.prototype[t+\"Form\"]=e(!0)});class es{constructor(t){let e;if(\"function\"!=typeof t)throw TypeError(\"executor must be a function.\");this.promise=new Promise(function(t){e=t});let r=this;this.promise.then(t=>{if(!r._listeners)return;let e=r._listeners.length;for(;e-- >0;)r._listeners[e](t);r._listeners=null}),this.promise.then=t=>{let e,n=new Promise(t=>{r.subscribe(t),e=t}).then(t);return n.cancel=function(){r.unsubscribe(e)},n},t(function(t,n,i){r.reason||(r.reason=new tC(t,n,i),e(r.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason)return void t(this.reason);this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;let e=this._listeners.indexOf(t);-1!==e&&this._listeners.splice(e,1)}toAbortSignal(){let t=new AbortController,e=e=>{t.abort(e)};return this.subscribe(e),t.signal.unsubscribe=()=>this.unsubscribe(e),t.signal}static source(){let t;return{token:new es(function(e){t=e}),cancel:t}}}let ea={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(ea).forEach(([t,e])=>{ea[e]=t});let ef=function t(e){let r=new eo(e),n=f(eo.prototype.request,r);return H.extend(n,eo.prototype,r,{allOwnKeys:!0}),H.extend(n,r,null,{allOwnKeys:!0}),n.create=function(r){return t(tq(e,r))},n}(tw);ef.Axios=eo,ef.CanceledError=tC,ef.CancelToken=es,ef.isCancel=tx,ef.VERSION=et,ef.toFormData=te,ef.AxiosError=V,ef.Cancel=ef.CanceledError,ef.all=function(t){return Promise.all(t)},ef.spread=function(t){return function(e){return t.apply(null,e)}},ef.isAxiosError=function(t){return H.isObject(t)&&!0===t.isAxiosError},ef.mergeConfig=tq,ef.AxiosHeaders=tT,ef.formToJSON=t=>tb(H.isHTMLForm(t)?new FormData(t):t),ef.getAdapter=t4.getAdapter,ef.HttpStatusCode=ea,ef.default=ef;let eu=ef},4134:(t,e,r)=>{\"use strict\";let n=r(7719),i=r(7610),o=\"function\"==typeof Symbol&&\"function\"==typeof Symbol.for?Symbol.for(\"nodejs.util.inspect.custom\"):null;function s(t){if(t>0x7fffffff)throw RangeError('The value \"'+t+'\" is invalid for option \"size\"');let e=new Uint8Array(t);return Object.setPrototypeOf(e,a.prototype),e}function a(t,e,r){if(\"number\"==typeof t){if(\"string\"==typeof e)throw TypeError('The \"string\" argument must be of type string. Received type number');return l(t)}return f(t,e,r)}function f(t,e,r){if(\"string\"==typeof t){var n=t,i=e;if((\"string\"!=typeof i||\"\"===i)&&(i=\"utf8\"),!a.isEncoding(i))throw TypeError(\"Unknown encoding: \"+i);let r=0|d(n,i),o=s(r),f=o.write(n,i);return f!==r&&(o=o.slice(0,f)),o}if(ArrayBuffer.isView(t)){var o=t;if(k(o,Uint8Array)){let t=new Uint8Array(o);return h(t.buffer,t.byteOffset,t.byteLength)}return c(o)}if(null==t)throw TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \"+typeof t);if(k(t,ArrayBuffer)||t&&k(t.buffer,ArrayBuffer)||\"undefined\"!=typeof SharedArrayBuffer&&(k(t,SharedArrayBuffer)||t&&k(t.buffer,SharedArrayBuffer)))return h(t,e,r);if(\"number\"==typeof t)throw TypeError('The \"value\" argument must not be of type number. Received type number');let f=t.valueOf&&t.valueOf();if(null!=f&&f!==t)return a.from(f,e,r);let u=function(t){if(a.isBuffer(t)){let e=0|p(t.length),r=s(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?\"number\"!=typeof t.length||function(t){return t!=t}(t.length)?s(0):c(t):\"Buffer\"===t.type&&Array.isArray(t.data)?c(t.data):void 0}(t);if(u)return u;if(\"undefined\"!=typeof Symbol&&null!=Symbol.toPrimitive&&\"function\"==typeof t[Symbol.toPrimitive])return a.from(t[Symbol.toPrimitive](\"string\"),e,r);throw TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \"+typeof t)}function u(t){if(\"number\"!=typeof t)throw TypeError('\"size\" argument must be of type number');if(t<0)throw RangeError('The value \"'+t+'\" is invalid for option \"size\"')}function l(t){return u(t),s(t<0?0:0|p(t))}function c(t){let e=t.length<0?0:0|p(t.length),r=s(e);for(let n=0;n<e;n+=1)r[n]=255&t[n];return r}function h(t,e,r){let n;if(e<0||t.byteLength<e)throw RangeError('\"offset\" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw RangeError('\"length\" is outside of buffer bounds');return Object.setPrototypeOf(n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),a.prototype),n}function p(t){if(t>=0x7fffffff)throw RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x7fffffff bytes\");return 0|t}function d(t,e){if(a.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||k(t,ArrayBuffer))return t.byteLength;if(\"string\"!=typeof t)throw TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);let r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(e){case\"ascii\":case\"latin1\":case\"binary\":return r;case\"utf8\":case\"utf-8\":return _(t).length;case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return 2*r;case\"hex\":return r>>>1;case\"base64\":return j(t).length;default:if(i)return n?-1:_(t).length;e=(\"\"+e).toLowerCase(),i=!0}}function y(t,e,r){let i=!1;if((void 0===e||e<0)&&(e=0),e>this.length||((void 0===r||r>this.length)&&(r=this.length),r<=0||(r>>>=0)<=(e>>>=0)))return\"\";for(t||(t=\"utf8\");;)switch(t){case\"hex\":return function(t,e,r){let n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);let i=\"\";for(let n=e;n<r;++n)i+=F[t[n]];return i}(this,e,r);case\"utf8\":case\"utf-8\":return w(this,e,r);case\"ascii\":return function(t,e,r){let n=\"\";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}(this,e,r);case\"latin1\":case\"binary\":return function(t,e,r){let n=\"\";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}(this,e,r);case\"base64\":var o,s,a;return o=this,s=e,a=r,0===s&&a===o.length?n.fromByteArray(o):n.fromByteArray(o.slice(s,a));case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return function(t,e,r){let n=t.slice(e,r),i=\"\";for(let t=0;t<n.length-1;t+=2)i+=String.fromCharCode(n[t]+256*n[t+1]);return i}(this,e,r);default:if(i)throw TypeError(\"Unknown encoding: \"+t);t=(t+\"\").toLowerCase(),i=!0}}function g(t,e,r){let n=t[e];t[e]=t[r],t[r]=n}function m(t,e,r,n,i){var o;if(0===t.length)return -1;if(\"string\"==typeof r?(n=r,r=0):r>0x7fffffff?r=0x7fffffff:r<-0x80000000&&(r=-0x80000000),(o=r*=1)!=o&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length)if(i)return -1;else r=t.length-1;else if(r<0)if(!i)return -1;else r=0;if(\"string\"==typeof e&&(e=a.from(e,n)),a.isBuffer(e))return 0===e.length?-1:b(t,e,r,n,i);if(\"number\"==typeof e){if(e&=255,\"function\"==typeof Uint8Array.prototype.indexOf)if(i)return Uint8Array.prototype.indexOf.call(t,e,r);else return Uint8Array.prototype.lastIndexOf.call(t,e,r);return b(t,[e],r,n,i)}throw TypeError(\"val must be string, number or Buffer\")}function b(t,e,r,n,i){let o,s=1,a=t.length,f=e.length;if(void 0!==n&&(\"ucs2\"===(n=String(n).toLowerCase())||\"ucs-2\"===n||\"utf16le\"===n||\"utf-16le\"===n)){if(t.length<2||e.length<2)return -1;s=2,a/=2,f/=2,r/=2}function u(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){let n=-1;for(o=r;o<a;o++)if(u(t,o)===u(e,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===f)return n*s}else -1!==n&&(o-=o-n),n=-1}else for(r+f>a&&(r=a-f),o=r;o>=0;o--){let r=!0;for(let n=0;n<f;n++)if(u(t,o+n)!==u(e,n)){r=!1;break}if(r)return o}return -1}function w(t,e,r){r=Math.min(t.length,r);let n=[],i=e;for(;i<r;){let e=t[i],o=null,s=e>239?4:e>223?3:e>191?2:1;if(i+s<=r){let r,n,a,f;switch(s){case 1:e<128&&(o=e);break;case 2:(192&(r=t[i+1]))==128&&(f=(31&e)<<6|63&r)>127&&(o=f);break;case 3:r=t[i+1],n=t[i+2],(192&r)==128&&(192&n)==128&&(f=(15&e)<<12|(63&r)<<6|63&n)>2047&&(f<55296||f>57343)&&(o=f);break;case 4:r=t[i+1],n=t[i+2],a=t[i+3],(192&r)==128&&(192&n)==128&&(192&a)==128&&(f=(15&e)<<18|(63&r)<<12|(63&n)<<6|63&a)>65535&&f<1114112&&(o=f)}}null===o?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=s}var o=n;let s=o.length;if(s<=4096)return String.fromCharCode.apply(String,o);let a=\"\",f=0;for(;f<s;)a+=String.fromCharCode.apply(String,o.slice(f,f+=4096));return a}function E(t,e,r){if(t%1!=0||t<0)throw RangeError(\"offset is not uint\");if(t+e>r)throw RangeError(\"Trying to access beyond buffer length\")}function R(t,e,r,n,i,o){if(!a.isBuffer(t))throw TypeError('\"buffer\" argument must be a Buffer instance');if(e>i||e<o)throw RangeError('\"value\" argument is out of bounds');if(r+n>t.length)throw RangeError(\"Index out of range\")}function A(t,e,r,n,i){C(e,n,i,t,r,7);let o=Number(e&BigInt(0xffffffff));t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o;let s=Number(e>>BigInt(32)&BigInt(0xffffffff));return t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,r}function O(t,e,r,n,i){C(e,n,i,t,r,7);let o=Number(e&BigInt(0xffffffff));t[r+7]=o,o>>=8,t[r+6]=o,o>>=8,t[r+5]=o,o>>=8,t[r+4]=o;let s=Number(e>>BigInt(32)&BigInt(0xffffffff));return t[r+3]=s,s>>=8,t[r+2]=s,s>>=8,t[r+1]=s,s>>=8,t[r]=s,r+8}function B(t,e,r,n,i,o){if(r+n>t.length||r<0)throw RangeError(\"Index out of range\")}function v(t,e,r,n,o){return e*=1,r>>>=0,o||B(t,e,r,4,34028234663852886e22,-34028234663852886e22),i.write(t,e,r,n,23,4),r+4}function S(t,e,r,n,o){return e*=1,r>>>=0,o||B(t,e,r,8,17976931348623157e292,-17976931348623157e292),i.write(t,e,r,n,52,8),r+8}e.hp=a,e.IS=50,a.TYPED_ARRAY_SUPPORT=function(){try{let t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),a.TYPED_ARRAY_SUPPORT||\"undefined\"==typeof console||\"function\"!=typeof console.error||console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"),Object.defineProperty(a.prototype,\"parent\",{enumerable:!0,get:function(){if(a.isBuffer(this))return this.buffer}}),Object.defineProperty(a.prototype,\"offset\",{enumerable:!0,get:function(){if(a.isBuffer(this))return this.byteOffset}}),a.poolSize=8192,a.from=function(t,e,r){return f(t,e,r)},Object.setPrototypeOf(a.prototype,Uint8Array.prototype),Object.setPrototypeOf(a,Uint8Array),a.alloc=function(t,e,r){return(u(t),t<=0)?s(t):void 0!==e?\"string\"==typeof r?s(t).fill(e,r):s(t).fill(e):s(t)},a.allocUnsafe=function(t){return l(t)},a.allocUnsafeSlow=function(t){return l(t)},a.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==a.prototype},a.compare=function(t,e){if(k(t,Uint8Array)&&(t=a.from(t,t.offset,t.byteLength)),k(e,Uint8Array)&&(e=a.from(e,e.offset,e.byteLength)),!a.isBuffer(t)||!a.isBuffer(e))throw TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let r=t.length,n=e.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:+(n<r)},a.isEncoding=function(t){switch(String(t).toLowerCase()){case\"hex\":case\"utf8\":case\"utf-8\":case\"ascii\":case\"latin1\":case\"binary\":case\"base64\":case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return!0;default:return!1}},a.concat=function(t,e){let r;if(!Array.isArray(t))throw TypeError('\"list\" argument must be an Array of Buffers');if(0===t.length)return a.alloc(0);if(void 0===e)for(r=0,e=0;r<t.length;++r)e+=t[r].length;let n=a.allocUnsafe(e),i=0;for(r=0;r<t.length;++r){let e=t[r];if(k(e,Uint8Array))i+e.length>n.length?(a.isBuffer(e)||(e=a.from(e)),e.copy(n,i)):Uint8Array.prototype.set.call(n,e,i);else if(a.isBuffer(e))e.copy(n,i);else throw TypeError('\"list\" argument must be an Array of Buffers');i+=e.length}return n},a.byteLength=d,a.prototype._isBuffer=!0,a.prototype.swap16=function(){let t=this.length;if(t%2!=0)throw RangeError(\"Buffer size must be a multiple of 16-bits\");for(let e=0;e<t;e+=2)g(this,e,e+1);return this},a.prototype.swap32=function(){let t=this.length;if(t%4!=0)throw RangeError(\"Buffer size must be a multiple of 32-bits\");for(let e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},a.prototype.swap64=function(){let t=this.length;if(t%8!=0)throw RangeError(\"Buffer size must be a multiple of 64-bits\");for(let e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},a.prototype.toString=function(){let t=this.length;return 0===t?\"\":0==arguments.length?w(this,0,t):y.apply(this,arguments)},a.prototype.toLocaleString=a.prototype.toString,a.prototype.equals=function(t){if(!a.isBuffer(t))throw TypeError(\"Argument must be a Buffer\");return this===t||0===a.compare(this,t)},a.prototype.inspect=function(){let t=\"\",r=e.IS;return t=this.toString(\"hex\",0,r).replace(/(.{2})/g,\"$1 \").trim(),this.length>r&&(t+=\" ... \"),\"<Buffer \"+t+\">\"},o&&(a.prototype[o]=a.prototype.inspect),a.prototype.compare=function(t,e,r,n,i){if(k(t,Uint8Array)&&(t=a.from(t,t.offset,t.byteLength)),!a.isBuffer(t))throw TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw RangeError(\"out of range index\");if(n>=i&&e>=r)return 0;if(n>=i)return -1;if(e>=r)return 1;if(e>>>=0,r>>>=0,n>>>=0,i>>>=0,this===t)return 0;let o=i-n,s=r-e,f=Math.min(o,s),u=this.slice(n,i),l=t.slice(e,r);for(let t=0;t<f;++t)if(u[t]!==l[t]){o=u[t],s=l[t];break}return o<s?-1:+(s<o)},a.prototype.includes=function(t,e,r){return -1!==this.indexOf(t,e,r)},a.prototype.indexOf=function(t,e,r){return m(this,t,e,r,!0)},a.prototype.lastIndexOf=function(t,e,r){return m(this,t,e,r,!1)},a.prototype.write=function(t,e,r,n){var i,o,s,a,f,u,l,c;if(void 0===e)n=\"utf8\",r=this.length,e=0;else if(void 0===r&&\"string\"==typeof e)n=e,r=this.length,e=0;else if(isFinite(e))e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n=\"utf8\")):(n=r,r=void 0);else throw Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");let h=this.length-e;if((void 0===r||r>h)&&(r=h),t.length>0&&(r<0||e<0)||e>this.length)throw RangeError(\"Attempt to write outside buffer bounds\");n||(n=\"utf8\");let p=!1;for(;;)switch(n){case\"hex\":return function(t,e,r,n){let i;r=Number(r)||0;let o=t.length-r;n?(n=Number(n))>o&&(n=o):n=o;let s=e.length;for(n>s/2&&(n=s/2),i=0;i<n;++i){var a;let n=parseInt(e.substr(2*i,2),16);if((a=n)!=a)break;t[r+i]=n}return i}(this,t,e,r);case\"utf8\":case\"utf-8\":return i=e,o=r,P(_(t,this.length-i),this,i,o);case\"ascii\":case\"latin1\":case\"binary\":return s=e,a=r,P(function(t){let e=[];for(let r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(t),this,s,a);case\"base64\":return f=e,u=r,P(j(t),this,f,u);case\"ucs2\":case\"ucs-2\":case\"utf16le\":case\"utf-16le\":return l=e,c=r,P(function(t,e){let r,n,i=[];for(let o=0;o<t.length&&!((e-=2)<0);++o)n=(r=t.charCodeAt(o))>>8,i.push(r%256),i.push(n);return i}(t,this.length-l),this,l,c);default:if(p)throw TypeError(\"Unknown encoding: \"+n);n=(\"\"+n).toLowerCase(),p=!0}},a.prototype.toJSON=function(){return{type:\"Buffer\",data:Array.prototype.slice.call(this._arr||this,0)}},a.prototype.slice=function(t,e){let r=this.length;t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);let n=this.subarray(t,e);return Object.setPrototypeOf(n,a.prototype),n},a.prototype.readUintLE=a.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||E(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return n},a.prototype.readUintBE=a.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||E(t,e,this.length);let n=this[t+--e],i=1;for(;e>0&&(i*=256);)n+=this[t+--e]*i;return n},a.prototype.readUint8=a.prototype.readUInt8=function(t,e){return t>>>=0,e||E(t,1,this.length),this[t]},a.prototype.readUint16LE=a.prototype.readUInt16LE=function(t,e){return t>>>=0,e||E(t,2,this.length),this[t]|this[t+1]<<8},a.prototype.readUint16BE=a.prototype.readUInt16BE=function(t,e){return t>>>=0,e||E(t,2,this.length),this[t]<<8|this[t+1]},a.prototype.readUint32LE=a.prototype.readUInt32LE=function(t,e){return t>>>=0,e||E(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+0x1000000*this[t+3]},a.prototype.readUint32BE=a.prototype.readUInt32BE=function(t,e){return t>>>=0,e||E(t,4,this.length),0x1000000*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},a.prototype.readBigUInt64LE=D(function(t){I(t>>>=0,\"offset\");let e=this[t],r=this[t+7];(void 0===e||void 0===r)&&L(t,this.length-8);let n=e+256*this[++t]+65536*this[++t]+0x1000000*this[++t],i=this[++t]+256*this[++t]+65536*this[++t]+0x1000000*r;return BigInt(n)+(BigInt(i)<<BigInt(32))}),a.prototype.readBigUInt64BE=D(function(t){I(t>>>=0,\"offset\");let e=this[t],r=this[t+7];(void 0===e||void 0===r)&&L(t,this.length-8);let n=0x1000000*e+65536*this[++t]+256*this[++t]+this[++t],i=0x1000000*this[++t]+65536*this[++t]+256*this[++t]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)}),a.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||E(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*e)),n},a.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||E(t,e,this.length);let n=e,i=1,o=this[t+--n];for(;n>0&&(i*=256);)o+=this[t+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},a.prototype.readInt8=function(t,e){return(t>>>=0,e||E(t,1,this.length),128&this[t])?-((255-this[t]+1)*1):this[t]},a.prototype.readInt16LE=function(t,e){t>>>=0,e||E(t,2,this.length);let r=this[t]|this[t+1]<<8;return 32768&r?0xffff0000|r:r},a.prototype.readInt16BE=function(t,e){t>>>=0,e||E(t,2,this.length);let r=this[t+1]|this[t]<<8;return 32768&r?0xffff0000|r:r},a.prototype.readInt32LE=function(t,e){return t>>>=0,e||E(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},a.prototype.readInt32BE=function(t,e){return t>>>=0,e||E(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},a.prototype.readBigInt64LE=D(function(t){I(t>>>=0,\"offset\");let e=this[t],r=this[t+7];return(void 0===e||void 0===r)&&L(t,this.length-8),(BigInt(this[t+4]+256*this[t+5]+65536*this[t+6]+(r<<24))<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+0x1000000*this[++t])}),a.prototype.readBigInt64BE=D(function(t){I(t>>>=0,\"offset\");let e=this[t],r=this[t+7];return(void 0===e||void 0===r)&&L(t,this.length-8),(BigInt((e<<24)+65536*this[++t]+256*this[++t]+this[++t])<<BigInt(32))+BigInt(0x1000000*this[++t]+65536*this[++t]+256*this[++t]+r)}),a.prototype.readFloatLE=function(t,e){return t>>>=0,e||E(t,4,this.length),i.read(this,t,!0,23,4)},a.prototype.readFloatBE=function(t,e){return t>>>=0,e||E(t,4,this.length),i.read(this,t,!1,23,4)},a.prototype.readDoubleLE=function(t,e){return t>>>=0,e||E(t,8,this.length),i.read(this,t,!0,52,8)},a.prototype.readDoubleBE=function(t,e){return t>>>=0,e||E(t,8,this.length),i.read(this,t,!1,52,8)},a.prototype.writeUintLE=a.prototype.writeUIntLE=function(t,e,r,n){if(t*=1,e>>>=0,r>>>=0,!n){let n=Math.pow(2,8*r)-1;R(this,t,e,r,n,0)}let i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},a.prototype.writeUintBE=a.prototype.writeUIntBE=function(t,e,r,n){if(t*=1,e>>>=0,r>>>=0,!n){let n=Math.pow(2,8*r)-1;R(this,t,e,r,n,0)}let i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},a.prototype.writeUint8=a.prototype.writeUInt8=function(t,e,r){return t*=1,e>>>=0,r||R(this,t,e,1,255,0),this[e]=255&t,e+1},a.prototype.writeUint16LE=a.prototype.writeUInt16LE=function(t,e,r){return t*=1,e>>>=0,r||R(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},a.prototype.writeUint16BE=a.prototype.writeUInt16BE=function(t,e,r){return t*=1,e>>>=0,r||R(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},a.prototype.writeUint32LE=a.prototype.writeUInt32LE=function(t,e,r){return t*=1,e>>>=0,r||R(this,t,e,4,0xffffffff,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},a.prototype.writeUint32BE=a.prototype.writeUInt32BE=function(t,e,r){return t*=1,e>>>=0,r||R(this,t,e,4,0xffffffff,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},a.prototype.writeBigUInt64LE=D(function(t,e=0){return A(this,t,e,BigInt(0),BigInt(\"0xffffffffffffffff\"))}),a.prototype.writeBigUInt64BE=D(function(t,e=0){return O(this,t,e,BigInt(0),BigInt(\"0xffffffffffffffff\"))}),a.prototype.writeIntLE=function(t,e,r,n){if(t*=1,e>>>=0,!n){let n=Math.pow(2,8*r-1);R(this,t,e,r,n-1,-n)}let i=0,o=1,s=0;for(this[e]=255&t;++i<r&&(o*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/o|0)-s&255;return e+r},a.prototype.writeIntBE=function(t,e,r,n){if(t*=1,e>>>=0,!n){let n=Math.pow(2,8*r-1);R(this,t,e,r,n-1,-n)}let i=r-1,o=1,s=0;for(this[e+i]=255&t;--i>=0&&(o*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/o|0)-s&255;return e+r},a.prototype.writeInt8=function(t,e,r){return t*=1,e>>>=0,r||R(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},a.prototype.writeInt16LE=function(t,e,r){return t*=1,e>>>=0,r||R(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},a.prototype.writeInt16BE=function(t,e,r){return t*=1,e>>>=0,r||R(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},a.prototype.writeInt32LE=function(t,e,r){return t*=1,e>>>=0,r||R(this,t,e,4,0x7fffffff,-0x80000000),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},a.prototype.writeInt32BE=function(t,e,r){return t*=1,e>>>=0,r||R(this,t,e,4,0x7fffffff,-0x80000000),t<0&&(t=0xffffffff+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},a.prototype.writeBigInt64LE=D(function(t,e=0){return A(this,t,e,-BigInt(\"0x8000000000000000\"),BigInt(\"0x7fffffffffffffff\"))}),a.prototype.writeBigInt64BE=D(function(t,e=0){return O(this,t,e,-BigInt(\"0x8000000000000000\"),BigInt(\"0x7fffffffffffffff\"))}),a.prototype.writeFloatLE=function(t,e,r){return v(this,t,e,!0,r)},a.prototype.writeFloatBE=function(t,e,r){return v(this,t,e,!1,r)},a.prototype.writeDoubleLE=function(t,e,r){return S(this,t,e,!0,r)},a.prototype.writeDoubleBE=function(t,e,r){return S(this,t,e,!1,r)},a.prototype.copy=function(t,e,r,n){if(!a.isBuffer(t))throw TypeError(\"argument should be a Buffer\");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r||0===t.length||0===this.length)return 0;if(e<0)throw RangeError(\"targetStart out of bounds\");if(r<0||r>=this.length)throw RangeError(\"Index out of range\");if(n<0)throw RangeError(\"sourceEnd out of bounds\");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);let i=n-r;return this===t&&\"function\"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),i},a.prototype.fill=function(t,e,r,n){let i;if(\"string\"==typeof t){if(\"string\"==typeof e?(n=e,e=0,r=this.length):\"string\"==typeof r&&(n=r,r=this.length),void 0!==n&&\"string\"!=typeof n)throw TypeError(\"encoding must be a string\");if(\"string\"==typeof n&&!a.isEncoding(n))throw TypeError(\"Unknown encoding: \"+n);if(1===t.length){let e=t.charCodeAt(0);(\"utf8\"===n&&e<128||\"latin1\"===n)&&(t=e)}}else\"number\"==typeof t?t&=255:\"boolean\"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw RangeError(\"Out of range index\");if(r<=e)return this;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),\"number\"==typeof t)for(i=e;i<r;++i)this[i]=t;else{let o=a.isBuffer(t)?t:a.from(t,n),s=o.length;if(0===s)throw TypeError('The value \"'+t+'\" is invalid for argument \"value\"');for(i=0;i<r-e;++i)this[i+e]=o[i%s]}return this};let T={};function U(t,e,r){T[t]=class extends r{constructor(){super(),Object.defineProperty(this,\"message\",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,\"code\",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function x(t){let e=\"\",r=t.length,n=+(\"-\"===t[0]);for(;r>=n+4;r-=3)e=`_${t.slice(r-3,r)}${e}`;return`${t.slice(0,r)}${e}`}function C(t,e,r,n,i,o){if(t>r||t<e){let n,i=\"bigint\"==typeof e?\"n\":\"\";throw n=o>3?0===e||e===BigInt(0)?`>= 0${i} and < 2${i} ** ${(o+1)*8}${i}`:`>= -(2${i} ** ${(o+1)*8-1}${i}) and < 2 ** ${(o+1)*8-1}${i}`:`>= ${e}${i} and <= ${r}${i}`,new T.ERR_OUT_OF_RANGE(\"value\",n,t)}I(i,\"offset\"),(void 0===n[i]||void 0===n[i+o])&&L(i,n.length-(o+1))}function I(t,e){if(\"number\"!=typeof t)throw new T.ERR_INVALID_ARG_TYPE(e,\"number\",t)}function L(t,e,r){if(Math.floor(t)!==t)throw I(t,r),new T.ERR_OUT_OF_RANGE(r||\"offset\",\"an integer\",t);if(e<0)throw new T.ERR_BUFFER_OUT_OF_BOUNDS;throw new T.ERR_OUT_OF_RANGE(r||\"offset\",`>= ${+!!r} and <= ${e}`,t)}U(\"ERR_BUFFER_OUT_OF_BOUNDS\",function(t){return t?`${t} is outside of buffer bounds`:\"Attempt to access memory outside buffer bounds\"},RangeError),U(\"ERR_INVALID_ARG_TYPE\",function(t,e){return`The \"${t}\" argument must be of type number. Received type ${typeof e}`},TypeError),U(\"ERR_OUT_OF_RANGE\",function(t,e,r){let n=`The value of \"${t}\" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>0x100000000?i=x(String(r)):\"bigint\"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=x(i)),i+=\"n\"),n+=` It must be ${e}. Received ${i}`},RangeError);let N=/[^+/0-9A-Za-z-_]/g;function _(t,e){let r;e=e||1/0;let n=t.length,i=null,o=[];for(let s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319||s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=(i-55296<<10|r-56320)+65536}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else if(r<1114112){if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}else throw Error(\"Invalid code point\")}return o}function j(t){return n.toByteArray(function(t){if((t=(t=t.split(\"=\")[0]).trim().replace(N,\"\")).length<2)return\"\";for(;t.length%4!=0;)t+=\"=\";return t}(t))}function P(t,e,r,n){let i;for(i=0;i<n&&!(i+r>=e.length)&&!(i>=t.length);++i)e[i+r]=t[i];return i}function k(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}let F=function(){let t=\"0123456789abcdef\",e=Array(256);for(let r=0;r<16;++r){let n=16*r;for(let i=0;i<16;++i)e[n+i]=t[r]+t[i]}return e}();function D(t){return\"undefined\"==typeof BigInt?M:t}function M(){throw Error(\"BigInt not supported\")}},7610:(t,e)=>{e.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,f=(1<<a)-1,u=f>>1,l=-7,c=r?i-1:0,h=r?-1:1,p=t[e+c];for(c+=h,o=p&(1<<-l)-1,p>>=-l,l+=a;l>0;o=256*o+t[e+c],c+=h,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=n;l>0;s=256*s+t[e+c],c+=h,l-=8);if(0===o)o=1-u;else{if(o===f)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),o-=u}return(p?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,a,f,u=8*o-i-1,l=(1<<u)-1,c=l>>1,h=5960464477539062e-23*(23===i),p=n?0:o-1,d=n?1:-1,y=+(e<0||0===e&&1/e<0);for(isNaN(e=Math.abs(e))||e===1/0?(a=+!!isNaN(e),s=l):(s=Math.floor(Math.log(e)/Math.LN2),e*(f=Math.pow(2,-s))<1&&(s--,f*=2),s+c>=1?e+=h/f:e+=h*Math.pow(2,1-c),e*f>=2&&(s++,f/=2),s+c>=l?(a=0,s=l):s+c>=1?(a=(e*f-1)*Math.pow(2,i),s+=c):(a=e*Math.pow(2,c-1)*Math.pow(2,i),s=0));i>=8;t[r+p]=255&a,p+=d,a/=256,i-=8);for(s=s<<i|a,u+=i;u>0;t[r+p]=255&s,p+=d,s/=256,u-=8);t[r+p-d]|=128*y}},7719:(t,e)=>{\"use strict\";e.byteLength=function(t){var e=f(t),r=e[0],n=e[1];return(r+n)*3/4-n},e.toByteArray=function(t){var e,r,o=f(t),s=o[0],a=o[1],u=new i((s+a)*3/4-a),l=0,c=a>0?s-4:s;for(r=0;r<c;r+=4)e=n[t.charCodeAt(r)]<<18|n[t.charCodeAt(r+1)]<<12|n[t.charCodeAt(r+2)]<<6|n[t.charCodeAt(r+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;return 2===a&&(e=n[t.charCodeAt(r)]<<2|n[t.charCodeAt(r+1)]>>4,u[l++]=255&e),1===a&&(e=n[t.charCodeAt(r)]<<10|n[t.charCodeAt(r+1)]<<4|n[t.charCodeAt(r+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e),u},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=0,a=n-i;s<a;s+=16383)o.push(function(t,e,n){for(var i,o=[],s=e;s<n;s+=3)i=(t[s]<<16&0xff0000)+(t[s+1]<<8&65280)+(255&t[s+2]),o.push(r[i>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return o.join(\"\")}(t,s,s+16383>a?a:s+16383));return 1===i?o.push(r[(e=t[n-1])>>2]+r[e<<4&63]+\"==\"):2===i&&o.push(r[(e=(t[n-2]<<8)+t[n-1])>>10]+r[e>>4&63]+r[e<<2&63]+\"=\"),o.join(\"\")};for(var r=[],n=[],i=\"undefined\"!=typeof Uint8Array?Uint8Array:Array,o=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",s=0,a=o.length;s<a;++s)r[s]=o[s],n[o.charCodeAt(s)]=s;function f(t){var e=t.length;if(e%4>0)throw Error(\"Invalid string. Length must be a multiple of 4\");var r=t.indexOf(\"=\");-1===r&&(r=e);var n=r===e?0:4-r%4;return[r,n]}n[45]=62,n[95]=63}}]);",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/482-81c1e4479d1d2952.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 429,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 430
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'c' is defined but never used.",
        "line": 1,
        "column": 499,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 500
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'p' is assigned a value but never used.",
        "line": 1,
        "column": 685,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 686
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'v' is defined but never used.",
        "line": 1,
        "column": 708,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 709
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'r' is assigned a value but never used.",
        "line": 1,
        "column": 935,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 936
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'q' is assigned a value but never used.",
        "line": 1,
        "column": 8745,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 8746
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use strict\";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[482],{1482:(e,t,n)=>{n.d(t,{UC:()=>el,B8:()=>ei,bL:()=>ea,l9:()=>eu});var r,o=n(2115),a=n.t(o,2);function i(e,t,{checkForDefaultPrevented:n=!0}={}){return function(r){if(e?.(r),!1===n||!r.defaultPrevented)return t?.(r)}}var u=n(6081);function l(e,t,n){if(!t.has(e))throw TypeError(\"attempted to \"+n+\" private field on non-instance\");return t.get(e)}function s(e,t){var n=l(e,t,\"get\");return n.get?n.get.call(e):n.value}function c(e,t,n){var r=l(e,t,\"set\");if(r.set)r.set.call(e,n);else{if(!r.writable)throw TypeError(\"attempted to set read only private field\");r.value=n}return n}var f=n(6101),d=n(9708),m=n(5155),p=new WeakMap;function v(e,t){if(\"at\"in Array.prototype)return Array.prototype.at.call(e,t);let n=function(e,t){let n=e.length,r=w(t),o=r>=0?r:n+r;return o<0||o>=n?-1:o}(e,t);return -1===n?void 0:e[n]}function w(e){return e!=e||0===e?0:Math.trunc(e)}r=new WeakMap;var y=globalThis?.document?o.useLayoutEffect:()=>{},b=a[\" useId \".trim().toString()]||(()=>void 0),g=0;function h(e){let[t,n]=o.useState(b());return y(()=>{e||n(e=>e??String(g++))},[e]),e||(t?`radix-${t}`:\"\")}var N=n(3655),R=a[\" useInsertionEffect \".trim().toString()]||y;function T({prop:e,defaultProp:t,onChange:n=()=>{},caller:r}){let[a,i,u]=function({defaultProp:e,onChange:t}){let[n,r]=o.useState(e),a=o.useRef(n),i=o.useRef(t);return R(()=>{i.current=t},[t]),o.useEffect(()=>{a.current!==n&&(i.current?.(n),a.current=n)},[n,a]),[n,r,i]}({defaultProp:t,onChange:n}),l=void 0!==e,s=l?e:a;{let t=o.useRef(void 0!==e);o.useEffect(()=>{let e=t.current;if(e!==l){let t=l?\"controlled\":\"uncontrolled\";console.warn(`${r} is changing from ${e?\"controlled\":\"uncontrolled\"} to ${t}. Components should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled value for the lifetime of the component.`)}t.current=l},[l,r])}return[s,o.useCallback(t=>{if(l){let n=\"function\"==typeof t?t(e):t;n!==e&&u.current?.(n)}else i(t)},[l,e,i,u])]}Symbol(\"RADIX:SYNC_STATE\");var x=o.createContext(void 0);function A(e){let t=o.useContext(x);return e||t||\"ltr\"}var M=\"rovingFocusGroup.onEntryFocus\",E={bubbles:!1,cancelable:!0},C=\"RovingFocusGroup\",[I,S,D]=function(e){let t=e+\"CollectionProvider\",[n,r]=(0,u.A)(t),[a,i]=n(t,{collectionRef:{current:null},itemMap:new Map}),l=e=>{let{scope:t,children:n}=e,r=o.useRef(null),i=o.useRef(new Map).current;return(0,m.jsx)(a,{scope:t,itemMap:i,collectionRef:r,children:n})};l.displayName=t;let s=e+\"CollectionSlot\",c=(0,d.TL)(s),p=o.forwardRef((e,t)=>{let{scope:n,children:r}=e,o=i(s,n),a=(0,f.s)(t,o.collectionRef);return(0,m.jsx)(c,{ref:a,children:r})});p.displayName=s;let v=e+\"CollectionItemSlot\",w=\"data-radix-collection-item\",y=(0,d.TL)(v),b=o.forwardRef((e,t)=>{let{scope:n,children:r,...a}=e,u=o.useRef(null),l=(0,f.s)(t,u),s=i(v,n);return o.useEffect(()=>(s.itemMap.set(u,{ref:u,...a}),()=>void s.itemMap.delete(u))),(0,m.jsx)(y,{...{[w]:\"\"},ref:l,children:r})});return b.displayName=v,[{Provider:l,Slot:p,ItemSlot:b},function(t){let n=i(e+\"CollectionConsumer\",t);return o.useCallback(()=>{let e=n.collectionRef.current;if(!e)return[];let t=Array.from(e.querySelectorAll(\"[\".concat(w,\"]\")));return Array.from(n.itemMap.values()).sort((e,n)=>t.indexOf(e.ref.current)-t.indexOf(n.ref.current))},[n.collectionRef,n.itemMap])},r]}(C),[j,F]=(0,u.A)(C,[D]),[O,_]=j(C),P=o.forwardRef((e,t)=>(0,m.jsx)(I.Provider,{scope:e.__scopeRovingFocusGroup,children:(0,m.jsx)(I.Slot,{scope:e.__scopeRovingFocusGroup,children:(0,m.jsx)(L,{...e,ref:t})})}));P.displayName=C;var L=o.forwardRef((e,t)=>{let{__scopeRovingFocusGroup:n,orientation:r,loop:a=!1,dir:u,currentTabStopId:l,defaultCurrentTabStopId:s,onCurrentTabStopIdChange:c,onEntryFocus:d,preventScrollOnEntryFocus:p=!1,...v}=e,w=o.useRef(null),y=(0,f.s)(t,w),b=A(u),[g,h]=T({prop:l,defaultProp:null!=s?s:null,onChange:c,caller:C}),[R,x]=o.useState(!1),I=function(e){let t=o.useRef(e);return o.useEffect(()=>{t.current=e}),o.useMemo(()=>(...e)=>t.current?.(...e),[])}(d),D=S(n),j=o.useRef(!1),[F,_]=o.useState(0);return o.useEffect(()=>{let e=w.current;if(e)return e.addEventListener(M,I),()=>e.removeEventListener(M,I)},[I]),(0,m.jsx)(O,{scope:n,orientation:r,dir:b,loop:a,currentTabStopId:g,onItemFocus:o.useCallback(e=>h(e),[h]),onItemShiftTab:o.useCallback(()=>x(!0),[]),onFocusableItemAdd:o.useCallback(()=>_(e=>e+1),[]),onFocusableItemRemove:o.useCallback(()=>_(e=>e-1),[]),children:(0,m.jsx)(N.sG.div,{tabIndex:R||0===F?-1:0,\"data-orientation\":r,...v,ref:y,style:{outline:\"none\",...e.style},onMouseDown:i(e.onMouseDown,()=>{j.current=!0}),onFocus:i(e.onFocus,e=>{let t=!j.current;if(e.target===e.currentTarget&&t&&!R){let t=new CustomEvent(M,E);if(e.currentTarget.dispatchEvent(t),!t.defaultPrevented){let e=D().filter(e=>e.focusable);$([e.find(e=>e.active),e.find(e=>e.id===g),...e].filter(Boolean).map(e=>e.ref.current),p)}}j.current=!1}),onBlur:i(e.onBlur,()=>x(!1))})})}),k=\"RovingFocusGroupItem\",U=o.forwardRef((e,t)=>{let{__scopeRovingFocusGroup:n,focusable:r=!0,active:a=!1,tabStopId:u,children:l,...s}=e,c=h(),f=u||c,d=_(k,n),p=d.currentTabStopId===f,v=S(n),{onFocusableItemAdd:w,onFocusableItemRemove:y,currentTabStopId:b}=d;return o.useEffect(()=>{if(r)return w(),()=>y()},[r,w,y]),(0,m.jsx)(I.ItemSlot,{scope:n,id:f,focusable:r,active:a,children:(0,m.jsx)(N.sG.span,{tabIndex:p?0:-1,\"data-orientation\":d.orientation,...s,ref:t,onMouseDown:i(e.onMouseDown,e=>{r?d.onItemFocus(f):e.preventDefault()}),onFocus:i(e.onFocus,()=>d.onItemFocus(f)),onKeyDown:i(e.onKeyDown,e=>{if(\"Tab\"===e.key&&e.shiftKey)return void d.onItemShiftTab();if(e.target!==e.currentTarget)return;let t=function(e,t,n){var r;let o=(r=e.key,\"rtl\"!==n?r:\"ArrowLeft\"===r?\"ArrowRight\":\"ArrowRight\"===r?\"ArrowLeft\":r);if(!(\"vertical\"===t&&[\"ArrowLeft\",\"ArrowRight\"].includes(o))&&!(\"horizontal\"===t&&[\"ArrowUp\",\"ArrowDown\"].includes(o)))return G[o]}(e,d.orientation,d.dir);if(void 0!==t){if(e.metaKey||e.ctrlKey||e.altKey||e.shiftKey)return;e.preventDefault();let n=v().filter(e=>e.focusable).map(e=>e.ref.current);if(\"last\"===t)n.reverse();else if(\"prev\"===t||\"next\"===t){\"prev\"===t&&n.reverse();let r=n.indexOf(e.currentTarget);n=d.loop?function(e,t){return e.map((n,r)=>e[(t+r)%e.length])}(n,r+1):n.slice(r+1)}setTimeout(()=>$(n))}}),children:\"function\"==typeof l?l({isCurrentTabStop:p,hasTabStop:null!=b}):l})})});U.displayName=k;var G={ArrowLeft:\"prev\",ArrowUp:\"prev\",ArrowRight:\"next\",ArrowDown:\"next\",PageUp:\"first\",Home:\"first\",PageDown:\"last\",End:\"last\"};function $(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=document.activeElement;for(let r of e)if(r===n||(r.focus({preventScroll:t}),document.activeElement!==n))return}var K=e=>{let{present:t,children:n}=e,r=function(e){var t,n;let[r,a]=o.useState(),i=o.useRef(null),u=o.useRef(e),l=o.useRef(\"none\"),[s,c]=(t=e?\"mounted\":\"unmounted\",n={mounted:{UNMOUNT:\"unmounted\",ANIMATION_OUT:\"unmountSuspended\"},unmountSuspended:{MOUNT:\"mounted\",ANIMATION_END:\"unmounted\"},unmounted:{MOUNT:\"mounted\"}},o.useReducer((e,t)=>{let r=n[e][t];return null!=r?r:e},t));return o.useEffect(()=>{let e=W(i.current);l.current=\"mounted\"===s?e:\"none\"},[s]),y(()=>{let t=i.current,n=u.current;if(n!==e){let r=l.current,o=W(t);e?c(\"MOUNT\"):\"none\"===o||(null==t?void 0:t.display)===\"none\"?c(\"UNMOUNT\"):n&&r!==o?c(\"ANIMATION_OUT\"):c(\"UNMOUNT\"),u.current=e}},[e,c]),y(()=>{if(r){var e;let t,n=null!=(e=r.ownerDocument.defaultView)?e:window,o=e=>{let o=W(i.current).includes(e.animationName);if(e.target===r&&o&&(c(\"ANIMATION_END\"),!u.current)){let e=r.style.animationFillMode;r.style.animationFillMode=\"forwards\",t=n.setTimeout(()=>{\"forwards\"===r.style.animationFillMode&&(r.style.animationFillMode=e)})}},a=e=>{e.target===r&&(l.current=W(i.current))};return r.addEventListener(\"animationstart\",a),r.addEventListener(\"animationcancel\",o),r.addEventListener(\"animationend\",o),()=>{n.clearTimeout(t),r.removeEventListener(\"animationstart\",a),r.removeEventListener(\"animationcancel\",o),r.removeEventListener(\"animationend\",o)}}c(\"ANIMATION_END\")},[r,c]),{isPresent:[\"mounted\",\"unmountSuspended\"].includes(s),ref:o.useCallback(e=>{i.current=e?getComputedStyle(e):null,a(e)},[])}}(t),a=\"function\"==typeof n?n({present:r.isPresent}):o.Children.only(n),i=(0,f.s)(r.ref,function(e){var t,n;let r=null==(t=Object.getOwnPropertyDescriptor(e.props,\"ref\"))?void 0:t.get,o=r&&\"isReactWarning\"in r&&r.isReactWarning;return o?e.ref:(o=(r=null==(n=Object.getOwnPropertyDescriptor(e,\"ref\"))?void 0:n.get)&&\"isReactWarning\"in r&&r.isReactWarning)?e.props.ref:e.props.ref||e.ref}(a));return\"function\"==typeof n||r.isPresent?o.cloneElement(a,{ref:i}):null};function W(e){return(null==e?void 0:e.animationName)||\"none\"}K.displayName=\"Presence\";var V=\"Tabs\",[B,q]=(0,u.A)(V,[F]),z=F(),[H,X]=B(V),Y=o.forwardRef((e,t)=>{let{__scopeTabs:n,value:r,onValueChange:o,defaultValue:a,orientation:i=\"horizontal\",dir:u,activationMode:l=\"automatic\",...s}=e,c=A(u),[f,d]=T({prop:r,onChange:o,defaultProp:null!=a?a:\"\",caller:V});return(0,m.jsx)(H,{scope:n,baseId:h(),value:f,onValueChange:d,orientation:i,dir:c,activationMode:l,children:(0,m.jsx)(N.sG.div,{dir:c,\"data-orientation\":i,...s,ref:t})})});Y.displayName=V;var J=\"TabsList\",Q=o.forwardRef((e,t)=>{let{__scopeTabs:n,loop:r=!0,...o}=e,a=X(J,n),i=z(n);return(0,m.jsx)(P,{asChild:!0,...i,orientation:a.orientation,dir:a.dir,loop:r,children:(0,m.jsx)(N.sG.div,{role:\"tablist\",\"aria-orientation\":a.orientation,...o,ref:t})})});Q.displayName=J;var Z=\"TabsTrigger\",ee=o.forwardRef((e,t)=>{let{__scopeTabs:n,value:r,disabled:o=!1,...a}=e,u=X(Z,n),l=z(n),s=er(u.baseId,r),c=eo(u.baseId,r),f=r===u.value;return(0,m.jsx)(U,{asChild:!0,...l,focusable:!o,active:f,children:(0,m.jsx)(N.sG.button,{type:\"button\",role:\"tab\",\"aria-selected\":f,\"aria-controls\":c,\"data-state\":f?\"active\":\"inactive\",\"data-disabled\":o?\"\":void 0,disabled:o,id:s,...a,ref:t,onMouseDown:i(e.onMouseDown,e=>{o||0!==e.button||!1!==e.ctrlKey?e.preventDefault():u.onValueChange(r)}),onKeyDown:i(e.onKeyDown,e=>{[\" \",\"Enter\"].includes(e.key)&&u.onValueChange(r)}),onFocus:i(e.onFocus,()=>{let e=\"manual\"!==u.activationMode;f||o||!e||u.onValueChange(r)})})})});ee.displayName=Z;var et=\"TabsContent\",en=o.forwardRef((e,t)=>{let{__scopeTabs:n,value:r,forceMount:a,children:i,...u}=e,l=X(et,n),s=er(l.baseId,r),c=eo(l.baseId,r),f=r===l.value,d=o.useRef(f);return o.useEffect(()=>{let e=requestAnimationFrame(()=>d.current=!1);return()=>cancelAnimationFrame(e)},[]),(0,m.jsx)(K,{present:a||f,children:n=>{let{present:r}=n;return(0,m.jsx)(N.sG.div,{\"data-state\":f?\"active\":\"inactive\",\"data-orientation\":l.orientation,role:\"tabpanel\",\"aria-labelledby\":s,hidden:!r,id:c,tabIndex:0,...u,ref:t,style:{...e.style,animationDuration:d.current?\"0s\":void 0},children:r&&i})}})});function er(e,t){return\"\".concat(e,\"-trigger-\").concat(t)}function eo(e,t){return\"\".concat(e,\"-content-\").concat(t)}en.displayName=et;var ea=Y,ei=Q,eu=ee,el=en},3655:(e,t,n)=>{n.d(t,{sG:()=>i});var r=n(2115);n(7650);var o=n(9708),a=n(5155),i=[\"a\",\"button\",\"div\",\"form\",\"h2\",\"h3\",\"img\",\"input\",\"label\",\"li\",\"nav\",\"ol\",\"p\",\"select\",\"span\",\"svg\",\"ul\"].reduce((e,t)=>{let n=(0,o.TL)(`Primitive.${t}`),i=r.forwardRef((e,r)=>{let{asChild:o,...i}=e;return\"undefined\"!=typeof window&&(window[Symbol.for(\"radix-ui\")]=!0),(0,a.jsx)(o?n:t,{...i,ref:r})});return i.displayName=`Primitive.${t}`,{...e,[t]:i}},{})},6081:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(2115),o=n(5155);function a(e,t=[]){let n=[],i=()=>{let t=n.map(e=>r.createContext(e));return function(n){let o=n?.[e]||t;return r.useMemo(()=>({[`__scope${e}`]:{...n,[e]:o}}),[n,o])}};return i.scopeName=e,[function(t,a){let i=r.createContext(a),u=n.length;n=[...n,a];let l=t=>{let{scope:n,children:a,...l}=t,s=n?.[e]?.[u]||i,c=r.useMemo(()=>l,Object.values(l));return(0,o.jsx)(s.Provider,{value:c,children:a})};return l.displayName=t+\"Provider\",[l,function(n,o){let l=o?.[e]?.[u]||i,s=r.useContext(l);if(s)return s;if(void 0!==a)return a;throw Error(`\\`${n}\\` must be used within \\`${t}\\``)}]},function(...e){let t=e[0];if(1===e.length)return t;let n=()=>{let n=e.map(e=>({useScope:e(),scopeName:e.scopeName}));return function(e){let o=n.reduce((t,{useScope:n,scopeName:r})=>{let o=n(e)[`__scope${r}`];return{...t,...o}},{});return r.useMemo(()=>({[`__scope${t.scopeName}`]:o}),[o])}};return n.scopeName=t.scopeName,n}(i,...t)]}}}]);",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/4bd1b696-af78c8fd4172de37.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s1' is defined but never used.",
        "line": 1,
        "column": 158930,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 158932
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'o' is assigned a value but never used.",
        "line": 1,
        "column": 158992,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 158993
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'r' is assigned a value but never used.",
        "line": 1,
        "column": 168229,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 168230
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use strict\";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[441],{9248:(e,n,t)=>{var r,l=t(9509),a=t(6206),o=t(2115),u=t(7650);function i(e){var n=\"https://react.dev/errors/\"+e;if(1<arguments.length){n+=\"?args[]=\"+encodeURIComponent(arguments[1]);for(var t=2;t<arguments.length;t++)n+=\"&args[]=\"+encodeURIComponent(arguments[t])}return\"Minified React error #\"+e+\"; visit \"+n+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}function s(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function c(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do 0!=(4098&(n=e).flags)&&(t=n.return),e=n.return;while(e)}return 3===n.tag?t:null}function f(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function d(e){if(c(e)!==e)throw Error(i(188))}var p=Object.assign,m=Symbol.for(\"react.element\"),h=Symbol.for(\"react.transitional.element\"),g=Symbol.for(\"react.portal\"),y=Symbol.for(\"react.fragment\"),v=Symbol.for(\"react.strict_mode\"),b=Symbol.for(\"react.profiler\"),k=Symbol.for(\"react.provider\"),w=Symbol.for(\"react.consumer\"),S=Symbol.for(\"react.context\"),x=Symbol.for(\"react.forward_ref\"),E=Symbol.for(\"react.suspense\"),C=Symbol.for(\"react.suspense_list\"),z=Symbol.for(\"react.memo\"),P=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");var N=Symbol.for(\"react.activity\");Symbol.for(\"react.legacy_hidden\"),Symbol.for(\"react.tracing_marker\");var L=Symbol.for(\"react.memo_cache_sentinel\");Symbol.for(\"react.view_transition\");var T=Symbol.iterator;function _(e){return null===e||\"object\"!=typeof e?null:\"function\"==typeof(e=T&&e[T]||e[\"@@iterator\"])?e:null}var F=Symbol.for(\"react.client.reference\"),D=Array.isArray,M=o.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,O=u.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,A={pending:!1,data:null,method:null,action:null},R=[],I=-1;function U(e){return{current:e}}function j(e){0>I||(e.current=R[I],R[I]=null,I--)}function H(e,n){R[++I]=e.current,e.current=n}var V=U(null),Q=U(null),$=U(null),B=U(null);function W(e,n){switch(H($,n),H(Q,e),H(V,null),n.nodeType){case 9:case 11:e=(e=n.documentElement)&&(e=e.namespaceURI)?si(e):0;break;default:if(e=n.tagName,n=n.namespaceURI)e=ss(n=si(n),e);else switch(e){case\"svg\":e=1;break;case\"math\":e=2;break;default:e=0}}j(V),H(V,e)}function q(){j(V),j(Q),j($)}function K(e){null!==e.memoizedState&&H(B,e);var n=V.current,t=ss(n,e.type);n!==t&&(H(Q,e),H(V,t))}function Y(e){Q.current===e&&(j(V),j(Q)),B.current===e&&(j(B),sZ._currentValue=A)}function X(e){if(void 0===nO)try{throw Error()}catch(e){var n=e.stack.trim().match(/\\n( *(at )?)/);nO=n&&n[1]||\"\",nA=-1<e.stack.indexOf(\"\\n    at\")?\" (<anonymous>)\":-1<e.stack.indexOf(\"@\")?\"@unknown:0:0\":\"\"}return\"\\n\"+nO+e+nA}var G=!1;function Z(e,n){if(!e||G)return\"\";G=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{var r={DetermineComponentFrameRoot:function(){try{if(n){var t=function(){throw Error()};if(Object.defineProperty(t.prototype,\"props\",{set:function(){throw Error()}}),\"object\"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}}else{try{throw Error()}catch(e){r=e}(t=e())&&\"function\"==typeof t.catch&&t.catch(function(){})}}catch(e){if(e&&r&&\"string\"==typeof e.stack)return[e.stack,r.stack]}return[null,null]}};r.DetermineComponentFrameRoot.displayName=\"DetermineComponentFrameRoot\";var l=Object.getOwnPropertyDescriptor(r.DetermineComponentFrameRoot,\"name\");l&&l.configurable&&Object.defineProperty(r.DetermineComponentFrameRoot,\"name\",{value:\"DetermineComponentFrameRoot\"});var a=r.DetermineComponentFrameRoot(),o=a[0],u=a[1];if(o&&u){var i=o.split(\"\\n\"),s=u.split(\"\\n\");for(l=r=0;r<i.length&&!i[r].includes(\"DetermineComponentFrameRoot\");)r++;for(;l<s.length&&!s[l].includes(\"DetermineComponentFrameRoot\");)l++;if(r===i.length||l===s.length)for(r=i.length-1,l=s.length-1;1<=r&&0<=l&&i[r]!==s[l];)l--;for(;1<=r&&0<=l;r--,l--)if(i[r]!==s[l]){if(1!==r||1!==l)do if(r--,l--,0>l||i[r]!==s[l]){var c=\"\\n\"+i[r].replace(\" at new \",\" at \");return e.displayName&&c.includes(\"<anonymous>\")&&(c=c.replace(\"<anonymous>\",e.displayName)),c}while(1<=r&&0<=l);break}}}finally{G=!1,Error.prepareStackTrace=t}return(t=e?e.displayName||e.name:\"\")?X(t):\"\"}function J(e){try{var n=\"\";do n+=function(e){switch(e.tag){case 26:case 27:case 5:return X(e.type);case 16:return X(\"Lazy\");case 13:return X(\"Suspense\");case 19:return X(\"SuspenseList\");case 0:case 15:return Z(e.type,!1);case 11:return Z(e.type.render,!1);case 1:return Z(e.type,!0);case 31:return X(\"Activity\");default:return\"\"}}(e),e=e.return;while(e);return n}catch(e){return\"\\nError generating stack: \"+e.message+\"\\n\"+e.stack}}var ee=Object.prototype.hasOwnProperty,en=a.unstable_scheduleCallback,et=a.unstable_cancelCallback,er=a.unstable_shouldYield,el=a.unstable_requestPaint,ea=a.unstable_now,eo=a.unstable_getCurrentPriorityLevel,eu=a.unstable_ImmediatePriority,ei=a.unstable_UserBlockingPriority,es=a.unstable_NormalPriority,ec=a.unstable_LowPriority,ef=a.unstable_IdlePriority,ed=a.log,ep=a.unstable_setDisableYieldValue,em=null,eh=null;function eg(e){if(\"function\"==typeof ed&&ep(e),eh&&\"function\"==typeof eh.setStrictMode)try{eh.setStrictMode(em,e)}catch(e){}}var ey=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(ev(e)/eb|0)|0},ev=Math.log,eb=Math.LN2,ek=256,ew=4194304;function eS(e){var n=42&e;if(0!==n)return n;switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:return 64;case 128:return 128;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194048&e;case 4194304:case 8388608:case 0x1000000:case 0x2000000:return 0x3c00000&e;case 0x4000000:return 0x4000000;case 0x8000000:return 0x8000000;case 0x10000000:return 0x10000000;case 0x20000000:return 0x20000000;case 0x40000000:return 0;default:return e}}function ex(e,n,t){var r=e.pendingLanes;if(0===r)return 0;var l=0,a=e.suspendedLanes,o=e.pingedLanes;e=e.warmLanes;var u=0x7ffffff&r;return 0!==u?0!=(r=u&~a)?l=eS(r):0!=(o&=u)?l=eS(o):t||0!=(t=u&~e)&&(l=eS(t)):0!=(u=r&~a)?l=eS(u):0!==o?l=eS(o):t||0!=(t=r&~e)&&(l=eS(t)),0===l?0:0!==n&&n!==l&&0==(n&a)&&((a=l&-l)>=(t=n&-n)||32===a&&0!=(4194048&t))?n:l}function eE(e,n){return 0==(e.pendingLanes&~(e.suspendedLanes&~e.pingedLanes)&n)}function eC(){var e=ek;return 0==(4194048&(ek<<=1))&&(ek=256),e}function ez(){var e=ew;return 0==(0x3c00000&(ew<<=1))&&(ew=4194304),e}function eP(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function eN(e,n){e.pendingLanes|=n,0x10000000!==n&&(e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0)}function eL(e,n,t){e.pendingLanes|=n,e.suspendedLanes&=~n;var r=31-ey(n);e.entangledLanes|=n,e.entanglements[r]=0x40000000|e.entanglements[r]|4194090&t}function eT(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-ey(t),l=1<<r;l&n|e[r]&n&&(e[r]|=n),t&=~l}}function e_(e){switch(e){case 2:e=1;break;case 8:e=4;break;case 32:e=16;break;case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 0x1000000:case 0x2000000:e=128;break;case 0x10000000:e=0x8000000;break;default:e=0}return e}function eF(e){return 2<(e&=-e)?8<e?0!=(0x7ffffff&e)?32:0x10000000:8:2}function eD(){var e=O.p;return 0!==e?e:void 0===(e=window.event)?32:cr(e.type)}var eM=Math.random().toString(36).slice(2),eO=\"__reactFiber$\"+eM,eA=\"__reactProps$\"+eM,eR=\"__reactContainer$\"+eM,eI=\"__reactEvents$\"+eM,eU=\"__reactListeners$\"+eM,ej=\"__reactHandles$\"+eM,eH=\"__reactResources$\"+eM,eV=\"__reactMarker$\"+eM;function eQ(e){delete e[eO],delete e[eA],delete e[eI],delete e[eU],delete e[ej]}function e$(e){var n=e[eO];if(n)return n;for(var t=e.parentNode;t;){if(n=t[eR]||t[eO]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=sx(e);null!==e;){if(t=e[eO])return t;e=sx(e)}return n}t=(e=t).parentNode}return null}function eB(e){if(e=e[eO]||e[eR]){var n=e.tag;if(5===n||6===n||13===n||26===n||27===n||3===n)return e}return null}function eW(e){var n=e.tag;if(5===n||26===n||27===n||6===n)return e.stateNode;throw Error(i(33))}function eq(e){var n=e[eH];return n||(n=e[eH]={hoistableStyles:new Map,hoistableScripts:new Map}),n}function eK(e){e[eV]=!0}var eY=new Set,eX={};function eG(e,n){eZ(e,n),eZ(e+\"Capture\",n)}function eZ(e,n){for(eX[e]=n,e=0;e<n.length;e++)eY.add(n[e])}var eJ=RegExp(\"^[:A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD][:A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]*$\"),e0={},e1={};function e2(e,n,t){if(ee.call(e1,n)||!ee.call(e0,n)&&(eJ.test(n)?e1[n]=!0:(e0[n]=!0,!1)))if(null===t)e.removeAttribute(n);else{switch(typeof t){case\"undefined\":case\"function\":case\"symbol\":e.removeAttribute(n);return;case\"boolean\":var r=n.toLowerCase().slice(0,5);if(\"data-\"!==r&&\"aria-\"!==r)return void e.removeAttribute(n)}e.setAttribute(n,\"\"+t)}}function e3(e,n,t){if(null===t)e.removeAttribute(n);else{switch(typeof t){case\"undefined\":case\"function\":case\"symbol\":case\"boolean\":e.removeAttribute(n);return}e.setAttribute(n,\"\"+t)}}function e4(e,n,t,r){if(null===r)e.removeAttribute(t);else{switch(typeof r){case\"undefined\":case\"function\":case\"symbol\":case\"boolean\":e.removeAttribute(t);return}e.setAttributeNS(n,t,\"\"+r)}}function e8(e){switch(typeof e){case\"bigint\":case\"boolean\":case\"number\":case\"string\":case\"undefined\":case\"object\":return e;default:return\"\"}}function e6(e){var n=e.type;return(e=e.nodeName)&&\"input\"===e.toLowerCase()&&(\"checkbox\"===n||\"radio\"===n)}function e5(e){e._valueTracker||(e._valueTracker=function(e){var n=e6(e)?\"checked\":\"value\",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=\"\"+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&\"function\"==typeof t.get&&\"function\"==typeof t.set){var l=t.get,a=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return l.call(this)},set:function(e){r=\"\"+e,a.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=\"\"+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function e9(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r=\"\";return e&&(r=e6(e)?e.checked?\"true\":\"false\":e.value),(e=r)!==t&&(n.setValue(e),!0)}function e7(e){if(void 0===(e=e||(\"undefined\"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}var ne=/[\\n\"\\\\]/g;function nn(e){return e.replace(ne,function(e){return\"\\\\\"+e.charCodeAt(0).toString(16)+\" \"})}function nt(e,n,t,r,l,a,o,u){e.name=\"\",null!=o&&\"function\"!=typeof o&&\"symbol\"!=typeof o&&\"boolean\"!=typeof o?e.type=o:e.removeAttribute(\"type\"),null!=n?\"number\"===o?(0===n&&\"\"===e.value||e.value!=n)&&(e.value=\"\"+e8(n)):e.value!==\"\"+e8(n)&&(e.value=\"\"+e8(n)):\"submit\"!==o&&\"reset\"!==o||e.removeAttribute(\"value\"),null!=n?nl(e,o,e8(n)):null!=t?nl(e,o,e8(t)):null!=r&&e.removeAttribute(\"value\"),null==l&&null!=a&&(e.defaultChecked=!!a),null!=l&&(e.checked=l&&\"function\"!=typeof l&&\"symbol\"!=typeof l),null!=u&&\"function\"!=typeof u&&\"symbol\"!=typeof u&&\"boolean\"!=typeof u?e.name=\"\"+e8(u):e.removeAttribute(\"name\")}function nr(e,n,t,r,l,a,o,u){if(null!=a&&\"function\"!=typeof a&&\"symbol\"!=typeof a&&\"boolean\"!=typeof a&&(e.type=a),null!=n||null!=t){if((\"submit\"===a||\"reset\"===a)&&null==n)return;t=null!=t?\"\"+e8(t):\"\",n=null!=n?\"\"+e8(n):t,u||n===e.value||(e.value=n),e.defaultValue=n}r=\"function\"!=typeof(r=null!=r?r:l)&&\"symbol\"!=typeof r&&!!r,e.checked=u?e.checked:!!r,e.defaultChecked=!!r,null!=o&&\"function\"!=typeof o&&\"symbol\"!=typeof o&&\"boolean\"!=typeof o&&(e.name=o)}function nl(e,n,t){\"number\"===n&&e7(e.ownerDocument)===e||e.defaultValue===\"\"+t||(e.defaultValue=\"\"+t)}function na(e,n,t,r){if(e=e.options,n){n={};for(var l=0;l<t.length;l++)n[\"$\"+t[l]]=!0;for(t=0;t<e.length;t++)l=n.hasOwnProperty(\"$\"+e[t].value),e[t].selected!==l&&(e[t].selected=l),l&&r&&(e[t].defaultSelected=!0)}else{for(l=0,t=\"\"+e8(t),n=null;l<e.length;l++){if(e[l].value===t){e[l].selected=!0,r&&(e[l].defaultSelected=!0);return}null!==n||e[l].disabled||(n=e[l])}null!==n&&(n.selected=!0)}}function no(e,n,t){if(null!=n&&((n=\"\"+e8(n))!==e.value&&(e.value=n),null==t)){e.defaultValue!==n&&(e.defaultValue=n);return}e.defaultValue=null!=t?\"\"+e8(t):\"\"}function nu(e,n,t,r){if(null==n){if(null!=r){if(null!=t)throw Error(i(92));if(D(r)){if(1<r.length)throw Error(i(93));r=r[0]}t=r}null==t&&(t=\"\"),n=t}e.defaultValue=t=e8(n),(r=e.textContent)===t&&\"\"!==r&&null!==r&&(e.value=r)}function ni(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType){t.nodeValue=n;return}}e.textContent=n}var ns=new Set(\"animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp\".split(\" \"));function nc(e,n,t){var r=0===n.indexOf(\"--\");null==t||\"boolean\"==typeof t||\"\"===t?r?e.setProperty(n,\"\"):\"float\"===n?e.cssFloat=\"\":e[n]=\"\":r?e.setProperty(n,t):\"number\"!=typeof t||0===t||ns.has(n)?\"float\"===n?e.cssFloat=t:e[n]=(\"\"+t).trim():e[n]=t+\"px\"}function nf(e,n,t){if(null!=n&&\"object\"!=typeof n)throw Error(i(62));if(e=e.style,null!=t){for(var r in t)!t.hasOwnProperty(r)||null!=n&&n.hasOwnProperty(r)||(0===r.indexOf(\"--\")?e.setProperty(r,\"\"):\"float\"===r?e.cssFloat=\"\":e[r]=\"\");for(var l in n)r=n[l],n.hasOwnProperty(l)&&t[l]!==r&&nc(e,l,r)}else for(var a in n)n.hasOwnProperty(a)&&nc(e,a,n[a])}function nd(e){if(-1===e.indexOf(\"-\"))return!1;switch(e){case\"annotation-xml\":case\"color-profile\":case\"font-face\":case\"font-face-src\":case\"font-face-uri\":case\"font-face-format\":case\"font-face-name\":case\"missing-glyph\":return!1;default:return!0}}var np=new Map([[\"acceptCharset\",\"accept-charset\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"],[\"crossOrigin\",\"crossorigin\"],[\"accentHeight\",\"accent-height\"],[\"alignmentBaseline\",\"alignment-baseline\"],[\"arabicForm\",\"arabic-form\"],[\"baselineShift\",\"baseline-shift\"],[\"capHeight\",\"cap-height\"],[\"clipPath\",\"clip-path\"],[\"clipRule\",\"clip-rule\"],[\"colorInterpolation\",\"color-interpolation\"],[\"colorInterpolationFilters\",\"color-interpolation-filters\"],[\"colorProfile\",\"color-profile\"],[\"colorRendering\",\"color-rendering\"],[\"dominantBaseline\",\"dominant-baseline\"],[\"enableBackground\",\"enable-background\"],[\"fillOpacity\",\"fill-opacity\"],[\"fillRule\",\"fill-rule\"],[\"floodColor\",\"flood-color\"],[\"floodOpacity\",\"flood-opacity\"],[\"fontFamily\",\"font-family\"],[\"fontSize\",\"font-size\"],[\"fontSizeAdjust\",\"font-size-adjust\"],[\"fontStretch\",\"font-stretch\"],[\"fontStyle\",\"font-style\"],[\"fontVariant\",\"font-variant\"],[\"fontWeight\",\"font-weight\"],[\"glyphName\",\"glyph-name\"],[\"glyphOrientationHorizontal\",\"glyph-orientation-horizontal\"],[\"glyphOrientationVertical\",\"glyph-orientation-vertical\"],[\"horizAdvX\",\"horiz-adv-x\"],[\"horizOriginX\",\"horiz-origin-x\"],[\"imageRendering\",\"image-rendering\"],[\"letterSpacing\",\"letter-spacing\"],[\"lightingColor\",\"lighting-color\"],[\"markerEnd\",\"marker-end\"],[\"markerMid\",\"marker-mid\"],[\"markerStart\",\"marker-start\"],[\"overlinePosition\",\"overline-position\"],[\"overlineThickness\",\"overline-thickness\"],[\"paintOrder\",\"paint-order\"],[\"panose-1\",\"panose-1\"],[\"pointerEvents\",\"pointer-events\"],[\"renderingIntent\",\"rendering-intent\"],[\"shapeRendering\",\"shape-rendering\"],[\"stopColor\",\"stop-color\"],[\"stopOpacity\",\"stop-opacity\"],[\"strikethroughPosition\",\"strikethrough-position\"],[\"strikethroughThickness\",\"strikethrough-thickness\"],[\"strokeDasharray\",\"stroke-dasharray\"],[\"strokeDashoffset\",\"stroke-dashoffset\"],[\"strokeLinecap\",\"stroke-linecap\"],[\"strokeLinejoin\",\"stroke-linejoin\"],[\"strokeMiterlimit\",\"stroke-miterlimit\"],[\"strokeOpacity\",\"stroke-opacity\"],[\"strokeWidth\",\"stroke-width\"],[\"textAnchor\",\"text-anchor\"],[\"textDecoration\",\"text-decoration\"],[\"textRendering\",\"text-rendering\"],[\"transformOrigin\",\"transform-origin\"],[\"underlinePosition\",\"underline-position\"],[\"underlineThickness\",\"underline-thickness\"],[\"unicodeBidi\",\"unicode-bidi\"],[\"unicodeRange\",\"unicode-range\"],[\"unitsPerEm\",\"units-per-em\"],[\"vAlphabetic\",\"v-alphabetic\"],[\"vHanging\",\"v-hanging\"],[\"vIdeographic\",\"v-ideographic\"],[\"vMathematical\",\"v-mathematical\"],[\"vectorEffect\",\"vector-effect\"],[\"vertAdvY\",\"vert-adv-y\"],[\"vertOriginX\",\"vert-origin-x\"],[\"vertOriginY\",\"vert-origin-y\"],[\"wordSpacing\",\"word-spacing\"],[\"writingMode\",\"writing-mode\"],[\"xmlnsXlink\",\"xmlns:xlink\"],[\"xHeight\",\"x-height\"]]),nm=/^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*:/i;function nh(e){return nm.test(\"\"+e)?\"javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')\":e}var ng=null;function ny(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var nv=null,nb=null;function nk(e){var n=eB(e);if(n&&(e=n.stateNode)){var t=e[eA]||null;switch(e=n.stateNode,n.type){case\"input\":if(nt(e,t.value,t.defaultValue,t.defaultValue,t.checked,t.defaultChecked,t.type,t.name),n=t.name,\"radio\"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll('input[name=\"'+nn(\"\"+n)+'\"][type=\"radio\"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var l=r[eA]||null;if(!l)throw Error(i(90));nt(r,l.value,l.defaultValue,l.defaultValue,l.checked,l.defaultChecked,l.type,l.name)}}for(n=0;n<t.length;n++)(r=t[n]).form===e.form&&e9(r)}break;case\"textarea\":no(e,t.value,t.defaultValue);break;case\"select\":null!=(n=t.value)&&na(e,!!t.multiple,n,!1)}}}var nw=!1;function nS(e,n,t){if(nw)return e(n,t);nw=!0;try{return e(n)}finally{if(nw=!1,(null!==nv||null!==nb)&&(ie(),nv&&(n=nv,e=nb,nb=nv=null,nk(n),e)))for(n=0;n<e.length;n++)nk(e[n])}}function nx(e,n){var t=e.stateNode;if(null===t)return null;var r=t[eA]||null;if(null===r)return null;switch(t=r[n],n){case\"onClick\":case\"onClickCapture\":case\"onDoubleClick\":case\"onDoubleClickCapture\":case\"onMouseDown\":case\"onMouseDownCapture\":case\"onMouseMove\":case\"onMouseMoveCapture\":case\"onMouseUp\":case\"onMouseUpCapture\":case\"onMouseEnter\":(r=!r.disabled)||(r=\"button\"!==(e=e.type)&&\"input\"!==e&&\"select\"!==e&&\"textarea\"!==e),e=!r;break;default:e=!1}if(e)return null;if(t&&\"function\"!=typeof t)throw Error(i(231,n,typeof t));return t}var nE=\"undefined\"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,nC=!1;if(nE)try{var nz={};Object.defineProperty(nz,\"passive\",{get:function(){nC=!0}}),window.addEventListener(\"test\",nz,nz),window.removeEventListener(\"test\",nz,nz)}catch(e){nC=!1}var nP=null,nN=null,nL=null;function nT(){if(nL)return nL;var e,n,t=nN,r=t.length,l=\"value\"in nP?nP.value:nP.textContent,a=l.length;for(e=0;e<r&&t[e]===l[e];e++);var o=r-e;for(n=1;n<=o&&t[r-n]===l[a-n];n++);return nL=l.slice(e,1<n?1-n:void 0)}function n_(e){var n=e.keyCode;return\"charCode\"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function nF(){return!0}function nD(){return!1}function nM(e){function n(n,t,r,l,a){for(var o in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=l,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(n=e[o],this[o]=n?n(l):l[o]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?nF:nD,this.isPropagationStopped=nD,this}return p(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():\"unknown\"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nF)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():\"unknown\"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nF)},persist:function(){},isPersistent:nF}),n}var nO,nA,nR,nI,nU,nj={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},nH=nM(nj),nV=p({},nj,{view:0,detail:0}),nQ=nM(nV),n$=p({},nV,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:n1,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return\"movementX\"in e?e.movementX:(e!==nU&&(nU&&\"mousemove\"===e.type?(nR=e.screenX-nU.screenX,nI=e.screenY-nU.screenY):nI=nR=0,nU=e),nR)},movementY:function(e){return\"movementY\"in e?e.movementY:nI}}),nB=nM(n$),nW=nM(p({},n$,{dataTransfer:0})),nq=nM(p({},nV,{relatedTarget:0})),nK=nM(p({},nj,{animationName:0,elapsedTime:0,pseudoElement:0})),nY=nM(p({},nj,{clipboardData:function(e){return\"clipboardData\"in e?e.clipboardData:window.clipboardData}})),nX=nM(p({},nj,{data:0})),nG={Esc:\"Escape\",Spacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},nZ={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},nJ={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function n0(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=nJ[e])&&!!n[e]}function n1(){return n0}var n2=nM(p({},nV,{key:function(e){if(e.key){var n=nG[e.key]||e.key;if(\"Unidentified\"!==n)return n}return\"keypress\"===e.type?13===(e=n_(e))?\"Enter\":String.fromCharCode(e):\"keydown\"===e.type||\"keyup\"===e.type?nZ[e.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:n1,charCode:function(e){return\"keypress\"===e.type?n_(e):0},keyCode:function(e){return\"keydown\"===e.type||\"keyup\"===e.type?e.keyCode:0},which:function(e){return\"keypress\"===e.type?n_(e):\"keydown\"===e.type||\"keyup\"===e.type?e.keyCode:0}})),n3=nM(p({},n$,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),n4=nM(p({},nV,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:n1})),n8=nM(p({},nj,{propertyName:0,elapsedTime:0,pseudoElement:0})),n6=nM(p({},n$,{deltaX:function(e){return\"deltaX\"in e?e.deltaX:\"wheelDeltaX\"in e?-e.wheelDeltaX:0},deltaY:function(e){return\"deltaY\"in e?e.deltaY:\"wheelDeltaY\"in e?-e.wheelDeltaY:\"wheelDelta\"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),n5=nM(p({},nj,{newState:0,oldState:0})),n9=[9,13,27,32],n7=nE&&\"CompositionEvent\"in window,te=null;nE&&\"documentMode\"in document&&(te=document.documentMode);var tn=nE&&\"TextEvent\"in window&&!te,tt=nE&&(!n7||te&&8<te&&11>=te),tr=!1;function tl(e,n){switch(e){case\"keyup\":return -1!==n9.indexOf(n.keyCode);case\"keydown\":return 229!==n.keyCode;case\"keypress\":case\"mousedown\":case\"focusout\":return!0;default:return!1}}function ta(e){return\"object\"==typeof(e=e.detail)&&\"data\"in e?e.data:null}var to=!1,tu={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ti(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return\"input\"===n?!!tu[e.type]:\"textarea\"===n}function ts(e,n,t,r){nv?nb?nb.push(r):nb=[r]:nv=r,0<(n=i4(n,\"onChange\")).length&&(t=new nH(\"onChange\",\"change\",null,t,r),e.push({event:t,listeners:n}))}var tc=null,tf=null;function td(e){iX(e,0)}function tp(e){if(e9(eW(e)))return e}function tm(e,n){if(\"change\"===e)return n}var th=!1;if(nE){if(nE){var tg=\"oninput\"in document;if(!tg){var ty=document.createElement(\"div\");ty.setAttribute(\"oninput\",\"return;\"),tg=\"function\"==typeof ty.oninput}r=tg}else r=!1;th=r&&(!document.documentMode||9<document.documentMode)}function tv(){tc&&(tc.detachEvent(\"onpropertychange\",tb),tf=tc=null)}function tb(e){if(\"value\"===e.propertyName&&tp(tf)){var n=[];ts(n,tf,e,ny(e)),nS(td,n)}}function tk(e,n,t){\"focusin\"===e?(tv(),tc=n,tf=t,tc.attachEvent(\"onpropertychange\",tb)):\"focusout\"===e&&tv()}function tw(e){if(\"selectionchange\"===e||\"keyup\"===e||\"keydown\"===e)return tp(tf)}function tS(e,n){if(\"click\"===e)return tp(n)}function tx(e,n){if(\"input\"===e||\"change\"===e)return tp(n)}var tE=\"function\"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function tC(e,n){if(tE(e,n))return!0;if(\"object\"!=typeof e||null===e||\"object\"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var l=t[r];if(!ee.call(n,l)||!tE(e[l],n[l]))return!1}return!0}function tz(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function tP(e,n){var t,r=tz(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=tz(r)}}function tN(e){e=null!=e&&null!=e.ownerDocument&&null!=e.ownerDocument.defaultView?e.ownerDocument.defaultView:window;for(var n=e7(e.document);n instanceof e.HTMLIFrameElement;){try{var t=\"string\"==typeof n.contentWindow.location.href}catch(e){t=!1}if(t)e=n.contentWindow;else break;n=e7(e.document)}return n}function tL(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&(\"input\"===n&&(\"text\"===e.type||\"search\"===e.type||\"tel\"===e.type||\"url\"===e.type||\"password\"===e.type)||\"textarea\"===n||\"true\"===e.contentEditable)}var tT=nE&&\"documentMode\"in document&&11>=document.documentMode,t_=null,tF=null,tD=null,tM=!1;function tO(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;tM||null==t_||t_!==e7(r)||(r=\"selectionStart\"in(r=t_)&&tL(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},tD&&tC(tD,r)||(tD=r,0<(r=i4(tF,\"onSelect\")).length&&(n=new nH(\"onSelect\",\"select\",null,n,t),e.push({event:n,listeners:r}),n.target=t_)))}function tA(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t[\"Webkit\"+e]=\"webkit\"+n,t[\"Moz\"+e]=\"moz\"+n,t}var tR={animationend:tA(\"Animation\",\"AnimationEnd\"),animationiteration:tA(\"Animation\",\"AnimationIteration\"),animationstart:tA(\"Animation\",\"AnimationStart\"),transitionrun:tA(\"Transition\",\"TransitionRun\"),transitionstart:tA(\"Transition\",\"TransitionStart\"),transitioncancel:tA(\"Transition\",\"TransitionCancel\"),transitionend:tA(\"Transition\",\"TransitionEnd\")},tI={},tU={};function tj(e){if(tI[e])return tI[e];if(!tR[e])return e;var n,t=tR[e];for(n in t)if(t.hasOwnProperty(n)&&n in tU)return tI[e]=t[n];return e}nE&&(tU=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete tR.animationend.animation,delete tR.animationiteration.animation,delete tR.animationstart.animation),\"TransitionEvent\"in window||delete tR.transitionend.transition);var tH=tj(\"animationend\"),tV=tj(\"animationiteration\"),tQ=tj(\"animationstart\"),t$=tj(\"transitionrun\"),tB=tj(\"transitionstart\"),tW=tj(\"transitioncancel\"),tq=tj(\"transitionend\"),tK=new Map,tY=\"abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");function tX(e,n){tK.set(e,n),eG(n,[e])}tY.push(\"scrollEnd\");var tG=new WeakMap;function tZ(e,n){if(\"object\"==typeof e&&null!==e){var t=tG.get(e);return void 0!==t?t:(n={value:e,source:n,stack:J(n)},tG.set(e,n),n)}return{value:e,source:n,stack:J(n)}}var tJ=[],t0=0,t1=0;function t2(){for(var e=t0,n=t1=t0=0;n<e;){var t=tJ[n];tJ[n++]=null;var r=tJ[n];tJ[n++]=null;var l=tJ[n];tJ[n++]=null;var a=tJ[n];if(tJ[n++]=null,null!==r&&null!==l){var o=r.pending;null===o?l.next=l:(l.next=o.next,o.next=l),r.pending=l}0!==a&&t6(t,l,a)}}function t3(e,n,t,r){tJ[t0++]=e,tJ[t0++]=n,tJ[t0++]=t,tJ[t0++]=r,t1|=r,e.lanes|=r,null!==(e=e.alternate)&&(e.lanes|=r)}function t4(e,n,t,r){return t3(e,n,t,r),t5(e)}function t8(e,n){return t3(e,null,null,n),t5(e)}function t6(e,n,t){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t);for(var l=!1,a=e.return;null!==a;)a.childLanes|=t,null!==(r=a.alternate)&&(r.childLanes|=t),22===a.tag&&(null===(e=a.stateNode)||1&e._visibility||(l=!0)),e=a,a=a.return;return 3===e.tag?(a=e.stateNode,l&&null!==n&&(l=31-ey(t),null===(r=(e=a.hiddenUpdates)[l])?e[l]=[n]:r.push(n),n.lane=0x20000000|t),a):null}function t5(e){if(50<u2)throw u2=0,u3=null,Error(i(185));for(var n=e.return;null!==n;)n=(e=n).return;return 3===e.tag?e.stateNode:null}var t9={};function t7(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.refCleanup=this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function re(e,n,t,r){return new t7(e,n,t,r)}function rn(e){return!(!(e=e.prototype)||!e.isReactComponent)}function rt(e,n){var t=e.alternate;return null===t?((t=re(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=0x3e00000&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t.refCleanup=e.refCleanup,t}function rr(e,n){e.flags&=0x3e00002;var t=e.alternate;return null===t?(e.childLanes=0,e.lanes=n,e.child=null,e.subtreeFlags=0,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null):(e.childLanes=t.childLanes,e.lanes=t.lanes,e.child=t.child,e.subtreeFlags=0,e.deletions=null,e.memoizedProps=t.memoizedProps,e.memoizedState=t.memoizedState,e.updateQueue=t.updateQueue,e.type=t.type,e.dependencies=null===(n=t.dependencies)?null:{lanes:n.lanes,firstContext:n.firstContext}),e}function rl(e,n,t,r,l,a){var o=0;if(r=e,\"function\"==typeof e)rn(e)&&(o=1);else if(\"string\"==typeof e)o=!function(e,n,t){if(1===t||null!=n.itemProp)return!1;switch(e){case\"meta\":case\"title\":return!0;case\"style\":if(\"string\"!=typeof n.precedence||\"string\"!=typeof n.href||\"\"===n.href)break;return!0;case\"link\":if(\"string\"!=typeof n.rel||\"string\"!=typeof n.href||\"\"===n.href||n.onLoad||n.onError)break;if(\"stylesheet\"===n.rel)return e=n.disabled,\"string\"==typeof n.precedence&&null==e;return!0;case\"script\":if(n.async&&\"function\"!=typeof n.async&&\"symbol\"!=typeof n.async&&!n.onLoad&&!n.onError&&n.src&&\"string\"==typeof n.src)return!0}return!1}(e,t,V.current)?\"html\"===e||\"head\"===e||\"body\"===e?27:5:26;else e:switch(e){case N:return(e=re(31,t,n,l)).elementType=N,e.lanes=a,e;case y:return ra(t.children,l,a,n);case v:o=8,l|=24;break;case b:return(e=re(12,t,n,2|l)).elementType=b,e.lanes=a,e;case E:return(e=re(13,t,n,l)).elementType=E,e.lanes=a,e;case C:return(e=re(19,t,n,l)).elementType=C,e.lanes=a,e;default:if(\"object\"==typeof e&&null!==e)switch(e.$$typeof){case k:case S:o=10;break e;case w:o=9;break e;case x:o=11;break e;case z:o=14;break e;case P:o=16,r=null;break e}o=29,t=Error(i(130,null===e?\"null\":typeof e,\"\")),r=null}return(n=re(o,t,n,l)).elementType=e,n.type=r,n.lanes=a,n}function ra(e,n,t,r){return(e=re(7,e,r,n)).lanes=t,e}function ro(e,n,t){return(e=re(6,e,null,n)).lanes=t,e}function ru(e,n,t){return(n=re(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}var ri=[],rs=0,rc=null,rf=0,rd=[],rp=0,rm=null,rh=1,rg=\"\";function ry(e,n){ri[rs++]=rf,ri[rs++]=rc,rc=e,rf=n}function rv(e,n,t){rd[rp++]=rh,rd[rp++]=rg,rd[rp++]=rm,rm=e;var r=rh;e=rg;var l=32-ey(r)-1;r&=~(1<<l),t+=1;var a=32-ey(n)+l;if(30<a){var o=l-l%5;a=(r&(1<<o)-1).toString(32),r>>=o,l-=o,rh=1<<32-ey(n)+l|t<<l|r,rg=a+e}else rh=1<<a|t<<l|r,rg=e}function rb(e){null!==e.return&&(ry(e,1),rv(e,1,0))}function rk(e){for(;e===rc;)rc=ri[--rs],ri[rs]=null,rf=ri[--rs],ri[rs]=null;for(;e===rm;)rm=rd[--rp],rd[rp]=null,rg=rd[--rp],rd[rp]=null,rh=rd[--rp],rd[rp]=null}var rw=null,rS=null,rx=!1,rE=null,rC=!1,rz=Error(i(519));function rP(e){var n=Error(i(418,1<arguments.length&&void 0!==arguments[1]&&arguments[1]?\"text\":\"HTML\",\"\"));throw rD(tZ(n,e)),rz}function rN(e){var n=e.stateNode,t=e.type,r=e.memoizedProps;switch(n[eO]=e,n[eA]=r,t){case\"dialog\":iG(\"cancel\",n),iG(\"close\",n);break;case\"iframe\":case\"object\":case\"embed\":iG(\"load\",n);break;case\"video\":case\"audio\":for(t=0;t<iK.length;t++)iG(iK[t],n);break;case\"source\":iG(\"error\",n);break;case\"img\":case\"image\":case\"link\":iG(\"error\",n),iG(\"load\",n);break;case\"details\":iG(\"toggle\",n);break;case\"input\":iG(\"invalid\",n),nr(n,r.value,r.defaultValue,r.checked,r.defaultChecked,r.type,r.name,!0),e5(n);break;case\"select\":iG(\"invalid\",n);break;case\"textarea\":iG(\"invalid\",n),nu(n,r.value,r.defaultValue,r.children),e5(n)}\"string\"!=typeof(t=r.children)&&\"number\"!=typeof t&&\"bigint\"!=typeof t||n.textContent===\"\"+t||!0===r.suppressHydrationWarning||se(n.textContent,t)?(null!=r.popover&&(iG(\"beforetoggle\",n),iG(\"toggle\",n)),null!=r.onScroll&&iG(\"scroll\",n),null!=r.onScrollEnd&&iG(\"scrollend\",n),null!=r.onClick&&(n.onclick=sn),n=!0):n=!1,n||rP(e,!0)}function rL(e){for(rw=e.return;rw;)switch(rw.tag){case 5:case 13:rC=!1;return;case 27:case 3:rC=!0;return;default:rw=rw.return}}function rT(e){if(e!==rw)return!1;if(!rx)return rL(e),rx=!0,!1;var n,t=e.tag;if((n=3!==t&&27!==t)&&((n=5===t)&&(n=\"form\"===(n=e.type)||\"button\"===n||sc(e.type,e.memoizedProps)),n=!n),n&&rS&&rP(e),rL(e),13===t){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(t=0,e=e.nextSibling;e;){if(8===e.nodeType)if(\"/$\"===(n=e.data)){if(0===t){rS=sw(e.nextSibling);break e}t--}else\"$\"!==n&&\"$!\"!==n&&\"$?\"!==n||t++;e=e.nextSibling}rS=null}}else 27===t?(t=rS,sy(e.type)?(e=sS,sS=null,rS=e):rS=t):rS=rw?sw(e.stateNode.nextSibling):null;return!0}function r_(){rS=rw=null,rx=!1}function rF(){var e=rE;return null!==e&&(null===uQ?uQ=e:uQ.push.apply(uQ,e),rE=null),e}function rD(e){null===rE?rE=[e]:rE.push(e)}var rM=U(null),rO=null,rA=null;function rR(e,n,t){H(rM,n._currentValue),n._currentValue=t}function rI(e){e._currentValue=rM.current,j(rM)}function rU(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function rj(e,n,t,r){var l=e.child;for(null!==l&&(l.return=e);null!==l;){var a=l.dependencies;if(null!==a){var o=l.child;a=a.firstContext;e:for(;null!==a;){var u=a;a=l;for(var s=0;s<n.length;s++)if(u.context===n[s]){a.lanes|=t,null!==(u=a.alternate)&&(u.lanes|=t),rU(a.return,t,e),r||(o=null);break e}a=u.next}}else if(18===l.tag){if(null===(o=l.return))throw Error(i(341));o.lanes|=t,null!==(a=o.alternate)&&(a.lanes|=t),rU(o,t,e),o=null}else o=l.child;if(null!==o)o.return=l;else for(o=l;null!==o;){if(o===e){o=null;break}if(null!==(l=o.sibling)){l.return=o.return,o=l;break}o=o.return}l=o}}function rH(e,n,t,r){e=null;for(var l=n,a=!1;null!==l;){if(!a){if(0!=(524288&l.flags))a=!0;else if(0!=(262144&l.flags))break}if(10===l.tag){var o=l.alternate;if(null===o)throw Error(i(387));if(null!==(o=o.memoizedProps)){var u=l.type;tE(l.pendingProps.value,o.value)||(null!==e?e.push(u):e=[u])}}else if(l===B.current){if(null===(o=l.alternate))throw Error(i(387));o.memoizedState.memoizedState!==l.memoizedState.memoizedState&&(null!==e?e.push(sZ):e=[sZ])}l=l.return}null!==e&&rj(n,e,t,r),n.flags|=262144}function rV(e){for(e=e.firstContext;null!==e;){if(!tE(e.context._currentValue,e.memoizedValue))return!0;e=e.next}return!1}function rQ(e){rO=e,rA=null,null!==(e=e.dependencies)&&(e.firstContext=null)}function r$(e){return rW(rO,e)}function rB(e,n){return null===rO&&rQ(e),rW(e,n)}function rW(e,n){var t=n._currentValue;if(n={context:n,memoizedValue:t,next:null},null===rA){if(null===e)throw Error(i(308));rA=n,e.dependencies={lanes:0,firstContext:n},e.flags|=524288}else rA=rA.next=n;return t}var rq=\"undefined\"!=typeof AbortController?AbortController:function(){var e=[],n=this.signal={aborted:!1,addEventListener:function(n,t){e.push(t)}};this.abort=function(){n.aborted=!0,e.forEach(function(e){return e()})}},rK=a.unstable_scheduleCallback,rY=a.unstable_NormalPriority,rX={$$typeof:S,Consumer:null,Provider:null,_currentValue:null,_currentValue2:null,_threadCount:0};function rG(){return{controller:new rq,data:new Map,refCount:0}}function rZ(e){e.refCount--,0===e.refCount&&rK(rY,function(){e.controller.abort()})}var rJ=null,r0=0,r1=0,r2=null;function r3(){if(0==--r0&&null!==rJ){null!==r2&&(r2.status=\"fulfilled\");var e=rJ;rJ=null,r1=0,r2=null;for(var n=0;n<e.length;n++)(0,e[n])()}}var r4=M.S;M.S=function(e,n){\"object\"==typeof n&&null!==n&&\"function\"==typeof n.then&&function(e,n){if(null===rJ){var t=rJ=[];r0=0,r1=iQ(),r2={status:\"pending\",value:void 0,then:function(e){t.push(e)}}}r0++,n.then(r3,r3)}(0,n),null!==r4&&r4(e,n)};var r8=U(null);function r6(){var e=r8.current;return null!==e?e:uP.pooledCache}function r5(e,n){null===n?H(r8,r8.current):H(r8,n.pool)}function r9(){var e=r6();return null===e?null:{parent:rX._currentValue,pool:e}}var r7=Error(i(460)),le=Error(i(474)),ln=Error(i(542)),lt={then:function(){}};function lr(e){return\"fulfilled\"===(e=e.status)||\"rejected\"===e}function ll(){}function la(e,n,t){switch(void 0===(t=e[t])?e.push(n):t!==n&&(n.then(ll,ll),n=t),n.status){case\"fulfilled\":return n.value;case\"rejected\":throw li(e=n.reason),e;default:if(\"string\"==typeof n.status)n.then(ll,ll);else{if(null!==(e=uP)&&100<e.shellSuspendCounter)throw Error(i(482));(e=n).status=\"pending\",e.then(function(e){if(\"pending\"===n.status){var t=n;t.status=\"fulfilled\",t.value=e}},function(e){if(\"pending\"===n.status){var t=n;t.status=\"rejected\",t.reason=e}})}switch(n.status){case\"fulfilled\":return n.value;case\"rejected\":throw li(e=n.reason),e}throw lo=n,r7}}var lo=null;function lu(){if(null===lo)throw Error(i(459));var e=lo;return lo=null,e}function li(e){if(e===r7||e===ln)throw Error(i(483))}var ls=null,lc=0;function lf(e){var n=lc;return lc+=1,null===ls&&(ls=[]),la(ls,e,n)}function ld(e,n){e.ref=void 0!==(n=n.props.ref)?n:null}function lp(e,n){if(n.$$typeof===m)throw Error(i(525));throw Error(i(31,\"[object Object]\"===(e=Object.prototype.toString.call(n))?\"object with keys {\"+Object.keys(n).join(\", \")+\"}\":e))}function lm(e){return(0,e._init)(e._payload)}function lh(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e){for(var n=new Map;null!==e;)null!==e.key?n.set(e.key,e):n.set(e.index,e),e=e.sibling;return n}function l(e,n){return(e=rt(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return(n.index=r,e)?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=0x4000002,t):r:(n.flags|=0x4000002,t):(n.flags|=1048576,t)}function o(n){return e&&null===n.alternate&&(n.flags|=0x4000002),n}function u(e,n,t,r){return null===n||6!==n.tag?(n=ro(t,e.mode,r)).return=e:(n=l(n,t)).return=e,n}function s(e,n,t,r){var a=t.type;return a===y?f(e,n,t.props.children,r,t.key):(null!==n&&(n.elementType===a||\"object\"==typeof a&&null!==a&&a.$$typeof===P&&lm(a)===n.type)?ld(n=l(n,t.props),t):ld(n=rl(t.type,t.key,t.props,null,e.mode,r),t),n.return=e,n)}function c(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?(n=ru(t,e.mode,r)).return=e:(n=l(n,t.children||[])).return=e,n}function f(e,n,t,r,a){return null===n||7!==n.tag?(n=ra(t,e.mode,r,a)).return=e:(n=l(n,t)).return=e,n}function d(e,n,t){if(\"string\"==typeof n&&\"\"!==n||\"number\"==typeof n||\"bigint\"==typeof n)return(n=ro(\"\"+n,e.mode,t)).return=e,n;if(\"object\"==typeof n&&null!==n){switch(n.$$typeof){case h:return ld(t=rl(n.type,n.key,n.props,null,e.mode,t),n),t.return=e,t;case g:return(n=ru(n,e.mode,t)).return=e,n;case P:return d(e,n=(0,n._init)(n._payload),t)}if(D(n)||_(n))return(n=ra(n,e.mode,t,null)).return=e,n;if(\"function\"==typeof n.then)return d(e,lf(n),t);if(n.$$typeof===S)return d(e,rB(e,n),t);lp(e,n)}return null}function p(e,n,t,r){var l=null!==n?n.key:null;if(\"string\"==typeof t&&\"\"!==t||\"number\"==typeof t||\"bigint\"==typeof t)return null!==l?null:u(e,n,\"\"+t,r);if(\"object\"==typeof t&&null!==t){switch(t.$$typeof){case h:return t.key===l?s(e,n,t,r):null;case g:return t.key===l?c(e,n,t,r):null;case P:return p(e,n,t=(l=t._init)(t._payload),r)}if(D(t)||_(t))return null!==l?null:f(e,n,t,r,null);if(\"function\"==typeof t.then)return p(e,n,lf(t),r);if(t.$$typeof===S)return p(e,n,rB(e,t),r);lp(e,t)}return null}function m(e,n,t,r,l){if(\"string\"==typeof r&&\"\"!==r||\"number\"==typeof r||\"bigint\"==typeof r)return u(n,e=e.get(t)||null,\"\"+r,l);if(\"object\"==typeof r&&null!==r){switch(r.$$typeof){case h:return s(n,e=e.get(null===r.key?t:r.key)||null,r,l);case g:return c(n,e=e.get(null===r.key?t:r.key)||null,r,l);case P:return m(e,n,t,r=(0,r._init)(r._payload),l)}if(D(r)||_(r))return f(n,e=e.get(t)||null,r,l,null);if(\"function\"==typeof r.then)return m(e,n,t,lf(r),l);if(r.$$typeof===S)return m(e,n,t,rB(n,r),l);lp(n,r)}return null}return function(u,s,c,f){try{lc=0;var v=function u(s,c,f,v){if(\"object\"==typeof f&&null!==f&&f.type===y&&null===f.key&&(f=f.props.children),\"object\"==typeof f&&null!==f){switch(f.$$typeof){case h:e:{for(var b=f.key;null!==c;){if(c.key===b){if((b=f.type)===y){if(7===c.tag){t(s,c.sibling),(v=l(c,f.props.children)).return=s,s=v;break e}}else if(c.elementType===b||\"object\"==typeof b&&null!==b&&b.$$typeof===P&&lm(b)===c.type){t(s,c.sibling),ld(v=l(c,f.props),f),v.return=s,s=v;break e}t(s,c);break}n(s,c),c=c.sibling}f.type===y?(v=ra(f.props.children,s.mode,v,f.key)).return=s:(ld(v=rl(f.type,f.key,f.props,null,s.mode,v),f),v.return=s),s=v}return o(s);case g:e:{for(b=f.key;null!==c;){if(c.key===b)if(4===c.tag&&c.stateNode.containerInfo===f.containerInfo&&c.stateNode.implementation===f.implementation){t(s,c.sibling),(v=l(c,f.children||[])).return=s,s=v;break e}else{t(s,c);break}n(s,c),c=c.sibling}(v=ru(f,s.mode,v)).return=s,s=v}return o(s);case P:return u(s,c,f=(b=f._init)(f._payload),v)}if(D(f))return function(l,o,u,i){for(var s=null,c=null,f=o,h=o=0,g=null;null!==f&&h<u.length;h++){f.index>h?(g=f,f=null):g=f.sibling;var y=p(l,f,u[h],i);if(null===y){null===f&&(f=g);break}e&&f&&null===y.alternate&&n(l,f),o=a(y,o,h),null===c?s=y:c.sibling=y,c=y,f=g}if(h===u.length)return t(l,f),rx&&ry(l,h),s;if(null===f){for(;h<u.length;h++)null!==(f=d(l,u[h],i))&&(o=a(f,o,h),null===c?s=f:c.sibling=f,c=f);return rx&&ry(l,h),s}for(f=r(f);h<u.length;h++)null!==(g=m(f,l,h,u[h],i))&&(e&&null!==g.alternate&&f.delete(null===g.key?h:g.key),o=a(g,o,h),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach(function(e){return n(l,e)}),rx&&ry(l,h),s}(s,c,f,v);if(_(f)){if(\"function\"!=typeof(b=_(f)))throw Error(i(150));return function(l,o,u,s){if(null==u)throw Error(i(151));for(var c=null,f=null,h=o,g=o=0,y=null,v=u.next();null!==h&&!v.done;g++,v=u.next()){h.index>g?(y=h,h=null):y=h.sibling;var b=p(l,h,v.value,s);if(null===b){null===h&&(h=y);break}e&&h&&null===b.alternate&&n(l,h),o=a(b,o,g),null===f?c=b:f.sibling=b,f=b,h=y}if(v.done)return t(l,h),rx&&ry(l,g),c;if(null===h){for(;!v.done;g++,v=u.next())null!==(v=d(l,v.value,s))&&(o=a(v,o,g),null===f?c=v:f.sibling=v,f=v);return rx&&ry(l,g),c}for(h=r(h);!v.done;g++,v=u.next())null!==(v=m(h,l,g,v.value,s))&&(e&&null!==v.alternate&&h.delete(null===v.key?g:v.key),o=a(v,o,g),null===f?c=v:f.sibling=v,f=v);return e&&h.forEach(function(e){return n(l,e)}),rx&&ry(l,g),c}(s,c,f=b.call(f),v)}if(\"function\"==typeof f.then)return u(s,c,lf(f),v);if(f.$$typeof===S)return u(s,c,rB(s,f),v);lp(s,f)}return\"string\"==typeof f&&\"\"!==f||\"number\"==typeof f||\"bigint\"==typeof f?(f=\"\"+f,null!==c&&6===c.tag?(t(s,c.sibling),(v=l(c,f)).return=s):(t(s,c),(v=ro(f,s.mode,v)).return=s),o(s=v)):t(s,c)}(u,s,c,f);return ls=null,v}catch(e){if(e===r7||e===ln)throw e;var b=re(29,e,null,u.mode);return b.lanes=f,b.return=u,b}finally{}}}var lg=lh(!0),ly=lh(!1),lv=!1;function lb(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,lanes:0,hiddenCallbacks:null},callbacks:null}}function lk(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,callbacks:null})}function lw(e){return{lane:e,tag:0,payload:null,callback:null,next:null}}function lS(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&uz)){var l=r.pending;return null===l?n.next=n:(n.next=l.next,l.next=n),r.pending=n,n=t5(e),t6(e,null,t),n}return t3(e,r,n,t),t5(e)}function lx(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,0!=(4194048&t))){var r=n.lanes;r&=e.pendingLanes,t|=r,n.lanes=t,eT(e,t)}}function lE(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var l=null,a=null;if(null!==(t=t.firstBaseUpdate)){do{var o={lane:t.lane,tag:t.tag,payload:t.payload,callback:null,next:null};null===a?l=a=o:a=a.next=o,t=t.next}while(null!==t);null===a?l=a=n:a=a.next=n}else l=a=n;t={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:a,shared:r.shared,callbacks:r.callbacks},e.updateQueue=t;return}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}var lC=!1;function lz(){if(lC){var e=r2;if(null!==e)throw e}}function lP(e,n,t,r){lC=!1;var l=e.updateQueue;lv=!1;var a=l.firstBaseUpdate,o=l.lastBaseUpdate,u=l.shared.pending;if(null!==u){l.shared.pending=null;var i=u,s=i.next;i.next=null,null===o?a=s:o.next=s,o=i;var c=e.alternate;null!==c&&(u=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===u?c.firstBaseUpdate=s:u.next=s,c.lastBaseUpdate=i)}if(null!==a){var f=l.baseState;for(o=0,c=s=i=null,u=a;;){var d=-0x20000001&u.lane,m=d!==u.lane;if(m?(uL&d)===d:(r&d)===d){0!==d&&d===r1&&(lC=!0),null!==c&&(c=c.next={lane:0,tag:u.tag,payload:u.payload,callback:null,next:null});e:{var h=e,g=u;switch(d=n,g.tag){case 1:if(\"function\"==typeof(h=g.payload)){f=h.call(t,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d=\"function\"==typeof(h=g.payload)?h.call(t,f,d):h))break e;f=p({},f,d);break e;case 2:lv=!0}}null!==(d=u.callback)&&(e.flags|=64,m&&(e.flags|=8192),null===(m=l.callbacks)?l.callbacks=[d]:m.push(d))}else m={lane:d,tag:u.tag,payload:u.payload,callback:u.callback,next:null},null===c?(s=c=m,i=f):c=c.next=m,o|=d;if(null===(u=u.next))if(null===(u=l.shared.pending))break;else u=(m=u).next,m.next=null,l.lastBaseUpdate=m,l.shared.pending=null}null===c&&(i=f),l.baseState=i,l.firstBaseUpdate=s,l.lastBaseUpdate=c,null===a&&(l.shared.lanes=0),uR|=o,e.lanes=o,e.memoizedState=f}}function lN(e,n){if(\"function\"!=typeof e)throw Error(i(191,e));e.call(n)}function lL(e,n){var t=e.callbacks;if(null!==t)for(e.callbacks=null,e=0;e<t.length;e++)lN(t[e],n)}var lT=U(null),l_=U(0);function lF(e,n){H(l_,e=uO),H(lT,n),uO=e|n.baseLanes}function lD(){H(l_,uO),H(lT,lT.current)}function lM(){uO=l_.current,j(lT),j(l_)}var lO=U(null),lA=null;function lR(e){var n=e.alternate;H(lH,1&lH.current),H(lO,e),null===lA&&(null===n||null!==lT.current?lA=e:null!==n.memoizedState&&(lA=e))}function lI(e){if(22===e.tag){if(H(lH,lH.current),H(lO,e),null===lA){var n=e.alternate;null!==n&&null!==n.memoizedState&&(lA=e)}}else lU(e)}function lU(){H(lH,lH.current),H(lO,lO.current)}function lj(e){j(lO),lA===e&&(lA=null),j(lH)}var lH=U(0);function lV(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||\"$?\"===t.data||sk(t)))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(0!=(128&n.flags))return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var lQ=0,l$=null,lB=null,lW=null,lq=!1,lK=!1,lY=!1,lX=0,lG=0,lZ=null,lJ=0;function l0(){throw Error(i(321))}function l1(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!tE(e[t],n[t]))return!1;return!0}function l2(e,n,t,r,l,a){return lQ=a,l$=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,M.H=null===e||null===e.memoizedState?a5:a9,lY=!1,a=t(r,l),lY=!1,lK&&(a=l4(n,t,r,l)),l3(e),a}function l3(e){M.H=a6;var n=null!==lB&&null!==lB.next;if(lQ=0,lW=lB=l$=null,lq=!1,lG=0,lZ=null,n)throw Error(i(300));null===e||oh||null!==(e=e.dependencies)&&rV(e)&&(oh=!0)}function l4(e,n,t,r){l$=e;var l=0;do{if(lK&&(lZ=null),lG=0,lK=!1,25<=l)throw Error(i(301));if(l+=1,lW=lB=null,null!=e.updateQueue){var a=e.updateQueue;a.lastEffect=null,a.events=null,a.stores=null,null!=a.memoCache&&(a.memoCache.index=0)}M.H=a7,a=n(t,r)}while(lK);return a}function l8(){var e=M.H,n=e.useState()[0];return n=\"function\"==typeof n.then?at(n):n,e=e.useState()[0],(null!==lB?lB.memoizedState:null)!==e&&(l$.flags|=1024),n}function l6(){var e=0!==lX;return lX=0,e}function l5(e,n,t){n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~t}function l9(e){if(lq){for(e=e.memoizedState;null!==e;){var n=e.queue;null!==n&&(n.pending=null),e=e.next}lq=!1}lQ=0,lW=lB=l$=null,lK=!1,lG=lX=0,lZ=null}function l7(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===lW?l$.memoizedState=lW=e:lW=lW.next=e,lW}function ae(){if(null===lB){var e=l$.alternate;e=null!==e?e.memoizedState:null}else e=lB.next;var n=null===lW?l$.memoizedState:lW.next;if(null!==n)lW=n,lB=e;else{if(null===e){if(null===l$.alternate)throw Error(i(467));throw Error(i(310))}e={memoizedState:(lB=e).memoizedState,baseState:lB.baseState,baseQueue:lB.baseQueue,queue:lB.queue,next:null},null===lW?l$.memoizedState=lW=e:lW=lW.next=e}return lW}function an(){return{lastEffect:null,events:null,stores:null,memoCache:null}}function at(e){var n=lG;return lG+=1,null===lZ&&(lZ=[]),e=la(lZ,e,n),n=l$,null===(null===lW?n.memoizedState:lW.next)&&(M.H=null===(n=n.alternate)||null===n.memoizedState?a5:a9),e}function ar(e){if(null!==e&&\"object\"==typeof e){if(\"function\"==typeof e.then)return at(e);if(e.$$typeof===S)return r$(e)}throw Error(i(438,String(e)))}function al(e){var n=null,t=l$.updateQueue;if(null!==t&&(n=t.memoCache),null==n){var r=l$.alternate;null!==r&&null!==(r=r.updateQueue)&&null!=(r=r.memoCache)&&(n={data:r.data.map(function(e){return e.slice()}),index:0})}if(null==n&&(n={data:[],index:0}),null===t&&(t=an(),l$.updateQueue=t),t.memoCache=n,void 0===(t=n.data[n.index]))for(t=n.data[n.index]=Array(e),r=0;r<e;r++)t[r]=L;return n.index++,t}function aa(e,n){return\"function\"==typeof n?n(e):n}function ao(e){return au(ae(),lB,e)}function au(e,n,t){var r=e.queue;if(null===r)throw Error(i(311));r.lastRenderedReducer=t;var l=e.baseQueue,a=r.pending;if(null!==a){if(null!==l){var o=l.next;l.next=a.next,a.next=o}n.baseQueue=l=a,r.pending=null}if(a=e.baseState,null===l)e.memoizedState=a;else{n=l.next;var u=o=null,s=null,c=n,f=!1;do{var d=-0x20000001&c.lane;if(d!==c.lane?(uL&d)===d:(lQ&d)===d){var p=c.revertLane;if(0===p)null!==s&&(s=s.next={lane:0,revertLane:0,gesture:null,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),d===r1&&(f=!0);else if((lQ&p)===p){c=c.next,p===r1&&(f=!0);continue}else d={lane:0,revertLane:c.revertLane,gesture:null,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=d,o=a):s=s.next=d,l$.lanes|=p,uR|=p;d=c.action,lY&&t(a,d),a=c.hasEagerState?c.eagerState:t(a,d)}else p={lane:d,revertLane:c.revertLane,gesture:c.gesture,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null},null===s?(u=s=p,o=a):s=s.next=p,l$.lanes|=d,uR|=d;c=c.next}while(null!==c&&c!==n);if(null===s?o=a:s.next=u,!tE(a,e.memoizedState)&&(oh=!0,f&&null!==(t=r2)))throw t;e.memoizedState=a,e.baseState=o,e.baseQueue=s,r.lastRenderedState=a}return null===l&&(r.lanes=0),[e.memoizedState,r.dispatch]}function ai(e){var n=ae(),t=n.queue;if(null===t)throw Error(i(311));t.lastRenderedReducer=e;var r=t.dispatch,l=t.pending,a=n.memoizedState;if(null!==l){t.pending=null;var o=l=l.next;do a=e(a,o.action),o=o.next;while(o!==l);tE(a,n.memoizedState)||(oh=!0),n.memoizedState=a,null===n.baseQueue&&(n.baseState=a),t.lastRenderedState=a}return[a,r]}function as(e,n,t){var r=l$,l=ae(),a=rx;if(a){if(void 0===t)throw Error(i(407));t=t()}else t=n();var o=!tE((lB||l).memoizedState,t);if(o&&(l.memoizedState=t,oh=!0),l=l.queue,aM(ad.bind(null,r,l,e),[e]),l.getSnapshot!==n||o||null!==lW&&1&lW.memoizedState.tag){if(r.flags|=2048,aL(9,{destroy:void 0},af.bind(null,r,l,t,n),null),null===uP)throw Error(i(349));a||0!=(124&lQ)||ac(r,n,t)}return t}function ac(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=l$.updateQueue)?(n=an(),l$.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function af(e,n,t,r){n.value=t,n.getSnapshot=r,ap(n)&&am(e)}function ad(e,n,t){return t(function(){ap(n)&&am(e)})}function ap(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!tE(e,t)}catch(e){return!0}}function am(e){var n=t8(e,2);null!==n&&u6(n,e,2)}function ah(e){var n=l7();if(\"function\"==typeof e){var t=e;if(e=t(),lY){eg(!0);try{t()}finally{eg(!1)}}}return n.memoizedState=n.baseState=e,n.queue={pending:null,lanes:0,dispatch:null,lastRenderedReducer:aa,lastRenderedState:e},n}function ag(e,n,t,r){return e.baseState=t,au(e,lB,\"function\"==typeof r?r:aa)}function ay(e,n,t,r,l){if(a3(e))throw Error(i(485));if(null!==(e=n.action)){var a={payload:l,action:e,next:null,isTransition:!0,status:\"pending\",value:null,reason:null,listeners:[],then:function(e){a.listeners.push(e)}};null!==M.T?t(!0):a.isTransition=!1,r(a),null===(t=n.pending)?(a.next=n.pending=a,av(n,a)):(a.next=t.next,n.pending=t.next=a)}}function av(e,n){var t=n.action,r=n.payload,l=e.state;if(n.isTransition){var a=M.T,o={};M.T=o;try{var u=t(l,r),i=M.S;null!==i&&i(o,u),ab(e,n,u)}catch(t){aw(e,n,t)}finally{null!==a&&null!==o.types&&(a.types=o.types),M.T=a}}else try{a=t(l,r),ab(e,n,a)}catch(t){aw(e,n,t)}}function ab(e,n,t){null!==t&&\"object\"==typeof t&&\"function\"==typeof t.then?t.then(function(t){ak(e,n,t)},function(t){return aw(e,n,t)}):ak(e,n,t)}function ak(e,n,t){n.status=\"fulfilled\",n.value=t,aS(n),e.state=t,null!==(n=e.pending)&&((t=n.next)===n?e.pending=null:(t=t.next,n.next=t,av(e,t)))}function aw(e,n,t){var r=e.pending;if(e.pending=null,null!==r){r=r.next;do n.status=\"rejected\",n.reason=t,aS(n),n=n.next;while(n!==r)}e.action=null}function aS(e){e=e.listeners;for(var n=0;n<e.length;n++)(0,e[n])()}function ax(e,n){return n}function aE(e,n){if(rx){var t=uP.formState;if(null!==t){e:{var r=l$;if(rx){if(rS){n:{for(var l=rS,a=rC;8!==l.nodeType;)if(!a||null===(l=sw(l.nextSibling))){l=null;break n}l=\"F!\"===(a=l.data)||\"F\"===a?l:null}if(l){rS=sw(l.nextSibling),r=\"F!\"===l.data;break e}}rP(r)}r=!1}r&&(n=t[0])}}return(t=l7()).memoizedState=t.baseState=n,r={pending:null,lanes:0,dispatch:null,lastRenderedReducer:ax,lastRenderedState:n},t.queue=r,t=a0.bind(null,l$,r),r.dispatch=t,r=ah(!1),a=a2.bind(null,l$,!1,r.queue),r=l7(),l={state:n,dispatch:null,action:e,pending:null},r.queue=l,t=ay.bind(null,l$,l,a,t),l.dispatch=t,r.memoizedState=e,[n,t,!1]}function aC(e){return az(ae(),lB,e)}function az(e,n,t){if(n=au(e,n,ax)[0],e=ao(aa)[0],\"object\"==typeof n&&null!==n&&\"function\"==typeof n.then)try{var r=at(n)}catch(e){if(e===r7)throw ln;throw e}else r=n;var l=(n=ae()).queue,a=l.dispatch;return t!==n.memoizedState&&(l$.flags|=2048,aL(9,{destroy:void 0},aP.bind(null,l,t),null)),[r,a,e]}function aP(e,n){e.action=n}function aN(e){var n=ae(),t=lB;if(null!==t)return az(n,t,e);ae(),n=n.memoizedState;var r=(t=ae()).queue.dispatch;return t.memoizedState=e,[n,r,!1]}function aL(e,n,t,r){return e={tag:e,create:t,deps:r,inst:n,next:null},null===(n=l$.updateQueue)&&(n=an(),l$.updateQueue=n),null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function aT(){return ae().memoizedState}function a_(e,n,t,r){var l=l7();l$.flags|=e,l.memoizedState=aL(1|n,{destroy:void 0},t,void 0===r?null:r)}function aF(e,n,t,r){var l=ae();r=void 0===r?null:r;var a=l.memoizedState.inst;null!==lB&&null!==r&&l1(r,lB.memoizedState.deps)?l.memoizedState=aL(n,a,t,r):(l$.flags|=e,l.memoizedState=aL(1|n,a,t,r))}function aD(e,n){a_(8390656,8,e,n)}function aM(e,n){aF(2048,8,e,n)}function aO(e,n){return aF(4,2,e,n)}function aA(e,n){return aF(4,4,e,n)}function aR(e,n){if(\"function\"==typeof n){var t=n(e=e());return function(){\"function\"==typeof t?t():n(null)}}if(null!=n)return n.current=e=e(),function(){n.current=null}}function aI(e,n,t){t=null!=t?t.concat([e]):null,aF(4,4,aR.bind(null,n,e),t)}function aU(){}function aj(e,n){var t=ae();n=void 0===n?null:n;var r=t.memoizedState;return null!==n&&l1(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function aH(e,n){var t=ae();n=void 0===n?null:n;var r=t.memoizedState;if(null!==n&&l1(n,r[1]))return r[0];if(r=e(),lY){eg(!0);try{e()}finally{eg(!1)}}return t.memoizedState=[r,n],r}function aV(e,n,t){return void 0===t||0!=(0x40000000&lQ)?e.memoizedState=n:(e.memoizedState=t,e=u8(),l$.lanes|=e,uR|=e,t)}function aQ(e,n,t,r){return tE(t,n)?t:null!==lT.current?(tE(e=aV(e,t,r),n)||(oh=!0),e):0==(42&lQ)||0!=(0x40000000&lQ)?(oh=!0,e.memoizedState=t):(e=u8(),l$.lanes|=e,uR|=e,n)}function a$(e,n,t,r,l){var a=O.p;O.p=0!==a&&8>a?a:8;var o=M.T,u={};M.T=u,a2(e,!1,n,t);try{var i=l(),s=M.S;if(null!==s&&s(u,i),null!==i&&\"object\"==typeof i&&\"function\"==typeof i.then){var c,f,d=(c=[],f={status:\"pending\",value:null,reason:null,then:function(e){c.push(e)}},i.then(function(){f.status=\"fulfilled\",f.value=r;for(var e=0;e<c.length;e++)(0,c[e])(r)},function(e){for(f.status=\"rejected\",f.reason=e,e=0;e<c.length;e++)(0,c[e])(void 0)}),f);a1(e,n,d,u4(e))}else a1(e,n,r,u4(e))}catch(t){a1(e,n,{then:function(){},status:\"rejected\",reason:t},u4())}finally{O.p=a,null!==o&&null!==u.types&&(o.types=u.types),M.T=o}}function aB(){}function aW(e,n,t,r){if(5!==e.tag)throw Error(i(476));var l=aq(e).queue;a$(e,l,n,A,null===t?aB:function(){return aK(e),t(r)})}function aq(e){var n=e.memoizedState;if(null!==n)return n;var t={};return(n={memoizedState:A,baseState:A,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:aa,lastRenderedState:A},next:null}).next={memoizedState:t,baseState:t,baseQueue:null,queue:{pending:null,lanes:0,dispatch:null,lastRenderedReducer:aa,lastRenderedState:t},next:null},e.memoizedState=n,null!==(e=e.alternate)&&(e.memoizedState=n),n}function aK(e){var n=aq(e).next.queue;a1(e,n,{},u4())}function aY(){return r$(sZ)}function aX(){return ae().memoizedState}function aG(){return ae().memoizedState}function aZ(e){for(var n=e.return;null!==n;){switch(n.tag){case 24:case 3:var t=u4(),r=lS(n,e=lw(t),t);null!==r&&(u6(r,n,t),lx(r,n,t)),n={cache:rG()},e.payload=n;return}n=n.return}}function aJ(e,n,t){var r=u4();t={lane:r,revertLane:0,gesture:null,action:t,hasEagerState:!1,eagerState:null,next:null},a3(e)?a4(n,t):null!==(t=t4(e,n,t,r))&&(u6(t,e,r),a8(t,n,r))}function a0(e,n,t){a1(e,n,t,u4())}function a1(e,n,t,r){var l={lane:r,revertLane:0,gesture:null,action:t,hasEagerState:!1,eagerState:null,next:null};if(a3(e))a4(n,l);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=n.lastRenderedReducer))try{var o=n.lastRenderedState,u=a(o,t);if(l.hasEagerState=!0,l.eagerState=u,tE(u,o))return t3(e,n,l,0),null===uP&&t2(),!1}catch(e){}finally{}if(null!==(t=t4(e,n,l,r)))return u6(t,e,r),a8(t,n,r),!0}return!1}function a2(e,n,t,r){if(r={lane:2,revertLane:iQ(),gesture:null,action:r,hasEagerState:!1,eagerState:null,next:null},a3(e)){if(n)throw Error(i(479))}else null!==(n=t4(e,t,r,2))&&u6(n,e,2)}function a3(e){var n=e.alternate;return e===l$||null!==n&&n===l$}function a4(e,n){lK=lq=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function a8(e,n,t){if(0!=(4194048&t)){var r=n.lanes;r&=e.pendingLanes,n.lanes=t|=r,eT(e,t)}}var a6={readContext:r$,use:ar,useCallback:l0,useContext:l0,useEffect:l0,useImperativeHandle:l0,useLayoutEffect:l0,useInsertionEffect:l0,useMemo:l0,useReducer:l0,useRef:l0,useState:l0,useDebugValue:l0,useDeferredValue:l0,useTransition:l0,useSyncExternalStore:l0,useId:l0,useHostTransitionStatus:l0,useFormState:l0,useActionState:l0,useOptimistic:l0,useMemoCache:l0,useCacheRefresh:l0},a5={readContext:r$,use:ar,useCallback:function(e,n){return l7().memoizedState=[e,void 0===n?null:n],e},useContext:r$,useEffect:aD,useImperativeHandle:function(e,n,t){t=null!=t?t.concat([e]):null,a_(4194308,4,aR.bind(null,n,e),t)},useLayoutEffect:function(e,n){return a_(4194308,4,e,n)},useInsertionEffect:function(e,n){a_(4,2,e,n)},useMemo:function(e,n){var t=l7();n=void 0===n?null:n;var r=e();if(lY){eg(!0);try{e()}finally{eg(!1)}}return t.memoizedState=[r,n],r},useReducer:function(e,n,t){var r=l7();if(void 0!==t){var l=t(n);if(lY){eg(!0);try{t(n)}finally{eg(!1)}}}else l=n;return r.memoizedState=r.baseState=l,r.queue=e={pending:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:l},e=e.dispatch=aJ.bind(null,l$,e),[r.memoizedState,e]},useRef:function(e){return l7().memoizedState=e={current:e}},useState:function(e){var n=(e=ah(e)).queue,t=a0.bind(null,l$,n);return n.dispatch=t,[e.memoizedState,t]},useDebugValue:aU,useDeferredValue:function(e,n){return aV(l7(),e,n)},useTransition:function(){var e=ah(!1);return e=a$.bind(null,l$,e.queue,!0,!1),l7().memoizedState=e,[!1,e]},useSyncExternalStore:function(e,n,t){var r=l$,l=l7();if(rx){if(void 0===t)throw Error(i(407));t=t()}else{if(t=n(),null===uP)throw Error(i(349));0!=(124&uL)||ac(r,n,t)}l.memoizedState=t;var a={value:t,getSnapshot:n};return l.queue=a,aD(ad.bind(null,r,a,e),[e]),r.flags|=2048,aL(9,{destroy:void 0},af.bind(null,r,a,t,n),null),t},useId:function(){var e=l7(),n=uP.identifierPrefix;if(rx){var t=rg,r=rh;n=\"\\xab\"+n+\"R\"+(t=(r&~(1<<32-ey(r)-1)).toString(32)+t),0<(t=lX++)&&(n+=\"H\"+t.toString(32)),n+=\"\\xbb\"}else n=\"\\xab\"+n+\"r\"+(t=lJ++).toString(32)+\"\\xbb\";return e.memoizedState=n},useHostTransitionStatus:aY,useFormState:aE,useActionState:aE,useOptimistic:function(e){var n=l7();n.memoizedState=n.baseState=e;var t={pending:null,lanes:0,dispatch:null,lastRenderedReducer:null,lastRenderedState:null};return n.queue=t,n=a2.bind(null,l$,!0,t),t.dispatch=n,[e,n]},useMemoCache:al,useCacheRefresh:function(){return l7().memoizedState=aZ.bind(null,l$)}},a9={readContext:r$,use:ar,useCallback:aj,useContext:r$,useEffect:aM,useImperativeHandle:aI,useInsertionEffect:aO,useLayoutEffect:aA,useMemo:aH,useReducer:ao,useRef:aT,useState:function(){return ao(aa)},useDebugValue:aU,useDeferredValue:function(e,n){return aQ(ae(),lB.memoizedState,e,n)},useTransition:function(){var e=ao(aa)[0],n=ae().memoizedState;return[\"boolean\"==typeof e?e:at(e),n]},useSyncExternalStore:as,useId:aX,useHostTransitionStatus:aY,useFormState:aC,useActionState:aC,useOptimistic:function(e,n){return ag(ae(),lB,e,n)},useMemoCache:al,useCacheRefresh:aG},a7={readContext:r$,use:ar,useCallback:aj,useContext:r$,useEffect:aM,useImperativeHandle:aI,useInsertionEffect:aO,useLayoutEffect:aA,useMemo:aH,useReducer:ai,useRef:aT,useState:function(){return ai(aa)},useDebugValue:aU,useDeferredValue:function(e,n){var t=ae();return null===lB?aV(t,e,n):aQ(t,lB.memoizedState,e,n)},useTransition:function(){var e=ai(aa)[0],n=ae().memoizedState;return[\"boolean\"==typeof e?e:at(e),n]},useSyncExternalStore:as,useId:aX,useHostTransitionStatus:aY,useFormState:aN,useActionState:aN,useOptimistic:function(e,n){var t=ae();return null!==lB?ag(t,lB,e,n):(t.baseState=e,[e,t.queue.dispatch])},useMemoCache:al,useCacheRefresh:aG};function oe(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:p({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var on={enqueueSetState:function(e,n,t){e=e._reactInternals;var r=u4(),l=lw(r);l.payload=n,null!=t&&(l.callback=t),null!==(n=lS(e,l,r))&&(u6(n,e,r),lx(n,e,r))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=u4(),l=lw(r);l.tag=1,l.payload=n,null!=t&&(l.callback=t),null!==(n=lS(e,l,r))&&(u6(n,e,r),lx(n,e,r))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=u4(),r=lw(t);r.tag=2,null!=n&&(r.callback=n),null!==(n=lS(e,r,t))&&(u6(n,e,t),lx(n,e,t))}};function ot(e,n,t,r,l,a,o){return\"function\"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!n.prototype||!n.prototype.isPureReactComponent||!tC(t,r)||!tC(l,a)}function or(e,n,t,r){e=n.state,\"function\"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),\"function\"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&on.enqueueReplaceState(n,n.state,null)}function ol(e,n){var t=n;if(\"ref\"in n)for(var r in t={},n)\"ref\"!==r&&(t[r]=n[r]);if(e=e.defaultProps)for(var l in t===n&&(t=p({},t)),e)void 0===t[l]&&(t[l]=e[l]);return t}var oa=\"function\"==typeof reportError?reportError:function(e){if(\"object\"==typeof window&&\"function\"==typeof window.ErrorEvent){var n=new window.ErrorEvent(\"error\",{bubbles:!0,cancelable:!0,message:\"object\"==typeof e&&null!==e&&\"string\"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(n))return}else if(\"object\"==typeof l&&\"function\"==typeof l.emit)return void l.emit(\"uncaughtException\",e);console.error(e)};function oo(e){oa(e)}function ou(e){console.error(e)}function oi(e){oa(e)}function os(e,n){try{(0,e.onUncaughtError)(n.value,{componentStack:n.stack})}catch(e){setTimeout(function(){throw e})}}function oc(e,n,t){try{(0,e.onCaughtError)(t.value,{componentStack:t.stack,errorBoundary:1===n.tag?n.stateNode:null})}catch(e){setTimeout(function(){throw e})}}function of(e,n,t){return(t=lw(t)).tag=3,t.payload={element:null},t.callback=function(){os(e,n)},t}function od(e){return(e=lw(e)).tag=3,e}function op(e,n,t,r){var l=t.type.getDerivedStateFromError;if(\"function\"==typeof l){var a=r.value;e.payload=function(){return l(a)},e.callback=function(){oc(n,t,r)}}var o=t.stateNode;null!==o&&\"function\"==typeof o.componentDidCatch&&(e.callback=function(){oc(n,t,r),\"function\"!=typeof l&&(null===uK?uK=new Set([this]):uK.add(this));var e=r.stack;this.componentDidCatch(r.value,{componentStack:null!==e?e:\"\"})})}var om=Error(i(461)),oh=!1;function og(e,n,t,r){n.child=null===e?ly(n,null,t,r):lg(n,e.child,t,r)}function oy(e,n,t,r,l){t=t.render;var a=n.ref;if(\"ref\"in r){var o={};for(var u in r)\"ref\"!==u&&(o[u]=r[u])}else o=r;return(rQ(n),r=l2(e,n,t,o,a,l),u=l6(),null===e||oh)?(rx&&u&&rb(n),n.flags|=1,og(e,n,r,l),n.child):(l5(e,n,l),oR(e,n,l))}function ov(e,n,t,r,l){if(null===e){var a=t.type;return\"function\"!=typeof a||rn(a)||void 0!==a.defaultProps||null!==t.compare?((e=rl(t.type,null,r,n,n.mode,l)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=a,ob(e,n,a,r,l))}if(a=e.child,!oI(e,l)){var o=a.memoizedProps;if((t=null!==(t=t.compare)?t:tC)(o,r)&&e.ref===n.ref)return oR(e,n,l)}return n.flags|=1,(e=rt(a,r)).ref=n.ref,e.return=n,n.child=e}function ob(e,n,t,r,l){if(null!==e){var a=e.memoizedProps;if(tC(a,r)&&e.ref===n.ref)if(oh=!1,n.pendingProps=r=a,!oI(e,l))return n.lanes=e.lanes,oR(e,n,l);else 0!=(131072&e.flags)&&(oh=!0)}return ox(e,n,t,r,l)}function ok(e,n,t){var r=n.pendingProps,l=r.children,a=null!==e?e.memoizedState:null;if(\"hidden\"===r.mode){if(0!=(128&n.flags)){if(r=null!==a?a.baseLanes|t:t,null!==e){for(a=0,l=n.child=e.child;null!==l;)a=a|l.lanes|l.childLanes,l=l.sibling;n.childLanes=a&~r}else n.childLanes=0,n.child=null;return ow(e,n,r,t)}if(0==(0x20000000&t))return n.lanes=n.childLanes=0x20000000,ow(e,n,null!==a?a.baseLanes|t:t,t);n.memoizedState={baseLanes:0,cachePool:null},null!==e&&r5(n,null!==a?a.cachePool:null),null!==a?lF(n,a):lD(),lI(n)}else null!==a?(r5(n,a.cachePool),lF(n,a),lU(n),n.memoizedState=null):(null!==e&&r5(n,null),lD(),lU(n));return og(e,n,l,t),n.child}function ow(e,n,t,r){var l=r6();return n.memoizedState={baseLanes:t,cachePool:l=null===l?null:{parent:rX._currentValue,pool:l}},null!==e&&r5(n,null),lD(),lI(n),null!==e&&rH(e,n,r,!0),null}function oS(e,n){var t=n.ref;if(null===t)null!==e&&null!==e.ref&&(n.flags|=4194816);else{if(\"function\"!=typeof t&&\"object\"!=typeof t)throw Error(i(284));(null===e||e.ref!==t)&&(n.flags|=4194816)}}function ox(e,n,t,r,l){return(rQ(n),t=l2(e,n,t,r,void 0,l),r=l6(),null===e||oh)?(rx&&r&&rb(n),n.flags|=1,og(e,n,t,l),n.child):(l5(e,n,l),oR(e,n,l))}function oE(e,n,t,r,l,a){return(rQ(n),n.updateQueue=null,t=l4(n,r,t,l),l3(e),r=l6(),null===e||oh)?(rx&&r&&rb(n),n.flags|=1,og(e,n,t,a),n.child):(l5(e,n,a),oR(e,n,a))}function oC(e,n,t,r,l){if(rQ(n),null===n.stateNode){var a=t9,o=t.contextType;\"object\"==typeof o&&null!==o&&(a=r$(o)),n.memoizedState=null!==(a=new t(r,a)).state&&void 0!==a.state?a.state:null,a.updater=on,n.stateNode=a,a._reactInternals=n,(a=n.stateNode).props=r,a.state=n.memoizedState,a.refs={},lb(n),o=t.contextType,a.context=\"object\"==typeof o&&null!==o?r$(o):t9,a.state=n.memoizedState,\"function\"==typeof(o=t.getDerivedStateFromProps)&&(oe(n,t,o,r),a.state=n.memoizedState),\"function\"==typeof t.getDerivedStateFromProps||\"function\"==typeof a.getSnapshotBeforeUpdate||\"function\"!=typeof a.UNSAFE_componentWillMount&&\"function\"!=typeof a.componentWillMount||(o=a.state,\"function\"==typeof a.componentWillMount&&a.componentWillMount(),\"function\"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),o!==a.state&&on.enqueueReplaceState(a,a.state,null),lP(n,r,a,l),lz(),a.state=n.memoizedState),\"function\"==typeof a.componentDidMount&&(n.flags|=4194308),r=!0}else if(null===e){a=n.stateNode;var u=n.memoizedProps,i=ol(t,u);a.props=i;var s=a.context,c=t.contextType;o=t9,\"object\"==typeof c&&null!==c&&(o=r$(c));var f=t.getDerivedStateFromProps;c=\"function\"==typeof f||\"function\"==typeof a.getSnapshotBeforeUpdate,u=n.pendingProps!==u,c||\"function\"!=typeof a.UNSAFE_componentWillReceiveProps&&\"function\"!=typeof a.componentWillReceiveProps||(u||s!==o)&&or(n,a,r,o),lv=!1;var d=n.memoizedState;a.state=d,lP(n,r,a,l),lz(),s=n.memoizedState,u||d!==s||lv?(\"function\"==typeof f&&(oe(n,t,f,r),s=n.memoizedState),(i=lv||ot(n,t,i,r,d,s,o))?(c||\"function\"!=typeof a.UNSAFE_componentWillMount&&\"function\"!=typeof a.componentWillMount||(\"function\"==typeof a.componentWillMount&&a.componentWillMount(),\"function\"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),\"function\"==typeof a.componentDidMount&&(n.flags|=4194308)):(\"function\"==typeof a.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=s),a.props=r,a.state=s,a.context=o,r=i):(\"function\"==typeof a.componentDidMount&&(n.flags|=4194308),r=!1)}else{a=n.stateNode,lk(e,n),c=ol(t,o=n.memoizedProps),a.props=c,f=n.pendingProps,d=a.context,s=t.contextType,i=t9,\"object\"==typeof s&&null!==s&&(i=r$(s)),(s=\"function\"==typeof(u=t.getDerivedStateFromProps)||\"function\"==typeof a.getSnapshotBeforeUpdate)||\"function\"!=typeof a.UNSAFE_componentWillReceiveProps&&\"function\"!=typeof a.componentWillReceiveProps||(o!==f||d!==i)&&or(n,a,r,i),lv=!1,d=n.memoizedState,a.state=d,lP(n,r,a,l),lz();var p=n.memoizedState;o!==f||d!==p||lv||null!==e&&null!==e.dependencies&&rV(e.dependencies)?(\"function\"==typeof u&&(oe(n,t,u,r),p=n.memoizedState),(c=lv||ot(n,t,c,r,d,p,i)||null!==e&&null!==e.dependencies&&rV(e.dependencies))?(s||\"function\"!=typeof a.UNSAFE_componentWillUpdate&&\"function\"!=typeof a.componentWillUpdate||(\"function\"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,i),\"function\"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,i)),\"function\"==typeof a.componentDidUpdate&&(n.flags|=4),\"function\"==typeof a.getSnapshotBeforeUpdate&&(n.flags|=1024)):(\"function\"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),\"function\"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=p),a.props=r,a.state=p,a.context=i,r=c):(\"function\"!=typeof a.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),\"function\"!=typeof a.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),r=!1)}return a=r,oS(e,n),r=0!=(128&n.flags),a||r?(a=n.stateNode,t=r&&\"function\"!=typeof t.getDerivedStateFromError?null:a.render(),n.flags|=1,null!==e&&r?(n.child=lg(n,e.child,null,l),n.child=lg(n,null,t,l)):og(e,n,t,l),n.memoizedState=a.state,e=n.child):e=oR(e,n,l),e}function oz(e,n,t,r){return r_(),n.flags|=256,og(e,n,t,r),n.child}var oP={dehydrated:null,treeContext:null,retryLane:0,hydrationErrors:null};function oN(e){return{baseLanes:e,cachePool:r9()}}function oL(e,n,t){return e=null!==e?e.childLanes&~t:0,n&&(e|=uj),e}function oT(e,n,t){var r,l=n.pendingProps,a=!1,o=0!=(128&n.flags);if((r=o)||(r=(null===e||null!==e.memoizedState)&&0!=(2&lH.current)),r&&(a=!0,n.flags&=-129),r=0!=(32&n.flags),n.flags&=-33,null===e){if(rx){if(a?lR(n):lU(n),rx){var u,s=rS;if(u=s){t:{for(u=s,s=rC;8!==u.nodeType;)if(!s||null===(u=sw(u.nextSibling))){s=null;break t}s=u}null!==s?(n.memoizedState={dehydrated:s,treeContext:null!==rm?{id:rh,overflow:rg}:null,retryLane:0x20000000,hydrationErrors:null},(u=re(18,null,null,0)).stateNode=s,u.return=n,n.child=u,rw=n,rS=null,u=!0):u=!1}u||rP(n)}if(null!==(s=n.memoizedState)&&null!==(s=s.dehydrated))return sk(s)?n.lanes=32:n.lanes=0x20000000,null;lj(n)}return(s=l.children,l=l.fallback,a)?(lU(n),s=oF({mode:\"hidden\",children:s},a=n.mode),l=ra(l,a,t,null),s.return=n,l.return=n,s.sibling=l,n.child=s,(a=n.child).memoizedState=oN(t),a.childLanes=oL(e,r,t),n.memoizedState=oP,l):(lR(n),o_(n,s))}if(null!==(u=e.memoizedState)&&null!==(s=u.dehydrated)){if(o)256&n.flags?(lR(n),n.flags&=-257,n=oD(e,n,t)):null!==n.memoizedState?(lU(n),n.child=e.child,n.flags|=128,n=null):(lU(n),a=l.fallback,s=n.mode,l=oF({mode:\"visible\",children:l.children},s),a=ra(a,s,t,null),a.flags|=2,l.return=n,a.return=n,l.sibling=a,n.child=l,lg(n,e.child,null,t),(l=n.child).memoizedState=oN(t),l.childLanes=oL(e,r,t),n.memoizedState=oP,n=a);else if(lR(n),sk(s)){if(r=s.nextSibling&&s.nextSibling.dataset)var c=r.dgst;r=c,(l=Error(i(419))).stack=\"\",l.digest=r,rD({value:l,source:null,stack:null}),n=oD(e,n,t)}else if(oh||rH(e,n,t,!1),r=0!=(t&e.childLanes),oh||r){if(null!==(r=uP)&&0!==(l=0!=((l=0!=(42&(l=t&-t))?1:e_(l))&(r.suspendedLanes|t))?0:l)&&l!==u.retryLane)throw u.retryLane=l,t8(e,l),u6(r,e,l),om;\"$?\"===s.data||ii(),n=oD(e,n,t)}else\"$?\"===s.data?(n.flags|=192,n.child=e.child,n=null):(e=u.treeContext,rS=sw(s.nextSibling),rw=n,rx=!0,rE=null,rC=!1,null!==e&&(rd[rp++]=rh,rd[rp++]=rg,rd[rp++]=rm,rh=e.id,rg=e.overflow,rm=n),n=o_(n,l.children),n.flags|=4096);return n}return a?(lU(n),a=l.fallback,s=n.mode,c=(u=e.child).sibling,(l=rt(u,{mode:\"hidden\",children:l.children})).subtreeFlags=0x3e00000&u.subtreeFlags,null!==c?a=rt(c,a):(a=ra(a,s,t,null),a.flags|=2),a.return=n,l.return=n,l.sibling=a,n.child=l,l=a,a=n.child,null===(s=e.child.memoizedState)?s=oN(t):(null!==(u=s.cachePool)?(c=rX._currentValue,u=u.parent!==c?{parent:c,pool:c}:u):u=r9(),s={baseLanes:s.baseLanes|t,cachePool:u}),a.memoizedState=s,a.childLanes=oL(e,r,t),n.memoizedState=oP,l):(lR(n),e=(t=e.child).sibling,(t=rt(t,{mode:\"visible\",children:l.children})).return=n,t.sibling=null,null!==e&&(null===(r=n.deletions)?(n.deletions=[e],n.flags|=16):r.push(e)),n.child=t,n.memoizedState=null,t)}function o_(e,n){return(n=oF({mode:\"visible\",children:n},e.mode)).return=e,e.child=n}function oF(e,n){return(e=re(22,e,null,n)).lanes=0,e.stateNode={_visibility:1,_pendingMarkers:null,_retryCache:null,_transitions:null},e}function oD(e,n,t){return lg(n,e.child,null,t),e=o_(n,n.pendingProps.children),e.flags|=2,n.memoizedState=null,e}function oM(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),rU(e.return,n,t)}function oO(e,n,t,r,l){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:l}:(a.isBackwards=n,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=t,a.tailMode=l)}function oA(e,n,t){var r=n.pendingProps,l=r.revealOrder,a=r.tail;if(og(e,n,r.children,t),0!=(2&(r=lH.current)))r=1&r|2,n.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&oM(e,t,n);else if(19===e.tag)oM(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}switch(H(lH,r),l){case\"forwards\":for(l=null,t=n.child;null!==t;)null!==(e=t.alternate)&&null===lV(e)&&(l=t),t=t.sibling;null===(t=l)?(l=n.child,n.child=null):(l=t.sibling,t.sibling=null),oO(n,!1,l,t,a);break;case\"backwards\":for(t=null,l=n.child,n.child=null;null!==l;){if(null!==(e=l.alternate)&&null===lV(e)){n.child=l;break}e=l.sibling,l.sibling=t,t=l,l=e}oO(n,!0,t,null,a);break;case\"together\":oO(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function oR(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),uR|=n.lanes,0==(t&n.childLanes)){if(null===e)return null;else if(rH(e,n,t,!1),0==(t&n.childLanes))return null}if(null!==e&&n.child!==e.child)throw Error(i(153));if(null!==n.child){for(t=rt(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=rt(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function oI(e,n){return 0!=(e.lanes&n)||!!(null!==(e=e.dependencies)&&rV(e))}function oU(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps)oh=!0;else{if(!oI(e,t)&&0==(128&n.flags))return oh=!1,function(e,n,t){switch(n.tag){case 3:W(n,n.stateNode.containerInfo),rR(n,rX,e.memoizedState.cache),r_();break;case 27:case 5:K(n);break;case 4:W(n,n.stateNode.containerInfo);break;case 10:rR(n,n.type,n.memoizedProps.value);break;case 13:var r=n.memoizedState;if(null!==r){if(null!==r.dehydrated)return lR(n),n.flags|=128,null;if(0!=(t&n.child.childLanes))return oT(e,n,t);return lR(n),null!==(e=oR(e,n,t))?e.sibling:null}lR(n);break;case 19:var l=0!=(128&e.flags);if((r=0!=(t&n.childLanes))||(rH(e,n,t,!1),r=0!=(t&n.childLanes)),l){if(r)return oA(e,n,t);n.flags|=128}if(null!==(l=n.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),H(lH,lH.current),!r)return null;break;case 22:case 23:return n.lanes=0,ok(e,n,t);case 24:rR(n,rX,e.memoizedState.cache)}return oR(e,n,t)}(e,n,t);oh=0!=(131072&e.flags)}else oh=!1,rx&&0!=(1048576&n.flags)&&rv(n,rf,n.index);switch(n.lanes=0,n.tag){case 16:e:{e=n.pendingProps;var r=n.elementType,l=r._init;if(r=l(r._payload),n.type=r,\"function\"==typeof r)rn(r)?(e=ol(r,e),n.tag=1,n=oC(null,n,r,e,t)):(n.tag=0,n=ox(null,n,r,e,t));else{if(null!=r){if((l=r.$$typeof)===x){n.tag=11,n=oy(null,n,r,e,t);break e}else if(l===z){n.tag=14,n=ov(null,n,r,e,t);break e}}throw Error(i(306,n=function e(n){if(null==n)return null;if(\"function\"==typeof n)return n.$$typeof===F?null:n.displayName||n.name||null;if(\"string\"==typeof n)return n;switch(n){case y:return\"Fragment\";case b:return\"Profiler\";case v:return\"StrictMode\";case E:return\"Suspense\";case C:return\"SuspenseList\";case N:return\"Activity\"}if(\"object\"==typeof n)switch(n.$$typeof){case g:return\"Portal\";case S:return(n.displayName||\"Context\")+\".Provider\";case w:return(n._context.displayName||\"Context\")+\".Consumer\";case x:var t=n.render;return(n=n.displayName)||(n=\"\"!==(n=t.displayName||t.name||\"\")?\"ForwardRef(\"+n+\")\":\"ForwardRef\"),n;case z:return null!==(t=n.displayName||null)?t:e(n.type)||\"Memo\";case P:t=n._payload,n=n._init;try{return e(n(t))}catch(e){}}return null}(r)||r,\"\"))}}return n;case 0:return ox(e,n,n.type,n.pendingProps,t);case 1:return l=ol(r=n.type,n.pendingProps),oC(e,n,r,l,t);case 3:e:{if(W(n,n.stateNode.containerInfo),null===e)throw Error(i(387));r=n.pendingProps;var a=n.memoizedState;l=a.element,lk(e,n),lP(n,r,null,t);var o=n.memoizedState;if(rR(n,rX,r=o.cache),r!==a.cache&&rj(n,[rX],t,!0),lz(),r=o.element,a.isDehydrated)if(a={element:r,isDehydrated:!1,cache:o.cache},n.updateQueue.baseState=a,n.memoizedState=a,256&n.flags){n=oz(e,n,r,t);break e}else if(r!==l){rD(l=tZ(Error(i(424)),n)),n=oz(e,n,r,t);break e}else for(rS=sw((e=9===(e=n.stateNode.containerInfo).nodeType?e.body:\"HTML\"===e.nodeName?e.ownerDocument.body:e).firstChild),rw=n,rx=!0,rE=null,rC=!0,t=ly(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling;else{if(r_(),r===l){n=oR(e,n,t);break e}og(e,n,r,t)}n=n.child}return n;case 26:return oS(e,n),null===e?(t=sF(n.type,null,n.pendingProps,null))?n.memoizedState=t:rx||(t=n.type,e=n.pendingProps,(r=su($.current).createElement(t))[eO]=n,r[eA]=e,sl(r,t,e),eK(r),n.stateNode=r):n.memoizedState=sF(n.type,e.memoizedProps,n.pendingProps,e.memoizedState),null;case 27:return K(n),null===e&&rx&&(r=n.stateNode=sE(n.type,n.pendingProps,$.current),rw=n,rC=!0,l=rS,sy(n.type)?(sS=l,rS=sw(r.firstChild)):rS=l),og(e,n,n.pendingProps.children,t),oS(e,n),null===e&&(n.flags|=4194304),n.child;case 5:return null===e&&rx&&((l=r=rS)&&(null!==(r=function(e,n,t,r){for(;1===e.nodeType;){if(e.nodeName.toLowerCase()!==n.toLowerCase()){if(!r&&(\"INPUT\"!==e.nodeName||\"hidden\"!==e.type))break}else if(r){if(!e[eV])switch(n){case\"meta\":if(!e.hasAttribute(\"itemprop\"))break;return e;case\"link\":if(\"stylesheet\"===(l=e.getAttribute(\"rel\"))&&e.hasAttribute(\"data-precedence\")||l!==t.rel||e.getAttribute(\"href\")!==(null==t.href||\"\"===t.href?null:t.href)||e.getAttribute(\"crossorigin\")!==(null==t.crossOrigin?null:t.crossOrigin)||e.getAttribute(\"title\")!==(null==t.title?null:t.title))break;return e;case\"style\":if(e.hasAttribute(\"data-precedence\"))break;return e;case\"script\":if(((l=e.getAttribute(\"src\"))!==(null==t.src?null:t.src)||e.getAttribute(\"type\")!==(null==t.type?null:t.type)||e.getAttribute(\"crossorigin\")!==(null==t.crossOrigin?null:t.crossOrigin))&&l&&e.hasAttribute(\"async\")&&!e.hasAttribute(\"itemprop\"))break;return e;default:return e}}else{if(\"input\"!==n||\"hidden\"!==e.type)return e;var l=null==t.name?null:\"\"+t.name;if(\"hidden\"===t.type&&e.getAttribute(\"name\")===l)return e}if(null===(e=sw(e.nextSibling)))break}return null}(r,n.type,n.pendingProps,rC))?(n.stateNode=r,rw=n,rS=sw(r.firstChild),rC=!1,l=!0):l=!1),l||rP(n)),K(n),l=n.type,a=n.pendingProps,o=null!==e?e.memoizedProps:null,r=a.children,sc(l,a)?r=null:null!==o&&sc(l,o)&&(n.flags|=32),null!==n.memoizedState&&(sZ._currentValue=l=l2(e,n,l8,null,null,t)),oS(e,n),og(e,n,r,t),n.child;case 6:return null===e&&rx&&((e=t=rS)&&(null!==(t=function(e,n,t){if(\"\"===n)return null;for(;3!==e.nodeType;)if((1!==e.nodeType||\"INPUT\"!==e.nodeName||\"hidden\"!==e.type)&&!t||null===(e=sw(e.nextSibling)))return null;return e}(t,n.pendingProps,rC))?(n.stateNode=t,rw=n,rS=null,e=!0):e=!1),e||rP(n)),null;case 13:return oT(e,n,t);case 4:return W(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=lg(n,null,r,t):og(e,n,r,t),n.child;case 11:return oy(e,n,n.type,n.pendingProps,t);case 7:return og(e,n,n.pendingProps,t),n.child;case 8:case 12:return og(e,n,n.pendingProps.children,t),n.child;case 10:return r=n.pendingProps,rR(n,n.type,r.value),og(e,n,r.children,t),n.child;case 9:return l=n.type._context,r=n.pendingProps.children,rQ(n),r=r(l=r$(l)),n.flags|=1,og(e,n,r,t),n.child;case 14:return ov(e,n,n.type,n.pendingProps,t);case 15:return ob(e,n,n.type,n.pendingProps,t);case 19:return oA(e,n,t);case 31:return r=n.pendingProps,t=n.mode,r={mode:r.mode,children:r.children},null===e?(t=oF(r,t)).ref=n.ref:(t=rt(e.child,r)).ref=n.ref,n.child=t,t.return=n,n=t;case 22:return ok(e,n,t);case 24:return rQ(n),r=r$(rX),null===e?(null===(l=r6())&&(l=uP,a=rG(),l.pooledCache=a,a.refCount++,null!==a&&(l.pooledCacheLanes|=t),l=a),n.memoizedState={parent:r,cache:l},lb(n),rR(n,rX,l)):(0!=(e.lanes&t)&&(lk(e,n),lP(n,null,null,t),lz()),l=e.memoizedState,a=n.memoizedState,l.parent!==r?(l={parent:r,cache:r},n.memoizedState=l,0===n.lanes&&(n.memoizedState=n.updateQueue.baseState=l),rR(n,rX,r)):(rR(n,rX,r=a.cache),r!==l.cache&&rj(n,[rX],t,!0))),og(e,n,n.pendingProps.children,t),n.child;case 29:throw n.pendingProps}throw Error(i(156,n.tag))}function oj(e){e.flags|=4}function oH(e,n,t,r,l){if((n=0!=(32&e.mode))&&(n=!1),n){if(e.flags|=0x1000000,(0x13ffff40&l)===l)if(e.stateNode.complete)e.flags|=8192;else if(ia())e.flags|=8192;else throw lo=lt,le}else e.flags&=-0x1000001}function oV(e,n){if(\"stylesheet\"!==n.type||0!=(4&n.state.loading))e.flags&=-0x1000001;else if(e.flags|=0x1000000,!sB(n))if(ia())e.flags|=8192;else throw lo=lt,le}function oQ(e,n){null!==n&&(e.flags|=4),16384&e.flags&&(n=22!==e.tag?ez():0x20000000,e.lanes|=n,uH|=n)}function o$(e,n){if(!rx)switch(e.tailMode){case\"hidden\":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case\"collapsed\":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function oB(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var l=e.child;null!==l;)t|=l.lanes|l.childLanes,r|=0x3e00000&l.subtreeFlags,r|=0x3e00000&l.flags,l.return=e,l=l.sibling;else for(l=e.child;null!==l;)t|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}function oW(e,n){switch(rk(n),n.tag){case 3:rI(rX),q();break;case 26:case 27:case 5:Y(n);break;case 4:q();break;case 13:lj(n);break;case 19:j(lH);break;case 10:rI(n.type);break;case 22:case 23:lj(n),lM(),null!==e&&j(r8);break;case 24:rI(rX)}}function oq(e,n){try{var t=n.updateQueue,r=null!==t?t.lastEffect:null;if(null!==r){var l=r.next;t=l;do{if((t.tag&e)===e){r=void 0;var a=t.create;t.inst.destroy=r=a()}t=t.next}while(t!==l)}}catch(e){iE(n,n.return,e)}}function oK(e,n,t){try{var r=n.updateQueue,l=null!==r?r.lastEffect:null;if(null!==l){var a=l.next;r=a;do{if((r.tag&e)===e){var o=r.inst,u=o.destroy;if(void 0!==u){o.destroy=void 0,l=n;try{u()}catch(e){iE(l,t,e)}}}r=r.next}while(r!==a)}}catch(e){iE(n,n.return,e)}}function oY(e){var n=e.updateQueue;if(null!==n){var t=e.stateNode;try{lL(n,t)}catch(n){iE(e,e.return,n)}}}function oX(e,n,t){t.props=ol(e.type,e.memoizedProps),t.state=e.memoizedState;try{t.componentWillUnmount()}catch(t){iE(e,n,t)}}function oG(e,n){try{var t=e.ref;if(null!==t){switch(e.tag){case 26:case 27:case 5:var r=e.stateNode;break;default:r=e.stateNode}\"function\"==typeof t?e.refCleanup=t(r):t.current=r}}catch(t){iE(e,n,t)}}function oZ(e,n){var t=e.ref,r=e.refCleanup;if(null!==t)if(\"function\"==typeof r)try{r()}catch(t){iE(e,n,t)}finally{e.refCleanup=null,null!=(e=e.alternate)&&(e.refCleanup=null)}else if(\"function\"==typeof t)try{t(null)}catch(t){iE(e,n,t)}else t.current=null}function oJ(e){var n=e.type,t=e.memoizedProps,r=e.stateNode;try{switch(n){case\"button\":case\"input\":case\"select\":case\"textarea\":t.autoFocus&&r.focus();break;case\"img\":t.src?r.src=t.src:t.srcSet&&(r.srcset=t.srcSet)}}catch(n){iE(e,e.return,n)}}function o0(e,n,t){try{var r=e.stateNode;(function(e,n,t,r){switch(n){case\"div\":case\"span\":case\"svg\":case\"path\":case\"a\":case\"g\":case\"p\":case\"li\":break;case\"input\":var l=null,a=null,o=null,u=null,s=null,c=null,f=null;for(m in t){var d=t[m];if(t.hasOwnProperty(m)&&null!=d)switch(m){case\"checked\":case\"value\":break;case\"defaultValue\":s=d;default:r.hasOwnProperty(m)||st(e,n,m,null,r,d)}}for(var p in r){var m=r[p];if(d=t[p],r.hasOwnProperty(p)&&(null!=m||null!=d))switch(p){case\"type\":a=m;break;case\"name\":l=m;break;case\"checked\":c=m;break;case\"defaultChecked\":f=m;break;case\"value\":o=m;break;case\"defaultValue\":u=m;break;case\"children\":case\"dangerouslySetInnerHTML\":if(null!=m)throw Error(i(137,n));break;default:m!==d&&st(e,n,p,m,r,d)}}nt(e,o,u,s,c,f,a,l);return;case\"select\":for(a in m=o=u=p=null,t)if(s=t[a],t.hasOwnProperty(a)&&null!=s)switch(a){case\"value\":break;case\"multiple\":m=s;default:r.hasOwnProperty(a)||st(e,n,a,null,r,s)}for(l in r)if(a=r[l],s=t[l],r.hasOwnProperty(l)&&(null!=a||null!=s))switch(l){case\"value\":p=a;break;case\"defaultValue\":u=a;break;case\"multiple\":o=a;default:a!==s&&st(e,n,l,a,r,s)}n=u,t=o,r=m,null!=p?na(e,!!t,p,!1):!!r!=!!t&&(null!=n?na(e,!!t,n,!0):na(e,!!t,t?[]:\"\",!1));return;case\"textarea\":for(u in m=p=null,t)if(l=t[u],t.hasOwnProperty(u)&&null!=l&&!r.hasOwnProperty(u))switch(u){case\"value\":case\"children\":break;default:st(e,n,u,null,r,l)}for(o in r)if(l=r[o],a=t[o],r.hasOwnProperty(o)&&(null!=l||null!=a))switch(o){case\"value\":p=l;break;case\"defaultValue\":m=l;break;case\"children\":break;case\"dangerouslySetInnerHTML\":if(null!=l)throw Error(i(91));break;default:l!==a&&st(e,n,o,l,r,a)}no(e,p,m);return;case\"option\":for(var h in t)p=t[h],t.hasOwnProperty(h)&&null!=p&&!r.hasOwnProperty(h)&&(\"selected\"===h?e.selected=!1:st(e,n,h,null,r,p));for(s in r)p=r[s],m=t[s],r.hasOwnProperty(s)&&p!==m&&(null!=p||null!=m)&&(\"selected\"===s?e.selected=p&&\"function\"!=typeof p&&\"symbol\"!=typeof p:st(e,n,s,p,r,m));return;case\"img\":case\"link\":case\"area\":case\"base\":case\"br\":case\"col\":case\"embed\":case\"hr\":case\"keygen\":case\"meta\":case\"param\":case\"source\":case\"track\":case\"wbr\":case\"menuitem\":for(var g in t)p=t[g],t.hasOwnProperty(g)&&null!=p&&!r.hasOwnProperty(g)&&st(e,n,g,null,r,p);for(c in r)if(p=r[c],m=t[c],r.hasOwnProperty(c)&&p!==m&&(null!=p||null!=m))switch(c){case\"children\":case\"dangerouslySetInnerHTML\":if(null!=p)throw Error(i(137,n));break;default:st(e,n,c,p,r,m)}return;default:if(nd(n)){for(var y in t)p=t[y],t.hasOwnProperty(y)&&void 0!==p&&!r.hasOwnProperty(y)&&sr(e,n,y,void 0,r,p);for(f in r)p=r[f],m=t[f],r.hasOwnProperty(f)&&p!==m&&(void 0!==p||void 0!==m)&&sr(e,n,f,p,r,m);return}}for(var v in t)p=t[v],t.hasOwnProperty(v)&&null!=p&&!r.hasOwnProperty(v)&&st(e,n,v,null,r,p);for(d in r)p=r[d],m=t[d],r.hasOwnProperty(d)&&p!==m&&(null!=p||null!=m)&&st(e,n,d,p,r,m)})(r,e.type,t,n),r[eA]=n}catch(n){iE(e,e.return,n)}}function o1(e){return 5===e.tag||3===e.tag||26===e.tag||27===e.tag&&sy(e.type)||4===e.tag}function o2(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||o1(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(27===e.tag&&sy(e.type)||2&e.flags||null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function o3(e,n,t){var r=e.tag;if(5===r||6===r)e=e.stateNode,n?t.insertBefore(e,n):t.appendChild(e);else if(4!==r&&(27===r&&sy(e.type)&&(t=e.stateNode),null!==(e=e.child)))for(o3(e,n,t),e=e.sibling;null!==e;)o3(e,n,t),e=e.sibling}function o4(e){var n=e.stateNode,t=e.memoizedProps;try{for(var r=e.type,l=n.attributes;l.length;)n.removeAttributeNode(l[0]);sl(n,r,t),n[eO]=e,n[eA]=t}catch(n){iE(e,e.return,n)}}var o8=!1,o6=!1,o5=!1,o9=\"function\"==typeof WeakSet?WeakSet:Set,o7=null;function ue(e,n,t){var r=t.flags;switch(t.tag){case 0:case 11:case 15:uf(e,t),4&r&&oq(5,t);break;case 1:if(uf(e,t),4&r)if(e=t.stateNode,null===n)try{e.componentDidMount()}catch(e){iE(t,t.return,e)}else{var l=ol(t.type,n.memoizedProps);n=n.memoizedState;try{e.componentDidUpdate(l,n,e.__reactInternalSnapshotBeforeUpdate)}catch(e){iE(t,t.return,e)}}64&r&&oY(t),512&r&&oG(t,t.return);break;case 3:if(uf(e,t),64&r&&null!==(e=t.updateQueue)){if(n=null,null!==t.child)switch(t.child.tag){case 27:case 5:case 1:n=t.child.stateNode}try{lL(e,n)}catch(e){iE(t,t.return,e)}}break;case 27:null===n&&4&r&&o4(t);case 26:case 5:uf(e,t),null===n&&4&r&&oJ(t),512&r&&oG(t,t.return);break;case 12:default:uf(e,t);break;case 13:uf(e,t),4&r&&ua(e,t),64&r&&null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)&&function(e,n){var t=e.ownerDocument;if(\"$?\"!==e.data||\"complete\"===t.readyState)n();else{var r=function(){n(),t.removeEventListener(\"DOMContentLoaded\",r)};t.addEventListener(\"DOMContentLoaded\",r),e._reactRetry=r}}(e,t=iN.bind(null,t));break;case 22:if(!(r=null!==t.memoizedState||o8)){n=null!==n&&null!==n.memoizedState||o6,l=o8;var a=o6;o8=r,(o6=n)&&!a?function e(n,t,r){for(r=r&&0!=(8772&t.subtreeFlags),t=t.child;null!==t;){var l=t.alternate,a=n,o=t,u=o.flags;switch(o.tag){case 0:case 11:case 15:e(a,o,r),oq(4,o);break;case 1:if(e(a,o,r),\"function\"==typeof(a=(l=o).stateNode).componentDidMount)try{a.componentDidMount()}catch(e){iE(l,l.return,e)}if(null!==(a=(l=o).updateQueue)){var i=l.stateNode;try{var s=a.shared.hiddenCallbacks;if(null!==s)for(a.shared.hiddenCallbacks=null,a=0;a<s.length;a++)lN(s[a],i)}catch(e){iE(l,l.return,e)}}r&&64&u&&oY(o),oG(o,o.return);break;case 27:o4(o);case 26:case 5:e(a,o,r),r&&null===l&&4&u&&oJ(o),oG(o,o.return);break;case 12:default:e(a,o,r);break;case 13:e(a,o,r),r&&4&u&&ua(a,o);break;case 22:null===o.memoizedState&&e(a,o,r),oG(o,o.return);case 30:}t=t.sibling}}(e,t,0!=(8772&t.subtreeFlags)):uf(e,t),o8=l,o6=a}case 30:}}var un=null,ut=!1;function ur(e,n,t){for(t=t.child;null!==t;)ul(e,n,t),t=t.sibling}function ul(e,n,t){if(eh&&\"function\"==typeof eh.onCommitFiberUnmount)try{eh.onCommitFiberUnmount(em,t)}catch(e){}switch(t.tag){case 26:o6||oZ(t,n),ur(e,n,t),t.memoizedState?t.memoizedState.count--:t.stateNode&&(t=t.stateNode).parentNode.removeChild(t);break;case 27:o6||oZ(t,n);var r=un,l=ut;sy(t.type)&&(un=t.stateNode,ut=!1),ur(e,n,t),sC(t.stateNode),un=r,ut=l;break;case 5:o6||oZ(t,n);case 6:if(r=un,l=ut,un=null,ur(e,n,t),un=r,ut=l,null!==un)if(ut)try{(9===un.nodeType?un.body:\"HTML\"===un.nodeName?un.ownerDocument.body:un).removeChild(t.stateNode)}catch(e){iE(t,n,e)}else try{un.removeChild(t.stateNode)}catch(e){iE(t,n,e)}break;case 18:null!==un&&(ut?(sv(9===(e=un).nodeType?e.body:\"HTML\"===e.nodeName?e.ownerDocument.body:e,t.stateNode),cw(e)):sv(un,t.stateNode));break;case 4:r=un,l=ut,un=t.stateNode.containerInfo,ut=!0,ur(e,n,t),un=r,ut=l;break;case 0:case 11:case 14:case 15:o6||oK(2,t,n),o6||oK(4,t,n),ur(e,n,t);break;case 1:o6||(oZ(t,n),\"function\"==typeof(r=t.stateNode).componentWillUnmount&&oX(t,n,r)),ur(e,n,t);break;case 21:default:ur(e,n,t);break;case 22:o6=(r=o6)||null!==t.memoizedState,ur(e,n,t),o6=r}}function ua(e,n){if(null===n.memoizedState&&null!==(e=n.alternate)&&null!==(e=e.memoizedState)&&null!==(e=e.dehydrated))try{cw(e)}catch(e){iE(n,n.return,e)}}function uo(e,n){var t=function(e){switch(e.tag){case 13:case 19:var n=e.stateNode;return null===n&&(n=e.stateNode=new o9),n;case 22:return null===(n=(e=e.stateNode)._retryCache)&&(n=e._retryCache=new o9),n;default:throw Error(i(435,e.tag))}}(e);n.forEach(function(n){var r=iL.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))})}function uu(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var l=t[r],a=e,o=n,u=o;e:for(;null!==u;){switch(u.tag){case 27:if(sy(u.type)){un=u.stateNode,ut=!1;break e}break;case 5:un=u.stateNode,ut=!1;break e;case 3:case 4:un=u.stateNode.containerInfo,ut=!0;break e}u=u.return}if(null===un)throw Error(i(160));ul(a,o,l),un=null,ut=!1,null!==(a=l.alternate)&&(a.return=null),l.return=null}if(13878&n.subtreeFlags)for(n=n.child;null!==n;)us(n,e),n=n.sibling}var ui=null;function us(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:uu(n,e),uc(e),4&r&&(oK(3,e,e.return),oq(3,e),oK(5,e,e.return));break;case 1:uu(n,e),uc(e),512&r&&(o6||null===t||oZ(t,t.return)),64&r&&o8&&null!==(e=e.updateQueue)&&null!==(r=e.callbacks)&&(t=e.shared.hiddenCallbacks,e.shared.hiddenCallbacks=null===t?r:t.concat(r));break;case 26:var l=ui;if(uu(n,e),uc(e),512&r&&(o6||null===t||oZ(t,t.return)),4&r){var a=null!==t?t.memoizedState:null;if(r=e.memoizedState,null===t)if(null===r)if(null===e.stateNode){e:{r=e.type,t=e.memoizedProps,l=l.ownerDocument||l;n:switch(r){case\"title\":(!(a=l.getElementsByTagName(\"title\")[0])||a[eV]||a[eO]||\"http://www.w3.org/2000/svg\"===a.namespaceURI||a.hasAttribute(\"itemprop\"))&&(a=l.createElement(r),l.head.insertBefore(a,l.querySelector(\"head > title\"))),sl(a,r,t),a[eO]=e,eK(a),r=a;break e;case\"link\":var o=sQ(\"link\",\"href\",l).get(r+(t.href||\"\"));if(o){for(var u=0;u<o.length;u++)if((a=o[u]).getAttribute(\"href\")===(null==t.href||\"\"===t.href?null:t.href)&&a.getAttribute(\"rel\")===(null==t.rel?null:t.rel)&&a.getAttribute(\"title\")===(null==t.title?null:t.title)&&a.getAttribute(\"crossorigin\")===(null==t.crossOrigin?null:t.crossOrigin)){o.splice(u,1);break n}}sl(a=l.createElement(r),r,t),l.head.appendChild(a);break;case\"meta\":if(o=sQ(\"meta\",\"content\",l).get(r+(t.content||\"\"))){for(u=0;u<o.length;u++)if((a=o[u]).getAttribute(\"content\")===(null==t.content?null:\"\"+t.content)&&a.getAttribute(\"name\")===(null==t.name?null:t.name)&&a.getAttribute(\"property\")===(null==t.property?null:t.property)&&a.getAttribute(\"http-equiv\")===(null==t.httpEquiv?null:t.httpEquiv)&&a.getAttribute(\"charset\")===(null==t.charSet?null:t.charSet)){o.splice(u,1);break n}}sl(a=l.createElement(r),r,t),l.head.appendChild(a);break;default:throw Error(i(468,r))}a[eO]=e,eK(a),r=a}e.stateNode=r}else s$(l,e.type,e.stateNode);else e.stateNode=sI(l,r,e.memoizedProps);else a!==r?(null===a?null!==t.stateNode&&(t=t.stateNode).parentNode.removeChild(t):a.count--,null===r?s$(l,e.type,e.stateNode):sI(l,r,e.memoizedProps)):null===r&&null!==e.stateNode&&o0(e,e.memoizedProps,t.memoizedProps)}break;case 27:uu(n,e),uc(e),512&r&&(o6||null===t||oZ(t,t.return)),null!==t&&4&r&&o0(e,e.memoizedProps,t.memoizedProps);break;case 5:if(uu(n,e),uc(e),512&r&&(o6||null===t||oZ(t,t.return)),32&e.flags){l=e.stateNode;try{ni(l,\"\")}catch(n){iE(e,e.return,n)}}4&r&&null!=e.stateNode&&(l=e.memoizedProps,o0(e,l,null!==t?t.memoizedProps:l)),1024&r&&(o5=!0);break;case 6:if(uu(n,e),uc(e),4&r){if(null===e.stateNode)throw Error(i(162));r=e.memoizedProps,t=e.stateNode;try{t.nodeValue=r}catch(n){iE(e,e.return,n)}}break;case 3:if(sV=null,l=ui,ui=sN(n.containerInfo),uu(n,e),ui=l,uc(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{cw(n.containerInfo)}catch(n){iE(e,e.return,n)}o5&&(o5=!1,function e(n){if(1024&n.subtreeFlags)for(n=n.child;null!==n;){var t=n;e(t),5===t.tag&&1024&t.flags&&t.stateNode.reset(),n=n.sibling}}(e));break;case 4:r=ui,ui=sN(e.stateNode.containerInfo),uu(n,e),uc(e),ui=r;break;case 12:default:uu(n,e),uc(e);break;case 13:uu(n,e),uc(e),8192&e.child.flags&&null!==e.memoizedState!=(null!==t&&null!==t.memoizedState)&&(uB=ea()),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,uo(e,r));break;case 22:l=null!==e.memoizedState;var s=null!==t&&null!==t.memoizedState,c=o8,f=o6;if(o8=c||l,o6=f||s,uu(n,e),o6=f,o8=c,uc(e),8192&r)e:for((n=e.stateNode)._visibility=l?-2&n._visibility:1|n._visibility,l&&(null===t||s||o8||o6||function e(n){for(n=n.child;null!==n;){var t=n;switch(t.tag){case 0:case 11:case 14:case 15:oK(4,t,t.return),e(t);break;case 1:oZ(t,t.return);var r=t.stateNode;\"function\"==typeof r.componentWillUnmount&&oX(t,t.return,r),e(t);break;case 27:sC(t.stateNode);case 26:case 5:oZ(t,t.return),e(t);break;case 22:null===t.memoizedState&&e(t);break;default:e(t)}n=n.sibling}}(e)),t=null,n=e;;){if(5===n.tag||26===n.tag){if(null===t){s=t=n;try{if(a=s.stateNode,l)o=a.style,\"function\"==typeof o.setProperty?o.setProperty(\"display\",\"none\",\"important\"):o.display=\"none\";else{u=s.stateNode;var d=s.memoizedProps.style,p=null!=d&&d.hasOwnProperty(\"display\")?d.display:null;u.style.display=null==p||\"boolean\"==typeof p?\"\":(\"\"+p).trim()}}catch(e){iE(s,s.return,e)}}}else if(6===n.tag){if(null===t){s=n;try{s.stateNode.nodeValue=l?\"\":s.memoizedProps}catch(e){iE(s,s.return,e)}}}else if((22!==n.tag&&23!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)break e;t===n&&(t=null),n=n.return}t===n&&(t=null),n.sibling.return=n.return,n=n.sibling}4&r&&null!==(r=e.updateQueue)&&null!==(t=r.retryQueue)&&(r.retryQueue=null,uo(e,t));break;case 19:uu(n,e),uc(e),4&r&&null!==(r=e.updateQueue)&&(e.updateQueue=null,uo(e,r));case 30:case 21:}}function uc(e){var n=e.flags;if(2&n){try{for(var t,r=e.return;null!==r;){if(o1(r)){t=r;break}r=r.return}if(null==t)throw Error(i(160));switch(t.tag){case 27:var l=t.stateNode,a=o2(e);o3(e,a,l);break;case 5:var o=t.stateNode;32&t.flags&&(ni(o,\"\"),t.flags&=-33);var u=o2(e);o3(e,u,o);break;case 3:case 4:var s=t.stateNode.containerInfo,c=o2(e);!function e(n,t,r){var l=n.tag;if(5===l||6===l)n=n.stateNode,t?(9===r.nodeType?r.body:\"HTML\"===r.nodeName?r.ownerDocument.body:r).insertBefore(n,t):((t=9===r.nodeType?r.body:\"HTML\"===r.nodeName?r.ownerDocument.body:r).appendChild(n),null!=(r=r._reactRootContainer)||null!==t.onclick||(t.onclick=sn));else if(4!==l&&(27===l&&sy(n.type)&&(r=n.stateNode,t=null),null!==(n=n.child)))for(e(n,t,r),n=n.sibling;null!==n;)e(n,t,r),n=n.sibling}(e,c,s);break;default:throw Error(i(161))}}catch(n){iE(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function uf(e,n){if(8772&n.subtreeFlags)for(n=n.child;null!==n;)ue(e,n.alternate,n),n=n.sibling}function ud(e,n){var t=null;null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(t=e.memoizedState.cachePool.pool),e=null,null!==n.memoizedState&&null!==n.memoizedState.cachePool&&(e=n.memoizedState.cachePool.pool),e!==t&&(null!=e&&e.refCount++,null!=t&&rZ(t))}function up(e,n){e=null,null!==n.alternate&&(e=n.alternate.memoizedState.cache),(n=n.memoizedState.cache)!==e&&(n.refCount++,null!=e&&rZ(e))}function um(e,n,t,r){if(10256&n.subtreeFlags)for(n=n.child;null!==n;)uh(e,n,t,r),n=n.sibling}function uh(e,n,t,r){var l=n.flags;switch(n.tag){case 0:case 11:case 15:um(e,n,t,r),2048&l&&oq(9,n);break;case 1:case 13:default:um(e,n,t,r);break;case 3:um(e,n,t,r),2048&l&&(e=null,null!==n.alternate&&(e=n.alternate.memoizedState.cache),(n=n.memoizedState.cache)!==e&&(n.refCount++,null!=e&&rZ(e)));break;case 12:if(2048&l){um(e,n,t,r),e=n.stateNode;try{var a=n.memoizedProps,o=a.id,u=a.onPostCommit;\"function\"==typeof u&&u(o,null===n.alternate?\"mount\":\"update\",e.passiveEffectDuration,-0)}catch(e){iE(n,n.return,e)}}else um(e,n,t,r);break;case 23:break;case 22:a=n.stateNode,o=n.alternate,null!==n.memoizedState?2&a._visibility?um(e,n,t,r):ug(e,n):2&a._visibility?um(e,n,t,r):(a._visibility|=2,function e(n,t,r,l,a){for(a=a&&0!=(10256&t.subtreeFlags),t=t.child;null!==t;){var o=t,u=o.flags;switch(o.tag){case 0:case 11:case 15:e(n,o,r,l,a),oq(8,o);break;case 23:break;case 22:var i=o.stateNode;null!==o.memoizedState?2&i._visibility?e(n,o,r,l,a):ug(n,o):(i._visibility|=2,e(n,o,r,l,a)),a&&2048&u&&ud(o.alternate,o);break;case 24:e(n,o,r,l,a),a&&2048&u&&up(o.alternate,o);break;default:e(n,o,r,l,a)}t=t.sibling}}(e,n,t,r,0!=(10256&n.subtreeFlags))),2048&l&&ud(o,n);break;case 24:um(e,n,t,r),2048&l&&up(n.alternate,n)}}function ug(e,n){if(10256&n.subtreeFlags)for(n=n.child;null!==n;){var t=n,r=t.flags;switch(t.tag){case 22:ug(e,t),2048&r&&ud(t.alternate,t);break;case 24:ug(e,t),2048&r&&up(t.alternate,t);break;default:ug(e,t)}n=n.sibling}}var uy=8192;function uv(e){if(e.subtreeFlags&uy)for(e=e.child;null!==e;)ub(e),e=e.sibling}function ub(e){switch(e.tag){case 26:uv(e),e.flags&uy&&null!==e.memoizedState&&function(e,n,t){if(null===sW)throw Error(i(475));var r=sW;if(\"stylesheet\"===n.type&&(\"string\"!=typeof t.media||!1!==matchMedia(t.media).matches)&&0==(4&n.state.loading)){if(null===n.instance){var l=sD(t.href),a=e.querySelector(sM(l));if(a){null!==(e=a._p)&&\"object\"==typeof e&&\"function\"==typeof e.then&&(r.count++,r=sK.bind(r),e.then(r,r)),n.state.loading|=4,n.instance=a,eK(a);return}a=e.ownerDocument||e,t=sO(t),(l=sz.get(l))&&sj(t,l),eK(a=a.createElement(\"link\"));var o=a;o._p=new Promise(function(e,n){o.onload=e,o.onerror=n}),sl(a,\"link\",t),n.instance=a}null===r.stylesheets&&(r.stylesheets=new Map),r.stylesheets.set(n,e),(e=n.state.preload)&&0==(3&n.state.loading)&&(r.count++,n=sK.bind(r),e.addEventListener(\"load\",n),e.addEventListener(\"error\",n))}}(ui,e.memoizedState,e.memoizedProps);break;case 5:default:uv(e);break;case 3:case 4:var n=ui;ui=sN(e.stateNode.containerInfo),uv(e),ui=n;break;case 22:null===e.memoizedState&&(null!==(n=e.alternate)&&null!==n.memoizedState?(n=uy,uy=0x1000000,uv(e),uy=n):uv(e))}}function uk(e){var n=e.alternate;if(null!==n&&null!==(e=n.child)){n.child=null;do n=e.sibling,e.sibling=null,e=n;while(null!==e)}}function uw(e){var n=e.deletions;if(0!=(16&e.flags)){if(null!==n)for(var t=0;t<n.length;t++){var r=n[t];o7=r,ux(r,e)}uk(e)}if(10256&e.subtreeFlags)for(e=e.child;null!==e;)uS(e),e=e.sibling}function uS(e){switch(e.tag){case 0:case 11:case 15:uw(e),2048&e.flags&&oK(9,e,e.return);break;case 3:case 12:default:uw(e);break;case 22:var n=e.stateNode;null!==e.memoizedState&&2&n._visibility&&(null===e.return||13!==e.return.tag)?(n._visibility&=-3,function e(n){var t=n.deletions;if(0!=(16&n.flags)){if(null!==t)for(var r=0;r<t.length;r++){var l=t[r];o7=l,ux(l,n)}uk(n)}for(n=n.child;null!==n;){switch((t=n).tag){case 0:case 11:case 15:oK(8,t,t.return),e(t);break;case 22:2&(r=t.stateNode)._visibility&&(r._visibility&=-3,e(t));break;default:e(t)}n=n.sibling}}(e)):uw(e)}}function ux(e,n){for(;null!==o7;){var t=o7;switch(t.tag){case 0:case 11:case 15:oK(8,t,n);break;case 23:case 22:if(null!==t.memoizedState&&null!==t.memoizedState.cachePool){var r=t.memoizedState.cachePool.pool;null!=r&&r.refCount++}break;case 24:rZ(t.memoizedState.cache)}if(null!==(r=t.child))r.return=t,o7=r;else for(t=e;null!==o7;){var l=(r=o7).sibling,a=r.return;if(!function e(n){var t=n.alternate;null!==t&&(n.alternate=null,e(t)),n.child=null,n.deletions=null,n.sibling=null,5===n.tag&&null!==(t=n.stateNode)&&eQ(t),n.stateNode=null,n.return=null,n.dependencies=null,n.memoizedProps=null,n.memoizedState=null,n.pendingProps=null,n.stateNode=null,n.updateQueue=null}(r),r===t){o7=null;break}if(null!==l){l.return=a,o7=l;break}o7=a}}}var uE={getCacheForType:function(e){var n=r$(rX),t=n.data.get(e);return void 0===t&&(t=e(),n.data.set(e,t)),t}},uC=\"function\"==typeof WeakMap?WeakMap:Map,uz=0,uP=null,uN=null,uL=0,uT=0,u_=null,uF=!1,uD=!1,uM=!1,uO=0,uA=0,uR=0,uI=0,uU=0,uj=0,uH=0,uV=null,uQ=null,u$=!1,uB=0,uW=1/0,uq=null,uK=null,uY=0,uX=null,uG=null,uZ=0,uJ=0,u0=null,u1=null,u2=0,u3=null;function u4(){if(0!=(2&uz)&&0!==uL)return uL&-uL;if(null!==M.T){var e=r1;return 0!==e?e:iQ()}return eD()}function u8(){0===uj&&(uj=0==(0x20000000&uL)||rx?eC():0x20000000);var e=lO.current;return null!==e&&(e.flags|=32),uj}function u6(e,n,t){(e===uP&&(2===uT||9===uT)||null!==e.cancelPendingCommit)&&(ir(e,0),u7(e,uL,uj,!1)),eN(e,t),(0==(2&uz)||e!==uP)&&(e===uP&&(0==(2&uz)&&(uI|=t),4===uA&&u7(e,uL,uj,!1)),iA(e))}function u5(e,n,t){if(0!=(6&uz))throw Error(i(327));for(var r=!t&&0==(124&n)&&0==(n&e.expiredLanes)||eE(e,n),l=r?function(e,n){var t=uz;uz|=2;var r=io(),l=iu();uP!==e||uL!==n?(uq=null,uW=ea()+500,ir(e,n)):uD=eE(e,n);e:for(;;)try{if(0!==uT&&null!==uN){n=uN;var a=u_;n:switch(uT){case 1:uT=0,u_=null,ip(e,n,a,1);break;case 2:case 9:if(lr(a)){uT=0,u_=null,id(n);break}n=function(){2!==uT&&9!==uT||uP!==e||(uT=7),iA(e)},a.then(n,n);break e;case 3:uT=7;break e;case 4:uT=5;break e;case 7:lr(a)?(uT=0,u_=null,id(n)):(uT=0,u_=null,ip(e,n,a,7));break;case 5:var o=null;switch(uN.tag){case 26:o=uN.memoizedState;case 5:case 27:var u=uN;if(o?sB(o):u.stateNode.complete){uT=0,u_=null;var s=u.sibling;if(null!==s)uN=s;else{var c=u.return;null!==c?(uN=c,im(c)):uN=null}break n}}uT=0,u_=null,ip(e,n,a,5);break;case 6:uT=0,u_=null,ip(e,n,a,6);break;case 8:it(),uA=6;break e;default:throw Error(i(462))}}for(;null!==uN&&!er();)ic(uN);break}catch(n){il(e,n)}return(rA=rO=null,M.H=r,M.A=l,uz=t,null!==uN)?0:(uP=null,uL=0,t2(),uA)}(e,n):is(e,n,!0),a=r;;){if(0===l)uD&&!r&&u7(e,n,0,!1);else{if(t=e.current.alternate,a&&!function(e){for(var n=e;;){var t=n.tag;if((0===t||11===t||15===t)&&16384&n.flags&&null!==(t=n.updateQueue)&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var l=t[r],a=l.getSnapshot;l=l.value;try{if(!tE(a(),l))return!1}catch(e){return!1}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(t)){l=is(e,n,!1),a=!1;continue}if(2===l){if(a=n,e.errorRecoveryDisabledLanes&a)var o=0;else o=0!=(o=-0x20000001&e.pendingLanes)?o:0x20000000&o?0x20000000:0;if(0!==o){n=o;e:{l=uV;var u=e.current.memoizedState.isDehydrated;if(u&&(ir(e,o).flags|=256),2!==(o=is(e,o,!1))){if(uM&&!u){e.errorRecoveryDisabledLanes|=a,uI|=a,l=4;break e}a=uQ,uQ=l,null!==a&&(null===uQ?uQ=a:uQ.push.apply(uQ,a))}l=o}if(a=!1,2!==l)continue}}if(1===l){ir(e,0),u7(e,n,0,!0);break}e:{switch(r=e,a=l){case 0:case 1:throw Error(i(345));case 4:if((4194048&n)!==n)break;case 6:u7(r,n,uj,!uF);break e;case 2:uQ=null;break;case 3:case 5:break;default:throw Error(i(329))}if((0x3c00000&n)===n&&10<(l=uB+300-ea())){if(u7(r,n,uj,!uF),0!==ex(r,0,!0))break e;r.timeoutHandle=sd(u9.bind(null,r,t,uQ,uq,u$,n,uj,uI,uH,uF,a,2,-0,0),l);break e}u9(r,t,uQ,uq,u$,n,uj,uI,uH,uF,a,0,-0,0)}}break}iA(e)}function u9(e,n,t,r,l,a,o,u,s,c,f,d,p,m){if(e.timeoutHandle=-1,(8192&(d=n.subtreeFlags)||0x1002000==(0x1002000&d))&&(sW={stylesheets:null,count:0,unsuspend:sq},ub(n),null!==(d=function(){if(null===sW)throw Error(i(475));var e=sW;return e.stylesheets&&0===e.count&&sX(e,e.stylesheets),0<e.count?function(n){var t=setTimeout(function(){if(e.stylesheets&&sX(e,e.stylesheets),e.unsuspend){var n=e.unsuspend;e.unsuspend=null,n()}},6e4);return e.unsuspend=n,function(){e.unsuspend=null,clearTimeout(t)}}:null}()))){e.cancelPendingCommit=d(ig.bind(null,e,n,a,t,r,l,o,u,s,f,1,p,m)),u7(e,a,o,!c);return}ig(e,n,a,t,r,l,o,u,s)}function u7(e,n,t,r){n&=~uU,n&=~uI,e.suspendedLanes|=n,e.pingedLanes&=~n,r&&(e.warmLanes|=n),r=e.expirationTimes;for(var l=n;0<l;){var a=31-ey(l),o=1<<a;r[a]=-1,l&=~o}0!==t&&eL(e,t,n)}function ie(){return 0!=(6&uz)||(iR(0,!1),!1)}function it(){if(null!==uN){if(0===uT)var e=uN.return;else e=uN,rA=rO=null,l9(e),ls=null,lc=0,e=uN;for(;null!==e;)oW(e.alternate,e),e=e.return;uN=null}}function ir(e,n){var t=e.timeoutHandle;-1!==t&&(e.timeoutHandle=-1,sp(t)),null!==(t=e.cancelPendingCommit)&&(e.cancelPendingCommit=null,t()),it(),uP=e,uN=t=rt(e.current,null),uL=n,uT=0,u_=null,uF=!1,uD=eE(e,n),uM=!1,uH=uj=uU=uI=uR=uA=0,uQ=uV=null,u$=!1,0!=(8&n)&&(n|=32&n);var r=e.entangledLanes;if(0!==r)for(e=e.entanglements,r&=n;0<r;){var l=31-ey(r),a=1<<l;n|=e[l],r&=~a}return uO=n,t2(),t}function il(e,n){l$=null,M.H=a6,n===r7||n===ln?(n=lu(),uT=3):n===le?(n=lu(),uT=4):uT=n===om?8:null!==n&&\"object\"==typeof n&&\"function\"==typeof n.then?6:1,u_=n,null===uN&&(uA=1,os(e,tZ(n,e.current)))}function ia(){var e=lO.current;return null===e||((4194048&uL)===uL?null===lA:((0x3c00000&uL)===uL||0!=(0x20000000&uL))&&e===lA)}function io(){var e=M.H;return M.H=a6,null===e?a6:e}function iu(){var e=M.A;return M.A=uE,e}function ii(){uA=4,uF||(4194048&uL)!==uL&&null!==lO.current||(uD=!0),0==(0x7ffffff&uR)&&0==(0x7ffffff&uI)||null===uP||u7(uP,uL,uj,!1)}function is(e,n,t){var r=uz;uz|=2;var l=io(),a=iu();(uP!==e||uL!==n)&&(uq=null,ir(e,n)),n=!1;var o=uA;e:for(;;)try{if(0!==uT&&null!==uN){var u=uN,i=u_;switch(uT){case 8:it(),o=6;break e;case 3:case 2:case 9:case 6:null===lO.current&&(n=!0);var s=uT;if(uT=0,u_=null,ip(e,u,i,s),t&&uD){o=0;break e}break;default:s=uT,uT=0,u_=null,ip(e,u,i,s)}}(function(){for(;null!==uN;)ic(uN)})(),o=uA;break}catch(n){il(e,n)}return n&&e.shellSuspendCounter++,rA=rO=null,uz=r,M.H=l,M.A=a,null===uN&&(uP=null,uL=0,t2()),o}function ic(e){var n=oU(e.alternate,e,uO);e.memoizedProps=e.pendingProps,null===n?im(e):uN=n}function id(e){var n=e,t=n.alternate;switch(n.tag){case 15:case 0:n=oE(t,n,n.pendingProps,n.type,void 0,uL);break;case 11:n=oE(t,n,n.pendingProps,n.type.render,n.ref,uL);break;case 5:l9(n);default:oW(t,n),n=oU(t,n=uN=rr(n,uO),uO)}e.memoizedProps=e.pendingProps,null===n?im(e):uN=n}function ip(e,n,t,r){rA=rO=null,l9(n),ls=null,lc=0;var l=n.return;try{if(function(e,n,t,r,l){if(t.flags|=32768,null!==r&&\"object\"==typeof r&&\"function\"==typeof r.then){if(null!==(n=t.alternate)&&rH(n,t,l,!0),null!==(t=lO.current)){switch(t.tag){case 13:return null===lA?ii():null===t.alternate&&0===uA&&(uA=3),t.flags&=-257,t.flags|=65536,t.lanes=l,r===lt?t.flags|=16384:(null===(n=t.updateQueue)?t.updateQueue=new Set([r]):n.add(r),iC(e,r,l)),!1;case 22:return t.flags|=65536,r===lt?t.flags|=16384:(null===(n=t.updateQueue)?(n={transitions:null,markerInstances:null,retryQueue:new Set([r])},t.updateQueue=n):null===(t=n.retryQueue)?n.retryQueue=new Set([r]):t.add(r),iC(e,r,l)),!1}throw Error(i(435,t.tag))}return iC(e,r,l),ii(),!1}if(rx)return null!==(n=lO.current)?(0==(65536&n.flags)&&(n.flags|=256),n.flags|=65536,n.lanes=l,r!==rz&&rD(tZ(e=Error(i(422),{cause:r}),t))):(r!==rz&&rD(tZ(n=Error(i(423),{cause:r}),t)),e=e.current.alternate,e.flags|=65536,l&=-l,e.lanes|=l,r=tZ(r,t),l=of(e.stateNode,r,l),lE(e,l),4!==uA&&(uA=2)),!1;var a=Error(i(520),{cause:r});if(a=tZ(a,t),null===uV?uV=[a]:uV.push(a),4!==uA&&(uA=2),null===n)return!0;r=tZ(r,t),t=n;do{switch(t.tag){case 3:return t.flags|=65536,e=l&-l,t.lanes|=e,e=of(t.stateNode,r,e),lE(t,e),!1;case 1:if(n=t.type,a=t.stateNode,0==(128&t.flags)&&(\"function\"==typeof n.getDerivedStateFromError||null!==a&&\"function\"==typeof a.componentDidCatch&&(null===uK||!uK.has(a))))return t.flags|=65536,l&=-l,t.lanes|=l,op(l=od(l),e,t,r),lE(t,l),!1}t=t.return}while(null!==t);return!1}(e,l,n,t,uL)){uA=1,os(e,tZ(t,e.current)),uN=null;return}}catch(n){if(null!==l)throw uN=l,n;uA=1,os(e,tZ(t,e.current)),uN=null;return}32768&n.flags?(rx||1===r?e=!0:uD||0!=(0x20000000&uL)?e=!1:(uF=e=!0,(2===r||9===r||3===r||6===r)&&null!==(r=lO.current)&&13===r.tag&&(r.flags|=16384)),ih(n,e)):im(n)}function im(e){var n=e;do{if(0!=(32768&n.flags))return void ih(n,uF);e=n.return;var t=function(e,n,t){var r=n.pendingProps;switch(rk(n),n.tag){case 31:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:case 1:return oB(n),null;case 3:return t=n.stateNode,r=null,null!==e&&(r=e.memoizedState.cache),n.memoizedState.cache!==r&&(n.flags|=2048),rI(rX),q(),t.pendingContext&&(t.context=t.pendingContext,t.pendingContext=null),(null===e||null===e.child)&&(rT(n)?oj(n):null===e||e.memoizedState.isDehydrated&&0==(256&n.flags)||(n.flags|=1024,rF())),oB(n),null;case 26:var l=n.type,a=n.memoizedState;return null===e?(oj(n),null!==a?(oB(n),oV(n,a)):(oB(n),oH(n,l,null,r,t))):a?a!==e.memoizedState?(oj(n),oB(n),oV(n,a)):(oB(n),n.flags&=-0x1000001):((e=e.memoizedProps)!==r&&oj(n),oB(n),oH(n,l,e,r,t)),null;case 27:if(Y(n),t=$.current,l=n.type,null!==e&&null!=n.stateNode)e.memoizedProps!==r&&oj(n);else{if(!r){if(null===n.stateNode)throw Error(i(166));return oB(n),null}e=V.current,rT(n)?rN(n,e):(e=sE(l,r,t),n.stateNode=e,oj(n))}return oB(n),null;case 5:if(Y(n),l=n.type,null!==e&&null!=n.stateNode)e.memoizedProps!==r&&oj(n);else{if(!r){if(null===n.stateNode)throw Error(i(166));return oB(n),null}if(a=V.current,rT(n))rN(n,a);else{var o=su($.current);switch(a){case 1:a=o.createElementNS(\"http://www.w3.org/2000/svg\",l);break;case 2:a=o.createElementNS(\"http://www.w3.org/1998/Math/MathML\",l);break;default:switch(l){case\"svg\":a=o.createElementNS(\"http://www.w3.org/2000/svg\",l);break;case\"math\":a=o.createElementNS(\"http://www.w3.org/1998/Math/MathML\",l);break;case\"script\":(a=o.createElement(\"div\")).innerHTML=\"<script><\\/script>\",a=a.removeChild(a.firstChild);break;case\"select\":a=\"string\"==typeof r.is?o.createElement(\"select\",{is:r.is}):o.createElement(\"select\"),r.multiple?a.multiple=!0:r.size&&(a.size=r.size);break;default:a=\"string\"==typeof r.is?o.createElement(l,{is:r.is}):o.createElement(l)}}a[eO]=n,a[eA]=r;e:for(o=n.child;null!==o;){if(5===o.tag||6===o.tag)a.appendChild(o.stateNode);else if(4!==o.tag&&27!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===n)break;for(;null===o.sibling;){if(null===o.return||o.return===n)break e;o=o.return}o.sibling.return=o.return,o=o.sibling}switch(n.stateNode=a,sl(a,l,r),l){case\"button\":case\"input\":case\"select\":case\"textarea\":r=!!r.autoFocus;break;case\"img\":r=!0;break;default:r=!1}r&&oj(n)}}return oB(n),oH(n,n.type,null===e?null:e.memoizedProps,n.pendingProps,t),null;case 6:if(e&&null!=n.stateNode)e.memoizedProps!==r&&oj(n);else{if(\"string\"!=typeof r&&null===n.stateNode)throw Error(i(166));if(e=$.current,rT(n)){if(e=n.stateNode,t=n.memoizedProps,r=null,null!==(l=rw))switch(l.tag){case 27:case 5:r=l.memoizedProps}e[eO]=n,(e=!!(e.nodeValue===t||null!==r&&!0===r.suppressHydrationWarning||se(e.nodeValue,t)))||rP(n,!0)}else(e=su(e).createTextNode(r))[eO]=n,n.stateNode=e}return oB(n),null;case 13:if(r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(l=rT(n),null!==r&&null!==r.dehydrated){if(null===e){if(!l)throw Error(i(318));if(!(l=null!==(l=n.memoizedState)?l.dehydrated:null))throw Error(i(317));l[eO]=n}else r_(),0==(128&n.flags)&&(n.memoizedState=null),n.flags|=4;oB(n),l=!1}else l=rF(),null!==e&&null!==e.memoizedState&&(e.memoizedState.hydrationErrors=l),l=!0;if(!l){if(256&n.flags)return lj(n),n;return lj(n),null}}if(lj(n),0!=(128&n.flags))return n.lanes=t,n;return t=null!==r,e=null!==e&&null!==e.memoizedState,t&&(r=n.child,l=null,null!==r.alternate&&null!==r.alternate.memoizedState&&null!==r.alternate.memoizedState.cachePool&&(l=r.alternate.memoizedState.cachePool.pool),a=null,null!==r.memoizedState&&null!==r.memoizedState.cachePool&&(a=r.memoizedState.cachePool.pool),a!==l&&(r.flags|=2048)),t!==e&&t&&(n.child.flags|=8192),oQ(n,n.updateQueue),oB(n),null;case 4:return q(),null===e&&i0(n.stateNode.containerInfo),oB(n),null;case 10:return rI(n.type),oB(n),null;case 19:if(j(lH),null===(l=n.memoizedState))return oB(n),null;if(r=0!=(128&n.flags),null===(a=l.rendering))if(r)o$(l,!1);else{if(0!==uA||null!==e&&0!=(128&e.flags))for(e=n.child;null!==e;){if(null!==(a=lV(e))){for(n.flags|=128,o$(l,!1),e=a.updateQueue,n.updateQueue=e,oQ(n,e),n.subtreeFlags=0,e=t,t=n.child;null!==t;)rr(t,e),t=t.sibling;return H(lH,1&lH.current|2),n.child}e=e.sibling}null!==l.tail&&ea()>uW&&(n.flags|=128,r=!0,o$(l,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=lV(a))){if(n.flags|=128,r=!0,e=e.updateQueue,n.updateQueue=e,oQ(n,e),o$(l,!0),null===l.tail&&\"hidden\"===l.tailMode&&!a.alternate&&!rx)return oB(n),null}else 2*ea()-l.renderingStartTime>uW&&0x20000000!==t&&(n.flags|=128,r=!0,o$(l,!1),n.lanes=4194304);l.isBackwards?(a.sibling=n.child,n.child=a):(null!==(e=l.last)?e.sibling=a:n.child=a,l.last=a)}if(null!==l.tail)return n=l.tail,l.rendering=n,l.tail=n.sibling,l.renderingStartTime=ea(),n.sibling=null,e=lH.current,H(lH,r?1&e|2:1&e),n;return oB(n),null;case 22:case 23:return lj(n),lM(),r=null!==n.memoizedState,null!==e?null!==e.memoizedState!==r&&(n.flags|=8192):r&&(n.flags|=8192),r?0!=(0x20000000&t)&&0==(128&n.flags)&&(oB(n),6&n.subtreeFlags&&(n.flags|=8192)):oB(n),null!==(t=n.updateQueue)&&oQ(n,t.retryQueue),t=null,null!==e&&null!==e.memoizedState&&null!==e.memoizedState.cachePool&&(t=e.memoizedState.cachePool.pool),r=null,null!==n.memoizedState&&null!==n.memoizedState.cachePool&&(r=n.memoizedState.cachePool.pool),r!==t&&(n.flags|=2048),null!==e&&j(r8),null;case 24:return t=null,null!==e&&(t=e.memoizedState.cache),n.memoizedState.cache!==t&&(n.flags|=2048),rI(rX),oB(n),null;case 25:case 30:return null}throw Error(i(156,n.tag))}(n.alternate,n,uO);if(null!==t){uN=t;return}if(null!==(n=n.sibling)){uN=n;return}uN=n=e}while(null!==n);0===uA&&(uA=5)}function ih(e,n){do{var t=function(e,n){switch(rk(n),n.tag){case 1:return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return rI(rX),q(),0!=(65536&(e=n.flags))&&0==(128&e)?(n.flags=-65537&e|128,n):null;case 26:case 27:case 5:return Y(n),null;case 13:if(lj(n),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(i(340));r_()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return j(lH),null;case 4:return q(),null;case 10:return rI(n.type),null;case 22:case 23:return lj(n),lM(),null!==e&&j(r8),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 24:return rI(rX),null;default:return null}}(e.alternate,e);if(null!==t){t.flags&=32767,uN=t;return}if(null!==(t=e.return)&&(t.flags|=32768,t.subtreeFlags=0,t.deletions=null),!n&&null!==(e=e.sibling)){uN=e;return}uN=e=t}while(null!==e);uA=6,uN=null}function ig(e,n,t,r,l,a,o,u,s){e.cancelPendingCommit=null;do iw();while(0!==uY);if(0!=(6&uz))throw Error(i(327));if(null!==n){if(n===e.current)throw Error(i(177));if(!function(e,n,t,r,l,a){var o=e.pendingLanes;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.warmLanes=0,e.expiredLanes&=t,e.entangledLanes&=t,e.errorRecoveryDisabledLanes&=t,e.shellSuspendCounter=0;var u=e.entanglements,i=e.expirationTimes,s=e.hiddenUpdates;for(t=o&~t;0<t;){var c=31-ey(t),f=1<<c;u[c]=0,i[c]=-1;var d=s[c];if(null!==d)for(s[c]=null,c=0;c<d.length;c++){var p=d[c];null!==p&&(p.lane&=-0x20000001)}t&=~f}0!==r&&eL(e,r,0),0!==a&&0===l&&0!==e.tag&&(e.suspendedLanes|=a&~(o&~n))}(e,t,a=n.lanes|n.childLanes|t1,o,u,s),e===uP&&(uN=uP=null,uL=0),uG=n,uX=e,uZ=t,uJ=a,u0=l,u1=r,0!=(10256&n.subtreeFlags)||0!=(10256&n.flags)?(e.callbackNode=null,e.callbackPriority=0,en(es,function(){return iS(!0),null})):(e.callbackNode=null,e.callbackPriority=0),r=0!=(13878&n.flags),0!=(13878&n.subtreeFlags)||r){r=M.T,M.T=null,l=O.p,O.p=2,o=uz,uz|=4;try{!function(e,n){if(e=e.containerInfo,sa=s6,tL(e=tN(e))){if(\"selectionStart\"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var l,a=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var u=0,s=-1,c=-1,f=0,d=0,p=e,m=null;n:for(;;){for(;p!==t||0!==a&&3!==p.nodeType||(s=u+a),p!==o||0!==r&&3!==p.nodeType||(c=u+r),3===p.nodeType&&(u+=p.nodeValue.length),null!==(l=p.firstChild);)m=p,p=l;for(;;){if(p===e)break n;if(m===t&&++f===a&&(s=u),m===o&&++d===r&&(c=u),null!==(l=p.nextSibling))break;m=(p=m).parentNode}p=l}t=-1===s||-1===c?null:{start:s,end:c}}else t=null}t=t||{start:0,end:0}}else t=null;for(so={focusedElem:e,selectionRange:t},s6=!1,o7=n;null!==o7;)if(e=(n=o7).child,0!=(1024&n.subtreeFlags)&&null!==e)e.return=n,o7=e;else for(;null!==o7;){switch(o=(n=o7).alternate,e=n.flags,n.tag){case 0:case 11:case 15:case 5:case 26:case 27:case 6:case 4:case 17:break;case 1:if(0!=(1024&e)&&null!==o){e=void 0,t=n,a=o.memoizedProps,o=o.memoizedState,r=t.stateNode;try{var h=ol(t.type,a,t.elementType===t.type);e=r.getSnapshotBeforeUpdate(h,o),r.__reactInternalSnapshotBeforeUpdate=e}catch(e){iE(t,t.return,e)}}break;case 3:if(0!=(1024&e)){if(9===(t=(e=n.stateNode.containerInfo).nodeType))sb(e);else if(1===t)switch(e.nodeName){case\"HEAD\":case\"HTML\":case\"BODY\":sb(e);break;default:e.textContent=\"\"}}break;default:if(0!=(1024&e))throw Error(i(163))}if(null!==(e=n.sibling)){e.return=n.return,o7=e;break}o7=n.return}}(e,n,t)}finally{uz=o,O.p=l,M.T=r}}uY=1,iy(),iv(),ib()}}function iy(){if(1===uY){uY=0;var e=uX,n=uG,t=0!=(13878&n.flags);if(0!=(13878&n.subtreeFlags)||t){t=M.T,M.T=null;var r=O.p;O.p=2;var l=uz;uz|=4;try{us(n,e);var a=so,o=tN(e.containerInfo),u=a.focusedElem,i=a.selectionRange;if(o!==u&&u&&u.ownerDocument&&function e(n,t){return!!n&&!!t&&(n===t||(!n||3!==n.nodeType)&&(t&&3===t.nodeType?e(n,t.parentNode):\"contains\"in n?n.contains(t):!!n.compareDocumentPosition&&!!(16&n.compareDocumentPosition(t))))}(u.ownerDocument.documentElement,u)){if(null!==i&&tL(u)){var s=i.start,c=i.end;if(void 0===c&&(c=s),\"selectionStart\"in u)u.selectionStart=s,u.selectionEnd=Math.min(c,u.value.length);else{var f=u.ownerDocument||document,d=f&&f.defaultView||window;if(d.getSelection){var p=d.getSelection(),m=u.textContent.length,h=Math.min(i.start,m),g=void 0===i.end?h:Math.min(i.end,m);!p.extend&&h>g&&(o=g,g=h,h=o);var y=tP(u,h),v=tP(u,g);if(y&&v&&(1!==p.rangeCount||p.anchorNode!==y.node||p.anchorOffset!==y.offset||p.focusNode!==v.node||p.focusOffset!==v.offset)){var b=f.createRange();b.setStart(y.node,y.offset),p.removeAllRanges(),h>g?(p.addRange(b),p.extend(v.node,v.offset)):(b.setEnd(v.node,v.offset),p.addRange(b))}}}}for(f=[],p=u;p=p.parentNode;)1===p.nodeType&&f.push({element:p,left:p.scrollLeft,top:p.scrollTop});for(\"function\"==typeof u.focus&&u.focus(),u=0;u<f.length;u++){var k=f[u];k.element.scrollLeft=k.left,k.element.scrollTop=k.top}}s6=!!sa,so=sa=null}finally{uz=l,O.p=r,M.T=t}}e.current=n,uY=2}}function iv(){if(2===uY){uY=0;var e=uX,n=uG,t=0!=(8772&n.flags);if(0!=(8772&n.subtreeFlags)||t){t=M.T,M.T=null;var r=O.p;O.p=2;var l=uz;uz|=4;try{ue(e,n.alternate,n)}finally{uz=l,O.p=r,M.T=t}}uY=3}}function ib(){if(4===uY||3===uY){uY=0,el();var e=uX,n=uG,t=uZ,r=u1;0!=(10256&n.subtreeFlags)||0!=(10256&n.flags)?uY=5:(uY=0,uG=uX=null,ik(e,e.pendingLanes));var l=e.pendingLanes;if(0===l&&(uK=null),eF(t),n=n.stateNode,eh&&\"function\"==typeof eh.onCommitFiberRoot)try{eh.onCommitFiberRoot(em,n,void 0,128==(128&n.current.flags))}catch(e){}if(null!==r){n=M.T,l=O.p,O.p=2,M.T=null;try{for(var a=e.onRecoverableError,o=0;o<r.length;o++){var u=r[o];a(u.value,{componentStack:u.stack})}}finally{M.T=n,O.p=l}}0!=(3&uZ)&&iw(),iA(e),l=e.pendingLanes,0!=(4194090&t)&&0!=(42&l)?e===u3?u2++:(u2=0,u3=e):u2=0,iR(0,!1)}}function ik(e,n){0==(e.pooledCacheLanes&=n)&&null!=(n=e.pooledCache)&&(e.pooledCache=null,rZ(n))}function iw(e){return iy(),iv(),ib(),iS(e)}function iS(){if(5!==uY)return!1;var e=uX,n=uJ;uJ=0;var t=eF(uZ),r=M.T,l=O.p;try{O.p=32>t?32:t,M.T=null,t=u0,u0=null;var a=uX,o=uZ;if(uY=0,uG=uX=null,uZ=0,0!=(6&uz))throw Error(i(331));var u=uz;if(uz|=4,uS(a.current),uh(a,a.current,o,t),uz=u,iR(0,!1),eh&&\"function\"==typeof eh.onPostCommitFiberRoot)try{eh.onPostCommitFiberRoot(em,a)}catch(e){}return!0}finally{O.p=l,M.T=r,ik(e,n)}}function ix(e,n,t){n=tZ(t,n),n=of(e.stateNode,n,2),null!==(e=lS(e,n,2))&&(eN(e,2),iA(e))}function iE(e,n,t){if(3===e.tag)ix(e,e,t);else for(;null!==n;){if(3===n.tag){ix(n,e,t);break}if(1===n.tag){var r=n.stateNode;if(\"function\"==typeof n.type.getDerivedStateFromError||\"function\"==typeof r.componentDidCatch&&(null===uK||!uK.has(r))){e=tZ(t,e),null!==(r=lS(n,t=od(2),2))&&(op(t,r,n,e),eN(r,2),iA(r));break}}n=n.return}}function iC(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new uC;var l=new Set;r.set(n,l)}else void 0===(l=r.get(n))&&(l=new Set,r.set(n,l));l.has(t)||(uM=!0,l.add(t),e=iz.bind(null,e,n,t),n.then(e,e))}function iz(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),e.pingedLanes|=e.suspendedLanes&t,e.warmLanes&=~t,uP===e&&(uL&t)===t&&(4===uA||3===uA&&(0x3c00000&uL)===uL&&300>ea()-uB?0==(2&uz)&&ir(e,0):uU|=t,uH===uL&&(uH=0)),iA(e)}function iP(e,n){0===n&&(n=ez()),null!==(e=t8(e,n))&&(eN(e,n),iA(e))}function iN(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),iP(e,t)}function iL(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;null!==l&&(t=l.retryLane);break;case 19:r=e.stateNode;break;case 22:r=e.stateNode._retryCache;break;default:throw Error(i(314))}null!==r&&r.delete(n),iP(e,t)}var iT=null,i_=null,iF=!1,iD=!1,iM=!1,iO=0;function iA(e){e!==i_&&null===e.next&&(null===i_?iT=i_=e:i_=i_.next=e),iD=!0,iF||(iF=!0,sh(function(){0!=(6&uz)?en(eu,iI):iU()}))}function iR(e,n){if(!iM&&iD){iM=!0;do for(var t=!1,r=iT;null!==r;){if(!n)if(0!==e){var l=r.pendingLanes;if(0===l)var a=0;else{var o=r.suspendedLanes,u=r.pingedLanes;a=0xc000095&(a=(1<<31-ey(42|e)+1)-1&(l&~(o&~u)))?0xc000095&a|1:a?2|a:0}0!==a&&(t=!0,iV(r,a))}else a=uL,0==(3&(a=ex(r,r===uP?a:0,null!==r.cancelPendingCommit||-1!==r.timeoutHandle)))||eE(r,a)||(t=!0,iV(r,a));r=r.next}while(t);iM=!1}}function iI(){iU()}function iU(){iD=iF=!1;var e,n=0;0!==iO&&(((e=window.event)&&\"popstate\"===e.type?e===sf||(sf=e,0):(sf=null,1))||(n=iO),iO=0);for(var t=ea(),r=null,l=iT;null!==l;){var a=l.next,o=ij(l,t);0===o?(l.next=null,null===r?iT=a:r.next=a,null===a&&(i_=r)):(r=l,(0!==n||0!=(3&o))&&(iD=!0)),l=a}0!==uY&&5!==uY||iR(n,!1)}function ij(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,a=-0x3c00001&e.pendingLanes;0<a;){var o=31-ey(a),u=1<<o,i=l[o];-1===i?(0==(u&t)||0!=(u&r))&&(l[o]=function(e,n){switch(e){case 1:case 2:case 4:case 8:case 64:return n+250;case 16:case 32:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return -1}}(u,n)):i<=n&&(e.expiredLanes|=u),a&=~u}if(n=uP,t=uL,t=ex(e,e===n?t:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle),r=e.callbackNode,0===t||e===n&&(2===uT||9===uT)||null!==e.cancelPendingCommit)return null!==r&&null!==r&&et(r),e.callbackNode=null,e.callbackPriority=0;if(0==(3&t)||eE(e,t)){if((n=t&-t)===e.callbackPriority)return n;switch(null!==r&&et(r),eF(t)){case 2:case 8:t=ei;break;case 32:default:t=es;break;case 0x10000000:t=ef}return t=en(t,r=iH.bind(null,e)),e.callbackPriority=n,e.callbackNode=t,n}return null!==r&&null!==r&&et(r),e.callbackPriority=2,e.callbackNode=null,2}function iH(e,n){if(0!==uY&&5!==uY)return e.callbackNode=null,e.callbackPriority=0,null;var t=e.callbackNode;if(iw(!0)&&e.callbackNode!==t)return null;var r=uL;return 0===(r=ex(e,e===uP?r:0,null!==e.cancelPendingCommit||-1!==e.timeoutHandle))?null:(u5(e,r,n),ij(e,ea()),null!=e.callbackNode&&e.callbackNode===t?iH.bind(null,e):null)}function iV(e,n){if(iw())return null;u5(e,n,!0)}function iQ(){return 0===iO&&(iO=eC()),iO}function i$(e){return null==e||\"symbol\"==typeof e||\"boolean\"==typeof e?null:\"function\"==typeof e?e:nh(\"\"+e)}function iB(e,n){var t=n.ownerDocument.createElement(\"input\");return t.name=n.name,t.value=n.value,e.id&&t.setAttribute(\"form\",e.id),n.parentNode.insertBefore(t,n),e=new FormData(e),t.parentNode.removeChild(t),e}for(var iW=0;iW<tY.length;iW++){var iq=tY[iW];tX(iq.toLowerCase(),\"on\"+(iq[0].toUpperCase()+iq.slice(1)))}tX(tH,\"onAnimationEnd\"),tX(tV,\"onAnimationIteration\"),tX(tQ,\"onAnimationStart\"),tX(\"dblclick\",\"onDoubleClick\"),tX(\"focusin\",\"onFocus\"),tX(\"focusout\",\"onBlur\"),tX(t$,\"onTransitionRun\"),tX(tB,\"onTransitionStart\"),tX(tW,\"onTransitionCancel\"),tX(tq,\"onTransitionEnd\"),eZ(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]),eZ(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]),eZ(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]),eZ(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]),eG(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \")),eG(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \")),eG(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]),eG(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \")),eG(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \")),eG(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var iK=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),iY=new Set(\"beforetoggle cancel close invalid load scroll scrollend toggle\".split(\" \").concat(iK));function iX(e,n){n=0!=(4&n);for(var t=0;t<e.length;t++){var r=e[t],l=r.event;r=r.listeners;e:{var a=void 0;if(n)for(var o=r.length-1;0<=o;o--){var u=r[o],i=u.instance,s=u.currentTarget;if(u=u.listener,i!==a&&l.isPropagationStopped())break e;a=u,l.currentTarget=s;try{a(l)}catch(e){oa(e)}l.currentTarget=null,a=i}else for(o=0;o<r.length;o++){if(i=(u=r[o]).instance,s=u.currentTarget,u=u.listener,i!==a&&l.isPropagationStopped())break e;a=u,l.currentTarget=s;try{a(l)}catch(e){oa(e)}l.currentTarget=null,a=i}}}}function iG(e,n){var t=n[eI];void 0===t&&(t=n[eI]=new Set);var r=e+\"__bubble\";t.has(r)||(i1(n,e,2,!1),t.add(r))}function iZ(e,n,t){var r=0;n&&(r|=4),i1(t,e,r,n)}var iJ=\"_reactListening\"+Math.random().toString(36).slice(2);function i0(e){if(!e[iJ]){e[iJ]=!0,eY.forEach(function(n){\"selectionchange\"!==n&&(iY.has(n)||iZ(n,!1,e),iZ(n,!0,e))});var n=9===e.nodeType?e:e.ownerDocument;null===n||n[iJ]||(n[iJ]=!0,iZ(\"selectionchange\",!1,n))}}function i1(e,n,t,r){switch(cr(n)){case 2:var l=s5;break;case 8:l=s9;break;default:l=s7}t=l.bind(null,n,t,e),l=void 0,nC&&(\"touchstart\"===n||\"touchmove\"===n||\"wheel\"===n)&&(l=!0),r?void 0!==l?e.addEventListener(n,t,{capture:!0,passive:l}):e.addEventListener(n,t,!0):void 0!==l?e.addEventListener(n,t,{passive:l}):e.addEventListener(n,t,!1)}function i2(e,n,t,r,l){var a=r;if(0==(1&n)&&0==(2&n)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var u=r.stateNode.containerInfo;if(u===l)break;if(4===o)for(o=r.return;null!==o;){var i=o.tag;if((3===i||4===i)&&o.stateNode.containerInfo===l)return;o=o.return}for(;null!==u;){if(null===(o=e$(u)))return;if(5===(i=o.tag)||6===i||26===i||27===i){r=a=o;continue e}u=u.parentNode}}r=r.return}nS(function(){var r=a,l=ny(t),o=[];e:{var u=tK.get(e);if(void 0!==u){var i=nH,s=e;switch(e){case\"keypress\":if(0===n_(t))break e;case\"keydown\":case\"keyup\":i=n2;break;case\"focusin\":s=\"focus\",i=nq;break;case\"focusout\":s=\"blur\",i=nq;break;case\"beforeblur\":case\"afterblur\":i=nq;break;case\"click\":if(2===t.button)break e;case\"auxclick\":case\"dblclick\":case\"mousedown\":case\"mousemove\":case\"mouseup\":case\"mouseout\":case\"mouseover\":case\"contextmenu\":i=nB;break;case\"drag\":case\"dragend\":case\"dragenter\":case\"dragexit\":case\"dragleave\":case\"dragover\":case\"dragstart\":case\"drop\":i=nW;break;case\"touchcancel\":case\"touchend\":case\"touchmove\":case\"touchstart\":i=n4;break;case tH:case tV:case tQ:i=nK;break;case tq:i=n8;break;case\"scroll\":case\"scrollend\":i=nQ;break;case\"wheel\":i=n6;break;case\"copy\":case\"cut\":case\"paste\":i=nY;break;case\"gotpointercapture\":case\"lostpointercapture\":case\"pointercancel\":case\"pointerdown\":case\"pointermove\":case\"pointerout\":case\"pointerover\":case\"pointerup\":i=n3;break;case\"toggle\":case\"beforetoggle\":i=n5}var f=0!=(4&n),d=!f&&(\"scroll\"===e||\"scrollend\"===e),p=f?null!==u?u+\"Capture\":null:u;f=[];for(var m,h=r;null!==h;){var g=h;if(m=g.stateNode,5!==(g=g.tag)&&26!==g&&27!==g||null===m||null===p||null!=(g=nx(h,p))&&f.push(i3(h,g,m)),d)break;h=h.return}0<f.length&&(u=new i(u,s,null,t,l),o.push({event:u,listeners:f}))}}if(0==(7&n)){if((u=\"mouseover\"===e||\"pointerover\"===e,i=\"mouseout\"===e||\"pointerout\"===e,!(u&&t!==ng&&(s=t.relatedTarget||t.fromElement)&&(e$(s)||s[eR])))&&(i||u)&&(u=l.window===l?l:(u=l.ownerDocument)?u.defaultView||u.parentWindow:window,i?(s=t.relatedTarget||t.toElement,i=r,null!==(s=s?e$(s):null)&&(d=c(s),f=s.tag,s!==d||5!==f&&27!==f&&6!==f)&&(s=null)):(i=null,s=r),i!==s)){if(f=nB,g=\"onMouseLeave\",p=\"onMouseEnter\",h=\"mouse\",(\"pointerout\"===e||\"pointerover\"===e)&&(f=n3,g=\"onPointerLeave\",p=\"onPointerEnter\",h=\"pointer\"),d=null==i?u:eW(i),m=null==s?u:eW(s),(u=new f(g,h+\"leave\",i,t,l)).target=d,u.relatedTarget=m,g=null,e$(l)===r&&((f=new f(p,h+\"enter\",s,t,l)).target=m,f.relatedTarget=d,g=f),d=g,i&&s)n:{for(f=i,p=s,h=0,m=f;m;m=i8(m))h++;for(m=0,g=p;g;g=i8(g))m++;for(;0<h-m;)f=i8(f),h--;for(;0<m-h;)p=i8(p),m--;for(;h--;){if(f===p||null!==p&&f===p.alternate)break n;f=i8(f),p=i8(p)}f=null}else f=null;null!==i&&i6(o,u,i,f,!1),null!==s&&null!==d&&i6(o,d,s,f,!0)}e:{if(\"select\"===(i=(u=r?eW(r):window).nodeName&&u.nodeName.toLowerCase())||\"input\"===i&&\"file\"===u.type)var y,v=tm;else if(ti(u))if(th)v=tx;else{v=tw;var b=tk}else(i=u.nodeName)&&\"input\"===i.toLowerCase()&&(\"checkbox\"===u.type||\"radio\"===u.type)?v=tS:r&&nd(r.elementType)&&(v=tm);if(v&&(v=v(e,r))){ts(o,v,t,l);break e}b&&b(e,u,r),\"focusout\"===e&&r&&\"number\"===u.type&&null!=r.memoizedProps.value&&nl(u,\"number\",u.value)}switch(b=r?eW(r):window,e){case\"focusin\":(ti(b)||\"true\"===b.contentEditable)&&(t_=b,tF=r,tD=null);break;case\"focusout\":tD=tF=t_=null;break;case\"mousedown\":tM=!0;break;case\"contextmenu\":case\"mouseup\":case\"dragend\":tM=!1,tO(o,t,l);break;case\"selectionchange\":if(tT)break;case\"keydown\":case\"keyup\":tO(o,t,l)}if(n7)n:{switch(e){case\"compositionstart\":var k=\"onCompositionStart\";break n;case\"compositionend\":k=\"onCompositionEnd\";break n;case\"compositionupdate\":k=\"onCompositionUpdate\";break n}k=void 0}else to?tl(e,t)&&(k=\"onCompositionEnd\"):\"keydown\"===e&&229===t.keyCode&&(k=\"onCompositionStart\");k&&(tt&&\"ko\"!==t.locale&&(to||\"onCompositionStart\"!==k?\"onCompositionEnd\"===k&&to&&(y=nT()):(nN=\"value\"in(nP=l)?nP.value:nP.textContent,to=!0)),0<(b=i4(r,k)).length&&(k=new nX(k,e,null,t,l),o.push({event:k,listeners:b}),y?k.data=y:null!==(y=ta(t))&&(k.data=y))),(y=tn?function(e,n){switch(e){case\"compositionend\":return ta(n);case\"keypress\":if(32!==n.which)return null;return tr=!0,\" \";case\"textInput\":return\" \"===(e=n.data)&&tr?null:e;default:return null}}(e,t):function(e,n){if(to)return\"compositionend\"===e||!n7&&tl(e,n)?(e=nT(),nL=nN=nP=null,to=!1,e):null;switch(e){case\"paste\":default:return null;case\"keypress\":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case\"compositionend\":return tt&&\"ko\"!==n.locale?null:n.data}}(e,t))&&0<(k=i4(r,\"onBeforeInput\")).length&&(b=new nX(\"onBeforeInput\",\"beforeinput\",null,t,l),o.push({event:b,listeners:k}),b.data=y);var w=e;if(\"submit\"===w&&r&&r.stateNode===l){var S=i$((l[eA]||null).action),x=t.submitter;x&&null!==(w=(w=x[eA]||null)?i$(w.formAction):x.getAttribute(\"formAction\"))&&(S=w,x=null);var E=new nH(\"action\",\"action\",null,t,l);o.push({event:E,listeners:[{instance:null,listener:function(){if(t.defaultPrevented){if(0!==iO){var e=x?iB(l,x):new FormData(l);aW(r,{pending:!0,data:e,method:l.method,action:S},null,e)}}else\"function\"==typeof S&&(E.preventDefault(),aW(r,{pending:!0,data:e=x?iB(l,x):new FormData(l),method:l.method,action:S},S,e))},currentTarget:l}]})}}iX(o,n)})}function i3(e,n,t){return{instance:e,listener:n,currentTarget:t}}function i4(e,n){for(var t=n+\"Capture\",r=[];null!==e;){var l=e,a=l.stateNode;if(5!==(l=l.tag)&&26!==l&&27!==l||null===a||(null!=(l=nx(e,t))&&r.unshift(i3(e,l,a)),null!=(l=nx(e,n))&&r.push(i3(e,l,a))),3===e.tag)return r;e=e.return}return[]}function i8(e){if(null===e)return null;do e=e.return;while(e&&5!==e.tag&&27!==e.tag);return e||null}function i6(e,n,t,r,l){for(var a=n._reactName,o=[];null!==t&&t!==r;){var u=t,i=u.alternate,s=u.stateNode;if(u=u.tag,null!==i&&i===r)break;5!==u&&26!==u&&27!==u||null===s||(i=s,l?null!=(s=nx(t,a))&&o.unshift(i3(t,s,i)):l||null!=(s=nx(t,a))&&o.push(i3(t,s,i))),t=t.return}0!==o.length&&e.push({event:n,listeners:o})}var i5=/\\r\\n?/g,i9=/\\u0000|\\uFFFD/g;function i7(e){return(\"string\"==typeof e?e:\"\"+e).replace(i5,\"\\n\").replace(i9,\"\")}function se(e,n){return n=i7(n),i7(e)===n}function sn(){}function st(e,n,t,r,l,a){switch(t){case\"children\":\"string\"==typeof r?\"body\"===n||\"textarea\"===n&&\"\"===r||ni(e,r):(\"number\"==typeof r||\"bigint\"==typeof r)&&\"body\"!==n&&ni(e,\"\"+r);break;case\"className\":e3(e,\"class\",r);break;case\"tabIndex\":e3(e,\"tabindex\",r);break;case\"dir\":case\"role\":case\"viewBox\":case\"width\":case\"height\":e3(e,t,r);break;case\"style\":nf(e,r,a);break;case\"data\":if(\"object\"!==n){e3(e,\"data\",r);break}case\"src\":case\"href\":if(\"\"===r&&(\"a\"!==n||\"href\"!==t)||null==r||\"function\"==typeof r||\"symbol\"==typeof r||\"boolean\"==typeof r){e.removeAttribute(t);break}r=nh(\"\"+r),e.setAttribute(t,r);break;case\"action\":case\"formAction\":if(\"function\"==typeof r){e.setAttribute(t,\"javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')\");break}if(\"function\"==typeof a&&(\"formAction\"===t?(\"input\"!==n&&st(e,n,\"name\",l.name,l,null),st(e,n,\"formEncType\",l.formEncType,l,null),st(e,n,\"formMethod\",l.formMethod,l,null),st(e,n,\"formTarget\",l.formTarget,l,null)):(st(e,n,\"encType\",l.encType,l,null),st(e,n,\"method\",l.method,l,null),st(e,n,\"target\",l.target,l,null))),null==r||\"symbol\"==typeof r||\"boolean\"==typeof r){e.removeAttribute(t);break}r=nh(\"\"+r),e.setAttribute(t,r);break;case\"onClick\":null!=r&&(e.onclick=sn);break;case\"onScroll\":null!=r&&iG(\"scroll\",e);break;case\"onScrollEnd\":null!=r&&iG(\"scrollend\",e);break;case\"dangerouslySetInnerHTML\":if(null!=r){if(\"object\"!=typeof r||!(\"__html\"in r))throw Error(i(61));if(null!=(t=r.__html)){if(null!=l.children)throw Error(i(60));e.innerHTML=t}}break;case\"multiple\":e.multiple=r&&\"function\"!=typeof r&&\"symbol\"!=typeof r;break;case\"muted\":e.muted=r&&\"function\"!=typeof r&&\"symbol\"!=typeof r;break;case\"suppressContentEditableWarning\":case\"suppressHydrationWarning\":case\"defaultValue\":case\"defaultChecked\":case\"innerHTML\":case\"ref\":case\"autoFocus\":case\"innerText\":case\"textContent\":break;case\"xlinkHref\":if(null==r||\"function\"==typeof r||\"boolean\"==typeof r||\"symbol\"==typeof r){e.removeAttribute(\"xlink:href\");break}t=nh(\"\"+r),e.setAttributeNS(\"http://www.w3.org/1999/xlink\",\"xlink:href\",t);break;case\"contentEditable\":case\"spellCheck\":case\"draggable\":case\"value\":case\"autoReverse\":case\"externalResourcesRequired\":case\"focusable\":case\"preserveAlpha\":null!=r&&\"function\"!=typeof r&&\"symbol\"!=typeof r?e.setAttribute(t,\"\"+r):e.removeAttribute(t);break;case\"inert\":case\"allowFullScreen\":case\"async\":case\"autoPlay\":case\"controls\":case\"default\":case\"defer\":case\"disabled\":case\"disablePictureInPicture\":case\"disableRemotePlayback\":case\"formNoValidate\":case\"hidden\":case\"loop\":case\"noModule\":case\"noValidate\":case\"open\":case\"playsInline\":case\"readOnly\":case\"required\":case\"reversed\":case\"scoped\":case\"seamless\":case\"itemScope\":r&&\"function\"!=typeof r&&\"symbol\"!=typeof r?e.setAttribute(t,\"\"):e.removeAttribute(t);break;case\"capture\":case\"download\":!0===r?e.setAttribute(t,\"\"):!1!==r&&null!=r&&\"function\"!=typeof r&&\"symbol\"!=typeof r?e.setAttribute(t,r):e.removeAttribute(t);break;case\"cols\":case\"rows\":case\"size\":case\"span\":null!=r&&\"function\"!=typeof r&&\"symbol\"!=typeof r&&!isNaN(r)&&1<=r?e.setAttribute(t,r):e.removeAttribute(t);break;case\"rowSpan\":case\"start\":null==r||\"function\"==typeof r||\"symbol\"==typeof r||isNaN(r)?e.removeAttribute(t):e.setAttribute(t,r);break;case\"popover\":iG(\"beforetoggle\",e),iG(\"toggle\",e),e2(e,\"popover\",r);break;case\"xlinkActuate\":e4(e,\"http://www.w3.org/1999/xlink\",\"xlink:actuate\",r);break;case\"xlinkArcrole\":e4(e,\"http://www.w3.org/1999/xlink\",\"xlink:arcrole\",r);break;case\"xlinkRole\":e4(e,\"http://www.w3.org/1999/xlink\",\"xlink:role\",r);break;case\"xlinkShow\":e4(e,\"http://www.w3.org/1999/xlink\",\"xlink:show\",r);break;case\"xlinkTitle\":e4(e,\"http://www.w3.org/1999/xlink\",\"xlink:title\",r);break;case\"xlinkType\":e4(e,\"http://www.w3.org/1999/xlink\",\"xlink:type\",r);break;case\"xmlBase\":e4(e,\"http://www.w3.org/XML/1998/namespace\",\"xml:base\",r);break;case\"xmlLang\":e4(e,\"http://www.w3.org/XML/1998/namespace\",\"xml:lang\",r);break;case\"xmlSpace\":e4(e,\"http://www.w3.org/XML/1998/namespace\",\"xml:space\",r);break;case\"is\":e2(e,\"is\",r);break;default:2<t.length&&(\"o\"===t[0]||\"O\"===t[0])&&(\"n\"===t[1]||\"N\"===t[1])||e2(e,t=np.get(t)||t,r)}}function sr(e,n,t,r,l,a){switch(t){case\"style\":nf(e,r,a);break;case\"dangerouslySetInnerHTML\":if(null!=r){if(\"object\"!=typeof r||!(\"__html\"in r))throw Error(i(61));if(null!=(t=r.__html)){if(null!=l.children)throw Error(i(60));e.innerHTML=t}}break;case\"children\":\"string\"==typeof r?ni(e,r):(\"number\"==typeof r||\"bigint\"==typeof r)&&ni(e,\"\"+r);break;case\"onScroll\":null!=r&&iG(\"scroll\",e);break;case\"onScrollEnd\":null!=r&&iG(\"scrollend\",e);break;case\"onClick\":null!=r&&(e.onclick=sn);break;case\"suppressContentEditableWarning\":case\"suppressHydrationWarning\":case\"innerHTML\":case\"ref\":case\"innerText\":case\"textContent\":break;default:if(!eX.hasOwnProperty(t))e:{if(\"o\"===t[0]&&\"n\"===t[1]&&(l=t.endsWith(\"Capture\"),n=t.slice(2,l?t.length-7:void 0),\"function\"==typeof(a=null!=(a=e[eA]||null)?a[t]:null)&&e.removeEventListener(n,a,l),\"function\"==typeof r)){\"function\"!=typeof a&&null!==a&&(t in e?e[t]=null:e.hasAttribute(t)&&e.removeAttribute(t)),e.addEventListener(n,r,l);break e}t in e?e[t]=r:!0===r?e.setAttribute(t,\"\"):e2(e,t,r)}}}function sl(e,n,t){switch(n){case\"div\":case\"span\":case\"svg\":case\"path\":case\"a\":case\"g\":case\"p\":case\"li\":break;case\"img\":iG(\"error\",e),iG(\"load\",e);var r,l=!1,a=!1;for(r in t)if(t.hasOwnProperty(r)){var o=t[r];if(null!=o)switch(r){case\"src\":l=!0;break;case\"srcSet\":a=!0;break;case\"children\":case\"dangerouslySetInnerHTML\":throw Error(i(137,n));default:st(e,n,r,o,t,null)}}a&&st(e,n,\"srcSet\",t.srcSet,t,null),l&&st(e,n,\"src\",t.src,t,null);return;case\"input\":iG(\"invalid\",e);var u=r=o=a=null,s=null,c=null;for(l in t)if(t.hasOwnProperty(l)){var f=t[l];if(null!=f)switch(l){case\"name\":a=f;break;case\"type\":o=f;break;case\"checked\":s=f;break;case\"defaultChecked\":c=f;break;case\"value\":r=f;break;case\"defaultValue\":u=f;break;case\"children\":case\"dangerouslySetInnerHTML\":if(null!=f)throw Error(i(137,n));break;default:st(e,n,l,f,t,null)}}nr(e,r,u,s,c,o,a,!1),e5(e);return;case\"select\":for(a in iG(\"invalid\",e),l=o=r=null,t)if(t.hasOwnProperty(a)&&null!=(u=t[a]))switch(a){case\"value\":r=u;break;case\"defaultValue\":o=u;break;case\"multiple\":l=u;default:st(e,n,a,u,t,null)}n=r,t=o,e.multiple=!!l,null!=n?na(e,!!l,n,!1):null!=t&&na(e,!!l,t,!0);return;case\"textarea\":for(o in iG(\"invalid\",e),r=a=l=null,t)if(t.hasOwnProperty(o)&&null!=(u=t[o]))switch(o){case\"value\":l=u;break;case\"defaultValue\":a=u;break;case\"children\":r=u;break;case\"dangerouslySetInnerHTML\":if(null!=u)throw Error(i(91));break;default:st(e,n,o,u,t,null)}nu(e,l,a,r),e5(e);return;case\"option\":for(s in t)t.hasOwnProperty(s)&&null!=(l=t[s])&&(\"selected\"===s?e.selected=l&&\"function\"!=typeof l&&\"symbol\"!=typeof l:st(e,n,s,l,t,null));return;case\"dialog\":iG(\"beforetoggle\",e),iG(\"toggle\",e),iG(\"cancel\",e),iG(\"close\",e);break;case\"iframe\":case\"object\":iG(\"load\",e);break;case\"video\":case\"audio\":for(l=0;l<iK.length;l++)iG(iK[l],e);break;case\"image\":iG(\"error\",e),iG(\"load\",e);break;case\"details\":iG(\"toggle\",e);break;case\"embed\":case\"source\":case\"link\":iG(\"error\",e),iG(\"load\",e);case\"area\":case\"base\":case\"br\":case\"col\":case\"hr\":case\"keygen\":case\"meta\":case\"param\":case\"track\":case\"wbr\":case\"menuitem\":for(c in t)if(t.hasOwnProperty(c)&&null!=(l=t[c]))switch(c){case\"children\":case\"dangerouslySetInnerHTML\":throw Error(i(137,n));default:st(e,n,c,l,t,null)}return;default:if(nd(n)){for(f in t)t.hasOwnProperty(f)&&void 0!==(l=t[f])&&sr(e,n,f,l,t,void 0);return}}for(u in t)t.hasOwnProperty(u)&&null!=(l=t[u])&&st(e,n,u,l,t,null)}var sa=null,so=null;function su(e){return 9===e.nodeType?e:e.ownerDocument}function si(e){switch(e){case\"http://www.w3.org/2000/svg\":return 1;case\"http://www.w3.org/1998/Math/MathML\":return 2;default:return 0}}function ss(e,n){if(0===e)switch(n){case\"svg\":return 1;case\"math\":return 2;default:return 0}return 1===e&&\"foreignObject\"===n?0:e}function sc(e,n){return\"textarea\"===e||\"noscript\"===e||\"string\"==typeof n.children||\"number\"==typeof n.children||\"bigint\"==typeof n.children||\"object\"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var sf=null,sd=\"function\"==typeof setTimeout?setTimeout:void 0,sp=\"function\"==typeof clearTimeout?clearTimeout:void 0,sm=\"function\"==typeof Promise?Promise:void 0,sh=\"function\"==typeof queueMicrotask?queueMicrotask:void 0!==sm?function(e){return sm.resolve(null).then(e).catch(sg)}:sd;function sg(e){setTimeout(function(){throw e})}function sy(e){return\"head\"===e}function sv(e,n){var t=n,r=0,l=0;do{var a=t.nextSibling;if(e.removeChild(t),a&&8===a.nodeType)if(\"/$\"===(t=a.data)){if(0<r&&8>r){t=r;var o=e.ownerDocument;if(1&t&&sC(o.documentElement),2&t&&sC(o.body),4&t)for(sC(t=o.head),o=t.firstChild;o;){var u=o.nextSibling,i=o.nodeName;o[eV]||\"SCRIPT\"===i||\"STYLE\"===i||\"LINK\"===i&&\"stylesheet\"===o.rel.toLowerCase()||t.removeChild(o),o=u}}if(0===l){e.removeChild(a),cw(n);return}l--}else\"$\"===t||\"$?\"===t||\"$!\"===t?l++:r=t.charCodeAt(0)-48;else r=0;t=a}while(t);cw(n)}function sb(e){var n=e.firstChild;for(n&&10===n.nodeType&&(n=n.nextSibling);n;){var t=n;switch(n=n.nextSibling,t.nodeName){case\"HTML\":case\"HEAD\":case\"BODY\":sb(t),eQ(t);continue;case\"SCRIPT\":case\"STYLE\":continue;case\"LINK\":if(\"stylesheet\"===t.rel.toLowerCase())continue}e.removeChild(t)}}function sk(e){return\"$!\"===e.data||\"$?\"===e.data&&\"complete\"===e.ownerDocument.readyState}function sw(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if(\"$\"===(n=e.data)||\"$!\"===n||\"$?\"===n||\"F!\"===n||\"F\"===n)break;if(\"/$\"===n)return null}}return e}var sS=null;function sx(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if(\"$\"===t||\"$!\"===t||\"$?\"===t){if(0===n)return e;n--}else\"/$\"===t&&n++}e=e.previousSibling}return null}function sE(e,n,t){switch(n=su(t),e){case\"html\":if(!(e=n.documentElement))throw Error(i(452));return e;case\"head\":if(!(e=n.head))throw Error(i(453));return e;case\"body\":if(!(e=n.body))throw Error(i(454));return e;default:throw Error(i(451))}}function sC(e){for(var n=e.attributes;n.length;)e.removeAttributeNode(n[0]);eQ(e)}var sz=new Map,sP=new Set;function sN(e){return\"function\"==typeof e.getRootNode?e.getRootNode():9===e.nodeType?e:e.ownerDocument}var sL=O.d;O.d={f:function(){var e=sL.f(),n=ie();return e||n},r:function(e){var n=eB(e);null!==n&&5===n.tag&&\"form\"===n.type?aK(n):sL.r(e)},D:function(e){sL.D(e),s_(\"dns-prefetch\",e,null)},C:function(e,n){sL.C(e,n),s_(\"preconnect\",e,n)},L:function(e,n,t){if(sL.L(e,n,t),sT&&e&&n){var r='link[rel=\"preload\"][as=\"'+nn(n)+'\"]';\"image\"===n&&t&&t.imageSrcSet?(r+='[imagesrcset=\"'+nn(t.imageSrcSet)+'\"]',\"string\"==typeof t.imageSizes&&(r+='[imagesizes=\"'+nn(t.imageSizes)+'\"]')):r+='[href=\"'+nn(e)+'\"]';var l=r;switch(n){case\"style\":l=sD(e);break;case\"script\":l=sA(e)}sz.has(l)||(e=p({rel:\"preload\",href:\"image\"===n&&t&&t.imageSrcSet?void 0:e,as:n},t),sz.set(l,e),null!==sT.querySelector(r)||\"style\"===n&&sT.querySelector(sM(l))||\"script\"===n&&sT.querySelector(sR(l))||(sl(n=sT.createElement(\"link\"),\"link\",e),eK(n),sT.head.appendChild(n)))}},m:function(e,n){if(sL.m(e,n),sT&&e){var t=n&&\"string\"==typeof n.as?n.as:\"script\",r='link[rel=\"modulepreload\"][as=\"'+nn(t)+'\"][href=\"'+nn(e)+'\"]',l=r;switch(t){case\"audioworklet\":case\"paintworklet\":case\"serviceworker\":case\"sharedworker\":case\"worker\":case\"script\":l=sA(e)}if(!sz.has(l)&&(e=p({rel:\"modulepreload\",href:e},n),sz.set(l,e),null===sT.querySelector(r))){switch(t){case\"audioworklet\":case\"paintworklet\":case\"serviceworker\":case\"sharedworker\":case\"worker\":case\"script\":if(sT.querySelector(sR(l)))return}sl(t=sT.createElement(\"link\"),\"link\",e),eK(t),sT.head.appendChild(t)}}},X:function(e,n){if(sL.X(e,n),sT&&e){var t=eq(sT).hoistableScripts,r=sA(e),l=t.get(r);l||((l=sT.querySelector(sR(r)))||(e=p({src:e,async:!0},n),(n=sz.get(r))&&sH(e,n),eK(l=sT.createElement(\"script\")),sl(l,\"link\",e),sT.head.appendChild(l)),l={type:\"script\",instance:l,count:1,state:null},t.set(r,l))}},S:function(e,n,t){if(sL.S(e,n,t),sT&&e){var r=eq(sT).hoistableStyles,l=sD(e);n=n||\"default\";var a=r.get(l);if(!a){var o={loading:0,preload:null};if(a=sT.querySelector(sM(l)))o.loading=5;else{e=p({rel:\"stylesheet\",href:e,\"data-precedence\":n},t),(t=sz.get(l))&&sj(e,t);var u=a=sT.createElement(\"link\");eK(u),sl(u,\"link\",e),u._p=new Promise(function(e,n){u.onload=e,u.onerror=n}),u.addEventListener(\"load\",function(){o.loading|=1}),u.addEventListener(\"error\",function(){o.loading|=2}),o.loading|=4,sU(a,n,sT)}a={type:\"stylesheet\",instance:a,count:1,state:o},r.set(l,a)}}},M:function(e,n){if(sL.M(e,n),sT&&e){var t=eq(sT).hoistableScripts,r=sA(e),l=t.get(r);l||((l=sT.querySelector(sR(r)))||(e=p({src:e,async:!0,type:\"module\"},n),(n=sz.get(r))&&sH(e,n),eK(l=sT.createElement(\"script\")),sl(l,\"link\",e),sT.head.appendChild(l)),l={type:\"script\",instance:l,count:1,state:null},t.set(r,l))}}};var sT=\"undefined\"==typeof document?null:document;function s_(e,n,t){if(sT&&\"string\"==typeof n&&n){var r=nn(n);r='link[rel=\"'+e+'\"][href=\"'+r+'\"]',\"string\"==typeof t&&(r+='[crossorigin=\"'+t+'\"]'),sP.has(r)||(sP.add(r),e={rel:e,crossOrigin:t,href:n},null===sT.querySelector(r)&&(sl(n=sT.createElement(\"link\"),\"link\",e),eK(n),sT.head.appendChild(n)))}}function sF(e,n,t,r){var l=(l=$.current)?sN(l):null;if(!l)throw Error(i(446));switch(e){case\"meta\":case\"title\":return null;case\"style\":return\"string\"==typeof t.precedence&&\"string\"==typeof t.href?(n=sD(t.href),(r=(t=eq(l).hoistableStyles).get(n))||(r={type:\"style\",instance:null,count:0,state:null},t.set(n,r)),r):{type:\"void\",instance:null,count:0,state:null};case\"link\":if(\"stylesheet\"===t.rel&&\"string\"==typeof t.href&&\"string\"==typeof t.precedence){e=sD(t.href);var a,o,u,s,c=eq(l).hoistableStyles,f=c.get(e);if(f||(l=l.ownerDocument||l,f={type:\"stylesheet\",instance:null,count:0,state:{loading:0,preload:null}},c.set(e,f),(c=l.querySelector(sM(e)))&&!c._p&&(f.instance=c,f.state.loading=5),sz.has(e)||(t={rel:\"preload\",as:\"style\",href:t.href,crossOrigin:t.crossOrigin,integrity:t.integrity,media:t.media,hrefLang:t.hrefLang,referrerPolicy:t.referrerPolicy},sz.set(e,t),c||(a=l,o=e,u=t,s=f.state,a.querySelector('link[rel=\"preload\"][as=\"style\"]['+o+\"]\")?s.loading=1:(s.preload=o=a.createElement(\"link\"),o.addEventListener(\"load\",function(){return s.loading|=1}),o.addEventListener(\"error\",function(){return s.loading|=2}),sl(o,\"link\",u),eK(o),a.head.appendChild(o))))),n&&null===r)throw Error(i(528,\"\"));return f}if(n&&null!==r)throw Error(i(529,\"\"));return null;case\"script\":return n=t.async,\"string\"==typeof(t=t.src)&&n&&\"function\"!=typeof n&&\"symbol\"!=typeof n?(n=sA(t),(r=(t=eq(l).hoistableScripts).get(n))||(r={type:\"script\",instance:null,count:0,state:null},t.set(n,r)),r):{type:\"void\",instance:null,count:0,state:null};default:throw Error(i(444,e))}}function sD(e){return'href=\"'+nn(e)+'\"'}function sM(e){return'link[rel=\"stylesheet\"]['+e+\"]\"}function sO(e){return p({},e,{\"data-precedence\":e.precedence,precedence:null})}function sA(e){return'[src=\"'+nn(e)+'\"]'}function sR(e){return\"script[async]\"+e}function sI(e,n,t){if(n.count++,null===n.instance)switch(n.type){case\"style\":var r=e.querySelector('style[data-href~=\"'+nn(t.href)+'\"]');if(r)return n.instance=r,eK(r),r;var l=p({},t,{\"data-href\":t.href,\"data-precedence\":t.precedence,href:null,precedence:null});return eK(r=(e.ownerDocument||e).createElement(\"style\")),sl(r,\"style\",l),sU(r,t.precedence,e),n.instance=r;case\"stylesheet\":l=sD(t.href);var a=e.querySelector(sM(l));if(a)return n.state.loading|=4,n.instance=a,eK(a),a;r=sO(t),(l=sz.get(l))&&sj(r,l),eK(a=(e.ownerDocument||e).createElement(\"link\"));var o=a;return o._p=new Promise(function(e,n){o.onload=e,o.onerror=n}),sl(a,\"link\",r),n.state.loading|=4,sU(a,t.precedence,e),n.instance=a;case\"script\":if(a=sA(t.src),l=e.querySelector(sR(a)))return n.instance=l,eK(l),l;return r=t,(l=sz.get(a))&&sH(r=p({},t),l),eK(l=(e=e.ownerDocument||e).createElement(\"script\")),sl(l,\"link\",r),e.head.appendChild(l),n.instance=l;case\"void\":return null;default:throw Error(i(443,n.type))}return\"stylesheet\"===n.type&&0==(4&n.state.loading)&&(r=n.instance,n.state.loading|=4,sU(r,t.precedence,e)),n.instance}function sU(e,n,t){for(var r=t.querySelectorAll('link[rel=\"stylesheet\"][data-precedence],style[data-precedence]'),l=r.length?r[r.length-1]:null,a=l,o=0;o<r.length;o++){var u=r[o];if(u.dataset.precedence===n)a=u;else if(a!==l)break}a?a.parentNode.insertBefore(e,a.nextSibling):(n=9===t.nodeType?t.head:t).insertBefore(e,n.firstChild)}function sj(e,n){null==e.crossOrigin&&(e.crossOrigin=n.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=n.referrerPolicy),null==e.title&&(e.title=n.title)}function sH(e,n){null==e.crossOrigin&&(e.crossOrigin=n.crossOrigin),null==e.referrerPolicy&&(e.referrerPolicy=n.referrerPolicy),null==e.integrity&&(e.integrity=n.integrity)}var sV=null;function sQ(e,n,t){if(null===sV){var r=new Map,l=sV=new Map;l.set(t,r)}else(r=(l=sV).get(t))||(r=new Map,l.set(t,r));if(r.has(e))return r;for(r.set(e,null),t=t.getElementsByTagName(e),l=0;l<t.length;l++){var a=t[l];if(!(a[eV]||a[eO]||\"link\"===e&&\"stylesheet\"===a.getAttribute(\"rel\"))&&\"http://www.w3.org/2000/svg\"!==a.namespaceURI){var o=a.getAttribute(n)||\"\";o=e+o;var u=r.get(o);u?u.push(a):r.set(o,[a])}}return r}function s$(e,n,t){(e=e.ownerDocument||e).head.insertBefore(t,\"title\"===n?e.querySelector(\"head > title\"):null)}function sB(e){return\"stylesheet\"!==e.type||0!=(3&e.state.loading)}var sW=null;function sq(){}function sK(){if(this.count--,0===this.count){if(this.stylesheets)sX(this,this.stylesheets);else if(this.unsuspend){var e=this.unsuspend;this.unsuspend=null,e()}}}var sY=null;function sX(e,n){e.stylesheets=null,null!==e.unsuspend&&(e.count++,sY=new Map,n.forEach(sG,e),sY=null,sK.call(e))}function sG(e,n){if(!(4&n.state.loading)){var t=sY.get(e);if(t)var r=t.get(null);else{t=new Map,sY.set(e,t);for(var l=e.querySelectorAll(\"link[data-precedence],style[data-precedence]\"),a=0;a<l.length;a++){var o=l[a];(\"LINK\"===o.nodeName||\"not all\"!==o.getAttribute(\"media\"))&&(t.set(o.dataset.precedence,o),r=o)}r&&t.set(null,r)}o=(l=n.instance).getAttribute(\"data-precedence\"),(a=t.get(o)||r)===r&&t.set(null,l),t.set(o,l),this.count++,r=sK.bind(this),l.addEventListener(\"load\",r),l.addEventListener(\"error\",r),a?a.parentNode.insertBefore(l,a.nextSibling):(e=9===e.nodeType?e.head:e).insertBefore(l,e.firstChild),n.state.loading|=4}}var sZ={$$typeof:S,Provider:null,Consumer:null,_currentValue:A,_currentValue2:A,_threadCount:0};function sJ(e,n,t,r,l,a,o,u){this.tag=1,this.containerInfo=e,this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.next=this.pendingContext=this.context=this.cancelPendingCommit=null,this.callbackPriority=0,this.expirationTimes=eP(-1),this.entangledLanes=this.shellSuspendCounter=this.errorRecoveryDisabledLanes=this.expiredLanes=this.warmLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=eP(0),this.hiddenUpdates=eP(null),this.identifierPrefix=r,this.onUncaughtError=l,this.onCaughtError=a,this.onRecoverableError=o,this.pooledCache=null,this.pooledCacheLanes=0,this.formState=u,this.incompleteTransitions=new Map}function s0(e,n,t,r,l,a,o,u,i,s,c,f){return e=new sJ(e,n,t,o,u,i,s,f),n=1,!0===a&&(n|=24),a=re(3,null,null,n),e.current=a,a.stateNode=e,n=rG(),n.refCount++,e.pooledCache=n,n.refCount++,a.memoizedState={element:r,isDehydrated:t,cache:n},lb(a),e}function s1(e){return e?e=t9:t9}function s2(e,n,t,r,l,a){var o;l=(o=l)?o=t9:t9,null===r.context?r.context=l:r.pendingContext=l,(r=lw(n)).payload={element:t},null!==(a=void 0===a?null:a)&&(r.callback=a),null!==(t=lS(e,r,n))&&(u6(t,e,n),lx(t,e,n))}function s3(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function s4(e,n){s3(e,n),(e=e.alternate)&&s3(e,n)}function s8(e){if(13===e.tag){var n=t8(e,0x4000000);null!==n&&u6(n,e,0x4000000),s4(e,0x4000000)}}var s6=!0;function s5(e,n,t,r){var l=M.T;M.T=null;var a=O.p;try{O.p=2,s7(e,n,t,r)}finally{O.p=a,M.T=l}}function s9(e,n,t,r){var l=M.T;M.T=null;var a=O.p;try{O.p=8,s7(e,n,t,r)}finally{O.p=a,M.T=l}}function s7(e,n,t,r){if(s6){var l=ce(r);if(null===l)i2(e,n,r,cn,t),cd(e,r);else if(function(e,n,t,r,l){switch(n){case\"focusin\":return ca=cp(ca,e,n,t,r,l),!0;case\"dragenter\":return co=cp(co,e,n,t,r,l),!0;case\"mouseover\":return cu=cp(cu,e,n,t,r,l),!0;case\"pointerover\":var a=l.pointerId;return ci.set(a,cp(ci.get(a)||null,e,n,t,r,l)),!0;case\"gotpointercapture\":return a=l.pointerId,cs.set(a,cp(cs.get(a)||null,e,n,t,r,l)),!0}return!1}(l,e,n,t,r))r.stopPropagation();else if(cd(e,r),4&n&&-1<cf.indexOf(e)){for(;null!==l;){var a=eB(l);if(null!==a)switch(a.tag){case 3:if((a=a.stateNode).current.memoizedState.isDehydrated){var o=eS(a.pendingLanes);if(0!==o){var u=a;for(u.pendingLanes|=2,u.entangledLanes|=2;o;){var i=1<<31-ey(o);u.entanglements[1]|=i,o&=~i}iA(a),0==(6&uz)&&(uW=ea()+500,iR(0,!1))}}break;case 13:null!==(u=t8(a,2))&&u6(u,a,2),ie(),s4(a,2)}if(null===(a=ce(r))&&i2(e,n,r,cn,t),a===l)break;l=a}null!==l&&r.stopPropagation()}else i2(e,n,r,null,t)}}function ce(e){return ct(e=ny(e))}var cn=null;function ct(e){if(cn=null,null!==(e=e$(e))){var n=c(e);if(null===n)e=null;else{var t=n.tag;if(13===t){if(null!==(e=f(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null)}}return cn=e,null}function cr(e){switch(e){case\"beforetoggle\":case\"cancel\":case\"click\":case\"close\":case\"contextmenu\":case\"copy\":case\"cut\":case\"auxclick\":case\"dblclick\":case\"dragend\":case\"dragstart\":case\"drop\":case\"focusin\":case\"focusout\":case\"input\":case\"invalid\":case\"keydown\":case\"keypress\":case\"keyup\":case\"mousedown\":case\"mouseup\":case\"paste\":case\"pause\":case\"play\":case\"pointercancel\":case\"pointerdown\":case\"pointerup\":case\"ratechange\":case\"reset\":case\"resize\":case\"seeked\":case\"submit\":case\"toggle\":case\"touchcancel\":case\"touchend\":case\"touchstart\":case\"volumechange\":case\"change\":case\"selectionchange\":case\"textInput\":case\"compositionstart\":case\"compositionend\":case\"compositionupdate\":case\"beforeblur\":case\"afterblur\":case\"beforeinput\":case\"blur\":case\"fullscreenchange\":case\"focus\":case\"hashchange\":case\"popstate\":case\"select\":case\"selectstart\":return 2;case\"drag\":case\"dragenter\":case\"dragexit\":case\"dragleave\":case\"dragover\":case\"mousemove\":case\"mouseout\":case\"mouseover\":case\"pointermove\":case\"pointerout\":case\"pointerover\":case\"scroll\":case\"touchmove\":case\"wheel\":case\"mouseenter\":case\"mouseleave\":case\"pointerenter\":case\"pointerleave\":return 8;case\"message\":switch(eo()){case eu:return 2;case ei:return 8;case es:case ec:return 32;case ef:return 0x10000000;default:return 32}default:return 32}}var cl=!1,ca=null,co=null,cu=null,ci=new Map,cs=new Map,cc=[],cf=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset\".split(\" \");function cd(e,n){switch(e){case\"focusin\":case\"focusout\":ca=null;break;case\"dragenter\":case\"dragleave\":co=null;break;case\"mouseover\":case\"mouseout\":cu=null;break;case\"pointerover\":case\"pointerout\":ci.delete(n.pointerId);break;case\"gotpointercapture\":case\"lostpointercapture\":cs.delete(n.pointerId)}}function cp(e,n,t,r,l,a){return null===e||e.nativeEvent!==a?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:a,targetContainers:[l]},null!==n&&null!==(n=eB(n))&&s8(n)):(e.eventSystemFlags|=r,n=e.targetContainers,null!==l&&-1===n.indexOf(l)&&n.push(l)),e}function cm(e){var n=e$(e.target);if(null!==n){var t=c(n);if(null!==t){if(13===(n=t.tag)){if(null!==(n=f(t))){e.blockedOn=n,function(e,n){var t=O.p;try{return O.p=e,n()}finally{O.p=t}}(e.priority,function(){if(13===t.tag){var e=u4(),n=t8(t,e=e_(e));null!==n&&u6(n,t,e),s4(t,e)}});return}}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated){e.blockedOn=3===t.tag?t.stateNode.containerInfo:null;return}}}e.blockedOn=null}function ch(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=ce(e.nativeEvent);if(null!==t)return null!==(n=eB(t))&&s8(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);ng=r,t.target.dispatchEvent(r),ng=null,n.shift()}return!0}function cg(e,n,t){ch(e)&&t.delete(n)}function cy(){cl=!1,null!==ca&&ch(ca)&&(ca=null),null!==co&&ch(co)&&(co=null),null!==cu&&ch(cu)&&(cu=null),ci.forEach(cg),cs.forEach(cg)}function cv(e,n){e.blockedOn===n&&(e.blockedOn=null,cl||(cl=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,cy)))}var cb=null;function ck(e){cb!==e&&(cb=e,a.unstable_scheduleCallback(a.unstable_NormalPriority,function(){cb===e&&(cb=null);for(var n=0;n<e.length;n+=3){var t=e[n],r=e[n+1],l=e[n+2];if(\"function\"!=typeof r)if(null===ct(r||t))continue;else break;var a=eB(t);null!==a&&(e.splice(n,3),n-=3,aW(a,{pending:!0,data:l,method:t.method,action:r},r,l))}}))}function cw(e){function n(n){return cv(n,e)}null!==ca&&cv(ca,e),null!==co&&cv(co,e),null!==cu&&cv(cu,e),ci.forEach(n),cs.forEach(n);for(var t=0;t<cc.length;t++){var r=cc[t];r.blockedOn===e&&(r.blockedOn=null)}for(;0<cc.length&&null===(t=cc[0]).blockedOn;)cm(t),null===t.blockedOn&&cc.shift();if(null!=(t=(e.ownerDocument||e).$$reactFormReplay))for(r=0;r<t.length;r+=3){var l=t[r],a=t[r+1],o=l[eA]||null;if(\"function\"==typeof a)o||ck(t);else if(o){var u=null;if(a&&a.hasAttribute(\"formAction\")){if(l=a,o=a[eA]||null)u=o.formAction;else if(null!==ct(l))continue}else u=o.action;\"function\"==typeof u?t[r+1]=u:(t.splice(r,3),r-=3),ck(t)}}}function cS(e){this._internalRoot=e}function cx(e){this._internalRoot=e}cx.prototype.render=cS.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(i(409));s2(n.current,u4(),e,n,null,null)},cx.prototype.unmount=cS.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;s2(e.current,2,null,e,null,null),ie(),n[eR]=null}},cx.prototype.unstable_scheduleHydration=function(e){if(e){var n=eD();e={blockedOn:null,target:e,priority:n};for(var t=0;t<cc.length&&0!==n&&n<cc[t].priority;t++);cc.splice(t,0,e),0===t&&cm(e)}};var cE=o.version;if(\"19.2.0-canary-3fbfb9ba-20250409\"!==cE)throw Error(i(527,cE,\"19.2.0-canary-3fbfb9ba-20250409\"));if(O.findDOMNode=function(e){var n=e._reactInternals;if(void 0===n){if(\"function\"==typeof e.render)throw Error(i(188));throw Error(i(268,e=Object.keys(e).join(\",\")))}return e=null===(e=null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=c(e)))throw Error(i(188));return n!==e?null:e}for(var t=e,r=n;;){var l=t.return;if(null===l)break;var a=l.alternate;if(null===a){if(null!==(r=l.return)){t=r;continue}break}if(l.child===a.child){for(a=l.child;a;){if(a===t)return d(l),e;if(a===r)return d(l),n;a=a.sibling}throw Error(i(188))}if(t.return!==r.return)t=l,r=a;else{for(var o=!1,u=l.child;u;){if(u===t){o=!0,t=l,r=a;break}if(u===r){o=!0,r=l,t=a;break}u=u.sibling}if(!o){for(u=a.child;u;){if(u===t){o=!0,t=a,r=l;break}if(u===r){o=!0,r=a,t=l;break}u=u.sibling}if(!o)throw Error(i(189))}}if(t.alternate!==r)throw Error(i(190))}if(3!==t.tag)throw Error(i(188));return t.stateNode.current===t?e:n}(n))?function e(n){var t=n.tag;if(5===t||26===t||27===t||6===t)return n;for(n=n.child;null!==n;){if(null!==(t=e(n)))return t;n=n.sibling}return null}(e):null)?null:e.stateNode},\"undefined\"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var cC=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!cC.isDisabled&&cC.supportsFiber)try{em=cC.inject({bundleType:0,version:\"19.2.0-canary-3fbfb9ba-20250409\",rendererPackageName:\"react-dom\",currentDispatcherRef:M,reconcilerVersion:\"19.2.0-canary-3fbfb9ba-20250409\"}),eh=cC}catch(e){}}n.createRoot=function(e,n){if(!s(e))throw Error(i(299));var t=!1,r=\"\",l=oo,a=ou,o=oi,u=null;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onUncaughtError&&(l=n.onUncaughtError),void 0!==n.onCaughtError&&(a=n.onCaughtError),void 0!==n.onRecoverableError&&(o=n.onRecoverableError),void 0!==n.unstable_transitionCallbacks&&(u=n.unstable_transitionCallbacks)),n=s0(e,1,!1,null,null,t,r,l,a,o,u,null),e[eR]=n.current,i0(e),new cS(n)},n.hydrateRoot=function(e,n,t){if(!s(e))throw Error(i(299));var r,l=!1,a=\"\",o=oo,u=ou,c=oi,f=null,d=null;return null!=t&&(!0===t.unstable_strictMode&&(l=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onUncaughtError&&(o=t.onUncaughtError),void 0!==t.onCaughtError&&(u=t.onCaughtError),void 0!==t.onRecoverableError&&(c=t.onRecoverableError),void 0!==t.unstable_transitionCallbacks&&(f=t.unstable_transitionCallbacks),void 0!==t.formState&&(d=t.formState)),(n=s0(e,1,!0,n,null!=t?t:null,l,a,o,u,c,f,d)).context=(r=null,t9),t=n.current,(a=lw(l=e_(l=u4()))).callback=null,lS(t,a,l),t=l,n.current.lanes=t,eN(n,t),iA(n),e[eR]=n.current,i0(e),new cx(n)},n.version=\"19.2.0-canary-3fbfb9ba-20250409\"}}]);",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/684-2e427e7001a8c4fd.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 2716,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 2717
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 2748,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 2749
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 2845,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 2846
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'l' is assigned a value but never used.",
        "line": 1,
        "column": 6816,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 6817
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 33846,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 33847
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 40392,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 40393
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 65065,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 65066
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 65313,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 65314
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'l' is assigned a value but never used.",
        "line": 1,
        "column": 66231,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 66232
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 81910,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 81911
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'n' is assigned a value but never used.",
        "line": 1,
        "column": 86704,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 86705
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 92159,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 92160
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'r' is defined but never used.",
        "line": 1,
        "column": 92161,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 92162
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'r' is assigned a value but never used.",
        "line": 1,
        "column": 99112,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 99113
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 104632,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 104633
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 150117,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 150118
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 150169,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 150170
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 165965,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 165966
      }
    ],
    "suppressedMessages": [],
    "errorCount": 18,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[684],{214:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"normalizePathTrailingSlash\",{enumerable:!0,get:function(){return u}});let n=r(6361),o=r(427),u=e=>{if(!e.startsWith(\"/\"))return e;let{pathname:t,query:r,hash:u}=(0,o.parsePath)(e);return/\\.[^/]+\\/?$/.test(t)?\"\"+(0,n.removeTrailingSlash)(t)+r+u:t.endsWith(\"/\")?\"\"+t+r+u:t+\"/\"+r+u};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},427:(e,t)=>{\"use strict\";function r(e){let t=e.indexOf(\"#\"),r=e.indexOf(\"?\"),n=r>-1&&(t<0||r<t);return n||t>-1?{pathname:e.substring(0,n?r:t),query:n?e.substring(r,t>-1?t:void 0):\"\",hash:t>-1?e.slice(t):\"\"}:{pathname:e,query:\"\",hash:\"\"}}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"parsePath\",{enumerable:!0,get:function(){return r}})},589:(e,t)=>{\"use strict\";function r(e){return e.split(\"/\").map(e=>encodeURIComponent(e)).join(\"/\")}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"encodeURIPath\",{enumerable:!0,get:function(){return r}})},666:e=>{!function(){var t={229:function(e){var t,r,n,o=e.exports={};function u(){throw Error(\"setTimeout has not been defined\")}function l(){throw Error(\"clearTimeout has not been defined\")}try{t=\"function\"==typeof setTimeout?setTimeout:u}catch(e){t=u}try{r=\"function\"==typeof clearTimeout?clearTimeout:l}catch(e){r=l}function a(e){if(t===setTimeout)return setTimeout(e,0);if((t===u||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}var i=[],c=!1,s=-1;function f(){c&&n&&(c=!1,n.length?i=n.concat(i):s=-1,i.length&&d())}function d(){if(!c){var e=a(f);c=!0;for(var t=i.length;t;){for(n=i,i=[];++s<t;)n&&n[s].run();s=-1,t=i.length}n=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===l||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];i.push(new p(e,t)),1!==i.length||c||a(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title=\"browser\",o.browser=!0,o.env={},o.argv=[],o.version=\"\",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw Error(\"process.binding is not supported\")},o.cwd=function(){return\"/\"},o.chdir=function(e){throw Error(\"process.chdir is not supported\")},o.umask=function(){return 0}}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var u=r[e]={exports:{}},l=!0;try{t[e](u,u.exports,n),l=!1}finally{l&&delete r[e]}return u.exports}n.ab=\"//\",e.exports=n(229)}()},686:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{RedirectBoundary:function(){return f},RedirectErrorBoundary:function(){return s}});let n=r(6966),o=r(5155),u=n._(r(2115)),l=r(8999),a=r(6825),i=r(2210);function c(e){let{redirect:t,reset:r,redirectType:n}=e,o=(0,l.useRouter)();return(0,u.useEffect)(()=>{u.default.startTransition(()=>{n===i.RedirectType.push?o.push(t,{}):o.replace(t,{}),r()})},[t,n,r,o]),null}class s extends u.default.Component{static getDerivedStateFromError(e){if((0,i.isRedirectError)(e))return{redirect:(0,a.getURLFromRedirectError)(e),redirectType:(0,a.getRedirectTypeFromError)(e)};throw e}render(){let{redirect:e,redirectType:t}=this.state;return null!==e&&null!==t?(0,o.jsx)(c,{redirect:e,redirectType:t,reset:()=>this.setState({redirect:null})}):this.props.children}constructor(e){super(e),this.state={redirect:null,redirectType:null}}}function f(e){let{children:t}=e,r=(0,l.useRouter)();return(0,o.jsx)(s,{router:r,children:t})}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},708:(e,t)=>{\"use strict\";function r(e){return Array.isArray(e)?e[1]:e}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"getSegmentValue\",{enumerable:!0,get:function(){return r}}),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},774:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{HTML_LIMITED_BOT_UA_RE:function(){return n.HTML_LIMITED_BOT_UA_RE},HTML_LIMITED_BOT_UA_RE_STRING:function(){return u},getBotType:function(){return i},isBot:function(){return a}});let n=r(5072),o=/Googlebot|Google-PageRenderer|AdsBot-Google|googleweblight|Storebot-Google/i,u=n.HTML_LIMITED_BOT_UA_RE.source;function l(e){return n.HTML_LIMITED_BOT_UA_RE.test(e)}function a(e){return o.test(e)||l(e)}function i(e){return o.test(e)?\"dom\":l(e)?\"html\":void 0}},878:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"applyFlightData\",{enumerable:!0,get:function(){return u}});let n=r(4758),o=r(3118);function u(e,t,r,u,l){let{tree:a,seedData:i,head:c,isRootRender:s}=u;if(null===i)return!1;if(s){let o=i[1];r.loading=i[3],r.rsc=o,r.prefetchRsc=null,(0,n.fillLazyItemsTillLeafWithHead)(e,r,t,a,i,c,l)}else r.rsc=t.rsc,r.prefetchRsc=t.prefetchRsc,r.parallelRoutes=new Map(t.parallelRoutes),r.loading=t.loading,(0,o.fillCacheWithNewSubTreeData)(e,r,t,u,l);return!0}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},886:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{PathParamsContext:function(){return l},PathnameContext:function(){return u},SearchParamsContext:function(){return o}});let n=r(2115),o=(0,n.createContext)(null),u=(0,n.createContext)(null),l=(0,n.createContext)(null)},894:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"ClientPageRoot\",{enumerable:!0,get:function(){return o}});let n=r(5155);function o(e){let{Component:t,searchParams:o,params:u,promises:l}=e;{let{createRenderSearchParamsFromClient:e}=r(7205),l=e(o),{createRenderParamsFromClient:a}=r(3558),i=a(u);return(0,n.jsx)(t,{params:i,searchParams:l})}}r(9837),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1027:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{dispatchAppRouterAction:function(){return l},useActionQueue:function(){return a}});let n=r(6966)._(r(2115)),o=r(5122),u=null;function l(e){if(null===u)throw Object.defineProperty(Error(\"Internal Next.js error: Router action dispatched before initialization.\"),\"__NEXT_ERROR_CODE\",{value:\"E668\",enumerable:!1,configurable:!0});u(e)}function a(e){let[t,r]=n.default.useState(e.state);return u=t=>e.dispatch(t,r),(0,o.isThenable)(t)?(0,n.use)(t):t}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1127:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"matchSegment\",{enumerable:!0,get:function(){return r}});let r=(e,t)=>\"string\"==typeof e?\"string\"==typeof t&&e===t:\"string\"!=typeof t&&e[0]===t[0]&&e[1]===t[1];(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1139:(e,t)=>{\"use strict\";function r(e,t){return void 0===t&&(t=!0),e.pathname+e.search+(t?e.hash:\"\")}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"createHrefFromUrl\",{enumerable:!0,get:function(){return r}}),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1295:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"default\",{enumerable:!0,get:function(){return a}});let n=r(6966),o=r(5155),u=n._(r(2115)),l=r(5227);function a(){let e=(0,u.useContext)(l.TemplateContext);return(0,o.jsx)(o.Fragment,{children:e})}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1315:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"assignLocation\",{enumerable:!0,get:function(){return o}});let n=r(5929);function o(e,t){if(e.startsWith(\".\")){let r=t.origin+t.pathname;return new URL((r.endsWith(\"/\")?r:r+\"/\")+e)}return new URL((0,n.addBasePath)(e),t.href)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1408:(e,t,r)=>{\"use strict\";e.exports=r(9393)},1426:(e,t,r)=>{\"use strict\";var n=r(9509),o=Symbol.for(\"react.transitional.element\"),u=Symbol.for(\"react.portal\"),l=Symbol.for(\"react.fragment\"),a=Symbol.for(\"react.strict_mode\"),i=Symbol.for(\"react.profiler\"),c=Symbol.for(\"react.consumer\"),s=Symbol.for(\"react.context\"),f=Symbol.for(\"react.forward_ref\"),d=Symbol.for(\"react.suspense\"),p=Symbol.for(\"react.memo\"),h=Symbol.for(\"react.lazy\"),y=Symbol.iterator,_={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b=Object.assign,g={};function v(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||_}function m(){}function E(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||_}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if(\"object\"!=typeof e&&\"function\"!=typeof e&&null!=e)throw Error(\"takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,e,t,\"setState\")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,\"forceUpdate\")},m.prototype=v.prototype;var O=E.prototype=new m;O.constructor=E,b(O,v.prototype),O.isPureReactComponent=!0;var R=Array.isArray,P={H:null,A:null,T:null,S:null},j=Object.prototype.hasOwnProperty;function T(e,t,r,n,u,l){return{$$typeof:o,type:e,key:t,ref:void 0!==(r=l.ref)?r:null,props:l}}function S(e){return\"object\"==typeof e&&null!==e&&e.$$typeof===o}var M=/\\/+/g;function w(e,t){var r,n;return\"object\"==typeof e&&null!==e&&null!=e.key?(r=\"\"+e.key,n={\"=\":\"=0\",\":\":\"=2\"},\"$\"+r.replace(/[=:]/g,function(e){return n[e]})):t.toString(36)}function C(){}function x(e,t,r){if(null==e)return e;var n=[],l=0;return!function e(t,r,n,l,a){var i,c,s,f=typeof t;(\"undefined\"===f||\"boolean\"===f)&&(t=null);var d=!1;if(null===t)d=!0;else switch(f){case\"bigint\":case\"string\":case\"number\":d=!0;break;case\"object\":switch(t.$$typeof){case o:case u:d=!0;break;case h:return e((d=t._init)(t._payload),r,n,l,a)}}if(d)return a=a(t),d=\"\"===l?\".\"+w(t,0):l,R(a)?(n=\"\",null!=d&&(n=d.replace(M,\"$&/\")+\"/\"),e(a,r,n,\"\",function(e){return e})):null!=a&&(S(a)&&(i=a,c=n+(null==a.key||t&&t.key===a.key?\"\":(\"\"+a.key).replace(M,\"$&/\")+\"/\")+d,a=T(i.type,c,void 0,void 0,void 0,i.props)),r.push(a)),1;d=0;var p=\"\"===l?\".\":l+\":\";if(R(t))for(var _=0;_<t.length;_++)f=p+w(l=t[_],_),d+=e(l,r,n,f,a);else if(\"function\"==typeof(_=null===(s=t)||\"object\"!=typeof s?null:\"function\"==typeof(s=y&&s[y]||s[\"@@iterator\"])?s:null))for(t=_.call(t),_=0;!(l=t.next()).done;)f=p+w(l=l.value,_++),d+=e(l,r,n,f,a);else if(\"object\"===f){if(\"function\"==typeof t.then)return e(function(e){switch(e.status){case\"fulfilled\":return e.value;case\"rejected\":throw e.reason;default:switch(\"string\"==typeof e.status?e.then(C,C):(e.status=\"pending\",e.then(function(t){\"pending\"===e.status&&(e.status=\"fulfilled\",e.value=t)},function(t){\"pending\"===e.status&&(e.status=\"rejected\",e.reason=t)})),e.status){case\"fulfilled\":return e.value;case\"rejected\":throw e.reason}}throw e}(t),r,n,l,a);throw Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===(r=String(t))?\"object with keys {\"+Object.keys(t).join(\", \")+\"}\":r)+\"). If you meant to render a collection of children, use an array instead.\")}return d}(e,n,\"\",\"\",function(e){return t.call(r,e,l++)}),n}function A(e){if(-1===e._status){var t=e._result;(t=t()).then(function(t){(0===e._status||-1===e._status)&&(e._status=1,e._result=t)},function(t){(0===e._status||-1===e._status)&&(e._status=2,e._result=t)}),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N=\"function\"==typeof reportError?reportError:function(e){if(\"object\"==typeof window&&\"function\"==typeof window.ErrorEvent){var t=new window.ErrorEvent(\"error\",{bubbles:!0,cancelable:!0,message:\"object\"==typeof e&&null!==e&&\"string\"==typeof e.message?String(e.message):String(e),error:e});if(!window.dispatchEvent(t))return}else if(\"object\"==typeof n&&\"function\"==typeof n.emit)return void n.emit(\"uncaughtException\",e);console.error(e)};function D(){}t.Children={map:x,forEach:function(e,t,r){x(e,function(){t.apply(this,arguments)},r)},count:function(e){var t=0;return x(e,function(){t++}),t},toArray:function(e){return x(e,function(e){return e})||[]},only:function(e){if(!S(e))throw Error(\"React.Children.only expected to receive a single React element child.\");return e}},t.Component=v,t.Fragment=l,t.Profiler=i,t.PureComponent=E,t.StrictMode=a,t.Suspense=d,t.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=P,t.__COMPILER_RUNTIME={__proto__:null,c:function(e){return P.H.useMemoCache(e)}},t.cache=function(e){return function(){return e.apply(null,arguments)}},t.cloneElement=function(e,t,r){if(null==e)throw Error(\"The argument must be a React element, but you passed \"+e+\".\");var n=b({},e.props),o=e.key,u=void 0;if(null!=t)for(l in void 0!==t.ref&&(u=void 0),void 0!==t.key&&(o=\"\"+t.key),t)j.call(t,l)&&\"key\"!==l&&\"__self\"!==l&&\"__source\"!==l&&(\"ref\"!==l||void 0!==t.ref)&&(n[l]=t[l]);var l=arguments.length-2;if(1===l)n.children=r;else if(1<l){for(var a=Array(l),i=0;i<l;i++)a[i]=arguments[i+2];n.children=a}return T(e.type,o,void 0,void 0,u,n)},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider=e,e.Consumer={$$typeof:c,_context:e},e},t.createElement=function(e,t,r){var n,o={},u=null;if(null!=t)for(n in void 0!==t.key&&(u=\"\"+t.key),t)j.call(t,n)&&\"key\"!==n&&\"__self\"!==n&&\"__source\"!==n&&(o[n]=t[n]);var l=arguments.length-2;if(1===l)o.children=r;else if(1<l){for(var a=Array(l),i=0;i<l;i++)a[i]=arguments[i+2];o.children=a}if(e&&e.defaultProps)for(n in l=e.defaultProps)void 0===o[n]&&(o[n]=l[n]);return T(e,u,void 0,void 0,null,o)},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:f,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:h,_payload:{_status:-1,_result:e},_init:A}},t.memo=function(e,t){return{$$typeof:p,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=P.T,r={};P.T=r;try{var n=e(),o=P.S;null!==o&&o(r,n),\"object\"==typeof n&&null!==n&&\"function\"==typeof n.then&&n.then(D,N)}catch(e){N(e)}finally{null!==t&&null!==r.types&&(t.types=r.types),P.T=t}},t.unstable_useCacheRefresh=function(){return P.H.useCacheRefresh()},t.use=function(e){return P.H.use(e)},t.useActionState=function(e,t,r){return P.H.useActionState(e,t,r)},t.useCallback=function(e,t){return P.H.useCallback(e,t)},t.useContext=function(e){return P.H.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e,t){return P.H.useDeferredValue(e,t)},t.useEffect=function(e,t){return P.H.useEffect(e,t)},t.useId=function(){return P.H.useId()},t.useImperativeHandle=function(e,t,r){return P.H.useImperativeHandle(e,t,r)},t.useInsertionEffect=function(e,t){return P.H.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return P.H.useLayoutEffect(e,t)},t.useMemo=function(e,t){return P.H.useMemo(e,t)},t.useOptimistic=function(e,t){return P.H.useOptimistic(e,t)},t.useReducer=function(e,t,r){return P.H.useReducer(e,t,r)},t.useRef=function(e){return P.H.useRef(e)},t.useState=function(e){return P.H.useState(e)},t.useSyncExternalStore=function(e,t,r){return P.H.useSyncExternalStore(e,t,r)},t.useTransition=function(){return P.H.useTransition()},t.version=\"19.2.0-canary-3fbfb9ba-20250409\"},1518:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{DYNAMIC_STALETIME_MS:function(){return d},STATIC_STALETIME_MS:function(){return p},createSeededPrefetchCacheEntry:function(){return c},getOrCreatePrefetchCacheEntry:function(){return i},prunePrefetchCache:function(){return f}});let n=r(8586),o=r(9818),u=r(9154);function l(e,t,r){let n=e.pathname;return(t&&(n+=e.search),r)?\"\"+r+\"%\"+n:n}function a(e,t,r){return l(e,t===o.PrefetchKind.FULL,r)}function i(e){let{url:t,nextUrl:r,tree:n,prefetchCache:u,kind:a,allowAliasing:i=!0}=e,c=function(e,t,r,n,u){for(let a of(void 0===t&&(t=o.PrefetchKind.TEMPORARY),[r,null])){let r=l(e,!0,a),i=l(e,!1,a),c=e.search?r:i,s=n.get(c);if(s&&u){if(s.url.pathname===e.pathname&&s.url.search!==e.search)return{...s,aliased:!0};return s}let f=n.get(i);if(u&&e.search&&t!==o.PrefetchKind.FULL&&f&&!f.key.includes(\"%\"))return{...f,aliased:!0}}if(t!==o.PrefetchKind.FULL&&u){for(let t of n.values())if(t.url.pathname===e.pathname&&!t.key.includes(\"%\"))return{...t,aliased:!0}}}(t,a,r,u,i);return c?(c.status=h(c),c.kind!==o.PrefetchKind.FULL&&a===o.PrefetchKind.FULL&&c.data.then(e=>{if(!(Array.isArray(e.flightData)&&e.flightData.some(e=>e.isRootRender&&null!==e.seedData)))return s({tree:n,url:t,nextUrl:r,prefetchCache:u,kind:null!=a?a:o.PrefetchKind.TEMPORARY})}),a&&c.kind===o.PrefetchKind.TEMPORARY&&(c.kind=a),c):s({tree:n,url:t,nextUrl:r,prefetchCache:u,kind:a||o.PrefetchKind.TEMPORARY})}function c(e){let{nextUrl:t,tree:r,prefetchCache:n,url:u,data:l,kind:i}=e,c=l.couldBeIntercepted?a(u,i,t):a(u,i),s={treeAtTimeOfPrefetch:r,data:Promise.resolve(l),kind:i,prefetchTime:Date.now(),lastUsedTime:Date.now(),staleTime:-1,key:c,status:o.PrefetchCacheEntryStatus.fresh,url:u};return n.set(c,s),s}function s(e){let{url:t,kind:r,tree:l,nextUrl:i,prefetchCache:c}=e,s=a(t,r),f=u.prefetchQueue.enqueue(()=>(0,n.fetchServerResponse)(t,{flightRouterState:l,nextUrl:i,prefetchKind:r}).then(e=>{let r;if(e.couldBeIntercepted&&(r=function(e){let{url:t,nextUrl:r,prefetchCache:n,existingCacheKey:o}=e,u=n.get(o);if(!u)return;let l=a(t,u.kind,r);return n.set(l,{...u,key:l}),n.delete(o),l}({url:t,existingCacheKey:s,nextUrl:i,prefetchCache:c})),e.prerendered){let t=c.get(null!=r?r:s);t&&(t.kind=o.PrefetchKind.FULL,-1!==e.staleTime&&(t.staleTime=e.staleTime))}return e})),d={treeAtTimeOfPrefetch:l,data:f,kind:r,prefetchTime:Date.now(),lastUsedTime:null,staleTime:-1,key:s,status:o.PrefetchCacheEntryStatus.fresh,url:t};return c.set(s,d),d}function f(e){for(let[t,r]of e)h(r)===o.PrefetchCacheEntryStatus.expired&&e.delete(t)}let d=1e3*Number(\"0\"),p=1e3*Number(\"300\");function h(e){let{kind:t,prefetchTime:r,lastUsedTime:n,staleTime:u}=e;return -1!==u?Date.now()<r+u?o.PrefetchCacheEntryStatus.fresh:o.PrefetchCacheEntryStatus.stale:Date.now()<(null!=n?n:r)+d?n?o.PrefetchCacheEntryStatus.reusable:o.PrefetchCacheEntryStatus.fresh:t===o.PrefetchKind.AUTO&&Date.now()<r+p?o.PrefetchCacheEntryStatus.stale:t===o.PrefetchKind.FULL&&Date.now()<r+p?o.PrefetchCacheEntryStatus.reusable:o.PrefetchCacheEntryStatus.expired}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1536:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"BrowserResolvedMetadata\",{enumerable:!0,get:function(){return o}});let n=r(2115);function o(e){let{promise:t}=e,{metadata:r,error:o}=(0,n.use)(t);return o?null:r}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1646:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"reportGlobalError\",{enumerable:!0,get:function(){return r}});let r=\"function\"==typeof reportError?reportError:e=>{globalThis.console.error(e)};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1747:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"pathHasPrefix\",{enumerable:!0,get:function(){return o}});let n=r(427);function o(e,t){if(\"string\"!=typeof e)return!1;let{pathname:r}=(0,n.parsePath)(e);return r===t||r.startsWith(t+\"/\")}},1818:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"findSourceMapURL\",{enumerable:!0,get:function(){return r}});let r=void 0;(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1822:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"unresolvedThenable\",{enumerable:!0,get:function(){return r}});let r={then:()=>{}};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},2004:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"invalidateCacheByRouterState\",{enumerable:!0,get:function(){return o}});let n=r(5637);function o(e,t,r){for(let o in r[1]){let u=r[1][o][0],l=(0,n.createRouterCacheKey)(u),a=t.parallelRoutes.get(o);if(a){let t=new Map(a);t.delete(l),e.parallelRoutes.set(o,t)}}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},2115:(e,t,r)=>{\"use strict\";e.exports=r(1426)},2210:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{REDIRECT_ERROR_CODE:function(){return o},RedirectType:function(){return u},isRedirectError:function(){return l}});let n=r(4420),o=\"NEXT_REDIRECT\";var u=function(e){return e.push=\"push\",e.replace=\"replace\",e}({});function l(e){if(\"object\"!=typeof e||null===e||!(\"digest\"in e)||\"string\"!=typeof e.digest)return!1;let t=e.digest.split(\";\"),[r,u]=t,l=t.slice(2,-2).join(\";\"),a=Number(t.at(-2));return r===o&&(\"replace\"===u||\"push\"===u)&&\"string\"==typeof l&&!isNaN(a)&&a in n.RedirectStatusCode}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},2223:(e,t)=>{\"use strict\";function r(e,t){var r=e.length;for(e.push(t);0<r;){var n=r-1>>>1,o=e[n];if(0<u(o,t))e[n]=t,e[r]=o,r=n;else break}}function n(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],r=e.pop();if(r!==t){e[0]=r;for(var n=0,o=e.length,l=o>>>1;n<l;){var a=2*(n+1)-1,i=e[a],c=a+1,s=e[c];if(0>u(i,r))c<o&&0>u(s,i)?(e[n]=s,e[c]=r,n=c):(e[n]=i,e[a]=r,n=a);else if(c<o&&0>u(s,r))e[n]=s,e[c]=r,n=c;else break}}return t}function u(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}if(t.unstable_now=void 0,\"object\"==typeof performance&&\"function\"==typeof performance.now){var l,a=performance;t.unstable_now=function(){return a.now()}}else{var i=Date,c=i.now();t.unstable_now=function(){return i.now()-c}}var s=[],f=[],d=1,p=null,h=3,y=!1,_=!1,b=!1,g=!1,v=\"function\"==typeof setTimeout?setTimeout:null,m=\"function\"==typeof clearTimeout?clearTimeout:null,E=\"undefined\"!=typeof setImmediate?setImmediate:null;function O(e){for(var t=n(f);null!==t;){if(null===t.callback)o(f);else if(t.startTime<=e)o(f),t.sortIndex=t.expirationTime,r(s,t);else break;t=n(f)}}function R(e){if(b=!1,O(e),!_)if(null!==n(s))_=!0,P||(P=!0,l());else{var t=n(f);null!==t&&A(R,t.startTime-e)}}var P=!1,j=-1,T=5,S=-1;function M(){return!!g||!(t.unstable_now()-S<T)}function w(){if(g=!1,P){var e=t.unstable_now();S=e;var r=!0;try{e:{_=!1,b&&(b=!1,m(j),j=-1),y=!0;var u=h;try{t:{for(O(e),p=n(s);null!==p&&!(p.expirationTime>e&&M());){var a=p.callback;if(\"function\"==typeof a){p.callback=null,h=p.priorityLevel;var i=a(p.expirationTime<=e);if(e=t.unstable_now(),\"function\"==typeof i){p.callback=i,O(e),r=!0;break t}p===n(s)&&o(s),O(e)}else o(s);p=n(s)}if(null!==p)r=!0;else{var c=n(f);null!==c&&A(R,c.startTime-e),r=!1}}break e}finally{p=null,h=u,y=!1}}}finally{r?l():P=!1}}}if(\"function\"==typeof E)l=function(){E(w)};else if(\"undefined\"!=typeof MessageChannel){var C=new MessageChannel,x=C.port2;C.port1.onmessage=w,l=function(){x.postMessage(null)}}else l=function(){v(w,0)};function A(e,r){j=v(function(){e(t.unstable_now())},r)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):T=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return h},t.unstable_next=function(e){switch(h){case 1:case 2:case 3:var t=3;break;default:t=h}var r=h;h=t;try{return e()}finally{h=r}},t.unstable_requestPaint=function(){g=!0},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=h;h=e;try{return t()}finally{h=r}},t.unstable_scheduleCallback=function(e,o,u){var a=t.unstable_now();switch(u=\"object\"==typeof u&&null!==u&&\"number\"==typeof(u=u.delay)&&0<u?a+u:a,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=0x3fffffff;break;case 4:i=1e4;break;default:i=5e3}return i=u+i,e={id:d++,callback:o,priorityLevel:e,startTime:u,expirationTime:i,sortIndex:-1},u>a?(e.sortIndex=u,r(f,e),null===n(s)&&e===n(f)&&(b?(m(j),j=-1):b=!0,A(R,u-a))):(e.sortIndex=i,r(s,e),_||y||(_=!0,P||(P=!0,l()))),e},t.unstable_shouldYield=M,t.unstable_wrapCallback=function(e){var t=h;return function(){var r=h;h=t;try{return e.apply(this,arguments)}finally{h=r}}}},2312:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"PromiseQueue\",{enumerable:!0,get:function(){return c}});let n=r(5952),o=r(6420);var u=o._(\"_maxConcurrency\"),l=o._(\"_runningCount\"),a=o._(\"_queue\"),i=o._(\"_processNext\");class c{enqueue(e){let t,r,o=new Promise((e,n)=>{t=e,r=n}),u=async()=>{try{n._(this,l)[l]++;let r=await e();t(r)}catch(e){r(e)}finally{n._(this,l)[l]--,n._(this,i)[i]()}};return n._(this,a)[a].push({promiseFn:o,task:u}),n._(this,i)[i](),o}bump(e){let t=n._(this,a)[a].findIndex(t=>t.promiseFn===e);if(t>-1){let e=n._(this,a)[a].splice(t,1)[0];n._(this,a)[a].unshift(e),n._(this,i)[i](!0)}}constructor(e=5){Object.defineProperty(this,i,{value:s}),Object.defineProperty(this,u,{writable:!0,value:void 0}),Object.defineProperty(this,l,{writable:!0,value:void 0}),Object.defineProperty(this,a,{writable:!0,value:void 0}),n._(this,u)[u]=e,n._(this,l)[l]=0,n._(this,a)[a]=[]}}function s(e){if(void 0===e&&(e=!1),(n._(this,l)[l]<n._(this,u)[u]||e)&&n._(this,a)[a].length>0){var t;null==(t=n._(this,a)[a].shift())||t.task()}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},2561:(e,t)=>{\"use strict\";function r(e){var t;let[r,n,o,u]=e.slice(-4),l=e.slice(0,-4);return{pathToSegment:l.slice(0,-1),segmentPath:l,segment:null!=(t=l[l.length-1])?t:\"\",tree:r,seedData:n,head:o,isHeadPartial:u,isRootRender:4===e.length}}function n(e){return e.slice(2)}function o(e){return\"string\"==typeof e?e:e.map(r)}Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{getFlightDataPartsFromPath:function(){return r},getNextFlightSegmentPath:function(){return n},normalizeFlightData:function(){return o}}),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},2669:(e,t,r)=>{\"use strict\";!function e(){if(\"undefined\"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&\"function\"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(9248)},2691:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"findHeadInCache\",{enumerable:!0,get:function(){return o}});let n=r(5637);function o(e,t){return function e(t,r,o){if(0===Object.keys(r).length)return[t,o];let u=Object.keys(r).filter(e=>\"children\"!==e);for(let l of(\"children\"in r&&u.unshift(\"children\"),u)){let[u,a]=r[l],i=t.parallelRoutes.get(l);if(!i)continue;let c=(0,n.createRouterCacheKey)(u),s=i.get(c);if(!s)continue;let f=e(s,a,o+\"/\"+c);if(f)return f}return null}(e,t,\"\")}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},2816:(e,t)=>{\"use strict\";function r(e){let t=parseInt(e.slice(0,2),16),r=t>>1&63,n=Array(6);for(let e=0;e<6;e++){let t=r>>5-e&1;n[e]=1===t}return{type:1==(t>>7&1)?\"use-cache\":\"server-action\",usedArgs:n,hasRestArgs:1==(1&t)}}function n(e,t){let r=Array(e.length);for(let n=0;n<e.length;n++)(n<6&&t.usedArgs[n]||n>=6&&t.hasRestArgs)&&(r[n]=e[n]);return r}Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{extractInfoFromServerReferenceId:function(){return r},omitUnusedArgs:function(){return n}})},2830:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"HeadManagerContext\",{enumerable:!0,get:function(){return n}});let n=r(8229)._(r(2115)).default.createContext({})},2858:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"isNextRouterError\",{enumerable:!0,get:function(){return u}});let n=r(6494),o=r(2210);function u(e){return(0,o.isRedirectError)(e)||(0,n.isHTTPAccessFallbackError)(e)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3118:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{fillCacheWithNewSubTreeData:function(){return i},fillCacheWithNewSubTreeDataButOnlyLoading:function(){return c}});let n=r(2004),o=r(4758),u=r(5637),l=r(8291);function a(e,t,r,a,i,c){let{segmentPath:s,seedData:f,tree:d,head:p}=a,h=t,y=r;for(let t=0;t<s.length;t+=2){let r=s[t],a=s[t+1],_=t===s.length-2,b=(0,u.createRouterCacheKey)(a),g=y.parallelRoutes.get(r);if(!g)continue;let v=h.parallelRoutes.get(r);v&&v!==g||(v=new Map(g),h.parallelRoutes.set(r,v));let m=g.get(b),E=v.get(b);if(_){if(f&&(!E||!E.lazyData||E===m)){let t=f[0],r=f[1],u=f[3];E={lazyData:null,rsc:c||t!==l.PAGE_SEGMENT_KEY?r:null,prefetchRsc:null,head:null,prefetchHead:null,loading:u,parallelRoutes:c&&m?new Map(m.parallelRoutes):new Map,navigatedAt:e},m&&c&&(0,n.invalidateCacheByRouterState)(E,m,d),c&&(0,o.fillLazyItemsTillLeafWithHead)(e,E,m,d,f,p,i),v.set(b,E)}continue}E&&m&&(E===m&&(E={lazyData:E.lazyData,rsc:E.rsc,prefetchRsc:E.prefetchRsc,head:E.head,prefetchHead:E.prefetchHead,parallelRoutes:new Map(E.parallelRoutes),loading:E.loading},v.set(b,E)),h=E,y=m)}}function i(e,t,r,n,o){a(e,t,r,n,o,!0)}function c(e,t,r,n,o){a(e,t,r,n,o,!1)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3230:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"warnOnce\",{enumerable:!0,get:function(){return r}});let r=e=>{}},3269:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{ACTION_HEADER:function(){return n},FLIGHT_HEADERS:function(){return f},NEXT_DID_POSTPONE_HEADER:function(){return h},NEXT_HMR_REFRESH_HASH_COOKIE:function(){return i},NEXT_HMR_REFRESH_HEADER:function(){return a},NEXT_IS_PRERENDER_HEADER:function(){return b},NEXT_REWRITTEN_PATH_HEADER:function(){return y},NEXT_REWRITTEN_QUERY_HEADER:function(){return _},NEXT_ROUTER_PREFETCH_HEADER:function(){return u},NEXT_ROUTER_SEGMENT_PREFETCH_HEADER:function(){return l},NEXT_ROUTER_STALE_TIME_HEADER:function(){return p},NEXT_ROUTER_STATE_TREE_HEADER:function(){return o},NEXT_RSC_UNION_QUERY:function(){return d},NEXT_URL:function(){return c},RSC_CONTENT_TYPE_HEADER:function(){return s},RSC_HEADER:function(){return r}});let r=\"RSC\",n=\"Next-Action\",o=\"Next-Router-State-Tree\",u=\"Next-Router-Prefetch\",l=\"Next-Router-Segment-Prefetch\",a=\"Next-HMR-Refresh\",i=\"__next_hmr_refresh_hash__\",c=\"Next-Url\",s=\"text/x-component\",f=[r,o,u,a,l],d=\"_rsc\",p=\"x-nextjs-stale-time\",h=\"x-nextjs-postponed\",y=\"x-nextjs-rewritten-path\",_=\"x-nextjs-rewritten-query\",b=\"x-nextjs-prerender\";(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3506:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"attachHydrationErrorState\",{enumerable:!0,get:function(){return u}});let n=r(6465),o=r(9771);function u(e){let t={},r=(0,n.testReactHydrationWarning)(e.message),u=(0,n.isHydrationError)(e);if(!(u||r))return;let l=(0,o.getReactHydrationDiffSegments)(e.message);if(l){let a=l[1];t={...e.details,...o.hydrationErrorState,warning:(a&&!r?null:o.hydrationErrorState.warning)||[(0,n.getDefaultHydrationErrorMessage)(),\"\",\"\"],notes:r?\"\":l[0],reactOutputComponentDiff:a},!o.hydrationErrorState.reactOutputComponentDiff&&a&&(o.hydrationErrorState.reactOutputComponentDiff=a),!a&&u&&o.hydrationErrorState.reactOutputComponentDiff&&(t.reactOutputComponentDiff=o.hydrationErrorState.reactOutputComponentDiff)}else o.hydrationErrorState.warning&&(t={...e.details,...o.hydrationErrorState}),o.hydrationErrorState.reactOutputComponentDiff&&(t.reactOutputComponentDiff=o.hydrationErrorState.reactOutputComponentDiff);e.details=t}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3507:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"handleMutable\",{enumerable:!0,get:function(){return u}});let n=r(8946);function o(e){return void 0!==e}function u(e,t){var r,u;let l=null==(r=t.shouldScroll)||r,a=e.nextUrl;if(o(t.patchedTree)){let r=(0,n.computeChangedPath)(e.tree,t.patchedTree);r?a=r:a||(a=e.canonicalUrl)}return{canonicalUrl:o(t.canonicalUrl)?t.canonicalUrl===e.canonicalUrl?e.canonicalUrl:t.canonicalUrl:e.canonicalUrl,pushRef:{pendingPush:o(t.pendingPush)?t.pendingPush:e.pushRef.pendingPush,mpaNavigation:o(t.mpaNavigation)?t.mpaNavigation:e.pushRef.mpaNavigation,preserveCustomHistoryState:o(t.preserveCustomHistoryState)?t.preserveCustomHistoryState:e.pushRef.preserveCustomHistoryState},focusAndScrollRef:{apply:!!l&&(!!o(null==t?void 0:t.scrollableSegments)||e.focusAndScrollRef.apply),onlyHashChange:t.onlyHashChange||!1,hashFragment:l?t.hashFragment&&\"\"!==t.hashFragment?decodeURIComponent(t.hashFragment.slice(1)):e.focusAndScrollRef.hashFragment:null,segmentPaths:l?null!=(u=null==t?void 0:t.scrollableSegments)?u:e.focusAndScrollRef.segmentPaths:[]},cache:t.cache?t.cache:e.cache,prefetchCache:t.prefetchCache?t.prefetchCache:e.prefetchCache,tree:o(t.patchedTree)?t.patchedTree:e.tree,nextUrl:a}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3558:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"createRenderParamsFromClient\",{enumerable:!0,get:function(){return n}});let n=r(7829).makeUntrackedExoticParams;(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3567:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"createInitialRouterState\",{enumerable:!0,get:function(){return s}});let n=r(1139),o=r(4758),u=r(8946),l=r(1518),a=r(9818),i=r(4908),c=r(2561);function s(e){var t,r;let{navigatedAt:s,initialFlightData:f,initialCanonicalUrlParts:d,initialParallelRoutes:p,location:h,couldBeIntercepted:y,postponed:_,prerendered:b}=e,g=d.join(\"/\"),v=(0,c.getFlightDataPartsFromPath)(f[0]),{tree:m,seedData:E,head:O}=v,R={lazyData:null,rsc:null==E?void 0:E[1],prefetchRsc:null,head:null,prefetchHead:null,parallelRoutes:p,loading:null!=(t=null==E?void 0:E[3])?t:null,navigatedAt:s},P=h?(0,n.createHrefFromUrl)(h):g;(0,i.addRefreshMarkerToActiveParallelSegments)(m,P);let j=new Map;(null===p||0===p.size)&&(0,o.fillLazyItemsTillLeafWithHead)(s,R,void 0,m,E,O,void 0);let T={tree:m,cache:R,prefetchCache:j,pushRef:{pendingPush:!1,mpaNavigation:!1,preserveCustomHistoryState:!0},focusAndScrollRef:{apply:!1,onlyHashChange:!1,hashFragment:null,segmentPaths:[]},canonicalUrl:P,nextUrl:null!=(r=(0,u.extractPathFromFlightRouterState)(m)||(null==h?void 0:h.pathname))?r:null};if(h){let e=new URL(\"\"+h.pathname+h.search,h.origin);(0,l.createSeededPrefetchCacheEntry)({url:e,data:{flightData:[v],canonicalUrl:void 0,couldBeIntercepted:!!y,prerendered:b,postponed:_,staleTime:-1},tree:T.tree,prefetchCache:T.prefetchCache,nextUrl:T.nextUrl,kind:b?a.PrefetchKind.FULL:a.PrefetchKind.AUTO})}return T}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3612:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"hmrRefreshReducer\",{enumerable:!0,get:function(){return n}}),r(8586),r(1139),r(7442),r(9234),r(3894),r(3507),r(878),r(6158),r(6375),r(4108);let n=function(e,t){return e};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3668:(e,t)=>{\"use strict\";function r(){return\"\"}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"getDeploymentIdQueryOrEmptyString\",{enumerable:!0,get:function(){return r}})},3678:(e,t,r)=>{\"use strict\";function n(){throw Object.defineProperty(Error(\"`forbidden()` is experimental and only allowed to be enabled when `experimental.authInterrupts` is enabled.\"),\"__NEXT_ERROR_CODE\",{value:\"E488\",enumerable:!1,configurable:!0})}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"forbidden\",{enumerable:!0,get:function(){return n}}),r(6494).HTTP_ERROR_FALLBACK_ERROR_CODE,(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3806:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"callServer\",{enumerable:!0,get:function(){return l}});let n=r(2115),o=r(9818),u=r(1027);async function l(e,t){return new Promise((r,l)=>{(0,n.startTransition)(()=>{(0,u.dispatchAppRouterAction)({type:o.ACTION_SERVER_ACTION,actionId:e,actionArgs:t,resolve:r,reject:l})})})}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3894:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{handleExternalUrl:function(){return v},navigateReducer:function(){return function e(t,r){let{url:E,isExternalUrl:O,navigateType:R,shouldScroll:P,allowAliasing:j}=r,T={},{hash:S}=E,M=(0,o.createHrefFromUrl)(E),w=\"push\"===R;if((0,_.prunePrefetchCache)(t.prefetchCache),T.preserveCustomHistoryState=!1,T.pendingPush=w,O)return v(t,T,E.toString(),w);if(document.getElementById(\"__next-page-redirect\"))return v(t,T,M,w);let C=(0,_.getOrCreatePrefetchCacheEntry)({url:E,nextUrl:t.nextUrl,tree:t.tree,prefetchCache:t.prefetchCache,allowAliasing:j}),{treeAtTimeOfPrefetch:x,data:A}=C;return d.prefetchQueue.bump(A),A.then(d=>{let{flightData:_,canonicalUrl:O,postponed:R}=d,j=Date.now(),A=!1;if(C.lastUsedTime||(C.lastUsedTime=j,A=!0),C.aliased){let n=(0,g.handleAliasedPrefetchEntry)(j,t,_,E,T);return!1===n?e(t,{...r,allowAliasing:!1}):n}if(\"string\"==typeof _)return v(t,T,_,w);let N=O?(0,o.createHrefFromUrl)(O):M;if(S&&t.canonicalUrl.split(\"#\",1)[0]===N.split(\"#\",1)[0])return T.onlyHashChange=!0,T.canonicalUrl=N,T.shouldScroll=P,T.hashFragment=S,T.scrollableSegments=[],(0,s.handleMutable)(t,T);let D=t.tree,U=t.cache,L=[];for(let e of _){let{pathToSegment:r,seedData:o,head:s,isHeadPartial:d,isRootRender:_}=e,g=e.tree,O=[\"\",...r],P=(0,l.applyRouterStatePatchToTree)(O,D,g,M);if(null===P&&(P=(0,l.applyRouterStatePatchToTree)(O,x,g,M)),null!==P){if(o&&_&&R){let e=(0,y.startPPRNavigation)(j,U,D,g,o,s,d,!1,L);if(null!==e){if(null===e.route)return v(t,T,M,w);P=e.route;let r=e.node;null!==r&&(T.cache=r);let o=e.dynamicRequestTree;if(null!==o){let r=(0,n.fetchServerResponse)(E,{flightRouterState:o,nextUrl:t.nextUrl});(0,y.listenForDynamicRequest)(e,r)}}else P=g}else{if((0,i.isNavigatingToNewRootLayout)(D,P))return v(t,T,M,w);let n=(0,p.createEmptyCacheNode)(),o=!1;for(let t of(C.status!==c.PrefetchCacheEntryStatus.stale||A?o=(0,f.applyFlightData)(j,U,n,e,C):(o=function(e,t,r,n){let o=!1;for(let u of(e.rsc=t.rsc,e.prefetchRsc=t.prefetchRsc,e.loading=t.loading,e.parallelRoutes=new Map(t.parallelRoutes),m(n).map(e=>[...r,...e])))(0,b.clearCacheNodeDataForSegmentPath)(e,t,u),o=!0;return o}(n,U,r,g),C.lastUsedTime=j),(0,a.shouldHardNavigate)(O,D)?(n.rsc=U.rsc,n.prefetchRsc=U.prefetchRsc,(0,u.invalidateCacheBelowFlightSegmentPath)(n,U,r),T.cache=n):o&&(T.cache=n,U=n),m(g))){let e=[...r,...t];e[e.length-1]!==h.DEFAULT_SEGMENT_KEY&&L.push(e)}}D=P}}return T.patchedTree=D,T.canonicalUrl=N,T.scrollableSegments=L,T.hashFragment=S,T.shouldScroll=P,(0,s.handleMutable)(t,T)},()=>t)}}});let n=r(8586),o=r(1139),u=r(4466),l=r(7442),a=r(5567),i=r(9234),c=r(9818),s=r(3507),f=r(878),d=r(9154),p=r(6158),h=r(8291),y=r(4150),_=r(1518),b=r(9880),g=r(5563);function v(e,t,r,n){return t.mpaNavigation=!0,t.canonicalUrl=r,t.pendingPush=n,t.scrollableSegments=void 0,(0,s.handleMutable)(e,t)}function m(e){let t=[],[r,n]=e;if(0===Object.keys(n).length)return[[r]];for(let[e,o]of Object.entries(n))for(let n of m(o))\"\"===r?t.push([e,...n]):t.push([r,e,...n]);return t}r(6005),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3942:(e,t)=>{\"use strict\";function r(e){let t=5381;for(let r=0;r<e.length;r++)t=(t<<5)+t+e.charCodeAt(r)|0;return t>>>0}function n(e){return r(e).toString(36).slice(0,5)}Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{djb2Hash:function(){return r},hexHash:function(){return n}})},3950:(e,t)=>{\"use strict\";function r(e,t){let r=e[e.length-1];r&&r.stack===t.stack||e.push(t)}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"enqueueConsecutiveDedupedError\",{enumerable:!0,get:function(){return r}}),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3954:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),(0,r(5444).handleGlobalErrors)(),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4074:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"addPathPrefix\",{enumerable:!0,get:function(){return o}});let n=r(427);function o(e,t){if(!e.startsWith(\"/\")||!t)return e;let{pathname:r,query:o,hash:u}=(0,n.parsePath)(e);return\"\"+t+r+o+u}},4108:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"hasInterceptionRouteInCurrentTree\",{enumerable:!0,get:function(){return function e(t){let[r,o]=t;if(Array.isArray(r)&&(\"di\"===r[2]||\"ci\"===r[2])||\"string\"==typeof r&&(0,n.isInterceptionRouteAppPath)(r))return!0;if(o){for(let t in o)if(e(o[t]))return!0}return!1}}});let n=r(7755);(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4150:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{abortTask:function(){return h},listenForDynamicRequest:function(){return p},startPPRNavigation:function(){return c},updateCacheNodeOnPopstateRestoration:function(){return function e(t,r){let n=r[1],o=t.parallelRoutes,l=new Map(o);for(let t in n){let r=n[t],a=r[0],i=(0,u.createRouterCacheKey)(a),c=o.get(t);if(void 0!==c){let n=c.get(i);if(void 0!==n){let o=e(n,r),u=new Map(c);u.set(i,o),l.set(t,u)}}}let a=t.rsc,i=b(a)&&\"pending\"===a.status;return{lazyData:null,rsc:a,head:t.head,prefetchHead:i?t.prefetchHead:[null,null],prefetchRsc:i?t.prefetchRsc:null,loading:t.loading,parallelRoutes:l,navigatedAt:t.navigatedAt}}}});let n=r(8291),o=r(1127),u=r(5637),l=r(9234),a=r(1518),i={route:null,node:null,dynamicRequestTree:null,children:null};function c(e,t,r,l,a,c,d,p,h){return function e(t,r,l,a,c,d,p,h,y,_,b){let g=l[1],v=a[1],m=null!==d?d[2]:null;c||!0===a[4]&&(c=!0);let E=r.parallelRoutes,O=new Map(E),R={},P=null,j=!1,T={};for(let r in v){let l,a=v[r],f=g[r],d=E.get(r),S=null!==m?m[r]:null,M=a[0],w=_.concat([r,M]),C=(0,u.createRouterCacheKey)(M),x=void 0!==f?f[0]:void 0,A=void 0!==d?d.get(C):void 0;if(null!==(l=M===n.DEFAULT_SEGMENT_KEY?void 0!==f?{route:f,node:null,dynamicRequestTree:null,children:null}:s(t,f,a,A,c,void 0!==S?S:null,p,h,w,b):y&&0===Object.keys(a[1]).length?s(t,f,a,A,c,void 0!==S?S:null,p,h,w,b):void 0!==f&&void 0!==x&&(0,o.matchSegment)(M,x)&&void 0!==A&&void 0!==f?e(t,A,f,a,c,S,p,h,y,w,b):s(t,f,a,A,c,void 0!==S?S:null,p,h,w,b))){if(null===l.route)return i;null===P&&(P=new Map),P.set(r,l);let e=l.node;if(null!==e){let t=new Map(d);t.set(C,e),O.set(r,t)}let t=l.route;R[r]=t;let n=l.dynamicRequestTree;null!==n?(j=!0,T[r]=n):T[r]=t}else R[r]=a,T[r]=a}if(null===P)return null;let S={lazyData:null,rsc:r.rsc,prefetchRsc:r.prefetchRsc,head:r.head,prefetchHead:r.prefetchHead,loading:r.loading,parallelRoutes:O,navigatedAt:t};return{route:f(a,R),node:S,dynamicRequestTree:j?f(a,T):null,children:P}}(e,t,r,l,!1,a,c,d,p,[],h)}function s(e,t,r,n,o,c,s,p,h,y){return!o&&(void 0===t||(0,l.isNavigatingToNewRootLayout)(t,r))?i:function e(t,r,n,o,l,i,c,s){let p,h,y,_,b=r[1],g=0===Object.keys(b).length;if(void 0!==n&&n.navigatedAt+a.DYNAMIC_STALETIME_MS>t)p=n.rsc,h=n.loading,y=n.head,_=n.navigatedAt;else if(null===o)return d(t,r,null,l,i,c,s);else if(p=o[1],h=o[3],y=g?l:null,_=t,o[4]||i&&g)return d(t,r,o,l,i,c,s);let v=null!==o?o[2]:null,m=new Map,E=void 0!==n?n.parallelRoutes:null,O=new Map(E),R={},P=!1;if(g)s.push(c);else for(let r in b){let n=b[r],o=null!==v?v[r]:null,a=null!==E?E.get(r):void 0,f=n[0],d=c.concat([r,f]),p=(0,u.createRouterCacheKey)(f),h=e(t,n,void 0!==a?a.get(p):void 0,o,l,i,d,s);m.set(r,h);let y=h.dynamicRequestTree;null!==y?(P=!0,R[r]=y):R[r]=n;let _=h.node;if(null!==_){let e=new Map;e.set(p,_),O.set(r,e)}}return{route:r,node:{lazyData:null,rsc:p,prefetchRsc:null,head:y,prefetchHead:null,loading:h,parallelRoutes:O,navigatedAt:_},dynamicRequestTree:P?f(r,R):null,children:m}}(e,r,n,c,s,p,h,y)}function f(e,t){let r=[e[0],t];return 2 in e&&(r[2]=e[2]),3 in e&&(r[3]=e[3]),4 in e&&(r[4]=e[4]),r}function d(e,t,r,n,o,l,a){let i=f(t,t[1]);return i[3]=\"refetch\",{route:t,node:function e(t,r,n,o,l,a,i){let c=r[1],s=null!==n?n[2]:null,f=new Map;for(let r in c){let n=c[r],d=null!==s?s[r]:null,p=n[0],h=a.concat([r,p]),y=(0,u.createRouterCacheKey)(p),_=e(t,n,void 0===d?null:d,o,l,h,i),b=new Map;b.set(y,_),f.set(r,b)}let d=0===f.size;d&&i.push(a);let p=null!==n?n[1]:null,h=null!==n?n[3]:null;return{lazyData:null,parallelRoutes:f,prefetchRsc:void 0!==p?p:null,prefetchHead:d?o:[null,null],loading:void 0!==h?h:null,rsc:g(),head:d?g():null,navigatedAt:t}}(e,t,r,n,o,l,a),dynamicRequestTree:i,children:null}}function p(e,t){t.then(t=>{let{flightData:r}=t;if(\"string\"!=typeof r){for(let t of r){let{segmentPath:r,tree:n,seedData:l,head:a}=t;l&&function(e,t,r,n,l){let a=e;for(let e=0;e<t.length;e+=2){let r=t[e],n=t[e+1],u=a.children;if(null!==u){let e=u.get(r);if(void 0!==e){let t=e.route[0];if((0,o.matchSegment)(n,t)){a=e;continue}}}return}!function e(t,r,n,l){if(null===t.dynamicRequestTree)return;let a=t.children,i=t.node;if(null===a){null!==i&&(function e(t,r,n,l,a){let i=r[1],c=n[1],s=l[2],f=t.parallelRoutes;for(let t in i){let r=i[t],n=c[t],l=s[t],d=f.get(t),p=r[0],h=(0,u.createRouterCacheKey)(p),_=void 0!==d?d.get(h):void 0;void 0!==_&&(void 0!==n&&(0,o.matchSegment)(p,n[0])&&null!=l?e(_,r,n,l,a):y(r,_,null))}let d=t.rsc,p=l[1];null===d?t.rsc=p:b(d)&&d.resolve(p);let h=t.head;b(h)&&h.resolve(a)}(i,t.route,r,n,l),t.dynamicRequestTree=null);return}let c=r[1],s=n[2];for(let t in r){let r=c[t],n=s[t],u=a.get(t);if(void 0!==u){let t=u.route[0];if((0,o.matchSegment)(r[0],t)&&null!=n)return e(u,r,n,l)}}}(a,r,n,l)}(e,r,n,l,a)}h(e,null)}},t=>{h(e,t)})}function h(e,t){let r=e.node;if(null===r)return;let n=e.children;if(null===n)y(e.route,r,t);else for(let e of n.values())h(e,t);e.dynamicRequestTree=null}function y(e,t,r){let n=e[1],o=t.parallelRoutes;for(let e in n){let t=n[e],l=o.get(e);if(void 0===l)continue;let a=t[0],i=(0,u.createRouterCacheKey)(a),c=l.get(i);void 0!==c&&y(t,c,r)}let l=t.rsc;b(l)&&(null===r?l.resolve(null):l.reject(r));let a=t.head;b(a)&&a.resolve(null)}let _=Symbol();function b(e){return e&&e.tag===_}function g(){let e,t,r=new Promise((r,n)=>{e=r,t=n});return r.status=\"pending\",r.resolve=t=>{\"pending\"===r.status&&(r.status=\"fulfilled\",r.value=t,e(t))},r.reject=e=>{\"pending\"===r.status&&(r.status=\"rejected\",r.reason=e,t(e))},r.tag=_,r}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4189:(e,t)=>{\"use strict\";function r(e,t){if(void 0===t&&(t={}),t.onlyHashChange)return void e();let r=document.documentElement,n=r.style.scrollBehavior;r.style.scrollBehavior=\"auto\",t.dontForceLayout||r.getClientRects(),e(),r.style.scrollBehavior=n}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"handleSmoothScroll\",{enumerable:!0,get:function(){return r}})},4420:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"RedirectStatusCode\",{enumerable:!0,get:function(){return r}});var r=function(e){return e[e.SeeOther=303]=\"SeeOther\",e[e.TemporaryRedirect=307]=\"TemporaryRedirect\",e[e.PermanentRedirect=308]=\"PermanentRedirect\",e}({});(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4466:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"invalidateCacheBelowFlightSegmentPath\",{enumerable:!0,get:function(){return function e(t,r,u){let l=u.length<=2,[a,i]=u,c=(0,n.createRouterCacheKey)(i),s=r.parallelRoutes.get(a);if(!s)return;let f=t.parallelRoutes.get(a);if(f&&f!==s||(f=new Map(s),t.parallelRoutes.set(a,f)),l)return void f.delete(c);let d=s.get(c),p=f.get(c);p&&d&&(p===d&&(p={lazyData:p.lazyData,rsc:p.rsc,prefetchRsc:p.prefetchRsc,head:p.head,prefetchHead:p.prefetchHead,parallelRoutes:new Map(p.parallelRoutes)},f.set(c,p)),e(p,d,(0,o.getNextFlightSegmentPath)(u)))}}});let n=r(5637),o=r(2561);(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4486:(e,t,r)=>{\"use strict\";let n,o;Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"hydrate\",{enumerable:!0,get:function(){return D}});let u=r(8229),l=r(6966),a=r(5155);r(6446),r(6002),r(3954);let i=u._(r(2669)),c=l._(r(2115)),s=r(4979),f=r(2830),d=r(6698),p=r(9155),h=r(3806),y=r(1818),_=r(6634),b=u._(r(6158)),g=r(3567);r(5227);let v=r(5624),m=document,E=new TextEncoder,O=!1,R=!1,P=null;function j(e){if(0===e[0])n=[];else if(1===e[0]){if(!n)throw Object.defineProperty(Error(\"Unexpected server data: missing bootstrap script.\"),\"__NEXT_ERROR_CODE\",{value:\"E18\",enumerable:!1,configurable:!0});o?o.enqueue(E.encode(e[1])):n.push(e[1])}else if(2===e[0])P=e[1];else if(3===e[0]){if(!n)throw Object.defineProperty(Error(\"Unexpected server data: missing bootstrap script.\"),\"__NEXT_ERROR_CODE\",{value:\"E18\",enumerable:!1,configurable:!0});let r=atob(e[1]),u=new Uint8Array(r.length);for(var t=0;t<r.length;t++)u[t]=r.charCodeAt(t);o?o.enqueue(u):n.push(u)}}let T=function(){o&&!R&&(o.close(),R=!0,n=void 0),O=!0};\"loading\"===document.readyState?document.addEventListener(\"DOMContentLoaded\",T,!1):setTimeout(T);let S=self.__next_f=self.__next_f||[];S.forEach(j),S.push=j;let M=new ReadableStream({start(e){n&&(n.forEach(t=>{e.enqueue(\"string\"==typeof t?E.encode(t):t)}),O&&!R)&&(null===e.desiredSize||e.desiredSize<0?e.error(Object.defineProperty(Error(\"The connection to the page was unexpectedly closed, possibly due to the stop button being clicked, loss of Wi-Fi, or an unstable internet connection.\"),\"__NEXT_ERROR_CODE\",{value:\"E117\",enumerable:!1,configurable:!0})):e.close(),R=!0,n=void 0),o=e}}),w=(0,s.createFromReadableStream)(M,{callServer:h.callServer,findSourceMapURL:y.findSourceMapURL});function C(e){let{pendingActionQueue:t}=e,r=(0,c.use)(w),n=(0,c.use)(t);return(0,a.jsx)(b.default,{actionQueue:n,globalErrorComponentAndStyles:r.G,assetPrefix:r.p})}let x=c.default.StrictMode;function A(e){let{children:t}=e;return t}let N={onRecoverableError:d.onRecoverableError,onCaughtError:p.onCaughtError,onUncaughtError:p.onUncaughtError};function D(e){let t=new Promise((t,r)=>{w.then(r=>{(0,v.setAppBuildId)(r.b);let n=Date.now();t((0,_.createMutableActionQueue)((0,g.createInitialRouterState)({navigatedAt:n,initialFlightData:r.f,initialCanonicalUrlParts:r.c,initialParallelRoutes:new Map,location:window.location,couldBeIntercepted:r.i,postponed:r.s,prerendered:r.S}),e))},e=>r(e))}),r=(0,a.jsx)(x,{children:(0,a.jsx)(f.HeadManagerContext.Provider,{value:{appDir:!0},children:(0,a.jsx)(A,{children:(0,a.jsx)(C,{pendingActionQueue:t})})})});\"__next_error__\"===document.documentElement.id?i.default.createRoot(m,N).render(r):c.default.startTransition(()=>{i.default.hydrateRoot(m,r,{...N,formState:P})})}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4758:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"fillLazyItemsTillLeafWithHead\",{enumerable:!0,get:function(){return function e(t,r,u,l,a,i,c){if(0===Object.keys(l[1]).length){r.head=i;return}for(let s in l[1]){let f,d=l[1][s],p=d[0],h=(0,n.createRouterCacheKey)(p),y=null!==a&&void 0!==a[2][s]?a[2][s]:null;if(u){let n=u.parallelRoutes.get(s);if(n){let u,l=(null==c?void 0:c.kind)===\"auto\"&&c.status===o.PrefetchCacheEntryStatus.reusable,a=new Map(n),f=a.get(h);u=null!==y?{lazyData:null,rsc:y[1],prefetchRsc:null,head:null,prefetchHead:null,loading:y[3],parallelRoutes:new Map(null==f?void 0:f.parallelRoutes),navigatedAt:t}:l&&f?{lazyData:f.lazyData,rsc:f.rsc,prefetchRsc:f.prefetchRsc,head:f.head,prefetchHead:f.prefetchHead,parallelRoutes:new Map(f.parallelRoutes),loading:f.loading}:{lazyData:null,rsc:null,prefetchRsc:null,head:null,prefetchHead:null,parallelRoutes:new Map(null==f?void 0:f.parallelRoutes),loading:null,navigatedAt:t},a.set(h,u),e(t,u,f,d,y||null,i,c),r.parallelRoutes.set(s,a);continue}}if(null!==y){let e=y[1],r=y[3];f={lazyData:null,rsc:e,prefetchRsc:null,head:null,prefetchHead:null,parallelRoutes:new Map,loading:r,navigatedAt:t}}else f={lazyData:null,rsc:null,prefetchRsc:null,head:null,prefetchHead:null,parallelRoutes:new Map,loading:null,navigatedAt:t};let _=r.parallelRoutes.get(s);_?_.set(h,f):r.parallelRoutes.set(s,new Map([[h,f]])),e(t,f,void 0,d,y,i,c)}}}});let n=r(5637),o=r(9818);(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4819:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"restoreReducer\",{enumerable:!0,get:function(){return u}});let n=r(1139),o=r(8946);function u(e,t){var r;let{url:u,tree:l}=t,a=(0,n.createHrefFromUrl)(u),i=l||e.tree,c=e.cache;return{canonicalUrl:a,pushRef:{pendingPush:!1,mpaNavigation:!1,preserveCustomHistoryState:!0},focusAndScrollRef:e.focusAndScrollRef,cache:c,prefetchCache:e.prefetchCache,tree:i,nextUrl:null!=(r=(0,o.extractPathFromFlightRouterState)(i))?r:u.pathname}}r(4150),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4882:(e,t,r)=>{\"use strict\";function n(e){return e}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"removeBasePath\",{enumerable:!0,get:function(){return n}}),r(7102),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4908:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{addRefreshMarkerToActiveParallelSegments:function(){return function e(t,r){let[n,o,,l]=t;for(let a in n.includes(u.PAGE_SEGMENT_KEY)&&\"refresh\"!==l&&(t[2]=r,t[3]=\"refresh\"),o)e(o[a],r)}},refreshInactiveParallelSegments:function(){return l}});let n=r(878),o=r(8586),u=r(8291);async function l(e){let t=new Set;await a({...e,rootTree:e.updatedTree,fetchedSegments:t})}async function a(e){let{navigatedAt:t,state:r,updatedTree:u,updatedCache:l,includeNextUrl:i,fetchedSegments:c,rootTree:s=u,canonicalUrl:f}=e,[,d,p,h]=u,y=[];if(p&&p!==f&&\"refresh\"===h&&!c.has(p)){c.add(p);let e=(0,o.fetchServerResponse)(new URL(p,location.origin),{flightRouterState:[s[0],s[1],s[2],\"refetch\"],nextUrl:i?r.nextUrl:null}).then(e=>{let{flightData:r}=e;if(\"string\"!=typeof r)for(let e of r)(0,n.applyFlightData)(t,l,l,e)});y.push(e)}for(let e in d){let n=a({navigatedAt:t,state:r,updatedTree:d[e],updatedCache:l,includeNextUrl:i,fetchedSegments:c,rootTree:s,canonicalUrl:f});y.push(n)}await Promise.all(y)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4911:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{AsyncMetadata:function(){return u},AsyncMetadataOutlet:function(){return a}});let n=r(5155),o=r(2115),u=r(1536).BrowserResolvedMetadata;function l(e){let{promise:t}=e,{error:r,digest:n}=(0,o.use)(t);if(r)throw n&&(r.digest=n),r;return null}function a(e){let{promise:t}=e;return(0,n.jsx)(o.Suspense,{fallback:null,children:(0,n.jsx)(l,{promise:t})})}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4930:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{IDLE_LINK_STATUS:function(){return c},PENDING_LINK_STATUS:function(){return i},mountFormInstance:function(){return g},mountLinkInstance:function(){return b},onLinkVisibilityChanged:function(){return m},onNavigationIntent:function(){return E},pingVisibleLinks:function(){return R},setLinkForCurrentNavigation:function(){return s},unmountLinkForCurrentNavigation:function(){return f},unmountPrefetchableInstance:function(){return v}}),r(6634);let n=r(6158),o=r(9818),u=r(6005),l=r(2115),a=null,i={pending:!0},c={pending:!1};function s(e){(0,l.startTransition)(()=>{null==a||a.setOptimisticLinkStatus(c),null==e||e.setOptimisticLinkStatus(i),a=e})}function f(e){a===e&&(a=null)}let d=\"function\"==typeof WeakMap?new WeakMap:new Map,p=new Set,h=\"function\"==typeof IntersectionObserver?new IntersectionObserver(function(e){for(let t of e){let e=t.intersectionRatio>0;m(t.target,e)}},{rootMargin:\"200px\"}):null;function y(e,t){void 0!==d.get(e)&&v(e),d.set(e,t),null!==h&&h.observe(e)}function _(e){try{return(0,n.createPrefetchURL)(e)}catch(t){return(\"function\"==typeof reportError?reportError:console.error)(\"Cannot prefetch '\"+e+\"' because it cannot be converted to a URL.\"),null}}function b(e,t,r,n,o,u){if(o){let o=_(t);if(null!==o){let t={router:r,kind:n,isVisible:!1,wasHoveredOrTouched:!1,prefetchTask:null,cacheVersion:-1,prefetchHref:o.href,setOptimisticLinkStatus:u};return y(e,t),t}}return{router:r,kind:n,isVisible:!1,wasHoveredOrTouched:!1,prefetchTask:null,cacheVersion:-1,prefetchHref:null,setOptimisticLinkStatus:u}}function g(e,t,r,n){let o=_(t);null!==o&&y(e,{router:r,kind:n,isVisible:!1,wasHoveredOrTouched:!1,prefetchTask:null,cacheVersion:-1,prefetchHref:o.href,setOptimisticLinkStatus:null})}function v(e){let t=d.get(e);if(void 0!==t){d.delete(e),p.delete(t);let r=t.prefetchTask;null!==r&&(0,u.cancelPrefetchTask)(r)}null!==h&&h.unobserve(e)}function m(e,t){let r=d.get(e);void 0!==r&&(r.isVisible=t,t?p.add(r):p.delete(r),O(r))}function E(e,t){let r=d.get(e);void 0!==r&&void 0!==r&&(r.wasHoveredOrTouched=!0,O(r))}function O(e){var t;let r=e.prefetchTask;if(!e.isVisible){null!==r&&(0,u.cancelPrefetchTask)(r);return}t=e,(async()=>t.router.prefetch(t.prefetchHref,{kind:t.kind}))().catch(e=>{})}function R(e,t){let r=(0,u.getCurrentCacheVersion)();for(let n of p){let l=n.prefetchTask;if(null!==l&&n.cacheVersion===r&&l.key.nextUrl===e&&l.treeAtTimeOfPrefetch===t)continue;null!==l&&(0,u.cancelPrefetchTask)(l);let a=(0,u.createCacheKey)(n.prefetchHref,e),i=n.wasHoveredOrTouched?u.PrefetchPriority.Intent:u.PrefetchPriority.Default;n.prefetchTask=(0,u.schedulePrefetchTask)(a,t,n.kind===o.PrefetchKind.FULL,i),n.cacheVersion=(0,u.getCurrentCacheVersion)()}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4970:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"ClientSegmentRoot\",{enumerable:!0,get:function(){return o}});let n=r(5155);function o(e){let{Component:t,slots:o,params:u,promise:l}=e;{let{createRenderParamsFromClient:e}=r(3558),l=e(u);return(0,n.jsx)(t,{...o,params:l})}}r(9837),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4979:(e,t,r)=>{\"use strict\";e.exports=r(7197)},5072:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"HTML_LIMITED_BOT_UA_RE\",{enumerable:!0,get:function(){return r}});let r=/Mediapartners-Google|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti/i},5122:(e,t)=>{\"use strict\";function r(e){return null!==e&&\"object\"==typeof e&&\"then\"in e&&\"function\"==typeof e.then}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"isThenable\",{enumerable:!0,get:function(){return r}})},5128:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"getReactStitchedError\",{enumerable:!0,get:function(){return c}});let n=r(8229),o=n._(r(2115)),u=n._(r(5807)),l=r(9148),a=\"react-stack-bottom-frame\",i=RegExp(\"(at \"+a+\" )|(\"+a+\"\\\\@)\");function c(e){let t=(0,u.default)(e),r=t&&e.stack||\"\",n=t?e.message:\"\",a=r.split(\"\\n\"),c=a.findIndex(e=>i.test(e)),s=c>=0?a.slice(0,c).join(\"\\n\"):r,f=Object.defineProperty(Error(n),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0});return Object.assign(f,e),(0,l.copyNextErrorCode)(e,f),f.stack=s,function(e){if(!o.default.captureOwnerStack)return;let t=e.stack||\"\",r=o.default.captureOwnerStack();r&&!1===t.endsWith(r)&&(e.stack=t+=r)}(f),f}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5155:(e,t,r)=>{\"use strict\";e.exports=r(6897)},5169:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{formatConsoleArgs:function(){return u},parseConsoleArgs:function(){return l}});let n=r(8229)._(r(5807));function o(e,t){switch(typeof e){case\"object\":if(null===e)return\"null\";if(Array.isArray(e)){let r=\"[\";if(t<1)for(let n=0;n<e.length;n++)\"[\"!==r&&(r+=\",\"),Object.prototype.hasOwnProperty.call(e,n)&&(r+=o(e[n],t+1));else r+=e.length>0?\"...\":\"\";return r+\"]\"}{if(e instanceof Error)return e+\"\";let r=Object.keys(e),n=\"{\";if(t<1)for(let u=0;u<r.length;u++){let l=r[u],a=Object.getOwnPropertyDescriptor(e,\"key\");if(a&&!a.get&&!a.set){let e=JSON.stringify(l);e!=='\"'+l+'\"'?n+=e+\": \":n+=l+\": \",n+=o(a.value,t+1)}}else n+=r.length>0?\"...\":\"\";return n+\"}\"}case\"string\":return JSON.stringify(e);default:return String(e)}}function u(e){let t,r;\"string\"==typeof e[0]?(t=e[0],r=1):(t=\"\",r=0);let n=\"\",u=!1;for(let l=0;l<t.length;++l){let a=t[l];if(\"%\"!==a||l===t.length-1||r>=e.length){n+=a;continue}let i=t[++l];switch(i){case\"c\":n=u?\"\"+n+\"]\":\"[\"+n,u=!u,r++;break;case\"O\":case\"o\":n+=o(e[r++],0);break;case\"d\":case\"i\":n+=parseInt(e[r++],10);break;case\"f\":n+=parseFloat(e[r++]);break;case\"s\":n+=String(e[r++]);break;default:n+=\"%\"+i}}for(;r<e.length;r++)n+=(r>0?\" \":\"\")+o(e[r],0);return n}function l(e){if(e.length>3&&\"string\"==typeof e[0]&&e[0].startsWith(\"%c%s%c \")&&\"string\"==typeof e[1]&&\"string\"==typeof e[2]&&\"string\"==typeof e[3]){let t=e[2],r=e[4];return{environmentName:t.trim(),error:(0,n.default)(r)?r:null}}return{environmentName:null,error:null}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5209:(e,t)=>{\"use strict\";function r(e){return Object.prototype.toString.call(e)}function n(e){if(\"[object Object]\"!==r(e))return!1;let t=Object.getPrototypeOf(e);return null===t||t.hasOwnProperty(\"isPrototypeOf\")}Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{getObjectClassLabel:function(){return r},isPlainObject:function(){return n}})},5227:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{AppRouterContext:function(){return o},GlobalLayoutRouterContext:function(){return l},LayoutRouterContext:function(){return u},MissingSlotContext:function(){return i},TemplateContext:function(){return a}});let n=r(8229)._(r(2115)),o=n.default.createContext(null),u=n.default.createContext(null),l=n.default.createContext(null),a=n.default.createContext(null),i=n.default.createContext(new Set)},5262:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{BailoutToCSRError:function(){return n},isBailoutToCSRError:function(){return o}});let r=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\";class n extends Error{constructor(e){super(\"Bail out to client-side rendering: \"+e),this.reason=e,this.digest=r}}function o(e){return\"object\"==typeof e&&null!==e&&\"digest\"in e&&e.digest===r}},5415:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),r(5449);let n=r(6188),o=r(1408);(0,n.appBootstrap)(()=>{let{hydrate:e}=r(4486);r(6158),r(7555),e(o)}),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5444:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{handleClientError:function(){return v},handleConsoleError:function(){return g},handleGlobalErrors:function(){return R},useErrorHandler:function(){return m}});let n=r(8229),o=r(2115),u=r(3506),l=r(2858),a=r(9771),i=r(5169),c=n._(r(5807)),s=r(6043),f=r(3950),d=r(5128),p=globalThis.queueMicrotask||(e=>Promise.resolve().then(e)),h=[],y=[],_=[],b=[];function g(e,t){let r,{environmentName:n}=(0,i.parseConsoleArgs)(t);for(let o of(r=(0,c.default)(e)?(0,s.createConsoleError)(e,n):(0,s.createConsoleError)((0,i.formatConsoleArgs)(t),n),r=(0,d.getReactStitchedError)(r),(0,a.storeHydrationErrorStateFromConsoleArgs)(...t),(0,u.attachHydrationErrorState)(r),(0,f.enqueueConsecutiveDedupedError)(h,r),y))p(()=>{o(r)})}function v(e){let t;for(let r of(t=(0,c.default)(e)?e:Object.defineProperty(Error(e+\"\"),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0}),t=(0,d.getReactStitchedError)(t),(0,u.attachHydrationErrorState)(t),(0,f.enqueueConsecutiveDedupedError)(h,t),y))p(()=>{r(t)})}function m(e,t){(0,o.useEffect)(()=>(h.forEach(e),_.forEach(t),y.push(e),b.push(t),()=>{y.splice(y.indexOf(e),1),b.splice(b.indexOf(t),1),h.splice(0,h.length),_.splice(0,_.length)}),[e,t])}function E(e){if((0,l.isNextRouterError)(e.error))return e.preventDefault(),!1;e.error&&v(e.error)}function O(e){let t=null==e?void 0:e.reason;if((0,l.isNextRouterError)(t))return void e.preventDefault();let r=t;for(let e of(r&&!(0,c.default)(r)&&(r=Object.defineProperty(Error(r+\"\"),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0})),_.push(r),b))e(r)}function R(){try{Error.stackTraceLimit=50}catch(e){}window.addEventListener(\"error\",E),window.addEventListener(\"unhandledrejection\",O)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5449:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),r(3668);let n=r(589);{let e=r.u;r.u=function(){for(var t=arguments.length,r=Array(t),o=0;o<t;o++)r[o]=arguments[o];return(0,n.encodeURIPath)(e(...r))}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5542:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"refreshReducer\",{enumerable:!0,get:function(){return h}});let n=r(8586),o=r(1139),u=r(7442),l=r(9234),a=r(3894),i=r(3507),c=r(4758),s=r(6158),f=r(6375),d=r(4108),p=r(4908);function h(e,t){let{origin:r}=t,h={},y=e.canonicalUrl,_=e.tree;h.preserveCustomHistoryState=!1;let b=(0,s.createEmptyCacheNode)(),g=(0,d.hasInterceptionRouteInCurrentTree)(e.tree);b.lazyData=(0,n.fetchServerResponse)(new URL(y,r),{flightRouterState:[_[0],_[1],_[2],\"refetch\"],nextUrl:g?e.nextUrl:null});let v=Date.now();return b.lazyData.then(async r=>{let{flightData:n,canonicalUrl:s}=r;if(\"string\"==typeof n)return(0,a.handleExternalUrl)(e,h,n,e.pushRef.pendingPush);for(let r of(b.lazyData=null,n)){let{tree:n,seedData:i,head:d,isRootRender:m}=r;if(!m)return console.log(\"REFRESH FAILED\"),e;let E=(0,u.applyRouterStatePatchToTree)([\"\"],_,n,e.canonicalUrl);if(null===E)return(0,f.handleSegmentMismatch)(e,t,n);if((0,l.isNavigatingToNewRootLayout)(_,E))return(0,a.handleExternalUrl)(e,h,y,e.pushRef.pendingPush);let O=s?(0,o.createHrefFromUrl)(s):void 0;if(s&&(h.canonicalUrl=O),null!==i){let e=i[1],t=i[3];b.rsc=e,b.prefetchRsc=null,b.loading=t,(0,c.fillLazyItemsTillLeafWithHead)(v,b,void 0,n,i,d,void 0),h.prefetchCache=new Map}await (0,p.refreshInactiveParallelSegments)({navigatedAt:v,state:e,updatedTree:E,updatedCache:b,includeNextUrl:g,canonicalUrl:h.canonicalUrl||e.canonicalUrl}),h.cache=b,h.patchedTree=E,_=E}return(0,i.handleMutable)(e,h)},()=>e)}r(6005),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5563:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{addSearchParamsToPageSegments:function(){return f},handleAliasedPrefetchEntry:function(){return s}});let n=r(8291),o=r(6158),u=r(7442),l=r(1139),a=r(5637),i=r(3118),c=r(3507);function s(e,t,r,s,d){let p,h=t.tree,y=t.cache,_=(0,l.createHrefFromUrl)(s);if(\"string\"==typeof r)return!1;for(let t of r){if(!function e(t){if(!t)return!1;let r=t[2];if(t[3])return!0;for(let t in r)if(e(r[t]))return!0;return!1}(t.seedData))continue;let r=t.tree;r=f(r,Object.fromEntries(s.searchParams));let{seedData:l,isRootRender:c,pathToSegment:d}=t,b=[\"\",...d];r=f(r,Object.fromEntries(s.searchParams));let g=(0,u.applyRouterStatePatchToTree)(b,h,r,_),v=(0,o.createEmptyCacheNode)();if(c&&l){let t=l[1];v.loading=l[3],v.rsc=t,function e(t,r,o,u,l){if(0!==Object.keys(u[1]).length)for(let i in u[1]){let c,s=u[1][i],f=s[0],d=(0,a.createRouterCacheKey)(f),p=null!==l&&void 0!==l[2][i]?l[2][i]:null;if(null!==p){let e=p[1],r=p[3];c={lazyData:null,rsc:f.includes(n.PAGE_SEGMENT_KEY)?null:e,prefetchRsc:null,head:null,prefetchHead:null,parallelRoutes:new Map,loading:r,navigatedAt:t}}else c={lazyData:null,rsc:null,prefetchRsc:null,head:null,prefetchHead:null,parallelRoutes:new Map,loading:null,navigatedAt:-1};let h=r.parallelRoutes.get(i);h?h.set(d,c):r.parallelRoutes.set(i,new Map([[d,c]])),e(t,c,o,s,p)}}(e,v,y,r,l)}else v.rsc=y.rsc,v.prefetchRsc=y.prefetchRsc,v.loading=y.loading,v.parallelRoutes=new Map(y.parallelRoutes),(0,i.fillCacheWithNewSubTreeDataButOnlyLoading)(e,v,y,t);g&&(h=g,y=v,p=!0)}return!!p&&(d.patchedTree=h,d.cache=y,d.canonicalUrl=_,d.hashFragment=s.hash,(0,c.handleMutable)(t,d))}function f(e,t){let[r,o,...u]=e;if(r.includes(n.PAGE_SEGMENT_KEY))return[(0,n.addSearchParamsIfPageSegment)(r,t),o,...u];let l={};for(let[e,r]of Object.entries(o))l[e]=f(r,t);return[r,l,...u]}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5567:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"shouldHardNavigate\",{enumerable:!0,get:function(){return function e(t,r){let[u,l]=r,[a,i]=t;return(0,o.matchSegment)(a,u)?!(t.length<=2)&&e((0,n.getNextFlightSegmentPath)(t),l[i]):!!Array.isArray(a)}}});let n=r(2561),o=r(1127);(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5618:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{ReadonlyURLSearchParams:function(){return s},RedirectType:function(){return o.RedirectType},forbidden:function(){return l.forbidden},notFound:function(){return u.notFound},permanentRedirect:function(){return n.permanentRedirect},redirect:function(){return n.redirect},unauthorized:function(){return a.unauthorized},unstable_rethrow:function(){return i.unstable_rethrow}});let n=r(6825),o=r(2210),u=r(8527),l=r(3678),a=r(9187),i=r(7599);class c extends Error{constructor(){super(\"Method unavailable on `ReadonlyURLSearchParams`. Read more: https://nextjs.org/docs/app/api-reference/functions/use-search-params#updating-searchparams\")}}class s extends URLSearchParams{append(){throw new c}delete(){throw new c}set(){throw new c}sort(){throw new c}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5624:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{getAppBuildId:function(){return o},setAppBuildId:function(){return n}});let r=\"\";function n(e){r=e}function o(){return r}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5637:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"createRouterCacheKey\",{enumerable:!0,get:function(){return o}});let n=r(8291);function o(e,t){return(void 0===t&&(t=!1),Array.isArray(e))?e[0]+\"|\"+e[1]+\"|\"+e[2]:t&&e.startsWith(n.PAGE_SEGMENT_KEY)?n.PAGE_SEGMENT_KEY:e}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5807:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{default:function(){return o},getProperError:function(){return u}});let n=r(5209);function o(e){return\"object\"==typeof e&&null!==e&&\"name\"in e&&\"message\"in e}function u(e){return o(e)?e:Object.defineProperty(Error((0,n.isPlainObject)(e)?function(e){let t=new WeakSet;return JSON.stringify(e,(e,r)=>{if(\"object\"==typeof r&&null!==r){if(t.has(r))return\"[Circular]\";t.add(r)}return r})}(e):e+\"\"),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0})}},5929:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"addBasePath\",{enumerable:!0,get:function(){return u}});let n=r(4074),o=r(214);function u(e,t){return(0,o.normalizePathTrailingSlash)((0,n.addPathPrefix)(e,\"\"))}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5952:(e,t,r)=>{\"use strict\";function n(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw TypeError(\"attempted to use private field on non-instance\");return e}r.r(t),r.d(t,{_:()=>n})},6002:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),(0,r(6905).patchConsoleError)(),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6005:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{NavigationResultTag:function(){return f},PrefetchPriority:function(){return d},cancelPrefetchTask:function(){return i},createCacheKey:function(){return s},getCurrentCacheVersion:function(){return l},navigate:function(){return o},prefetch:function(){return n},reschedulePrefetchTask:function(){return c},revalidateEntireCache:function(){return u},schedulePrefetchTask:function(){return a}});let r=()=>{throw Object.defineProperty(Error(\"Segment Cache experiment is not enabled. This is a bug in Next.js.\"),\"__NEXT_ERROR_CODE\",{value:\"E654\",enumerable:!1,configurable:!0})},n=r,o=r,u=r,l=r,a=r,i=r,c=r,s=r;var f=function(e){return e[e.MPA=0]=\"MPA\",e[e.Success=1]=\"Success\",e[e.NoOp=2]=\"NoOp\",e[e.Async=3]=\"Async\",e}({}),d=function(e){return e[e.Intent=2]=\"Intent\",e[e.Default=1]=\"Default\",e[e.Background=0]=\"Background\",e}({});(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6043:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{createConsoleError:function(){return o},getConsoleErrorType:function(){return l},isConsoleError:function(){return u}});let r=Symbol.for(\"next.console.error.digest\"),n=Symbol.for(\"next.console.error.type\");function o(e,t){let o=\"string\"==typeof e?Object.defineProperty(Error(e),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0}):e;return o[r]=\"NEXT_CONSOLE_ERROR\",o[n]=\"string\"==typeof e?\"string\":\"error\",t&&!o.environmentName&&(o.environmentName=t),o}let u=e=>e&&\"NEXT_CONSOLE_ERROR\"===e[r],l=e=>e[n];(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6158:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{createEmptyCacheNode:function(){return w},createPrefetchURL:function(){return S},default:function(){return N},isExternalURL:function(){return T}});let n=r(6966),o=r(5155),u=n._(r(2115)),l=r(5227),a=r(9818),i=r(1139),c=r(886),s=r(1027),f=n._(r(6614)),d=r(774),p=r(5929),h=r(7760),y=r(686),_=r(2691),b=r(1822),g=r(4882),v=r(7102),m=r(8946),E=r(8836),O=r(6634),R=r(6825),P=r(2210);r(4930);let j={};function T(e){return e.origin!==window.location.origin}function S(e){let t;if((0,d.isBot)(window.navigator.userAgent))return null;try{t=new URL((0,p.addBasePath)(e),window.location.href)}catch(t){throw Object.defineProperty(Error(\"Cannot prefetch '\"+e+\"' because it cannot be converted to a URL.\"),\"__NEXT_ERROR_CODE\",{value:\"E234\",enumerable:!1,configurable:!0})}return T(t)?null:t}function M(e){let{appRouterState:t}=e;return(0,u.useInsertionEffect)(()=>{let{tree:e,pushRef:r,canonicalUrl:n}=t,o={...r.preserveCustomHistoryState?window.history.state:{},__NA:!0,__PRIVATE_NEXTJS_INTERNALS_TREE:e};r.pendingPush&&(0,i.createHrefFromUrl)(new URL(window.location.href))!==n?(r.pendingPush=!1,window.history.pushState(o,\"\",n)):window.history.replaceState(o,\"\",n)},[t]),(0,u.useEffect)(()=>{},[t.nextUrl,t.tree]),null}function w(){return{lazyData:null,rsc:null,prefetchRsc:null,head:null,prefetchHead:null,parallelRoutes:new Map,loading:null,navigatedAt:-1}}function C(e){null==e&&(e={});let t=window.history.state,r=null==t?void 0:t.__NA;r&&(e.__NA=r);let n=null==t?void 0:t.__PRIVATE_NEXTJS_INTERNALS_TREE;return n&&(e.__PRIVATE_NEXTJS_INTERNALS_TREE=n),e}function x(e){let{headCacheNode:t}=e,r=null!==t?t.head:null,n=null!==t?t.prefetchHead:null,o=null!==n?n:r;return(0,u.useDeferredValue)(r,o)}function A(e){let t,{actionQueue:r,assetPrefix:n,globalError:i}=e,d=(0,s.useActionQueue)(r),{canonicalUrl:p}=d,{searchParams:E,pathname:T}=(0,u.useMemo)(()=>{let e=new URL(p,window.location.href);return{searchParams:e.searchParams,pathname:(0,v.hasBasePath)(e.pathname)?(0,g.removeBasePath)(e.pathname):e.pathname}},[p]);(0,u.useEffect)(()=>{function e(e){var t;e.persisted&&(null==(t=window.history.state)?void 0:t.__PRIVATE_NEXTJS_INTERNALS_TREE)&&(j.pendingMpaPath=void 0,(0,s.dispatchAppRouterAction)({type:a.ACTION_RESTORE,url:new URL(window.location.href),tree:window.history.state.__PRIVATE_NEXTJS_INTERNALS_TREE}))}return window.addEventListener(\"pageshow\",e),()=>{window.removeEventListener(\"pageshow\",e)}},[]),(0,u.useEffect)(()=>{function e(e){let t=\"reason\"in e?e.reason:e.error;if((0,P.isRedirectError)(t)){e.preventDefault();let r=(0,R.getURLFromRedirectError)(t);(0,R.getRedirectTypeFromError)(t)===P.RedirectType.push?O.publicAppRouterInstance.push(r,{}):O.publicAppRouterInstance.replace(r,{})}}return window.addEventListener(\"error\",e),window.addEventListener(\"unhandledrejection\",e),()=>{window.removeEventListener(\"error\",e),window.removeEventListener(\"unhandledrejection\",e)}},[]);let{pushRef:S}=d;if(S.mpaNavigation){if(j.pendingMpaPath!==p){let e=window.location;S.pendingPush?e.assign(p):e.replace(p),j.pendingMpaPath=p}(0,u.use)(b.unresolvedThenable)}(0,u.useEffect)(()=>{let e=window.history.pushState.bind(window.history),t=window.history.replaceState.bind(window.history),r=e=>{var t;let r=window.location.href,n=null==(t=window.history.state)?void 0:t.__PRIVATE_NEXTJS_INTERNALS_TREE;(0,u.startTransition)(()=>{(0,s.dispatchAppRouterAction)({type:a.ACTION_RESTORE,url:new URL(null!=e?e:r,r),tree:n})})};window.history.pushState=function(t,n,o){return(null==t?void 0:t.__NA)||(null==t?void 0:t._N)||(t=C(t),o&&r(o)),e(t,n,o)},window.history.replaceState=function(e,n,o){return(null==e?void 0:e.__NA)||(null==e?void 0:e._N)||(e=C(e),o&&r(o)),t(e,n,o)};let n=e=>{if(e.state){if(!e.state.__NA)return void window.location.reload();(0,u.startTransition)(()=>{(0,O.dispatchTraverseAction)(window.location.href,e.state.__PRIVATE_NEXTJS_INTERNALS_TREE)})}};return window.addEventListener(\"popstate\",n),()=>{window.history.pushState=e,window.history.replaceState=t,window.removeEventListener(\"popstate\",n)}},[]);let{cache:w,tree:A,nextUrl:N,focusAndScrollRef:D}=d,U=(0,u.useMemo)(()=>(0,_.findHeadInCache)(w,A[1]),[w,A]),k=(0,u.useMemo)(()=>(0,m.getSelectedParams)(A),[A]),I=(0,u.useMemo)(()=>({parentTree:A,parentCacheNode:w,parentSegmentPath:null,url:p}),[A,w,p]),H=(0,u.useMemo)(()=>({tree:A,focusAndScrollRef:D,nextUrl:N}),[A,D,N]);if(null!==U){let[e,r]=U;t=(0,o.jsx)(x,{headCacheNode:e},r)}else t=null;let F=(0,o.jsxs)(y.RedirectBoundary,{children:[t,w.rsc,(0,o.jsx)(h.AppRouterAnnouncer,{tree:A})]});return F=(0,o.jsx)(f.ErrorBoundary,{errorComponent:i[0],errorStyles:i[1],children:F}),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(M,{appRouterState:d}),(0,o.jsx)(L,{}),(0,o.jsx)(c.PathParamsContext.Provider,{value:k,children:(0,o.jsx)(c.PathnameContext.Provider,{value:T,children:(0,o.jsx)(c.SearchParamsContext.Provider,{value:E,children:(0,o.jsx)(l.GlobalLayoutRouterContext.Provider,{value:H,children:(0,o.jsx)(l.AppRouterContext.Provider,{value:O.publicAppRouterInstance,children:(0,o.jsx)(l.LayoutRouterContext.Provider,{value:I,children:F})})})})})})]})}function N(e){let{actionQueue:t,globalErrorComponentAndStyles:[r,n],assetPrefix:u}=e;return(0,E.useNavFailureHandler)(),(0,o.jsx)(f.ErrorBoundary,{errorComponent:f.default,children:(0,o.jsx)(A,{actionQueue:t,assetPrefix:u,globalError:[r,n]})})}let D=new Set,U=new Set;function L(){let[,e]=u.default.useState(0),t=D.size;return(0,u.useEffect)(()=>{let r=()=>e(e=>e+1);return U.add(r),t!==D.size&&r(),()=>{U.delete(r)}},[t,e]),[...D].map((e,t)=>(0,o.jsx)(\"link\",{rel:\"stylesheet\",href:\"\"+e,precedence:\"next\"},t))}globalThis._N_E_STYLE_LOAD=function(e){let t=D.size;return D.add(e),D.size!==t&&U.forEach(e=>e()),Promise.resolve()},(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6188:(e,t)=>{\"use strict\";function r(e){var t,r;t=self.__next_s,r=()=>{e()},t&&t.length?t.reduce((e,t)=>{let[r,n]=t;return e.then(()=>new Promise((e,t)=>{let o=document.createElement(\"script\");if(n)for(let e in n)\"children\"!==e&&o.setAttribute(e,n[e]);r?(o.src=r,o.onload=()=>e(),o.onerror=t):n&&(o.innerHTML=n.children,setTimeout(e)),document.head.appendChild(o)}))},Promise.resolve()).catch(e=>{console.error(e)}).then(()=>{r()}):r()}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"appBootstrap\",{enumerable:!0,get:function(){return r}}),window.next={version:\"15.3.4\",appDir:!0},(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6206:(e,t,r)=>{\"use strict\";e.exports=r(2223)},6361:(e,t)=>{\"use strict\";function r(e){return e.replace(/\\/$/,\"\")||\"/\"}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"removeTrailingSlash\",{enumerable:!0,get:function(){return r}})},6375:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"handleSegmentMismatch\",{enumerable:!0,get:function(){return o}});let n=r(3894);function o(e,t,r){return(0,n.handleExternalUrl)(e,{},e.canonicalUrl,!0)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6420:(e,t,r)=>{\"use strict\";r.r(t),r.d(t,{_:()=>o});var n=0;function o(e){return\"__private_\"+n+++\"_\"+e}},6446:()=>{\"trimStart\"in String.prototype||(String.prototype.trimStart=String.prototype.trimLeft),\"trimEnd\"in String.prototype||(String.prototype.trimEnd=String.prototype.trimRight),\"description\"in Symbol.prototype||Object.defineProperty(Symbol.prototype,\"description\",{configurable:!0,get:function(){var e=/\\((.*)\\)/.exec(this.toString());return e?e[1]:void 0}}),Array.prototype.flat||(Array.prototype.flat=function(e,t){return t=this.concat.apply([],this),e>1&&t.some(Array.isArray)?t.flat(e-1):t},Array.prototype.flatMap=function(e,t){return this.map(e,t).flat()}),Promise.prototype.finally||(Promise.prototype.finally=function(e){if(\"function\"!=typeof e)return this.then(e,e);var t=this.constructor||Promise;return this.then(function(r){return t.resolve(e()).then(function(){return r})},function(r){return t.resolve(e()).then(function(){throw r})})}),Object.fromEntries||(Object.fromEntries=function(e){return Array.from(e).reduce(function(e,t){return e[t[0]]=t[1],e},{})}),Array.prototype.at||(Array.prototype.at=function(e){var t=Math.trunc(e)||0;if(t<0&&(t+=this.length),!(t<0||t>=this.length))return this[t]}),Object.hasOwn||(Object.hasOwn=function(e,t){if(null==e)throw TypeError(\"Cannot convert undefined or null to object\");return Object.prototype.hasOwnProperty.call(Object(e),t)}),\"canParse\"in URL||(URL.canParse=function(e,t){try{return new URL(e,t),!0}catch(e){return!1}})},6465:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{NEXTJS_HYDRATION_ERROR_LINK:function(){return i},REACT_HYDRATION_ERROR_LINK:function(){return a},getDefaultHydrationErrorMessage:function(){return c},getHydrationErrorStackInfo:function(){return h},isHydrationError:function(){return s},isReactHydrationErrorMessage:function(){return f},testReactHydrationWarning:function(){return p}});let n=r(8229)._(r(5807)),o=/hydration failed|while hydrating|content does not match|did not match|HTML didn't match|text didn't match/i,u=\"Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\",l=[u,\"Hydration failed because the server rendered text didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\",\"A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\"],a=\"https://react.dev/link/hydration-mismatch\",i=\"https://nextjs.org/docs/messages/react-hydration-error\",c=()=>u;function s(e){return(0,n.default)(e)&&o.test(e.message)}function f(e){return l.some(t=>e.startsWith(t))}let d=[/^In HTML, (.+?) cannot be a child of <(.+?)>\\.(.*)\\nThis will cause a hydration error\\.(.*)/,/^In HTML, (.+?) cannot be a descendant of <(.+?)>\\.\\nThis will cause a hydration error\\.(.*)/,/^In HTML, text nodes cannot be a child of <(.+?)>\\.\\nThis will cause a hydration error\\./,/^In HTML, whitespace text nodes cannot be a child of <(.+?)>\\. Make sure you don't have any extra whitespace between tags on each line of your source code\\.\\nThis will cause a hydration error\\./,/^Expected server HTML to contain a matching <(.+?)> in <(.+?)>\\.(.*)/,/^Did not expect server HTML to contain a <(.+?)> in <(.+?)>\\.(.*)/,/^Expected server HTML to contain a matching text node for \"(.+?)\" in <(.+?)>\\.(.*)/,/^Did not expect server HTML to contain the text node \"(.+?)\" in <(.+?)>\\.(.*)/,/^Text content did not match\\. Server: \"(.+?)\" Client: \"(.+?)\"(.*)/];function p(e){return\"string\"==typeof e&&!!e&&(e.startsWith(\"Warning: \")&&(e=e.slice(9)),d.some(t=>t.test(e)))}function h(e){let t=p(e=(e=e.replace(/^Error: /,\"\")).replace(\"Warning: \",\"\"));if(!f(e)&&!t)return{message:null,stack:e,diff:\"\"};if(t){let[t,r]=e.split(\"\\n\\n\");return{message:t.trim(),stack:\"\",diff:(r||\"\").trim()}}let r=e.indexOf(\"\\n\"),[n,o]=(e=e.slice(r+1).trim()).split(\"\"+a),u=n.trim();if(!o||!(o.length>1))return{message:u,stack:o};{let e=[],t=[];return o.split(\"\\n\").forEach(r=>{\"\"!==r.trim()&&(r.trim().startsWith(\"at \")?e.push(r):t.push(r))}),{message:u,diff:t.join(\"\\n\"),stack:e.join(\"\\n\")}}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6494:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{HTTPAccessErrorStatus:function(){return r},HTTP_ERROR_FALLBACK_ERROR_CODE:function(){return o},getAccessFallbackErrorTypeByStatus:function(){return a},getAccessFallbackHTTPStatus:function(){return l},isHTTPAccessFallbackError:function(){return u}});let r={NOT_FOUND:404,FORBIDDEN:403,UNAUTHORIZED:401},n=new Set(Object.values(r)),o=\"NEXT_HTTP_ERROR_FALLBACK\";function u(e){if(\"object\"!=typeof e||null===e||!(\"digest\"in e)||\"string\"!=typeof e.digest)return!1;let[t,r]=e.digest.split(\";\");return t===o&&n.has(Number(r))}function l(e){return Number(e.digest.split(\";\")[1])}function a(e){switch(e){case 401:return\"unauthorized\";case 403:return\"forbidden\";case 404:return\"not-found\";default:return}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6614:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{ErrorBoundary:function(){return h},ErrorBoundaryHandler:function(){return f},GlobalError:function(){return d},default:function(){return p}});let n=r(8229),o=r(5155),u=n._(r(2115)),l=r(9921),a=r(2858);r(8836);let i=void 0,c={error:{fontFamily:'system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"',height:\"100vh\",textAlign:\"center\",display:\"flex\",flexDirection:\"column\",alignItems:\"center\",justifyContent:\"center\"},text:{fontSize:\"14px\",fontWeight:400,lineHeight:\"28px\",margin:\"0 8px\"}};function s(e){let{error:t}=e;if(i){let e=i.getStore();if((null==e?void 0:e.isRevalidate)||(null==e?void 0:e.isStaticGeneration))throw console.error(t),t}return null}class f extends u.default.Component{static getDerivedStateFromError(e){if((0,a.isNextRouterError)(e))throw e;return{error:e}}static getDerivedStateFromProps(e,t){let{error:r}=t;return e.pathname!==t.previousPathname&&t.error?{error:null,previousPathname:e.pathname}:{error:t.error,previousPathname:e.pathname}}render(){return this.state.error?(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s,{error:this.state.error}),this.props.errorStyles,this.props.errorScripts,(0,o.jsx)(this.props.errorComponent,{error:this.state.error,reset:this.reset})]}):this.props.children}constructor(e){super(e),this.reset=()=>{this.setState({error:null})},this.state={error:null,previousPathname:this.props.pathname}}}function d(e){let{error:t}=e,r=null==t?void 0:t.digest;return(0,o.jsxs)(\"html\",{id:\"__next_error__\",children:[(0,o.jsx)(\"head\",{}),(0,o.jsxs)(\"body\",{children:[(0,o.jsx)(s,{error:t}),(0,o.jsx)(\"div\",{style:c.error,children:(0,o.jsxs)(\"div\",{children:[(0,o.jsxs)(\"h2\",{style:c.text,children:[\"Application error: a \",r?\"server\":\"client\",\"-side exception has occurred while loading \",window.location.hostname,\" (see the\",\" \",r?\"server logs\":\"browser console\",\" for more information).\"]}),r?(0,o.jsx)(\"p\",{style:c.text,children:\"Digest: \"+r}):null]})})]})]})}let p=d;function h(e){let{errorComponent:t,errorStyles:r,errorScripts:n,children:u}=e,a=(0,l.useUntrackedPathname)();return t?(0,o.jsx)(f,{pathname:a,errorComponent:t,errorStyles:r,errorScripts:n,children:u}):(0,o.jsx)(o.Fragment,{children:u})}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6634:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{createMutableActionQueue:function(){return y},dispatchNavigateAction:function(){return g},dispatchTraverseAction:function(){return v},getCurrentAppRouterState:function(){return _},publicAppRouterInstance:function(){return m}});let n=r(9818),o=r(9726),u=r(2115),l=r(5122);r(6005);let a=r(1027),i=r(5929),c=r(6158),s=r(9154),f=r(4930);function d(e,t){null!==e.pending&&(e.pending=e.pending.next,null!==e.pending?p({actionQueue:e,action:e.pending,setState:t}):e.needsRefresh&&(e.needsRefresh=!1,e.dispatch({type:n.ACTION_REFRESH,origin:window.location.origin},t)))}async function p(e){let{actionQueue:t,action:r,setState:n}=e,o=t.state;t.pending=r;let u=r.payload,a=t.action(o,u);function i(e){r.discarded||(t.state=e,d(t,n),r.resolve(e))}(0,l.isThenable)(a)?a.then(i,e=>{d(t,n),r.reject(e)}):i(a)}let h=null;function y(e,t){let r={state:e,dispatch:(e,t)=>(function(e,t,r){let o={resolve:r,reject:()=>{}};if(t.type!==n.ACTION_RESTORE){let e=new Promise((e,t)=>{o={resolve:e,reject:t}});(0,u.startTransition)(()=>{r(e)})}let l={payload:t,next:null,resolve:o.resolve,reject:o.reject};null===e.pending?(e.last=l,p({actionQueue:e,action:l,setState:r})):t.type===n.ACTION_NAVIGATE||t.type===n.ACTION_RESTORE?(e.pending.discarded=!0,l.next=e.pending.next,e.pending.payload.type===n.ACTION_SERVER_ACTION&&(e.needsRefresh=!0),p({actionQueue:e,action:l,setState:r})):(null!==e.last&&(e.last.next=l),e.last=l)})(r,e,t),action:async(e,t)=>(0,o.reducer)(e,t),pending:null,last:null,onRouterTransitionStart:null!==t&&\"function\"==typeof t.onRouterTransitionStart?t.onRouterTransitionStart:null};if(null!==h)throw Object.defineProperty(Error(\"Internal Next.js Error: createMutableActionQueue was called more than once\"),\"__NEXT_ERROR_CODE\",{value:\"E624\",enumerable:!1,configurable:!0});return h=r,r}function _(){return null!==h?h.state:null}function b(){return null!==h?h.onRouterTransitionStart:null}function g(e,t,r,o){let u=new URL((0,i.addBasePath)(e),location.href);(0,f.setLinkForCurrentNavigation)(o);let l=b();null!==l&&l(e,t),(0,a.dispatchAppRouterAction)({type:n.ACTION_NAVIGATE,url:u,isExternalUrl:(0,c.isExternalURL)(u),locationSearch:location.search,shouldScroll:r,navigateType:t,allowAliasing:!0})}function v(e,t){let r=b();null!==r&&r(e,\"traverse\"),(0,a.dispatchAppRouterAction)({type:n.ACTION_RESTORE,url:new URL(e),tree:t})}let m={back:()=>window.history.back(),forward:()=>window.history.forward(),prefetch:(e,t)=>{let r=function(){if(null===h)throw Object.defineProperty(Error(\"Internal Next.js error: Router action dispatched before initialization.\"),\"__NEXT_ERROR_CODE\",{value:\"E668\",enumerable:!1,configurable:!0});return h}(),o=(0,c.createPrefetchURL)(e);if(null!==o){var u;(0,s.prefetchReducer)(r.state,{type:n.ACTION_PREFETCH,url:o,kind:null!=(u=null==t?void 0:t.kind)?u:n.PrefetchKind.FULL})}},replace:(e,t)=>{(0,u.startTransition)(()=>{var r;g(e,\"replace\",null==(r=null==t?void 0:t.scroll)||r,null)})},push:(e,t)=>{(0,u.startTransition)(()=>{var r;g(e,\"push\",null==(r=null==t?void 0:t.scroll)||r,null)})},refresh:()=>{(0,u.startTransition)(()=>{(0,a.dispatchAppRouterAction)({type:n.ACTION_REFRESH,origin:window.location.origin})})},hmrRefresh:()=>{throw Object.defineProperty(Error(\"hmrRefresh can only be used in development mode. Please use refresh instead.\"),\"__NEXT_ERROR_CODE\",{value:\"E485\",enumerable:!1,configurable:!0})}};window.next&&(window.next.router=m),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6698:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"onRecoverableError\",{enumerable:!0,get:function(){return i}});let n=r(8229),o=r(5262),u=r(1646),l=r(5128),a=n._(r(5807)),i=(e,t)=>{let r=(0,a.default)(e)&&\"cause\"in e?e.cause:e,n=(0,l.getReactStitchedError)(r);(0,o.isBailoutToCSRError)(r)||(0,u.reportGlobalError)(n)};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6825:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{getRedirectError:function(){return l},getRedirectStatusCodeFromError:function(){return f},getRedirectTypeFromError:function(){return s},getURLFromRedirectError:function(){return c},permanentRedirect:function(){return i},redirect:function(){return a}});let n=r(4420),o=r(2210),u=void 0;function l(e,t,r){void 0===r&&(r=n.RedirectStatusCode.TemporaryRedirect);let u=Object.defineProperty(Error(o.REDIRECT_ERROR_CODE),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0});return u.digest=o.REDIRECT_ERROR_CODE+\";\"+t+\";\"+e+\";\"+r+\";\",u}function a(e,t){var r;throw null!=t||(t=(null==u||null==(r=u.getStore())?void 0:r.isAction)?o.RedirectType.push:o.RedirectType.replace),l(e,t,n.RedirectStatusCode.TemporaryRedirect)}function i(e,t){throw void 0===t&&(t=o.RedirectType.replace),l(e,t,n.RedirectStatusCode.PermanentRedirect)}function c(e){return(0,o.isRedirectError)(e)?e.digest.split(\";\").slice(2,-2).join(\";\"):null}function s(e){if(!(0,o.isRedirectError)(e))throw Object.defineProperty(Error(\"Not a redirect error\"),\"__NEXT_ERROR_CODE\",{value:\"E260\",enumerable:!1,configurable:!0});return e.digest.split(\";\",2)[1]}function f(e){if(!(0,o.isRedirectError)(e))throw Object.defineProperty(Error(\"Not a redirect error\"),\"__NEXT_ERROR_CODE\",{value:\"E260\",enumerable:!1,configurable:!0});return Number(e.digest.split(\";\").at(-2))}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6897:(e,t)=>{\"use strict\";var r=Symbol.for(\"react.transitional.element\");function n(e,t,n){var o=null;if(void 0!==n&&(o=\"\"+n),void 0!==t.key&&(o=\"\"+t.key),\"key\"in t)for(var u in n={},t)\"key\"!==u&&(n[u]=t[u]);else n=t;return{$$typeof:r,type:e,key:o,ref:void 0!==(t=n.ref)?t:null,props:n}}t.Fragment=Symbol.for(\"react.fragment\"),t.jsx=n,t.jsxs=n},6905:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{originConsoleError:function(){return o},patchConsoleError:function(){return u}}),r(8229),r(5807);let n=r(2858);r(5444),r(5169);let o=globalThis.console.error;function u(){window.console.error=function(){let e;for(var t=arguments.length,r=Array(t),u=0;u<t;u++)r[u]=arguments[u];e=r[0],(0,n.isNextRouterError)(e)||o.apply(window.console,r)}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6966:(e,t,r)=>{\"use strict\";function n(e){if(\"function\"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(n=function(e){return e?r:t})(e)}function o(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var r=n(t);if(r&&r.has(e))return r.get(e);var o={__proto__:null},u=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var l in e)if(\"default\"!==l&&Object.prototype.hasOwnProperty.call(e,l)){var a=u?Object.getOwnPropertyDescriptor(e,l):null;a&&(a.get||a.set)?Object.defineProperty(o,l,a):o[l]=e[l]}return o.default=e,r&&r.set(e,o),o}r.r(t),r.d(t,{_:()=>o})},6975:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"HTTPAccessFallbackBoundary\",{enumerable:!0,get:function(){return s}});let n=r(6966),o=r(5155),u=n._(r(2115)),l=r(9921),a=r(6494);r(3230);let i=r(5227);class c extends u.default.Component{componentDidCatch(){}static getDerivedStateFromError(e){if((0,a.isHTTPAccessFallbackError)(e))return{triggeredStatus:(0,a.getAccessFallbackHTTPStatus)(e)};throw e}static getDerivedStateFromProps(e,t){return e.pathname!==t.previousPathname&&t.triggeredStatus?{triggeredStatus:void 0,previousPathname:e.pathname}:{triggeredStatus:t.triggeredStatus,previousPathname:e.pathname}}render(){let{notFound:e,forbidden:t,unauthorized:r,children:n}=this.props,{triggeredStatus:u}=this.state,l={[a.HTTPAccessErrorStatus.NOT_FOUND]:e,[a.HTTPAccessErrorStatus.FORBIDDEN]:t,[a.HTTPAccessErrorStatus.UNAUTHORIZED]:r};if(u){let i=u===a.HTTPAccessErrorStatus.NOT_FOUND&&e,c=u===a.HTTPAccessErrorStatus.FORBIDDEN&&t,s=u===a.HTTPAccessErrorStatus.UNAUTHORIZED&&r;return i||c||s?(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(\"meta\",{name:\"robots\",content:\"noindex\"}),!1,l[u]]}):n}return n}constructor(e){super(e),this.state={triggeredStatus:void 0,previousPathname:e.pathname}}}function s(e){let{notFound:t,forbidden:r,unauthorized:n,children:a}=e,s=(0,l.useUntrackedPathname)(),f=(0,u.useContext)(i.MissingSlotContext);return t||r||n?(0,o.jsx)(c,{pathname:s,notFound:t,forbidden:r,unauthorized:n,missingSlots:f,children:a}):(0,o.jsx)(o.Fragment,{children:a})}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7102:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"hasBasePath\",{enumerable:!0,get:function(){return o}});let n=r(1747);function o(e){return(0,n.pathHasPrefix)(e,\"\")}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7197:(e,t,r)=>{\"use strict\";e.exports=r(9062)},7205:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"createRenderSearchParamsFromClient\",{enumerable:!0,get:function(){return n}});let n=r(8324).makeUntrackedExoticSearchParams;(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7276:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{normalizeAppPath:function(){return u},normalizeRscURL:function(){return l}});let n=r(9133),o=r(8291);function u(e){return(0,n.ensureLeadingSlash)(e.split(\"/\").reduce((e,t,r,n)=>!t||(0,o.isGroupSegment)(t)||\"@\"===t[0]||(\"page\"===t||\"route\"===t)&&r===n.length-1?e:e+\"/\"+t,\"\"))}function l(e){return e.replace(/\\.rsc($|\\?)/,\"$1\")}},7442:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"applyRouterStatePatchToTree\",{enumerable:!0,get:function(){return function e(t,r,n,i){let c,[s,f,d,p,h]=r;if(1===t.length){let e=a(r,n);return(0,l.addRefreshMarkerToActiveParallelSegments)(e,i),e}let[y,_]=t;if(!(0,u.matchSegment)(y,s))return null;if(2===t.length)c=a(f[_],n);else if(null===(c=e((0,o.getNextFlightSegmentPath)(t),f[_],n,i)))return null;let b=[t[0],{...f,[_]:c},d,p];return h&&(b[4]=!0),(0,l.addRefreshMarkerToActiveParallelSegments)(b,i),b}}});let n=r(8291),o=r(2561),u=r(1127),l=r(4908);function a(e,t){let[r,o]=e,[l,i]=t;if(l===n.DEFAULT_SEGMENT_KEY&&r!==n.DEFAULT_SEGMENT_KEY)return e;if((0,u.matchSegment)(r,l)){let t={};for(let e in o)void 0!==i[e]?t[e]=a(o[e],i[e]):t[e]=o[e];for(let e in i)t[e]||(t[e]=i[e]);let n=[r,t];return e[2]&&(n[2]=e[2]),e[3]&&(n[3]=e[3]),e[4]&&(n[4]=e[4]),n}return t}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7541:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{describeHasCheckingStringProperty:function(){return o},describeStringPropertyAccess:function(){return n},wellKnownProperties:function(){return u}});let r=/^[A-Za-z_$][A-Za-z0-9_$]*$/;function n(e,t){return r.test(t)?\"`\"+e+\".\"+t+\"`\":\"`\"+e+\"[\"+JSON.stringify(t)+\"]`\"}function o(e,t){let r=JSON.stringify(t);return\"`Reflect.has(\"+e+\", \"+r+\")`, `\"+r+\" in \"+e+\"`, or similar\"}let u=new Set([\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toString\",\"valueOf\",\"toLocaleString\",\"then\",\"catch\",\"finally\",\"status\",\"displayName\",\"toJSON\",\"$$typeof\",\"__esModule\"])},7555:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"default\",{enumerable:!0,get:function(){return S}});let n=r(8229),o=r(6966),u=r(5155),l=r(9818),a=o._(r(2115)),i=n._(r(7650)),c=r(5227),s=r(8586),f=r(1822),d=r(6614),p=r(1127),h=r(4189),y=r(686),_=r(6975),b=r(5637),g=r(4108),v=r(1027),m=i.default.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,E=[\"bottom\",\"height\",\"left\",\"right\",\"top\",\"width\",\"x\",\"y\"];function O(e,t){let r=e.getBoundingClientRect();return r.top>=0&&r.top<=t}class R extends a.default.Component{componentDidMount(){this.handlePotentialScroll()}componentDidUpdate(){this.props.focusAndScrollRef.apply&&this.handlePotentialScroll()}render(){return this.props.children}constructor(...e){super(...e),this.handlePotentialScroll=()=>{let{focusAndScrollRef:e,segmentPath:t}=this.props;if(e.apply){if(0!==e.segmentPaths.length&&!e.segmentPaths.some(e=>t.every((t,r)=>(0,p.matchSegment)(t,e[r]))))return;let r=null,n=e.hashFragment;if(n&&(r=function(e){var t;return\"top\"===e?document.body:null!=(t=document.getElementById(e))?t:document.getElementsByName(e)[0]}(n)),r||(r=(0,m.findDOMNode)(this)),!(r instanceof Element))return;for(;!(r instanceof HTMLElement)||function(e){if([\"sticky\",\"fixed\"].includes(getComputedStyle(e).position))return!0;let t=e.getBoundingClientRect();return E.every(e=>0===t[e])}(r);){if(null===r.nextElementSibling)return;r=r.nextElementSibling}e.apply=!1,e.hashFragment=null,e.segmentPaths=[],(0,h.handleSmoothScroll)(()=>{if(n)return void r.scrollIntoView();let e=document.documentElement,t=e.clientHeight;!O(r,t)&&(e.scrollTop=0,O(r,t)||r.scrollIntoView())},{dontForceLayout:!0,onlyHashChange:e.onlyHashChange}),e.onlyHashChange=!1,r.focus()}}}}function P(e){let{segmentPath:t,children:r}=e,n=(0,a.useContext)(c.GlobalLayoutRouterContext);if(!n)throw Object.defineProperty(Error(\"invariant global layout router not mounted\"),\"__NEXT_ERROR_CODE\",{value:\"E473\",enumerable:!1,configurable:!0});return(0,u.jsx)(R,{segmentPath:t,focusAndScrollRef:n.focusAndScrollRef,children:r})}function j(e){let{tree:t,segmentPath:r,cacheNode:n,url:o}=e,i=(0,a.useContext)(c.GlobalLayoutRouterContext);if(!i)throw Object.defineProperty(Error(\"invariant global layout router not mounted\"),\"__NEXT_ERROR_CODE\",{value:\"E473\",enumerable:!1,configurable:!0});let{tree:d}=i,h=null!==n.prefetchRsc?n.prefetchRsc:n.rsc,y=(0,a.useDeferredValue)(n.rsc,h),_=\"object\"==typeof y&&null!==y&&\"function\"==typeof y.then?(0,a.use)(y):y;if(!_){let e=n.lazyData;if(null===e){let t=function e(t,r){if(t){let[n,o]=t,u=2===t.length;if((0,p.matchSegment)(r[0],n)&&r[1].hasOwnProperty(o)){if(u){let t=e(void 0,r[1][o]);return[r[0],{...r[1],[o]:[t[0],t[1],t[2],\"refetch\"]}]}return[r[0],{...r[1],[o]:e(t.slice(2),r[1][o])}]}}return r}([\"\",...r],d),u=(0,g.hasInterceptionRouteInCurrentTree)(d),c=Date.now();n.lazyData=e=(0,s.fetchServerResponse)(new URL(o,location.origin),{flightRouterState:t,nextUrl:u?i.nextUrl:null}).then(e=>((0,a.startTransition)(()=>{(0,v.dispatchAppRouterAction)({type:l.ACTION_SERVER_PATCH,previousTree:d,serverResponse:e,navigatedAt:c})}),e)),(0,a.use)(e)}(0,a.use)(f.unresolvedThenable)}return(0,u.jsx)(c.LayoutRouterContext.Provider,{value:{parentTree:t,parentCacheNode:n,parentSegmentPath:r,url:o},children:_})}function T(e){let t,{loading:r,children:n}=e;if(t=\"object\"==typeof r&&null!==r&&\"function\"==typeof r.then?(0,a.use)(r):r){let e=t[0],r=t[1],o=t[2];return(0,u.jsx)(a.Suspense,{fallback:(0,u.jsxs)(u.Fragment,{children:[r,o,e]}),children:n})}return(0,u.jsx)(u.Fragment,{children:n})}function S(e){let{parallelRouterKey:t,error:r,errorStyles:n,errorScripts:o,templateStyles:l,templateScripts:i,template:s,notFound:f,forbidden:p,unauthorized:h}=e,g=(0,a.useContext)(c.LayoutRouterContext);if(!g)throw Object.defineProperty(Error(\"invariant expected layout router to be mounted\"),\"__NEXT_ERROR_CODE\",{value:\"E56\",enumerable:!1,configurable:!0});let{parentTree:v,parentCacheNode:m,parentSegmentPath:E,url:O}=g,R=m.parallelRoutes,S=R.get(t);S||(S=new Map,R.set(t,S));let M=v[0],w=v[1][t],C=w[0],x=null===E?[t]:E.concat([M,t]),A=(0,b.createRouterCacheKey)(C),N=(0,b.createRouterCacheKey)(C,!0),D=S.get(A);if(void 0===D){let e={lazyData:null,rsc:null,prefetchRsc:null,head:null,prefetchHead:null,parallelRoutes:new Map,loading:null,navigatedAt:-1};D=e,S.set(A,e)}let U=m.loading;return(0,u.jsxs)(c.TemplateContext.Provider,{value:(0,u.jsx)(P,{segmentPath:x,children:(0,u.jsx)(d.ErrorBoundary,{errorComponent:r,errorStyles:n,errorScripts:o,children:(0,u.jsx)(T,{loading:U,children:(0,u.jsx)(_.HTTPAccessFallbackBoundary,{notFound:f,forbidden:p,unauthorized:h,children:(0,u.jsx)(y.RedirectBoundary,{children:(0,u.jsx)(j,{url:O,tree:w,cacheNode:D,segmentPath:x})})})})})}),children:[l,i,s]},N)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7568:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{ServerInsertedHTMLContext:function(){return o},useServerInsertedHTML:function(){return u}});let n=r(6966)._(r(2115)),o=n.default.createContext(null);function u(e){let t=(0,n.useContext)(o);t&&t(e)}},7599:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"unstable_rethrow\",{enumerable:!0,get:function(){return n}});let n=r(7865).unstable_rethrow;(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7650:(e,t,r)=>{\"use strict\";!function e(){if(\"undefined\"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&\"function\"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=r(8730)},7755:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{INTERCEPTION_ROUTE_MARKERS:function(){return o},extractInterceptionRouteInformation:function(){return l},isInterceptionRouteAppPath:function(){return u}});let n=r(7276),o=[\"(..)(..)\",\"(.)\",\"(..)\",\"(...)\"];function u(e){return void 0!==e.split(\"/\").find(e=>o.find(t=>e.startsWith(t)))}function l(e){let t,r,u;for(let n of e.split(\"/\"))if(r=o.find(e=>n.startsWith(e))){[t,u]=e.split(r,2);break}if(!t||!r||!u)throw Object.defineProperty(Error(\"Invalid interception route: \"+e+\". Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>\"),\"__NEXT_ERROR_CODE\",{value:\"E269\",enumerable:!1,configurable:!0});switch(t=(0,n.normalizeAppPath)(t),r){case\"(.)\":u=\"/\"===t?\"/\"+u:t+\"/\"+u;break;case\"(..)\":if(\"/\"===t)throw Object.defineProperty(Error(\"Invalid interception route: \"+e+\". Cannot use (..) marker at the root level, use (.) instead.\"),\"__NEXT_ERROR_CODE\",{value:\"E207\",enumerable:!1,configurable:!0});u=t.split(\"/\").slice(0,-1).concat(u).join(\"/\");break;case\"(...)\":u=\"/\"+u;break;case\"(..)(..)\":let l=t.split(\"/\");if(l.length<=2)throw Object.defineProperty(Error(\"Invalid interception route: \"+e+\". Cannot use (..)(..) marker at the root level or one level up.\"),\"__NEXT_ERROR_CODE\",{value:\"E486\",enumerable:!1,configurable:!0});u=l.slice(0,-2).concat(u).join(\"/\");break;default:throw Object.defineProperty(Error(\"Invariant: unexpected marker\"),\"__NEXT_ERROR_CODE\",{value:\"E112\",enumerable:!1,configurable:!0})}return{interceptingRoute:t,interceptedRoute:u}}},7760:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"AppRouterAnnouncer\",{enumerable:!0,get:function(){return l}});let n=r(2115),o=r(7650),u=\"next-route-announcer\";function l(e){let{tree:t}=e,[r,l]=(0,n.useState)(null);(0,n.useEffect)(()=>(l(function(){var e;let t=document.getElementsByName(u)[0];if(null==t||null==(e=t.shadowRoot)?void 0:e.childNodes[0])return t.shadowRoot.childNodes[0];{let e=document.createElement(u);e.style.cssText=\"position:absolute\";let t=document.createElement(\"div\");return t.ariaLive=\"assertive\",t.id=\"__next-route-announcer__\",t.role=\"alert\",t.style.cssText=\"position:absolute;border:0;height:1px;margin:-1px;padding:0;width:1px;clip:rect(0 0 0 0);overflow:hidden;white-space:nowrap;word-wrap:normal\",e.attachShadow({mode:\"open\"}).appendChild(t),document.body.appendChild(e),t}}()),()=>{let e=document.getElementsByTagName(u)[0];(null==e?void 0:e.isConnected)&&document.body.removeChild(e)}),[]);let[a,i]=(0,n.useState)(\"\"),c=(0,n.useRef)(void 0);return(0,n.useEffect)(()=>{let e=\"\";if(document.title)e=document.title;else{let t=document.querySelector(\"h1\");t&&(e=t.innerText||t.textContent||\"\")}void 0!==c.current&&c.current!==e&&i(e),c.current=e},[t]),r?(0,o.createPortal)(a,r):null}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7801:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"serverPatchReducer\",{enumerable:!0,get:function(){return s}});let n=r(1139),o=r(7442),u=r(9234),l=r(3894),a=r(878),i=r(3507),c=r(6158);function s(e,t){let{serverResponse:{flightData:r,canonicalUrl:s},navigatedAt:f}=t,d={};if(d.preserveCustomHistoryState=!1,\"string\"==typeof r)return(0,l.handleExternalUrl)(e,d,r,e.pushRef.pendingPush);let p=e.tree,h=e.cache;for(let t of r){let{segmentPath:r,tree:i}=t,y=(0,o.applyRouterStatePatchToTree)([\"\",...r],p,i,e.canonicalUrl);if(null===y)return e;if((0,u.isNavigatingToNewRootLayout)(p,y))return(0,l.handleExternalUrl)(e,d,e.canonicalUrl,e.pushRef.pendingPush);let _=s?(0,n.createHrefFromUrl)(s):void 0;_&&(d.canonicalUrl=_);let b=(0,c.createEmptyCacheNode)();(0,a.applyFlightData)(f,h,b,t),d.patchedTree=y,d.cache=b,h=b,p=y}return(0,i.handleMutable)(e,d)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7829:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"makeUntrackedExoticParams\",{enumerable:!0,get:function(){return u}});let n=r(7541),o=new WeakMap;function u(e){let t=o.get(e);if(t)return t;let r=Promise.resolve(e);return o.set(e,r),Object.keys(e).forEach(t=>{n.wellKnownProperties.has(t)||(r[t]=e[t])}),r}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7865:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"unstable_rethrow\",{enumerable:!0,get:function(){return function e(t){if((0,o.isNextRouterError)(t)||(0,n.isBailoutToCSRError)(t))throw t;t instanceof Error&&\"cause\"in t&&e(t.cause)}}});let n=r(5262),o=r(2858);(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8229:(e,t,r)=>{\"use strict\";function n(e){return e&&e.__esModule?e:{default:e}}r.r(t),r.d(t,{_:()=>n})},8287:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{METADATA_BOUNDARY_NAME:function(){return r},OUTLET_BOUNDARY_NAME:function(){return o},VIEWPORT_BOUNDARY_NAME:function(){return n}});let r=\"__next_metadata_boundary__\",n=\"__next_viewport_boundary__\",o=\"__next_outlet_boundary__\"},8291:(e,t)=>{\"use strict\";function r(e){return\"(\"===e[0]&&e.endsWith(\")\")}function n(e){return e.startsWith(\"@\")&&\"@children\"!==e}function o(e,t){if(e.includes(u)){let e=JSON.stringify(t);return\"{}\"!==e?u+\"?\"+e:u}return e}Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{DEFAULT_SEGMENT_KEY:function(){return l},PAGE_SEGMENT_KEY:function(){return u},addSearchParamsIfPageSegment:function(){return o},isGroupSegment:function(){return r},isParallelRouteSegment:function(){return n}});let u=\"__PAGE__\",l=\"__DEFAULT__\"},8324:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"makeUntrackedExoticSearchParams\",{enumerable:!0,get:function(){return u}});let n=r(7541),o=new WeakMap;function u(e){let t=o.get(e);if(t)return t;let r=Promise.resolve(e);return o.set(e,r),Object.keys(e).forEach(t=>{n.wellKnownProperties.has(t)||(r[t]=e[t])}),r}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8527:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"notFound\",{enumerable:!0,get:function(){return o}});let n=\"\"+r(6494).HTTP_ERROR_FALLBACK_ERROR_CODE+\";404\";function o(){let e=Object.defineProperty(Error(n),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0});throw e.digest=n,e}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8586:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{createFetch:function(){return y},createFromNextReadableStream:function(){return _},fetchServerResponse:function(){return h},urlToUrlWithoutFlightMarker:function(){return f}});let n=r(3269),o=r(3806),u=r(1818),l=r(9818),a=r(2561),i=r(5624),c=r(8969),{createFromReadableStream:s}=r(4979);function f(e){let t=new URL(e,location.origin);if(t.searchParams.delete(n.NEXT_RSC_UNION_QUERY),t.pathname.endsWith(\".txt\")){let{pathname:e}=t,r=e.endsWith(\"/index.txt\")?10:4;t.pathname=e.slice(0,-r)}return t}function d(e){return{flightData:f(e).toString(),canonicalUrl:void 0,couldBeIntercepted:!1,prerendered:!1,postponed:!1,staleTime:-1}}let p=new AbortController;async function h(e,t){let{flightRouterState:r,nextUrl:o,prefetchKind:u}=t,c={[n.RSC_HEADER]:\"1\",[n.NEXT_ROUTER_STATE_TREE_HEADER]:encodeURIComponent(JSON.stringify(r))};u===l.PrefetchKind.AUTO&&(c[n.NEXT_ROUTER_PREFETCH_HEADER]=\"1\"),o&&(c[n.NEXT_URL]=o);try{var s;let t=u?u===l.PrefetchKind.TEMPORARY?\"high\":\"low\":\"auto\";(e=new URL(e)).pathname.endsWith(\"/\")?e.pathname+=\"index.txt\":e.pathname+=\".txt\";let r=await y(e,c,t,p.signal),o=f(r.url),h=r.redirected?o:void 0,b=r.headers.get(\"content-type\")||\"\",g=!!(null==(s=r.headers.get(\"vary\"))?void 0:s.includes(n.NEXT_URL)),v=!!r.headers.get(n.NEXT_DID_POSTPONE_HEADER),m=r.headers.get(n.NEXT_ROUTER_STALE_TIME_HEADER),E=null!==m?1e3*parseInt(m,10):-1,O=b.startsWith(n.RSC_CONTENT_TYPE_HEADER);if(O||(O=b.startsWith(\"text/plain\")),!O||!r.ok||!r.body)return e.hash&&(o.hash=e.hash),d(o.toString());let R=v?function(e){let t=e.getReader();return new ReadableStream({async pull(e){for(;;){let{done:r,value:n}=await t.read();if(!r){e.enqueue(n);continue}return}}})}(r.body):r.body,P=await _(R);if((0,i.getAppBuildId)()!==P.b)return d(r.url);return{flightData:(0,a.normalizeFlightData)(P.f),canonicalUrl:h,couldBeIntercepted:g,prerendered:P.S,postponed:v,staleTime:E}}catch(t){return p.signal.aborted||console.error(\"Failed to fetch RSC payload for \"+e+\". Falling back to browser navigation.\",t),{flightData:e.toString(),canonicalUrl:void 0,couldBeIntercepted:!1,prerendered:!1,postponed:!1,staleTime:-1}}}function y(e,t,r,n){let o=new URL(e);return(0,c.setCacheBustingSearchParam)(o,t),fetch(o,{credentials:\"same-origin\",headers:t,priority:r||void 0,signal:n})}function _(e){return s(e,{callServer:o.callServer,findSourceMapURL:u.findSourceMapURL})}window.addEventListener(\"pagehide\",()=>{p.abort()}),window.addEventListener(\"pageshow\",()=>{p=new AbortController}),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8709:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"serverActionReducer\",{enumerable:!0,get:function(){return w}});let n=r(3806),o=r(1818),u=r(3269),l=r(9818),a=r(1315),i=r(1139),c=r(3894),s=r(7442),f=r(9234),d=r(3507),p=r(4758),h=r(6158),y=r(4108),_=r(6375),b=r(4908),g=r(2561),v=r(6825),m=r(2210),E=r(1518),O=r(4882),R=r(7102),P=r(2816);r(6005);let{createFromFetch:j,createTemporaryReferenceSet:T,encodeReply:S}=r(4979);async function M(e,t,r){let l,i,{actionId:c,actionArgs:s}=r,f=T(),d=(0,P.extractInfoFromServerReferenceId)(c),p=\"use-cache\"===d.type?(0,P.omitUnusedArgs)(s,d):s,h=await S(p,{temporaryReferences:f}),y=await fetch(\"\",{method:\"POST\",headers:{Accept:u.RSC_CONTENT_TYPE_HEADER,[u.ACTION_HEADER]:c,[u.NEXT_ROUTER_STATE_TREE_HEADER]:encodeURIComponent(JSON.stringify(e.tree)),...{},...t?{[u.NEXT_URL]:t}:{}},body:h}),_=y.headers.get(\"x-action-redirect\"),[b,v]=(null==_?void 0:_.split(\";\"))||[];switch(v){case\"push\":l=m.RedirectType.push;break;case\"replace\":l=m.RedirectType.replace;break;default:l=void 0}let E=!!y.headers.get(u.NEXT_IS_PRERENDER_HEADER);try{let e=JSON.parse(y.headers.get(\"x-action-revalidated\")||\"[[],0,0]\");i={paths:e[0]||[],tag:!!e[1],cookie:e[2]}}catch(e){i={paths:[],tag:!1,cookie:!1}}let O=b?(0,a.assignLocation)(b,new URL(e.canonicalUrl,window.location.href)):void 0,R=y.headers.get(\"content-type\");if(null==R?void 0:R.startsWith(u.RSC_CONTENT_TYPE_HEADER)){let e=await j(Promise.resolve(y),{callServer:n.callServer,findSourceMapURL:o.findSourceMapURL,temporaryReferences:f});return b?{actionFlightData:(0,g.normalizeFlightData)(e.f),redirectLocation:O,redirectType:l,revalidatedParts:i,isPrerender:E}:{actionResult:e.a,actionFlightData:(0,g.normalizeFlightData)(e.f),redirectLocation:O,redirectType:l,revalidatedParts:i,isPrerender:E}}if(y.status>=400)throw Object.defineProperty(Error(\"text/plain\"===R?await y.text():\"An unexpected response was received from the server.\"),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0});return{redirectLocation:O,redirectType:l,revalidatedParts:i,isPrerender:E}}function w(e,t){let{resolve:r,reject:n}=t,o={},u=e.tree;o.preserveCustomHistoryState=!1;let a=e.nextUrl&&(0,y.hasInterceptionRouteInCurrentTree)(e.tree)?e.nextUrl:null,g=Date.now();return M(e,a,t).then(async y=>{let P,{actionResult:j,actionFlightData:T,redirectLocation:S,redirectType:M,isPrerender:w,revalidatedParts:C}=y;if(S&&(M===m.RedirectType.replace?(e.pushRef.pendingPush=!1,o.pendingPush=!1):(e.pushRef.pendingPush=!0,o.pendingPush=!0),o.canonicalUrl=P=(0,i.createHrefFromUrl)(S,!1)),!T)return(r(j),S)?(0,c.handleExternalUrl)(e,o,S.href,e.pushRef.pendingPush):e;if(\"string\"==typeof T)return r(j),(0,c.handleExternalUrl)(e,o,T,e.pushRef.pendingPush);let x=C.paths.length>0||C.tag||C.cookie;for(let n of T){let{tree:l,seedData:i,head:d,isRootRender:y}=n;if(!y)return console.log(\"SERVER ACTION APPLY FAILED\"),r(j),e;let v=(0,s.applyRouterStatePatchToTree)([\"\"],u,l,P||e.canonicalUrl);if(null===v)return r(j),(0,_.handleSegmentMismatch)(e,t,l);if((0,f.isNavigatingToNewRootLayout)(u,v))return r(j),(0,c.handleExternalUrl)(e,o,P||e.canonicalUrl,e.pushRef.pendingPush);if(null!==i){let t=i[1],r=(0,h.createEmptyCacheNode)();r.rsc=t,r.prefetchRsc=null,r.loading=i[3],(0,p.fillLazyItemsTillLeafWithHead)(g,r,void 0,l,i,d,void 0),o.cache=r,o.prefetchCache=new Map,x&&await (0,b.refreshInactiveParallelSegments)({navigatedAt:g,state:e,updatedTree:v,updatedCache:r,includeNextUrl:!!a,canonicalUrl:o.canonicalUrl||e.canonicalUrl})}o.patchedTree=v,u=v}return S&&P?(x||((0,E.createSeededPrefetchCacheEntry)({url:S,data:{flightData:T,canonicalUrl:void 0,couldBeIntercepted:!1,prerendered:!1,postponed:!1,staleTime:-1},tree:e.tree,prefetchCache:e.prefetchCache,nextUrl:e.nextUrl,kind:w?l.PrefetchKind.FULL:l.PrefetchKind.AUTO}),o.prefetchCache=e.prefetchCache),n((0,v.getRedirectError)((0,R.hasBasePath)(P)?(0,O.removeBasePath)(P):P,M||m.RedirectType.push))):r(j),(0,d.handleMutable)(e,o)},t=>(n(t),e))}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8730:(e,t,r)=>{\"use strict\";var n=r(2115);function o(e){var t=\"https://react.dev/errors/\"+e;if(1<arguments.length){t+=\"?args[]=\"+encodeURIComponent(arguments[1]);for(var r=2;r<arguments.length;r++)t+=\"&args[]=\"+encodeURIComponent(arguments[r])}return\"Minified React error #\"+e+\"; visit \"+t+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}function u(){}var l={d:{f:u,r:function(){throw Error(o(522))},D:u,C:u,L:u,m:u,X:u,S:u,M:u},p:0,findDOMNode:null},a=Symbol.for(\"react.portal\"),i=n.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;function c(e,t){return\"font\"===e?\"\":\"string\"==typeof t?\"use-credentials\"===t?t:\"\":void 0}t.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=l,t.createPortal=function(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType)throw Error(o(299));return function(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:a,key:null==n?null:\"\"+n,children:e,containerInfo:t,implementation:r}}(e,t,null,r)},t.flushSync=function(e){var t=i.T,r=l.p;try{if(i.T=null,l.p=2,e)return e()}finally{i.T=t,l.p=r,l.d.f()}},t.preconnect=function(e,t){\"string\"==typeof e&&(t=t?\"string\"==typeof(t=t.crossOrigin)?\"use-credentials\"===t?t:\"\":void 0:null,l.d.C(e,t))},t.prefetchDNS=function(e){\"string\"==typeof e&&l.d.D(e)},t.preinit=function(e,t){if(\"string\"==typeof e&&t&&\"string\"==typeof t.as){var r=t.as,n=c(r,t.crossOrigin),o=\"string\"==typeof t.integrity?t.integrity:void 0,u=\"string\"==typeof t.fetchPriority?t.fetchPriority:void 0;\"style\"===r?l.d.S(e,\"string\"==typeof t.precedence?t.precedence:void 0,{crossOrigin:n,integrity:o,fetchPriority:u}):\"script\"===r&&l.d.X(e,{crossOrigin:n,integrity:o,fetchPriority:u,nonce:\"string\"==typeof t.nonce?t.nonce:void 0})}},t.preinitModule=function(e,t){if(\"string\"==typeof e)if(\"object\"==typeof t&&null!==t){if(null==t.as||\"script\"===t.as){var r=c(t.as,t.crossOrigin);l.d.M(e,{crossOrigin:r,integrity:\"string\"==typeof t.integrity?t.integrity:void 0,nonce:\"string\"==typeof t.nonce?t.nonce:void 0})}}else null==t&&l.d.M(e)},t.preload=function(e,t){if(\"string\"==typeof e&&\"object\"==typeof t&&null!==t&&\"string\"==typeof t.as){var r=t.as,n=c(r,t.crossOrigin);l.d.L(e,r,{crossOrigin:n,integrity:\"string\"==typeof t.integrity?t.integrity:void 0,nonce:\"string\"==typeof t.nonce?t.nonce:void 0,type:\"string\"==typeof t.type?t.type:void 0,fetchPriority:\"string\"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:\"string\"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:\"string\"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:\"string\"==typeof t.imageSizes?t.imageSizes:void 0,media:\"string\"==typeof t.media?t.media:void 0})}},t.preloadModule=function(e,t){if(\"string\"==typeof e)if(t){var r=c(t.as,t.crossOrigin);l.d.m(e,{as:\"string\"==typeof t.as&&\"script\"!==t.as?t.as:void 0,crossOrigin:r,integrity:\"string\"==typeof t.integrity?t.integrity:void 0})}else l.d.m(e)},t.requestFormReset=function(e){l.d.r(e)},t.unstable_batchedUpdates=function(e,t){return e(t)},t.useFormState=function(e,t,r){return i.H.useFormState(e,t,r)},t.useFormStatus=function(){return i.H.useHostTransitionStatus()},t.version=\"19.2.0-canary-3fbfb9ba-20250409\"},8836:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{handleHardNavError:function(){return o},useNavFailureHandler:function(){return u}}),r(2115);let n=r(1139);function o(e){return!!e&&!!window.next.__pendingUrl&&(0,n.createHrefFromUrl)(new URL(window.location.href))!==(0,n.createHrefFromUrl)(window.next.__pendingUrl)&&(console.error(\"Error occurred during navigation, falling back to hard navigation\",e),window.location.href=window.next.__pendingUrl.toString(),!0)}function u(){}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8946:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{computeChangedPath:function(){return s},extractPathFromFlightRouterState:function(){return c},getSelectedParams:function(){return function e(t,r){for(let n of(void 0===r&&(r={}),Object.values(t[1]))){let t=n[0],u=Array.isArray(t),l=u?t[1]:t;!l||l.startsWith(o.PAGE_SEGMENT_KEY)||(u&&(\"c\"===t[2]||\"oc\"===t[2])?r[t[0]]=t[1].split(\"/\"):u&&(r[t[0]]=t[1]),r=e(n,r))}return r}}});let n=r(7755),o=r(8291),u=r(1127),l=e=>\"/\"===e[0]?e.slice(1):e,a=e=>\"string\"==typeof e?\"children\"===e?\"\":e:e[1];function i(e){return e.reduce((e,t)=>\"\"===(t=l(t))||(0,o.isGroupSegment)(t)?e:e+\"/\"+t,\"\")||\"/\"}function c(e){var t;let r=Array.isArray(e[0])?e[0][1]:e[0];if(r===o.DEFAULT_SEGMENT_KEY||n.INTERCEPTION_ROUTE_MARKERS.some(e=>r.startsWith(e)))return;if(r.startsWith(o.PAGE_SEGMENT_KEY))return\"\";let u=[a(r)],l=null!=(t=e[1])?t:{},s=l.children?c(l.children):void 0;if(void 0!==s)u.push(s);else for(let[e,t]of Object.entries(l)){if(\"children\"===e)continue;let r=c(t);void 0!==r&&u.push(r)}return i(u)}function s(e,t){let r=function e(t,r){let[o,l]=t,[i,s]=r,f=a(o),d=a(i);if(n.INTERCEPTION_ROUTE_MARKERS.some(e=>f.startsWith(e)||d.startsWith(e)))return\"\";if(!(0,u.matchSegment)(o,i)){var p;return null!=(p=c(r))?p:\"\"}for(let t in l)if(s[t]){let r=e(l[t],s[t]);if(null!==r)return a(i)+\"/\"+r}return null}(e,t);return null==r||\"/\"===r?r:i(r.split(\"/\"))}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8969:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"setCacheBustingSearchParam\",{enumerable:!0,get:function(){return u}});let n=r(3942),o=r(3269),u=(e,t)=>{let r=(0,n.hexHash)([t[o.NEXT_ROUTER_PREFETCH_HEADER]||\"0\",t[o.NEXT_ROUTER_SEGMENT_PREFETCH_HEADER]||\"0\",t[o.NEXT_ROUTER_STATE_TREE_HEADER],t[o.NEXT_URL]].join(\",\")),u=e.search,l=(u.startsWith(\"?\")?u.slice(1):u).split(\"&\").filter(Boolean);l.push(o.NEXT_RSC_UNION_QUERY+\"=\"+r),e.search=l.length?\"?\"+l.join(\"&\"):\"\"};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8999:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{ReadonlyURLSearchParams:function(){return i.ReadonlyURLSearchParams},RedirectType:function(){return i.RedirectType},ServerInsertedHTMLContext:function(){return c.ServerInsertedHTMLContext},forbidden:function(){return i.forbidden},notFound:function(){return i.notFound},permanentRedirect:function(){return i.permanentRedirect},redirect:function(){return i.redirect},unauthorized:function(){return i.unauthorized},unstable_rethrow:function(){return i.unstable_rethrow},useParams:function(){return h},usePathname:function(){return d},useRouter:function(){return p},useSearchParams:function(){return f},useSelectedLayoutSegment:function(){return _},useSelectedLayoutSegments:function(){return y},useServerInsertedHTML:function(){return c.useServerInsertedHTML}});let n=r(2115),o=r(5227),u=r(886),l=r(708),a=r(8291),i=r(5618),c=r(7568),s=void 0;function f(){let e=(0,n.useContext)(u.SearchParamsContext);return(0,n.useMemo)(()=>e?new i.ReadonlyURLSearchParams(e):null,[e])}function d(){return null==s||s(\"usePathname()\"),(0,n.useContext)(u.PathnameContext)}function p(){let e=(0,n.useContext)(o.AppRouterContext);if(null===e)throw Object.defineProperty(Error(\"invariant expected app router to be mounted\"),\"__NEXT_ERROR_CODE\",{value:\"E238\",enumerable:!1,configurable:!0});return e}function h(){return null==s||s(\"useParams()\"),(0,n.useContext)(u.PathParamsContext)}function y(e){void 0===e&&(e=\"children\"),null==s||s(\"useSelectedLayoutSegments()\");let t=(0,n.useContext)(o.LayoutRouterContext);return t?function e(t,r,n,o){let u;if(void 0===n&&(n=!0),void 0===o&&(o=[]),n)u=t[1][r];else{var i;let e=t[1];u=null!=(i=e.children)?i:Object.values(e)[0]}if(!u)return o;let c=u[0],s=(0,l.getSegmentValue)(c);return!s||s.startsWith(a.PAGE_SEGMENT_KEY)?o:(o.push(s),e(u,r,!1,o))}(t.parentTree,e):null}function _(e){void 0===e&&(e=\"children\"),null==s||s(\"useSelectedLayoutSegment()\");let t=y(e);if(!t||0===t.length)return null;let r=\"children\"===e?t[0]:t[t.length-1];return r===a.DEFAULT_SEGMENT_KEY?null:r}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9062:(e,t,r)=>{\"use strict\";var n=r(7650),o={stream:!0},u=new Map;function l(e){var t=r(e);return\"function\"!=typeof t.then||\"fulfilled\"===t.status?null:(t.then(function(e){t.status=\"fulfilled\",t.value=e},function(e){t.status=\"rejected\",t.reason=e}),t)}function a(){}function i(e){for(var t=e[1],n=[],o=0;o<t.length;){var i=t[o++],c=t[o++],f=u.get(i);void 0===f?(s.set(i,c),c=r.e(i),n.push(c),f=u.set.bind(u,i,null),c.then(f,a),u.set(i,c)):null!==f&&n.push(f)}return 4===e.length?0===n.length?l(e[0]):Promise.all(n).then(function(){return l(e[0])}):0<n.length?Promise.all(n):null}function c(e){var t=r(e[0]);if(4===e.length&&\"function\"==typeof t.then)if(\"fulfilled\"===t.status)t=t.value;else throw t.reason;return\"*\"===e[2]?t:\"\"===e[2]?t.__esModule?t.default:t:t[e[2]]}var s=new Map,f=r.u;r.u=function(e){var t=s.get(e);return void 0!==t?t:f(e)};var d=n.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,p=Symbol.for(\"react.transitional.element\"),h=Symbol.for(\"react.lazy\"),y=Symbol.iterator,_=Symbol.asyncIterator,b=Array.isArray,g=Object.getPrototypeOf,v=Object.prototype,m=new WeakMap;function E(e,t,r){m.has(e)||m.set(e,{id:t,originalBind:e.bind,bound:r})}function O(e,t,r,n){this.status=e,this.value=t,this.reason=r,this._response=n}function R(e){switch(e.status){case\"resolved_model\":N(e);break;case\"resolved_module\":D(e)}switch(e.status){case\"fulfilled\":return e.value;case\"pending\":case\"blocked\":throw e;default:throw e.reason}}function P(e){return new O(\"pending\",null,null,e)}function j(e,t){for(var r=0;r<e.length;r++)(0,e[r])(t)}function T(e,t,r){switch(e.status){case\"fulfilled\":j(t,e.value);break;case\"pending\":case\"blocked\":if(e.value)for(var n=0;n<t.length;n++)e.value.push(t[n]);else e.value=t;if(e.reason){if(r)for(t=0;t<r.length;t++)e.reason.push(r[t])}else e.reason=r;break;case\"rejected\":r&&j(r,e.reason)}}function S(e,t){if(\"pending\"!==e.status&&\"blocked\"!==e.status)e.reason.error(t);else{var r=e.reason;e.status=\"rejected\",e.reason=t,null!==r&&j(r,t)}}function M(e,t,r){return new O(\"resolved_model\",(r?'{\"done\":true,\"value\":':'{\"done\":false,\"value\":')+t+\"}\",null,e)}function w(e,t,r){C(e,(r?'{\"done\":true,\"value\":':'{\"done\":false,\"value\":')+t+\"}\")}function C(e,t){if(\"pending\"!==e.status)e.reason.enqueueModel(t);else{var r=e.value,n=e.reason;e.status=\"resolved_model\",e.value=t,null!==r&&(N(e),T(e,r,n))}}function x(e,t){if(\"pending\"===e.status||\"blocked\"===e.status){var r=e.value,n=e.reason;e.status=\"resolved_module\",e.value=t,null!==r&&(D(e),T(e,r,n))}}O.prototype=Object.create(Promise.prototype),O.prototype.then=function(e,t){switch(this.status){case\"resolved_model\":N(this);break;case\"resolved_module\":D(this)}switch(this.status){case\"fulfilled\":e(this.value);break;case\"pending\":case\"blocked\":e&&(null===this.value&&(this.value=[]),this.value.push(e)),t&&(null===this.reason&&(this.reason=[]),this.reason.push(t));break;default:t&&t(this.reason)}};var A=null;function N(e){var t=A;A=null;var r=e.value;e.status=\"blocked\",e.value=null,e.reason=null;try{var n=JSON.parse(r,e._response._fromJSON),o=e.value;if(null!==o&&(e.value=null,e.reason=null,j(o,n)),null!==A){if(A.errored)throw A.value;if(0<A.deps){A.value=n,A.chunk=e;return}}e.status=\"fulfilled\",e.value=n}catch(t){e.status=\"rejected\",e.reason=t}finally{A=t}}function D(e){try{var t=c(e.value);e.status=\"fulfilled\",e.value=t}catch(t){e.status=\"rejected\",e.reason=t}}function U(e,t){e._closed=!0,e._closedReason=t,e._chunks.forEach(function(e){\"pending\"===e.status&&S(e,t)})}function L(e){return{$$typeof:h,_payload:e,_init:R}}function k(e,t){var r=e._chunks,n=r.get(t);return n||(n=e._closed?new O(\"rejected\",null,e._closedReason,e):P(e),r.set(t,n)),n}function I(e,t,r,n,o,u){function l(e){if(!a.errored){a.errored=!0,a.value=e;var t=a.chunk;null!==t&&\"blocked\"===t.status&&S(t,e)}}if(A){var a=A;a.deps++}else a=A={parent:null,chunk:null,value:null,deps:1,errored:!1};return e.then(function e(i){for(var c=1;c<u.length;c++){for(;i.$$typeof===h;)if((i=i._payload)===a.chunk)i=a.value;else if(\"fulfilled\"===i.status)i=i.value;else{u.splice(0,c-1),i.then(e,l);return}i=i[u[c]]}c=o(n,i,t,r),t[r]=c,\"\"===r&&null===a.value&&(a.value=c),t[0]===p&&\"object\"==typeof a.value&&null!==a.value&&a.value.$$typeof===p&&(i=a.value,\"3\"===r)&&(i.props=c),a.deps--,0===a.deps&&null!==(c=a.chunk)&&\"blocked\"===c.status&&(i=c.value,c.status=\"fulfilled\",c.value=a.value,null!==i&&j(i,a.value))},l),null}function H(e,t,r,n){if(!e._serverReferenceConfig)return function(e,t){function r(){var e=Array.prototype.slice.call(arguments);return o?\"fulfilled\"===o.status?t(n,o.value.concat(e)):Promise.resolve(o).then(function(r){return t(n,r.concat(e))}):t(n,e)}var n=e.id,o=e.bound;return E(r,n,o),r}(t,e._callServer);var o=function(e,t){var r=\"\",n=e[t];if(n)r=n.name;else{var o=t.lastIndexOf(\"#\");if(-1!==o&&(r=t.slice(o+1),n=e[t.slice(0,o)]),!n)throw Error('Could not find the module \"'+t+'\" in the React Server Manifest. This is probably a bug in the React Server Components bundler.')}return n.async?[n.id,n.chunks,r,1]:[n.id,n.chunks,r]}(e._serverReferenceConfig,t.id);if(e=i(o))t.bound&&(e=Promise.all([e,t.bound]));else{if(!t.bound)return E(e=c(o),t.id,t.bound),e;e=Promise.resolve(t.bound)}if(A){var u=A;u.deps++}else u=A={parent:null,chunk:null,value:null,deps:1,errored:!1};return e.then(function(){var e=c(o);if(t.bound){var l=t.bound.value.slice(0);l.unshift(null),e=e.bind.apply(e,l)}E(e,t.id,t.bound),r[n]=e,\"\"===n&&null===u.value&&(u.value=e),r[0]===p&&\"object\"==typeof u.value&&null!==u.value&&u.value.$$typeof===p&&(l=u.value,\"3\"===n)&&(l.props=e),u.deps--,0===u.deps&&null!==(e=u.chunk)&&\"blocked\"===e.status&&(l=e.value,e.status=\"fulfilled\",e.value=u.value,null!==l&&j(l,u.value))},function(e){if(!u.errored){u.errored=!0,u.value=e;var t=u.chunk;null!==t&&\"blocked\"===t.status&&S(t,e)}}),null}function F(e,t,r,n,o){var u=parseInt((t=t.split(\":\"))[0],16);switch((u=k(e,u)).status){case\"resolved_model\":N(u);break;case\"resolved_module\":D(u)}switch(u.status){case\"fulfilled\":var l=u.value;for(u=1;u<t.length;u++){for(;l.$$typeof===h;)if(\"fulfilled\"!==(l=l._payload).status)return I(l,r,n,e,o,t.slice(u-1));else l=l.value;l=l[t[u]]}return o(e,l,r,n);case\"pending\":case\"blocked\":return I(u,r,n,e,o,t);default:return A?(A.errored=!0,A.value=u.reason):A={parent:null,chunk:null,value:u.reason,deps:0,errored:!0},null}}function B(e,t){return new Map(t)}function W(e,t){return new Set(t)}function $(e,t){return new Blob(t.slice(1),{type:t[0]})}function K(e,t){e=new FormData;for(var r=0;r<t.length;r++)e.append(t[r][0],t[r][1]);return e}function X(e,t){return t[Symbol.iterator]()}function z(e,t){return t}function G(){throw Error('Trying to call a function from \"use server\" but the callServer option was not implemented in your router runtime.')}function V(e,t,r,n,o,u,l){var a,i=new Map;this._bundlerConfig=e,this._serverReferenceConfig=t,this._moduleLoading=r,this._callServer=void 0!==n?n:G,this._encodeFormAction=o,this._nonce=u,this._chunks=i,this._stringDecoder=new TextDecoder,this._fromJSON=null,this._rowLength=this._rowTag=this._rowID=this._rowState=0,this._buffer=[],this._closed=!1,this._closedReason=null,this._tempRefs=l,this._fromJSON=(a=this,function(e,t){if(\"string\"==typeof t){var r=a,n=this,o=e,u=t;if(\"$\"===u[0]){if(\"$\"===u)return null!==A&&\"0\"===o&&(A={parent:A,chunk:null,value:null,deps:0,errored:!1}),p;switch(u[1]){case\"$\":return u.slice(1);case\"L\":return L(r=k(r,n=parseInt(u.slice(2),16)));case\"@\":if(2===u.length)return new Promise(function(){});return k(r,n=parseInt(u.slice(2),16));case\"S\":return Symbol.for(u.slice(2));case\"F\":return F(r,u=u.slice(2),n,o,H);case\"T\":if(n=\"$\"+u.slice(2),null==(r=r._tempRefs))throw Error(\"Missing a temporary reference set but the RSC response returned a temporary reference. Pass a temporaryReference option with the set that was used with the reply.\");return r.get(n);case\"Q\":return F(r,u=u.slice(2),n,o,B);case\"W\":return F(r,u=u.slice(2),n,o,W);case\"B\":return F(r,u=u.slice(2),n,o,$);case\"K\":return F(r,u=u.slice(2),n,o,K);case\"Z\":return ee();case\"i\":return F(r,u=u.slice(2),n,o,X);case\"I\":return 1/0;case\"-\":return\"$-0\"===u?-0:-1/0;case\"N\":return NaN;case\"u\":return;case\"D\":return new Date(Date.parse(u.slice(2)));case\"n\":return BigInt(u.slice(2));default:return F(r,u=u.slice(1),n,o,z)}}return u}if(\"object\"==typeof t&&null!==t){if(t[0]===p){if(e={$$typeof:p,type:t[1],key:t[2],ref:null,props:t[3]},null!==A){if(A=(t=A).parent,t.errored)e=L(e=new O(\"rejected\",null,t.value,a));else if(0<t.deps){var l=new O(\"blocked\",null,null,a);t.value=e,t.chunk=l,e=L(l)}}}else e=t;return e}return t})}function Y(e,t,r){var n=e._chunks,o=n.get(t);o&&\"pending\"!==o.status?o.reason.enqueueValue(r):n.set(t,new O(\"fulfilled\",r,null,e))}function q(e,t,r,n){var o=e._chunks,u=o.get(t);u?\"pending\"===u.status&&(e=u.value,u.status=\"fulfilled\",u.value=r,u.reason=n,null!==e&&j(e,u.value)):o.set(t,new O(\"fulfilled\",r,n,e))}function J(e,t,r){var n=null;r=new ReadableStream({type:r,start:function(e){n=e}});var o=null;q(e,t,r,{enqueueValue:function(e){null===o?n.enqueue(e):o.then(function(){n.enqueue(e)})},enqueueModel:function(t){if(null===o){var r=new O(\"resolved_model\",t,null,e);N(r),\"fulfilled\"===r.status?n.enqueue(r.value):(r.then(function(e){return n.enqueue(e)},function(e){return n.error(e)}),o=r)}else{r=o;var u=P(e);u.then(function(e){return n.enqueue(e)},function(e){return n.error(e)}),o=u,r.then(function(){o===u&&(o=null),C(u,t)})}},close:function(){if(null===o)n.close();else{var e=o;o=null,e.then(function(){return n.close()})}},error:function(e){if(null===o)n.error(e);else{var t=o;o=null,t.then(function(){return n.error(e)})}}})}function Q(){return this}function Z(e,t,r){var n=[],o=!1,u=0,l={};l[_]=function(){var t,r=0;return(t={next:t=function(t){if(void 0!==t)throw Error(\"Values cannot be passed to next() of AsyncIterables passed to Client Components.\");if(r===n.length){if(o)return new O(\"fulfilled\",{done:!0,value:void 0},null,e);n[r]=P(e)}return n[r++]}})[_]=Q,t},q(e,t,r?l[_]():l,{enqueueValue:function(t){if(u===n.length)n[u]=new O(\"fulfilled\",{done:!1,value:t},null,e);else{var r=n[u],o=r.value,l=r.reason;r.status=\"fulfilled\",r.value={done:!1,value:t},null!==o&&T(r,o,l)}u++},enqueueModel:function(t){u===n.length?n[u]=M(e,t,!1):w(n[u],t,!1),u++},close:function(t){for(o=!0,u===n.length?n[u]=M(e,t,!0):w(n[u],t,!0),u++;u<n.length;)w(n[u++],'\"$undefined\"',!0)},error:function(t){for(o=!0,u===n.length&&(n[u]=P(e));u<n.length;)S(n[u++],t)}})}function ee(){var e=Error(\"An error occurred in the Server Components render. The specific message is omitted in production builds to avoid leaking sensitive details. A digest property is included on this error instance which may provide additional details about the nature of the error.\");return e.stack=\"Error: \"+e.message,e}function et(e,t){for(var r=e.length,n=t.length,o=0;o<r;o++)n+=e[o].byteLength;n=new Uint8Array(n);for(var u=o=0;u<r;u++){var l=e[u];n.set(l,o),o+=l.byteLength}return n.set(t,o),n}function er(e,t,r,n,o,u){Y(e,t,o=new o((r=0===r.length&&0==n.byteOffset%u?n:et(r,n)).buffer,r.byteOffset,r.byteLength/u))}function en(e){return new V(null,null,null,e&&e.callServer?e.callServer:void 0,void 0,void 0,e&&e.temporaryReferences?e.temporaryReferences:void 0)}function eo(e,t){function r(t){U(e,t)}var n=t.getReader();n.read().then(function t(u){var l=u.value;if(u.done)U(e,Error(\"Connection closed.\"));else{var a=0,c=e._rowState;u=e._rowID;for(var s=e._rowTag,f=e._rowLength,p=e._buffer,h=l.length;a<h;){var y=-1;switch(c){case 0:58===(y=l[a++])?c=1:u=u<<4|(96<y?y-87:y-48);continue;case 1:84===(c=l[a])||65===c||79===c||111===c||85===c||83===c||115===c||76===c||108===c||71===c||103===c||77===c||109===c||86===c?(s=c,c=2,a++):64<c&&91>c||35===c||114===c||120===c?(s=c,c=3,a++):(s=0,c=3);continue;case 2:44===(y=l[a++])?c=4:f=f<<4|(96<y?y-87:y-48);continue;case 3:y=l.indexOf(10,a);break;case 4:(y=a+f)>l.length&&(y=-1)}var _=l.byteOffset+a;if(-1<y)(function(e,t,r,n,u){switch(r){case 65:Y(e,t,et(n,u).buffer);return;case 79:er(e,t,n,u,Int8Array,1);return;case 111:Y(e,t,0===n.length?u:et(n,u));return;case 85:er(e,t,n,u,Uint8ClampedArray,1);return;case 83:er(e,t,n,u,Int16Array,2);return;case 115:er(e,t,n,u,Uint16Array,2);return;case 76:er(e,t,n,u,Int32Array,4);return;case 108:er(e,t,n,u,Uint32Array,4);return;case 71:er(e,t,n,u,Float32Array,4);return;case 103:er(e,t,n,u,Float64Array,8);return;case 77:er(e,t,n,u,BigInt64Array,8);return;case 109:er(e,t,n,u,BigUint64Array,8);return;case 86:er(e,t,n,u,DataView,1);return}for(var l=e._stringDecoder,a=\"\",c=0;c<n.length;c++)a+=l.decode(n[c],o);switch(n=a+=l.decode(u),r){case 73:var s=e,f=t,p=n,h=s._chunks,y=h.get(f);p=JSON.parse(p,s._fromJSON);var _=function(e,t){if(e){var r=e[t[0]];if(e=r&&r[t[2]])r=e.name;else{if(!(e=r&&r[\"*\"]))throw Error('Could not find the module \"'+t[0]+'\" in the React Server Consumer Manifest. This is probably a bug in the React Server Components bundler.');r=t[2]}return 4===t.length?[e.id,e.chunks,r,1]:[e.id,e.chunks,r]}return t}(s._bundlerConfig,p);if(p=i(_)){if(y){var b=y;b.status=\"blocked\"}else b=new O(\"blocked\",null,null,s),h.set(f,b);p.then(function(){return x(b,_)},function(e){return S(b,e)})}else y?x(y,_):h.set(f,new O(\"resolved_module\",_,null,s));break;case 72:switch(t=n[0],e=JSON.parse(n=n.slice(1),e._fromJSON),n=d.d,t){case\"D\":n.D(e);break;case\"C\":\"string\"==typeof e?n.C(e):n.C(e[0],e[1]);break;case\"L\":t=e[0],r=e[1],3===e.length?n.L(t,r,e[2]):n.L(t,r);break;case\"m\":\"string\"==typeof e?n.m(e):n.m(e[0],e[1]);break;case\"X\":\"string\"==typeof e?n.X(e):n.X(e[0],e[1]);break;case\"S\":\"string\"==typeof e?n.S(e):n.S(e[0],0===e[1]?void 0:e[1],3===e.length?e[2]:void 0);break;case\"M\":\"string\"==typeof e?n.M(e):n.M(e[0],e[1])}break;case 69:r=JSON.parse(n),(n=ee()).digest=r.digest,(u=(r=e._chunks).get(t))?S(u,n):r.set(t,new O(\"rejected\",null,n,e));break;case 84:(u=(r=e._chunks).get(t))&&\"pending\"!==u.status?u.reason.enqueueValue(n):r.set(t,new O(\"fulfilled\",n,null,e));break;case 78:case 68:case 87:throw Error(\"Failed to read a RSC payload created by a development version of React on the server while using a production version on the client. Always use matching versions on the server and the client.\");case 82:J(e,t,void 0);break;case 114:J(e,t,\"bytes\");break;case 88:Z(e,t,!1);break;case 120:Z(e,t,!0);break;case 67:(e=e._chunks.get(t))&&\"fulfilled\"===e.status&&e.reason.close(\"\"===n?'\"$undefined\"':n);break;default:(u=(r=e._chunks).get(t))?C(u,n):r.set(t,new O(\"resolved_model\",n,null,e))}})(e,u,s,p,f=new Uint8Array(l.buffer,_,y-a)),a=y,3===c&&a++,f=u=s=c=0,p.length=0;else{l=new Uint8Array(l.buffer,_,l.byteLength-a),p.push(l),f-=l.byteLength;break}}return e._rowState=c,e._rowID=u,e._rowTag=s,e._rowLength=f,n.read().then(t).catch(r)}}).catch(r)}t.createFromFetch=function(e,t){var r=en(t);return e.then(function(e){eo(r,e.body)},function(e){U(r,e)}),k(r,0)},t.createFromReadableStream=function(e,t){return eo(t=en(t),e),k(t,0)},t.createServerReference=function(e,t){function r(){var r=Array.prototype.slice.call(arguments);return t(e,r)}return E(r,e,null),r},t.createTemporaryReferenceSet=function(){return new Map},t.encodeReply=function(e,t){return new Promise(function(r,n){var o=function(e,t,r,n,o){function u(e,t){t=new Blob([new Uint8Array(t.buffer,t.byteOffset,t.byteLength)]);var r=i++;return null===s&&(s=new FormData),s.append(\"\"+r,t),\"$\"+e+r.toString(16)}function l(e,E){if(null===E)return null;if(\"object\"==typeof E){switch(E.$$typeof){case p:if(void 0!==r&&-1===e.indexOf(\":\")){var O,R,P,j,T,S=f.get(this);if(void 0!==S)return r.set(S+\":\"+e,E),\"$T\"}throw Error(\"React Element cannot be passed to Server Functions from the Client without a temporary reference set. Pass a TemporaryReferenceSet to the options.\");case h:S=E._payload;var M=E._init;null===s&&(s=new FormData),c++;try{var w=M(S),C=i++,x=a(w,C);return s.append(\"\"+C,x),\"$\"+C.toString(16)}catch(e){if(\"object\"==typeof e&&null!==e&&\"function\"==typeof e.then){c++;var A=i++;return S=function(){try{var e=a(E,A),r=s;r.append(t+A,e),c--,0===c&&n(r)}catch(e){o(e)}},e.then(S,S),\"$\"+A.toString(16)}return o(e),null}finally{c--}}if(\"function\"==typeof E.then){null===s&&(s=new FormData),c++;var N=i++;return E.then(function(e){try{var r=a(e,N);(e=s).append(t+N,r),c--,0===c&&n(e)}catch(e){o(e)}},o),\"$@\"+N.toString(16)}if(void 0!==(S=f.get(E)))if(d!==E)return S;else d=null;else -1===e.indexOf(\":\")&&void 0!==(S=f.get(this))&&(e=S+\":\"+e,f.set(E,e),void 0!==r&&r.set(e,E));if(b(E))return E;if(E instanceof FormData){null===s&&(s=new FormData);var D=s,U=t+(e=i++)+\"_\";return E.forEach(function(e,t){D.append(U+t,e)}),\"$K\"+e.toString(16)}if(E instanceof Map)return e=i++,S=a(Array.from(E),e),null===s&&(s=new FormData),s.append(t+e,S),\"$Q\"+e.toString(16);if(E instanceof Set)return e=i++,S=a(Array.from(E),e),null===s&&(s=new FormData),s.append(t+e,S),\"$W\"+e.toString(16);if(E instanceof ArrayBuffer)return e=new Blob([E]),S=i++,null===s&&(s=new FormData),s.append(t+S,e),\"$A\"+S.toString(16);if(E instanceof Int8Array)return u(\"O\",E);if(E instanceof Uint8Array)return u(\"o\",E);if(E instanceof Uint8ClampedArray)return u(\"U\",E);if(E instanceof Int16Array)return u(\"S\",E);if(E instanceof Uint16Array)return u(\"s\",E);if(E instanceof Int32Array)return u(\"L\",E);if(E instanceof Uint32Array)return u(\"l\",E);if(E instanceof Float32Array)return u(\"G\",E);if(E instanceof Float64Array)return u(\"g\",E);if(E instanceof BigInt64Array)return u(\"M\",E);if(E instanceof BigUint64Array)return u(\"m\",E);if(E instanceof DataView)return u(\"V\",E);if(\"function\"==typeof Blob&&E instanceof Blob)return null===s&&(s=new FormData),e=i++,s.append(t+e,E),\"$B\"+e.toString(16);if(e=null===(O=E)||\"object\"!=typeof O?null:\"function\"==typeof(O=y&&O[y]||O[\"@@iterator\"])?O:null)return(S=e.call(E))===E?(e=i++,S=a(Array.from(S),e),null===s&&(s=new FormData),s.append(t+e,S),\"$i\"+e.toString(16)):Array.from(S);if(\"function\"==typeof ReadableStream&&E instanceof ReadableStream)return function(e){try{var r,u,a,f,d,p,h,y=e.getReader({mode:\"byob\"})}catch(f){return r=e.getReader(),null===s&&(s=new FormData),u=s,c++,a=i++,r.read().then(function e(i){if(i.done)u.append(t+a,\"C\"),0==--c&&n(u);else try{var s=JSON.stringify(i.value,l);u.append(t+a,s),r.read().then(e,o)}catch(e){o(e)}},o),\"$R\"+a.toString(16)}return f=y,null===s&&(s=new FormData),d=s,c++,p=i++,h=[],f.read(new Uint8Array(1024)).then(function e(r){r.done?(r=i++,d.append(t+r,new Blob(h)),d.append(t+p,'\"$o'+r.toString(16)+'\"'),d.append(t+p,\"C\"),0==--c&&n(d)):(h.push(r.value),f.read(new Uint8Array(1024)).then(e,o))},o),\"$r\"+p.toString(16)}(E);if(\"function\"==typeof(e=E[_]))return R=E,P=e.call(E),null===s&&(s=new FormData),j=s,c++,T=i++,R=R===P,P.next().then(function e(r){if(r.done){if(void 0===r.value)j.append(t+T,\"C\");else try{var u=JSON.stringify(r.value,l);j.append(t+T,\"C\"+u)}catch(e){o(e);return}0==--c&&n(j)}else try{var a=JSON.stringify(r.value,l);j.append(t+T,a),P.next().then(e,o)}catch(e){o(e)}},o),\"$\"+(R?\"x\":\"X\")+T.toString(16);if((e=g(E))!==v&&(null===e||null!==g(e))){if(void 0===r)throw Error(\"Only plain objects, and a few built-ins, can be passed to Server Functions. Classes or null prototypes are not supported.\");return\"$T\"}return E}if(\"string\"==typeof E)return\"Z\"===E[E.length-1]&&this[e]instanceof Date?\"$D\"+E:e=\"$\"===E[0]?\"$\"+E:E;if(\"boolean\"==typeof E)return E;if(\"number\"==typeof E)return Number.isFinite(E)?0===E&&-1/0==1/E?\"$-0\":E:1/0===E?\"$Infinity\":-1/0===E?\"$-Infinity\":\"$NaN\";if(void 0===E)return\"$undefined\";if(\"function\"==typeof E){if(void 0!==(S=m.get(E)))return e=JSON.stringify({id:S.id,bound:S.bound},l),null===s&&(s=new FormData),S=i++,s.set(t+S,e),\"$F\"+S.toString(16);if(void 0!==r&&-1===e.indexOf(\":\")&&void 0!==(S=f.get(this)))return r.set(S+\":\"+e,E),\"$T\";throw Error(\"Client Functions cannot be passed directly to Server Functions. Only Functions passed from the Server can be passed back again.\")}if(\"symbol\"==typeof E){if(void 0!==r&&-1===e.indexOf(\":\")&&void 0!==(S=f.get(this)))return r.set(S+\":\"+e,E),\"$T\";throw Error(\"Symbols cannot be passed to a Server Function without a temporary reference set. Pass a TemporaryReferenceSet to the options.\")}if(\"bigint\"==typeof E)return\"$n\"+E.toString(10);throw Error(\"Type \"+typeof E+\" is not supported as an argument to a Server Function.\")}function a(e,t){return\"object\"==typeof e&&null!==e&&(t=\"$\"+t.toString(16),f.set(e,t),void 0!==r&&r.set(t,e)),d=e,JSON.stringify(e,l)}var i=1,c=0,s=null,f=new WeakMap,d=e,E=a(e,0);return null===s?n(E):(s.set(t+\"0\",E),0===c&&n(s)),function(){0<c&&(c=0,null===s?n(E):n(s))}}(e,\"\",t&&t.temporaryReferences?t.temporaryReferences:void 0,r,n);if(t&&t.signal){var u=t.signal;if(u.aborted)o(u.reason);else{var l=function(){o(u.reason),u.removeEventListener(\"abort\",l)};u.addEventListener(\"abort\",l)}}})},t.registerServerReference=function(e,t){return E(e,t,null),e}},9133:(e,t)=>{\"use strict\";function r(e){return e.startsWith(\"/\")?e:\"/\"+e}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"ensureLeadingSlash\",{enumerable:!0,get:function(){return r}})},9148:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{copyNextErrorCode:function(){return n},createDigestWithErrorCode:function(){return r},extractNextErrorCode:function(){return o}});let r=(e,t)=>\"object\"==typeof e&&null!==e&&\"__NEXT_ERROR_CODE\"in e?`${t}@${e.__NEXT_ERROR_CODE}`:t,n=(e,t)=>{let r=o(e);r&&\"object\"==typeof t&&null!==t&&Object.defineProperty(t,\"__NEXT_ERROR_CODE\",{value:r,enumerable:!1,configurable:!0})},o=e=>\"object\"==typeof e&&null!==e&&\"__NEXT_ERROR_CODE\"in e&&\"string\"==typeof e.__NEXT_ERROR_CODE?e.__NEXT_ERROR_CODE:\"object\"==typeof e&&null!==e&&\"digest\"in e&&\"string\"==typeof e.digest?e.digest.split(\"@\").find(e=>e.startsWith(\"E\")):void 0},9154:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{prefetchQueue:function(){return u},prefetchReducer:function(){return l}});let n=r(2312),o=r(1518),u=new n.PromiseQueue(5),l=function(e,t){(0,o.prunePrefetchCache)(e.prefetchCache);let{url:r}=t;return(0,o.getOrCreatePrefetchCacheEntry)({url:r,nextUrl:e.nextUrl,prefetchCache:e.prefetchCache,kind:t.kind,tree:e.tree,allowAliasing:!0}),e};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9155:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{onCaughtError:function(){return i},onUncaughtError:function(){return c}}),r(5128),r(5444);let n=r(2858),o=r(5262),u=r(1646),l=r(6905),a=r(6614);function i(e,t){var r;let u,i=null==(r=t.errorBoundary)?void 0:r.constructor;if(u=u||i===a.ErrorBoundaryHandler&&t.errorBoundary.props.errorComponent===a.GlobalError)return c(e,t);(0,o.isBailoutToCSRError)(e)||(0,n.isNextRouterError)(e)||(0,l.originConsoleError)(e)}function c(e,t){(0,o.isBailoutToCSRError)(e)||(0,n.isNextRouterError)(e)||(0,u.reportGlobalError)(e)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9187:(e,t,r)=>{\"use strict\";function n(){throw Object.defineProperty(Error(\"`unauthorized()` is experimental and only allowed to be used when `experimental.authInterrupts` is enabled.\"),\"__NEXT_ERROR_CODE\",{value:\"E411\",enumerable:!1,configurable:!0})}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"unauthorized\",{enumerable:!0,get:function(){return n}}),r(6494).HTTP_ERROR_FALLBACK_ERROR_CODE,(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9234:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"isNavigatingToNewRootLayout\",{enumerable:!0,get:function(){return function e(t,r){let n=t[0],o=r[0];if(Array.isArray(n)&&Array.isArray(o)){if(n[0]!==o[0]||n[2]!==o[2])return!0}else if(n!==o)return!0;if(t[4])return!r[4];if(r[4])return!0;let u=Object.values(t[1])[0],l=Object.values(r[1])[0];return!u||!l||e(u,l)}}}),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9509:(e,t,r)=>{\"use strict\";var n,o;e.exports=(null==(n=r.g.process)?void 0:n.env)&&\"object\"==typeof(null==(o=r.g.process)?void 0:o.env)?r.g.process:r(666)},9665:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{MetadataBoundary:function(){return u},OutletBoundary:function(){return a},ViewportBoundary:function(){return l}});let n=r(8287),o={[n.METADATA_BOUNDARY_NAME]:function(e){let{children:t}=e;return t},[n.VIEWPORT_BOUNDARY_NAME]:function(e){let{children:t}=e;return t},[n.OUTLET_BOUNDARY_NAME]:function(e){let{children:t}=e;return t}},u=o[n.METADATA_BOUNDARY_NAME.slice(0)],l=o[n.VIEWPORT_BOUNDARY_NAME.slice(0)],a=o[n.OUTLET_BOUNDARY_NAME.slice(0)];(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9726:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"reducer\",{enumerable:!0,get:function(){return f}});let n=r(9818),o=r(3894),u=r(7801),l=r(4819),a=r(5542),i=r(9154),c=r(3612),s=r(8709),f=function(e,t){switch(t.type){case n.ACTION_NAVIGATE:return(0,o.navigateReducer)(e,t);case n.ACTION_SERVER_PATCH:return(0,u.serverPatchReducer)(e,t);case n.ACTION_RESTORE:return(0,l.restoreReducer)(e,t);case n.ACTION_REFRESH:return(0,a.refreshReducer)(e,t);case n.ACTION_HMR_REFRESH:return(0,c.hmrRefreshReducer)(e,t);case n.ACTION_PREFETCH:return(0,i.prefetchReducer)(e,t);case n.ACTION_SERVER_ACTION:return(0,s.serverActionReducer)(e,t);default:throw Object.defineProperty(Error(\"Unknown action\"),\"__NEXT_ERROR_CODE\",{value:\"E295\",enumerable:!1,configurable:!0})}};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9771:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{getHydrationWarningType:function(){return a},getReactHydrationDiffSegments:function(){return s},hydrationErrorState:function(){return o},storeHydrationErrorStateFromConsoleArgs:function(){return f}});let n=r(6465),o={},u=new Set([\"Warning: In HTML, %s cannot be a child of <%s>.%s\\nThis will cause a hydration error.%s\",\"Warning: In HTML, %s cannot be a descendant of <%s>.\\nThis will cause a hydration error.%s\",\"Warning: In HTML, text nodes cannot be a child of <%s>.\\nThis will cause a hydration error.\",\"Warning: In HTML, whitespace text nodes cannot be a child of <%s>. Make sure you don't have any extra whitespace between tags on each line of your source code.\\nThis will cause a hydration error.\",\"Warning: Expected server HTML to contain a matching <%s> in <%s>.%s\",\"Warning: Did not expect server HTML to contain a <%s> in <%s>.%s\"]),l=new Set(['Warning: Expected server HTML to contain a matching text node for \"%s\" in <%s>.%s','Warning: Did not expect server HTML to contain the text node \"%s\" in <%s>.%s']),a=e=>{if(\"string\"!=typeof e)return\"text\";let t=e.startsWith(\"Warning: \")?e:\"Warning: \"+e;return i(t)?\"tag\":c(t)?\"text-in-tag\":\"text\"},i=e=>u.has(e),c=e=>l.has(e),s=e=>{if(e){let{message:t,diff:r}=(0,n.getHydrationErrorStackInfo)(e);if(t)return[t,r]}};function f(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];let[u,l,i,...c]=t;if((0,n.testReactHydrationWarning)(u)){let e=u.startsWith(\"Warning: \");3===t.length&&(i=\"\");let r=[u,l,i],n=(c[c.length-1]||\"\").trim();e?o.reactOutputComponentDiff=function(e,t,r,n){let o=-1,u=-1,l=a(e),i=n.split(\"\\n\").map((e,n)=>{e=e.trim();let[,l,a]=/at (\\w+)( \\((.*)\\))?/.exec(e)||[];return a||(l===t&&-1===o?o=n:l===r&&-1===u&&(u=n)),a?\"\":l}).filter(Boolean).reverse(),c=\"\";for(let e=0;e<i.length;e++){let t=i[e],r=\"tag\"===l&&e===i.length-o-1,n=\"tag\"===l&&e===i.length-u-1;r||n?c+=\"> \"+\" \".repeat(Math.max(2*e-2,0)+2)+\"<\"+t+\">\\n\":c+=\" \".repeat(2*e+2)+\"<\"+t+\">\\n\"}if(\"text\"===l){let e=\" \".repeat(2*i.length);c+=\"+ \"+e+'\"'+t+'\"\\n'+(\"- \"+e+'\"'+r)+'\"\\n'}else if(\"text-in-tag\"===l){let e=\" \".repeat(2*i.length);c+=\"> \"+e+\"<\"+r+\">\\n\"+(\">   \"+e+'\"'+t)+'\"\\n'}return c}(u,l,i,n):o.reactOutputComponentDiff=n,o.warning=r,o.serverContent=l,o.clientContent=i}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9818:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{ACTION_HMR_REFRESH:function(){return a},ACTION_NAVIGATE:function(){return n},ACTION_PREFETCH:function(){return l},ACTION_REFRESH:function(){return r},ACTION_RESTORE:function(){return o},ACTION_SERVER_ACTION:function(){return i},ACTION_SERVER_PATCH:function(){return u},PrefetchCacheEntryStatus:function(){return s},PrefetchKind:function(){return c}});let r=\"refresh\",n=\"navigate\",o=\"restore\",u=\"server-patch\",l=\"prefetch\",a=\"hmr-refresh\",i=\"server-action\";var c=function(e){return e.AUTO=\"auto\",e.FULL=\"full\",e.TEMPORARY=\"temporary\",e}({}),s=function(e){return e.fresh=\"fresh\",e.reusable=\"reusable\",e.expired=\"expired\",e.stale=\"stale\",e}({});(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9837:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"InvariantError\",{enumerable:!0,get:function(){return r}});class r extends Error{constructor(e,t){super(\"Invariant: \"+(e.endsWith(\".\")?e:e+\".\")+\" This is a bug in Next.js.\",t),this.name=\"InvariantError\"}}},9880:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"clearCacheNodeDataForSegmentPath\",{enumerable:!0,get:function(){return function e(t,r,u){let l=u.length<=2,[a,i]=u,c=(0,o.createRouterCacheKey)(i),s=r.parallelRoutes.get(a),f=t.parallelRoutes.get(a);f&&f!==s||(f=new Map(s),t.parallelRoutes.set(a,f));let d=null==s?void 0:s.get(c),p=f.get(c);if(l){p&&p.lazyData&&p!==d||f.set(c,{lazyData:null,rsc:null,prefetchRsc:null,head:null,prefetchHead:null,parallelRoutes:new Map,loading:null,navigatedAt:-1});return}if(!p||!d){p||f.set(c,{lazyData:null,rsc:null,prefetchRsc:null,head:null,prefetchHead:null,parallelRoutes:new Map,loading:null,navigatedAt:-1});return}return p===d&&(p={lazyData:p.lazyData,rsc:p.rsc,prefetchRsc:p.prefetchRsc,head:p.head,prefetchHead:p.prefetchHead,parallelRoutes:new Map(p.parallelRoutes),loading:p.loading},f.set(c,p)),e(p,d,(0,n.getNextFlightSegmentPath)(u))}}});let n=r(2561),o=r(5637);(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9921:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"useUntrackedPathname\",{enumerable:!0,get:function(){return u}});let n=r(2115),o=r(886);function u(){return(0,n.useContext)(o.PathnameContext)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)}}]);",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/848-c3a855b8cba03453.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'i' is assigned a value but never used.",
        "line": 1,
        "column": 20840,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 20841
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use strict\";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[848],{2596:(e,r,o)=>{o.d(r,{$:()=>t});function t(){for(var e,r,o=0,t=\"\",n=arguments.length;o<n;o++)(e=arguments[o])&&(r=function e(r){var o,t,n=\"\";if(\"string\"==typeof r||\"number\"==typeof r)n+=r;else if(\"object\"==typeof r)if(Array.isArray(r)){var l=r.length;for(o=0;o<l;o++)r[o]&&(t=e(r[o]))&&(n&&(n+=\" \"),n+=t)}else for(t in r)r[t]&&(n&&(n+=\" \"),n+=t);return n}(e))&&(t&&(t+=\" \"),t+=r);return t}},6101:(e,r,o)=>{o.d(r,{s:()=>s,t:()=>l});var t=o(2115);function n(e,r){if(\"function\"==typeof e)return e(r);null!=e&&(e.current=r)}function l(...e){return r=>{let o=!1,t=e.map(e=>{let t=n(e,r);return o||\"function\"!=typeof t||(o=!0),t});if(o)return()=>{for(let r=0;r<t.length;r++){let o=t[r];\"function\"==typeof o?o():n(e[r],null)}}}}function s(...e){return t.useCallback(l(...e),e)}},9688:(e,r,o)=>{o.d(r,{QP:()=>H});let t=e=>{let r=i(e),{conflictingClassGroups:o,conflictingClassGroupModifiers:t}=e;return{getClassGroupId:e=>{let o=e.split(\"-\");return\"\"===o[0]&&1!==o.length&&o.shift(),n(o,r)||s(e)},getConflictingClassGroupIds:(e,r)=>{let n=o[e]||[];return r&&t[e]?[...n,...t[e]]:n}}},n=(e,r)=>{if(0===e.length)return r.classGroupId;let o=e[0],t=r.nextPart.get(o),l=t?n(e.slice(1),t):void 0;if(l)return l;if(0===r.validators.length)return;let s=e.join(\"-\");return r.validators.find(({validator:e})=>e(s))?.classGroupId},l=/^\\[(.+)\\]$/,s=e=>{if(l.test(e)){let r=l.exec(e)[1],o=r?.substring(0,r.indexOf(\":\"));if(o)return\"arbitrary..\"+o}},i=e=>{let{theme:r,prefix:o}=e,t={nextPart:new Map,validators:[]};return p(Object.entries(e.classGroups),o).forEach(([e,o])=>{a(o,t,e,r)}),t},a=(e,r,o,t)=>{e.forEach(e=>{if(\"string\"==typeof e){(\"\"===e?r:d(r,e)).classGroupId=o;return}if(\"function\"==typeof e)return c(e)?void a(e(t),r,o,t):void r.validators.push({validator:e,classGroupId:o});Object.entries(e).forEach(([e,n])=>{a(n,d(r,e),o,t)})})},d=(e,r)=>{let o=e;return r.split(\"-\").forEach(e=>{o.nextPart.has(e)||o.nextPart.set(e,{nextPart:new Map,validators:[]}),o=o.nextPart.get(e)}),o},c=e=>e.isThemeGetter,p=(e,r)=>r?e.map(([e,o])=>[e,o.map(e=>\"string\"==typeof e?r+e:\"object\"==typeof e?Object.fromEntries(Object.entries(e).map(([e,o])=>[r+e,o])):e)]):e,u=e=>{if(e<1)return{get:()=>void 0,set:()=>{}};let r=0,o=new Map,t=new Map,n=(n,l)=>{o.set(n,l),++r>e&&(r=0,t=o,o=new Map)};return{get(e){let r=o.get(e);return void 0!==r?r:void 0!==(r=t.get(e))?(n(e,r),r):void 0},set(e,r){o.has(e)?o.set(e,r):n(e,r)}}},b=e=>{let{separator:r,experimentalParseClassName:o}=e,t=1===r.length,n=r[0],l=r.length,s=e=>{let o,s=[],i=0,a=0;for(let d=0;d<e.length;d++){let c=e[d];if(0===i){if(c===n&&(t||e.slice(d,d+l)===r)){s.push(e.slice(a,d)),a=d+l;continue}if(\"/\"===c){o=d;continue}}\"[\"===c?i++:\"]\"===c&&i--}let d=0===s.length?e:e.substring(a),c=d.startsWith(\"!\"),p=c?d.substring(1):d;return{modifiers:s,hasImportantModifier:c,baseClassName:p,maybePostfixModifierPosition:o&&o>a?o-a:void 0}};return o?e=>o({className:e,parseClassName:s}):s},f=e=>{if(e.length<=1)return e;let r=[],o=[];return e.forEach(e=>{\"[\"===e[0]?(r.push(...o.sort(),e),o=[]):o.push(e)}),r.push(...o.sort()),r},m=e=>({cache:u(e.cacheSize),parseClassName:b(e),...t(e)}),g=/\\s+/,h=(e,r)=>{let{parseClassName:o,getClassGroupId:t,getConflictingClassGroupIds:n}=r,l=[],s=e.trim().split(g),i=\"\";for(let e=s.length-1;e>=0;e-=1){let r=s[e],{modifiers:a,hasImportantModifier:d,baseClassName:c,maybePostfixModifierPosition:p}=o(r),u=!!p,b=t(u?c.substring(0,p):c);if(!b){if(!u||!(b=t(c))){i=r+(i.length>0?\" \"+i:i);continue}u=!1}let m=f(a).join(\":\"),g=d?m+\"!\":m,h=g+b;if(l.includes(h))continue;l.push(h);let y=n(b,u);for(let e=0;e<y.length;++e){let r=y[e];l.push(g+r)}i=r+(i.length>0?\" \"+i:i)}return i};function y(){let e,r,o=0,t=\"\";for(;o<arguments.length;)(e=arguments[o++])&&(r=x(e))&&(t&&(t+=\" \"),t+=r);return t}let x=e=>{let r;if(\"string\"==typeof e)return e;let o=\"\";for(let t=0;t<e.length;t++)e[t]&&(r=x(e[t]))&&(o&&(o+=\" \"),o+=r);return o},v=e=>{let r=r=>r[e]||[];return r.isThemeGetter=!0,r},w=/^\\[(?:([a-z-]+):)?(.+)\\]$/i,k=/^\\d+\\/\\d+$/,z=new Set([\"px\",\"full\",\"screen\"]),j=/^(\\d+(\\.\\d+)?)?(xs|sm|md|lg|xl)$/,C=/\\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\\b(calc|min|max|clamp)\\(.+\\)|^0$/,S=/^(rgba?|hsla?|hwb|(ok)?(lab|lch))\\(.+\\)$/,E=/^(inset_)?-?((\\d+)?\\.?(\\d+)[a-z]+|0)_-?((\\d+)?\\.?(\\d+)[a-z]+|0)/,P=/^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\\(.+\\)$/,N=e=>R(e)||z.has(e)||k.test(e),G=e=>F(e,\"length\",L),R=e=>!!e&&!Number.isNaN(Number(e)),$=e=>F(e,\"number\",R),_=e=>!!e&&Number.isInteger(Number(e)),O=e=>e.endsWith(\"%\")&&R(e.slice(0,-1)),I=e=>w.test(e),W=e=>j.test(e),M=new Set([\"length\",\"size\",\"percentage\"]),A=e=>F(e,M,Q),T=e=>F(e,\"position\",Q),V=new Set([\"image\",\"url\"]),D=e=>F(e,V,Z),q=e=>F(e,\"\",X),B=()=>!0,F=(e,r,o)=>{let t=w.exec(e);return!!t&&(t[1]?\"string\"==typeof r?t[1]===r:r.has(t[1]):o(t[2]))},L=e=>C.test(e)&&!S.test(e),Q=()=>!1,X=e=>E.test(e),Z=e=>P.test(e);Symbol.toStringTag;let H=function(e,...r){let o,t,n,l=function(i){return t=(o=m(r.reduce((e,r)=>r(e),e()))).cache.get,n=o.cache.set,l=s,s(i)};function s(e){let r=t(e);if(r)return r;let l=h(e,o);return n(e,l),l}return function(){return l(y.apply(null,arguments))}}(()=>{let e=v(\"colors\"),r=v(\"spacing\"),o=v(\"blur\"),t=v(\"brightness\"),n=v(\"borderColor\"),l=v(\"borderRadius\"),s=v(\"borderSpacing\"),i=v(\"borderWidth\"),a=v(\"contrast\"),d=v(\"grayscale\"),c=v(\"hueRotate\"),p=v(\"invert\"),u=v(\"gap\"),b=v(\"gradientColorStops\"),f=v(\"gradientColorStopPositions\"),m=v(\"inset\"),g=v(\"margin\"),h=v(\"opacity\"),y=v(\"padding\"),x=v(\"saturate\"),w=v(\"scale\"),k=v(\"sepia\"),z=v(\"skew\"),j=v(\"space\"),C=v(\"translate\"),S=()=>[\"auto\",\"contain\",\"none\"],E=()=>[\"auto\",\"hidden\",\"clip\",\"visible\",\"scroll\"],P=()=>[\"auto\",I,r],M=()=>[I,r],V=()=>[\"\",N,G],F=()=>[\"auto\",R,I],L=()=>[\"bottom\",\"center\",\"left\",\"left-bottom\",\"left-top\",\"right\",\"right-bottom\",\"right-top\",\"top\"],Q=()=>[\"solid\",\"dashed\",\"dotted\",\"double\",\"none\"],X=()=>[\"normal\",\"multiply\",\"screen\",\"overlay\",\"darken\",\"lighten\",\"color-dodge\",\"color-burn\",\"hard-light\",\"soft-light\",\"difference\",\"exclusion\",\"hue\",\"saturation\",\"color\",\"luminosity\"],Z=()=>[\"start\",\"end\",\"center\",\"between\",\"around\",\"evenly\",\"stretch\"],H=()=>[\"\",\"0\",I],J=()=>[\"auto\",\"avoid\",\"all\",\"avoid-page\",\"page\",\"left\",\"right\",\"column\"],K=()=>[R,I];return{cacheSize:500,separator:\":\",theme:{colors:[B],spacing:[N,G],blur:[\"none\",\"\",W,I],brightness:K(),borderColor:[e],borderRadius:[\"none\",\"\",\"full\",W,I],borderSpacing:M(),borderWidth:V(),contrast:K(),grayscale:H(),hueRotate:K(),invert:H(),gap:M(),gradientColorStops:[e],gradientColorStopPositions:[O,G],inset:P(),margin:P(),opacity:K(),padding:M(),saturate:K(),scale:K(),sepia:H(),skew:K(),space:M(),translate:M()},classGroups:{aspect:[{aspect:[\"auto\",\"square\",\"video\",I]}],container:[\"container\"],columns:[{columns:[W]}],\"break-after\":[{\"break-after\":J()}],\"break-before\":[{\"break-before\":J()}],\"break-inside\":[{\"break-inside\":[\"auto\",\"avoid\",\"avoid-page\",\"avoid-column\"]}],\"box-decoration\":[{\"box-decoration\":[\"slice\",\"clone\"]}],box:[{box:[\"border\",\"content\"]}],display:[\"block\",\"inline-block\",\"inline\",\"flex\",\"inline-flex\",\"table\",\"inline-table\",\"table-caption\",\"table-cell\",\"table-column\",\"table-column-group\",\"table-footer-group\",\"table-header-group\",\"table-row-group\",\"table-row\",\"flow-root\",\"grid\",\"inline-grid\",\"contents\",\"list-item\",\"hidden\"],float:[{float:[\"right\",\"left\",\"none\",\"start\",\"end\"]}],clear:[{clear:[\"left\",\"right\",\"both\",\"none\",\"start\",\"end\"]}],isolation:[\"isolate\",\"isolation-auto\"],\"object-fit\":[{object:[\"contain\",\"cover\",\"fill\",\"none\",\"scale-down\"]}],\"object-position\":[{object:[...L(),I]}],overflow:[{overflow:E()}],\"overflow-x\":[{\"overflow-x\":E()}],\"overflow-y\":[{\"overflow-y\":E()}],overscroll:[{overscroll:S()}],\"overscroll-x\":[{\"overscroll-x\":S()}],\"overscroll-y\":[{\"overscroll-y\":S()}],position:[\"static\",\"fixed\",\"absolute\",\"relative\",\"sticky\"],inset:[{inset:[m]}],\"inset-x\":[{\"inset-x\":[m]}],\"inset-y\":[{\"inset-y\":[m]}],start:[{start:[m]}],end:[{end:[m]}],top:[{top:[m]}],right:[{right:[m]}],bottom:[{bottom:[m]}],left:[{left:[m]}],visibility:[\"visible\",\"invisible\",\"collapse\"],z:[{z:[\"auto\",_,I]}],basis:[{basis:P()}],\"flex-direction\":[{flex:[\"row\",\"row-reverse\",\"col\",\"col-reverse\"]}],\"flex-wrap\":[{flex:[\"wrap\",\"wrap-reverse\",\"nowrap\"]}],flex:[{flex:[\"1\",\"auto\",\"initial\",\"none\",I]}],grow:[{grow:H()}],shrink:[{shrink:H()}],order:[{order:[\"first\",\"last\",\"none\",_,I]}],\"grid-cols\":[{\"grid-cols\":[B]}],\"col-start-end\":[{col:[\"auto\",{span:[\"full\",_,I]},I]}],\"col-start\":[{\"col-start\":F()}],\"col-end\":[{\"col-end\":F()}],\"grid-rows\":[{\"grid-rows\":[B]}],\"row-start-end\":[{row:[\"auto\",{span:[_,I]},I]}],\"row-start\":[{\"row-start\":F()}],\"row-end\":[{\"row-end\":F()}],\"grid-flow\":[{\"grid-flow\":[\"row\",\"col\",\"dense\",\"row-dense\",\"col-dense\"]}],\"auto-cols\":[{\"auto-cols\":[\"auto\",\"min\",\"max\",\"fr\",I]}],\"auto-rows\":[{\"auto-rows\":[\"auto\",\"min\",\"max\",\"fr\",I]}],gap:[{gap:[u]}],\"gap-x\":[{\"gap-x\":[u]}],\"gap-y\":[{\"gap-y\":[u]}],\"justify-content\":[{justify:[\"normal\",...Z()]}],\"justify-items\":[{\"justify-items\":[\"start\",\"end\",\"center\",\"stretch\"]}],\"justify-self\":[{\"justify-self\":[\"auto\",\"start\",\"end\",\"center\",\"stretch\"]}],\"align-content\":[{content:[\"normal\",...Z(),\"baseline\"]}],\"align-items\":[{items:[\"start\",\"end\",\"center\",\"baseline\",\"stretch\"]}],\"align-self\":[{self:[\"auto\",\"start\",\"end\",\"center\",\"stretch\",\"baseline\"]}],\"place-content\":[{\"place-content\":[...Z(),\"baseline\"]}],\"place-items\":[{\"place-items\":[\"start\",\"end\",\"center\",\"baseline\",\"stretch\"]}],\"place-self\":[{\"place-self\":[\"auto\",\"start\",\"end\",\"center\",\"stretch\"]}],p:[{p:[y]}],px:[{px:[y]}],py:[{py:[y]}],ps:[{ps:[y]}],pe:[{pe:[y]}],pt:[{pt:[y]}],pr:[{pr:[y]}],pb:[{pb:[y]}],pl:[{pl:[y]}],m:[{m:[g]}],mx:[{mx:[g]}],my:[{my:[g]}],ms:[{ms:[g]}],me:[{me:[g]}],mt:[{mt:[g]}],mr:[{mr:[g]}],mb:[{mb:[g]}],ml:[{ml:[g]}],\"space-x\":[{\"space-x\":[j]}],\"space-x-reverse\":[\"space-x-reverse\"],\"space-y\":[{\"space-y\":[j]}],\"space-y-reverse\":[\"space-y-reverse\"],w:[{w:[\"auto\",\"min\",\"max\",\"fit\",\"svw\",\"lvw\",\"dvw\",I,r]}],\"min-w\":[{\"min-w\":[I,r,\"min\",\"max\",\"fit\"]}],\"max-w\":[{\"max-w\":[I,r,\"none\",\"full\",\"min\",\"max\",\"fit\",\"prose\",{screen:[W]},W]}],h:[{h:[I,r,\"auto\",\"min\",\"max\",\"fit\",\"svh\",\"lvh\",\"dvh\"]}],\"min-h\":[{\"min-h\":[I,r,\"min\",\"max\",\"fit\",\"svh\",\"lvh\",\"dvh\"]}],\"max-h\":[{\"max-h\":[I,r,\"min\",\"max\",\"fit\",\"svh\",\"lvh\",\"dvh\"]}],size:[{size:[I,r,\"auto\",\"min\",\"max\",\"fit\"]}],\"font-size\":[{text:[\"base\",W,G]}],\"font-smoothing\":[\"antialiased\",\"subpixel-antialiased\"],\"font-style\":[\"italic\",\"not-italic\"],\"font-weight\":[{font:[\"thin\",\"extralight\",\"light\",\"normal\",\"medium\",\"semibold\",\"bold\",\"extrabold\",\"black\",$]}],\"font-family\":[{font:[B]}],\"fvn-normal\":[\"normal-nums\"],\"fvn-ordinal\":[\"ordinal\"],\"fvn-slashed-zero\":[\"slashed-zero\"],\"fvn-figure\":[\"lining-nums\",\"oldstyle-nums\"],\"fvn-spacing\":[\"proportional-nums\",\"tabular-nums\"],\"fvn-fraction\":[\"diagonal-fractions\",\"stacked-fractions\"],tracking:[{tracking:[\"tighter\",\"tight\",\"normal\",\"wide\",\"wider\",\"widest\",I]}],\"line-clamp\":[{\"line-clamp\":[\"none\",R,$]}],leading:[{leading:[\"none\",\"tight\",\"snug\",\"normal\",\"relaxed\",\"loose\",N,I]}],\"list-image\":[{\"list-image\":[\"none\",I]}],\"list-style-type\":[{list:[\"none\",\"disc\",\"decimal\",I]}],\"list-style-position\":[{list:[\"inside\",\"outside\"]}],\"placeholder-color\":[{placeholder:[e]}],\"placeholder-opacity\":[{\"placeholder-opacity\":[h]}],\"text-alignment\":[{text:[\"left\",\"center\",\"right\",\"justify\",\"start\",\"end\"]}],\"text-color\":[{text:[e]}],\"text-opacity\":[{\"text-opacity\":[h]}],\"text-decoration\":[\"underline\",\"overline\",\"line-through\",\"no-underline\"],\"text-decoration-style\":[{decoration:[...Q(),\"wavy\"]}],\"text-decoration-thickness\":[{decoration:[\"auto\",\"from-font\",N,G]}],\"underline-offset\":[{\"underline-offset\":[\"auto\",N,I]}],\"text-decoration-color\":[{decoration:[e]}],\"text-transform\":[\"uppercase\",\"lowercase\",\"capitalize\",\"normal-case\"],\"text-overflow\":[\"truncate\",\"text-ellipsis\",\"text-clip\"],\"text-wrap\":[{text:[\"wrap\",\"nowrap\",\"balance\",\"pretty\"]}],indent:[{indent:M()}],\"vertical-align\":[{align:[\"baseline\",\"top\",\"middle\",\"bottom\",\"text-top\",\"text-bottom\",\"sub\",\"super\",I]}],whitespace:[{whitespace:[\"normal\",\"nowrap\",\"pre\",\"pre-line\",\"pre-wrap\",\"break-spaces\"]}],break:[{break:[\"normal\",\"words\",\"all\",\"keep\"]}],hyphens:[{hyphens:[\"none\",\"manual\",\"auto\"]}],content:[{content:[\"none\",I]}],\"bg-attachment\":[{bg:[\"fixed\",\"local\",\"scroll\"]}],\"bg-clip\":[{\"bg-clip\":[\"border\",\"padding\",\"content\",\"text\"]}],\"bg-opacity\":[{\"bg-opacity\":[h]}],\"bg-origin\":[{\"bg-origin\":[\"border\",\"padding\",\"content\"]}],\"bg-position\":[{bg:[...L(),T]}],\"bg-repeat\":[{bg:[\"no-repeat\",{repeat:[\"\",\"x\",\"y\",\"round\",\"space\"]}]}],\"bg-size\":[{bg:[\"auto\",\"cover\",\"contain\",A]}],\"bg-image\":[{bg:[\"none\",{\"gradient-to\":[\"t\",\"tr\",\"r\",\"br\",\"b\",\"bl\",\"l\",\"tl\"]},D]}],\"bg-color\":[{bg:[e]}],\"gradient-from-pos\":[{from:[f]}],\"gradient-via-pos\":[{via:[f]}],\"gradient-to-pos\":[{to:[f]}],\"gradient-from\":[{from:[b]}],\"gradient-via\":[{via:[b]}],\"gradient-to\":[{to:[b]}],rounded:[{rounded:[l]}],\"rounded-s\":[{\"rounded-s\":[l]}],\"rounded-e\":[{\"rounded-e\":[l]}],\"rounded-t\":[{\"rounded-t\":[l]}],\"rounded-r\":[{\"rounded-r\":[l]}],\"rounded-b\":[{\"rounded-b\":[l]}],\"rounded-l\":[{\"rounded-l\":[l]}],\"rounded-ss\":[{\"rounded-ss\":[l]}],\"rounded-se\":[{\"rounded-se\":[l]}],\"rounded-ee\":[{\"rounded-ee\":[l]}],\"rounded-es\":[{\"rounded-es\":[l]}],\"rounded-tl\":[{\"rounded-tl\":[l]}],\"rounded-tr\":[{\"rounded-tr\":[l]}],\"rounded-br\":[{\"rounded-br\":[l]}],\"rounded-bl\":[{\"rounded-bl\":[l]}],\"border-w\":[{border:[i]}],\"border-w-x\":[{\"border-x\":[i]}],\"border-w-y\":[{\"border-y\":[i]}],\"border-w-s\":[{\"border-s\":[i]}],\"border-w-e\":[{\"border-e\":[i]}],\"border-w-t\":[{\"border-t\":[i]}],\"border-w-r\":[{\"border-r\":[i]}],\"border-w-b\":[{\"border-b\":[i]}],\"border-w-l\":[{\"border-l\":[i]}],\"border-opacity\":[{\"border-opacity\":[h]}],\"border-style\":[{border:[...Q(),\"hidden\"]}],\"divide-x\":[{\"divide-x\":[i]}],\"divide-x-reverse\":[\"divide-x-reverse\"],\"divide-y\":[{\"divide-y\":[i]}],\"divide-y-reverse\":[\"divide-y-reverse\"],\"divide-opacity\":[{\"divide-opacity\":[h]}],\"divide-style\":[{divide:Q()}],\"border-color\":[{border:[n]}],\"border-color-x\":[{\"border-x\":[n]}],\"border-color-y\":[{\"border-y\":[n]}],\"border-color-s\":[{\"border-s\":[n]}],\"border-color-e\":[{\"border-e\":[n]}],\"border-color-t\":[{\"border-t\":[n]}],\"border-color-r\":[{\"border-r\":[n]}],\"border-color-b\":[{\"border-b\":[n]}],\"border-color-l\":[{\"border-l\":[n]}],\"divide-color\":[{divide:[n]}],\"outline-style\":[{outline:[\"\",...Q()]}],\"outline-offset\":[{\"outline-offset\":[N,I]}],\"outline-w\":[{outline:[N,G]}],\"outline-color\":[{outline:[e]}],\"ring-w\":[{ring:V()}],\"ring-w-inset\":[\"ring-inset\"],\"ring-color\":[{ring:[e]}],\"ring-opacity\":[{\"ring-opacity\":[h]}],\"ring-offset-w\":[{\"ring-offset\":[N,G]}],\"ring-offset-color\":[{\"ring-offset\":[e]}],shadow:[{shadow:[\"\",\"inner\",\"none\",W,q]}],\"shadow-color\":[{shadow:[B]}],opacity:[{opacity:[h]}],\"mix-blend\":[{\"mix-blend\":[...X(),\"plus-lighter\",\"plus-darker\"]}],\"bg-blend\":[{\"bg-blend\":X()}],filter:[{filter:[\"\",\"none\"]}],blur:[{blur:[o]}],brightness:[{brightness:[t]}],contrast:[{contrast:[a]}],\"drop-shadow\":[{\"drop-shadow\":[\"\",\"none\",W,I]}],grayscale:[{grayscale:[d]}],\"hue-rotate\":[{\"hue-rotate\":[c]}],invert:[{invert:[p]}],saturate:[{saturate:[x]}],sepia:[{sepia:[k]}],\"backdrop-filter\":[{\"backdrop-filter\":[\"\",\"none\"]}],\"backdrop-blur\":[{\"backdrop-blur\":[o]}],\"backdrop-brightness\":[{\"backdrop-brightness\":[t]}],\"backdrop-contrast\":[{\"backdrop-contrast\":[a]}],\"backdrop-grayscale\":[{\"backdrop-grayscale\":[d]}],\"backdrop-hue-rotate\":[{\"backdrop-hue-rotate\":[c]}],\"backdrop-invert\":[{\"backdrop-invert\":[p]}],\"backdrop-opacity\":[{\"backdrop-opacity\":[h]}],\"backdrop-saturate\":[{\"backdrop-saturate\":[x]}],\"backdrop-sepia\":[{\"backdrop-sepia\":[k]}],\"border-collapse\":[{border:[\"collapse\",\"separate\"]}],\"border-spacing\":[{\"border-spacing\":[s]}],\"border-spacing-x\":[{\"border-spacing-x\":[s]}],\"border-spacing-y\":[{\"border-spacing-y\":[s]}],\"table-layout\":[{table:[\"auto\",\"fixed\"]}],caption:[{caption:[\"top\",\"bottom\"]}],transition:[{transition:[\"none\",\"all\",\"\",\"colors\",\"opacity\",\"shadow\",\"transform\",I]}],duration:[{duration:K()}],ease:[{ease:[\"linear\",\"in\",\"out\",\"in-out\",I]}],delay:[{delay:K()}],animate:[{animate:[\"none\",\"spin\",\"ping\",\"pulse\",\"bounce\",I]}],transform:[{transform:[\"\",\"gpu\",\"none\"]}],scale:[{scale:[w]}],\"scale-x\":[{\"scale-x\":[w]}],\"scale-y\":[{\"scale-y\":[w]}],rotate:[{rotate:[_,I]}],\"translate-x\":[{\"translate-x\":[C]}],\"translate-y\":[{\"translate-y\":[C]}],\"skew-x\":[{\"skew-x\":[z]}],\"skew-y\":[{\"skew-y\":[z]}],\"transform-origin\":[{origin:[\"center\",\"top\",\"top-right\",\"right\",\"bottom-right\",\"bottom\",\"bottom-left\",\"left\",\"top-left\",I]}],accent:[{accent:[\"auto\",e]}],appearance:[{appearance:[\"none\",\"auto\"]}],cursor:[{cursor:[\"auto\",\"default\",\"pointer\",\"wait\",\"text\",\"move\",\"help\",\"not-allowed\",\"none\",\"context-menu\",\"progress\",\"cell\",\"crosshair\",\"vertical-text\",\"alias\",\"copy\",\"no-drop\",\"grab\",\"grabbing\",\"all-scroll\",\"col-resize\",\"row-resize\",\"n-resize\",\"e-resize\",\"s-resize\",\"w-resize\",\"ne-resize\",\"nw-resize\",\"se-resize\",\"sw-resize\",\"ew-resize\",\"ns-resize\",\"nesw-resize\",\"nwse-resize\",\"zoom-in\",\"zoom-out\",I]}],\"caret-color\":[{caret:[e]}],\"pointer-events\":[{\"pointer-events\":[\"none\",\"auto\"]}],resize:[{resize:[\"none\",\"y\",\"x\",\"\"]}],\"scroll-behavior\":[{scroll:[\"auto\",\"smooth\"]}],\"scroll-m\":[{\"scroll-m\":M()}],\"scroll-mx\":[{\"scroll-mx\":M()}],\"scroll-my\":[{\"scroll-my\":M()}],\"scroll-ms\":[{\"scroll-ms\":M()}],\"scroll-me\":[{\"scroll-me\":M()}],\"scroll-mt\":[{\"scroll-mt\":M()}],\"scroll-mr\":[{\"scroll-mr\":M()}],\"scroll-mb\":[{\"scroll-mb\":M()}],\"scroll-ml\":[{\"scroll-ml\":M()}],\"scroll-p\":[{\"scroll-p\":M()}],\"scroll-px\":[{\"scroll-px\":M()}],\"scroll-py\":[{\"scroll-py\":M()}],\"scroll-ps\":[{\"scroll-ps\":M()}],\"scroll-pe\":[{\"scroll-pe\":M()}],\"scroll-pt\":[{\"scroll-pt\":M()}],\"scroll-pr\":[{\"scroll-pr\":M()}],\"scroll-pb\":[{\"scroll-pb\":M()}],\"scroll-pl\":[{\"scroll-pl\":M()}],\"snap-align\":[{snap:[\"start\",\"end\",\"center\",\"align-none\"]}],\"snap-stop\":[{snap:[\"normal\",\"always\"]}],\"snap-type\":[{snap:[\"none\",\"x\",\"y\",\"both\"]}],\"snap-strictness\":[{snap:[\"mandatory\",\"proximity\"]}],touch:[{touch:[\"auto\",\"none\",\"manipulation\"]}],\"touch-x\":[{\"touch-pan\":[\"x\",\"left\",\"right\"]}],\"touch-y\":[{\"touch-pan\":[\"y\",\"up\",\"down\"]}],\"touch-pz\":[\"touch-pinch-zoom\"],select:[{select:[\"none\",\"text\",\"all\",\"auto\"]}],\"will-change\":[{\"will-change\":[\"auto\",\"scroll\",\"contents\",\"transform\",I]}],fill:[{fill:[e,\"none\"]}],\"stroke-w\":[{stroke:[N,G,$]}],stroke:[{stroke:[e,\"none\"]}],sr:[\"sr-only\",\"not-sr-only\"],\"forced-color-adjust\":[{\"forced-color-adjust\":[\"auto\",\"none\"]}]},conflictingClassGroups:{overflow:[\"overflow-x\",\"overflow-y\"],overscroll:[\"overscroll-x\",\"overscroll-y\"],inset:[\"inset-x\",\"inset-y\",\"start\",\"end\",\"top\",\"right\",\"bottom\",\"left\"],\"inset-x\":[\"right\",\"left\"],\"inset-y\":[\"top\",\"bottom\"],flex:[\"basis\",\"grow\",\"shrink\"],gap:[\"gap-x\",\"gap-y\"],p:[\"px\",\"py\",\"ps\",\"pe\",\"pt\",\"pr\",\"pb\",\"pl\"],px:[\"pr\",\"pl\"],py:[\"pt\",\"pb\"],m:[\"mx\",\"my\",\"ms\",\"me\",\"mt\",\"mr\",\"mb\",\"ml\"],mx:[\"mr\",\"ml\"],my:[\"mt\",\"mb\"],size:[\"w\",\"h\"],\"font-size\":[\"leading\"],\"fvn-normal\":[\"fvn-ordinal\",\"fvn-slashed-zero\",\"fvn-figure\",\"fvn-spacing\",\"fvn-fraction\"],\"fvn-ordinal\":[\"fvn-normal\"],\"fvn-slashed-zero\":[\"fvn-normal\"],\"fvn-figure\":[\"fvn-normal\"],\"fvn-spacing\":[\"fvn-normal\"],\"fvn-fraction\":[\"fvn-normal\"],\"line-clamp\":[\"display\",\"overflow\"],rounded:[\"rounded-s\",\"rounded-e\",\"rounded-t\",\"rounded-r\",\"rounded-b\",\"rounded-l\",\"rounded-ss\",\"rounded-se\",\"rounded-ee\",\"rounded-es\",\"rounded-tl\",\"rounded-tr\",\"rounded-br\",\"rounded-bl\"],\"rounded-s\":[\"rounded-ss\",\"rounded-es\"],\"rounded-e\":[\"rounded-se\",\"rounded-ee\"],\"rounded-t\":[\"rounded-tl\",\"rounded-tr\"],\"rounded-r\":[\"rounded-tr\",\"rounded-br\"],\"rounded-b\":[\"rounded-br\",\"rounded-bl\"],\"rounded-l\":[\"rounded-tl\",\"rounded-bl\"],\"border-spacing\":[\"border-spacing-x\",\"border-spacing-y\"],\"border-w\":[\"border-w-s\",\"border-w-e\",\"border-w-t\",\"border-w-r\",\"border-w-b\",\"border-w-l\"],\"border-w-x\":[\"border-w-r\",\"border-w-l\"],\"border-w-y\":[\"border-w-t\",\"border-w-b\"],\"border-color\":[\"border-color-s\",\"border-color-e\",\"border-color-t\",\"border-color-r\",\"border-color-b\",\"border-color-l\"],\"border-color-x\":[\"border-color-r\",\"border-color-l\"],\"border-color-y\":[\"border-color-t\",\"border-color-b\"],\"scroll-m\":[\"scroll-mx\",\"scroll-my\",\"scroll-ms\",\"scroll-me\",\"scroll-mt\",\"scroll-mr\",\"scroll-mb\",\"scroll-ml\"],\"scroll-mx\":[\"scroll-mr\",\"scroll-ml\"],\"scroll-my\":[\"scroll-mt\",\"scroll-mb\"],\"scroll-p\":[\"scroll-px\",\"scroll-py\",\"scroll-ps\",\"scroll-pe\",\"scroll-pt\",\"scroll-pr\",\"scroll-pb\",\"scroll-pl\"],\"scroll-px\":[\"scroll-pr\",\"scroll-pl\"],\"scroll-py\":[\"scroll-pt\",\"scroll-pb\"],touch:[\"touch-x\",\"touch-y\",\"touch-pz\"],\"touch-x\":[\"touch\"],\"touch-y\":[\"touch\"],\"touch-pz\":[\"touch\"]},conflictingClassGroupModifiers:{\"font-size\":[\"leading\"]}}})},9708:(e,r,o)=>{o.d(r,{DX:()=>i,TL:()=>s});var t=o(2115),n=o(6101),l=o(5155);function s(e){let r=function(e){let r=t.forwardRef((e,r)=>{let{children:o,...l}=e;if(t.isValidElement(o)){var s;let e,i,a=(s=o,(i=(e=Object.getOwnPropertyDescriptor(s.props,\"ref\")?.get)&&\"isReactWarning\"in e&&e.isReactWarning)?s.ref:(i=(e=Object.getOwnPropertyDescriptor(s,\"ref\")?.get)&&\"isReactWarning\"in e&&e.isReactWarning)?s.props.ref:s.props.ref||s.ref),d=function(e,r){let o={...r};for(let t in r){let n=e[t],l=r[t];/^on[A-Z]/.test(t)?n&&l?o[t]=(...e)=>{let r=l(...e);return n(...e),r}:n&&(o[t]=n):\"style\"===t?o[t]={...n,...l}:\"className\"===t&&(o[t]=[n,l].filter(Boolean).join(\" \"))}return{...e,...o}}(l,o.props);return o.type!==t.Fragment&&(d.ref=r?(0,n.t)(r,a):a),t.cloneElement(o,d)}return t.Children.count(o)>1?t.Children.only(null):null});return r.displayName=`${e}.SlotClone`,r}(e),o=t.forwardRef((e,o)=>{let{children:n,...s}=e,i=t.Children.toArray(n),a=i.find(d);if(a){let e=a.props.children,n=i.map(r=>r!==a?r:t.Children.count(e)>1?t.Children.only(null):t.isValidElement(e)?e.props.children:null);return(0,l.jsx)(r,{...s,ref:o,children:t.isValidElement(e)?t.cloneElement(e,void 0,n):null})}return(0,l.jsx)(r,{...s,ref:o,children:n})});return o.displayName=`${e}.Slot`,o}var i=s(\"Slot\"),a=Symbol(\"radix.slottable\");function d(e){return t.isValidElement(e)&&\"function\"==typeof e.type&&\"__radixId\"in e.type&&e.type.__radixId===a}}}]);",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/_not-found/page-c631a6d1102379bb.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/api/health/route-189797e26c8ab9d4.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/api/trading/analyze/route-eef70b5c97d5e761.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/contact/page-4bc7dc14a04a84f4.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/dashboard/page-df6563f72e4528af.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 8390,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 8391
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 8392,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 8393
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 8394,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 8395
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 8698,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 8699
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 9108,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9109
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 9371,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9372
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 9626,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9627
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 9875,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9876
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 10154,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10155
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 10425,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10426
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[105],{1770:(e,s,t)=>{\"use strict\";t.r(s),t.d(s,{default:()=>k});var a=t(5155),n=t(2115),l=t(4964),i=t(3464),o=t(9509);let r=\"https://paper-api.alpaca.markets\",c={\"APCA-API-KEY-ID\":o.env.NEXT_PUBLIC_ALPACA_API_KEY||\"YOUR_ALPACA_API_KEY\",\"APCA-API-SECRET-KEY\":o.env.NEXT_PUBLIC_ALPACA_SECRET_KEY||\"YOUR_ALPACA_SECRET_KEY\"};async function d(){return(await i.A.get(\"\".concat(r,\"/v2/account\"),{headers:c})).data}async function x(){return(await i.A.get(\"\".concat(r,\"/v2/positions\"),{headers:c})).data}function u(){let[e,s]=n.useState(null),[t,l]=n.useState([]),[i,o]=n.useState(!0),[r,c]=n.useState(null);return(n.useEffect(()=>{!async function(){o(!0),c(null);try{let[e,t]=await Promise.all([d(),x()]);s(e),l(t)}catch(e){e instanceof Error?c(e.message):c(\"Failed to load portfolio data\")}finally{o(!1)}}()},[]),i)?(0,a.jsx)(\"div\",{className:\"text-fuchsia-300\",children:\"Loading portfolio...\"}):r?(0,a.jsx)(\"div\",{className:\"text-red-400\",children:r}):(0,a.jsxs)(\"div\",{className:\"flex flex-col gap-4\",children:[(0,a.jsxs)(\"div\",{className:\"text-lg font-bold text-fuchsia-300\",children:[\"Portfolio Value: \",(0,a.jsxs)(\"span\",{className:\"text-white\",children:[\"$\",(null==e?void 0:e.portfolio_value)||\"-\"]})]}),(0,a.jsxs)(\"div\",{className:\"text-fuchsia-200\",children:[\"Holdings:\",\" \",(0,a.jsx)(\"span\",{className:\"text-white\",children:t.map(e=>e.symbol).join(\", \")||\"-\"})]})]})}function m(){let[e,s]=n.useState([]),[t,l]=n.useState(!1),[i,o]=n.useState(null);return(n.useEffect(()=>{!async function(){l(!0),o(null);try{let e=await x();s(e)}catch(e){e&&\"object\"==typeof e&&\"message\"in e?o(e.message||\"Failed to load trade history\"):o(\"Failed to load trade history\")}finally{l(!1)}}()},[]),t)?(0,a.jsx)(\"div\",{className:\"text-fuchsia-300\",children:\"Loading trade history...\"}):i?(0,a.jsx)(\"div\",{className:\"text-red-400\",children:i}):(0,a.jsxs)(\"table\",{className:\"min-w-full text-left text-fuchsia-200 bg-black/30 rounded-xl overflow-hidden\",children:[(0,a.jsx)(\"thead\",{children:(0,a.jsxs)(\"tr\",{children:[(0,a.jsx)(\"th\",{className:\"px-4 py-2\",children:\"Symbol\"}),(0,a.jsx)(\"th\",{className:\"px-4 py-2\",children:\"Qty\"}),(0,a.jsx)(\"th\",{className:\"px-4 py-2\",children:\"Avg Entry\"}),(0,a.jsx)(\"th\",{className:\"px-4 py-2\",children:\"Market Value\"}),(0,a.jsx)(\"th\",{className:\"px-4 py-2\",children:\"Unrealized P/L\"})]})}),(0,a.jsx)(\"tbody\",{children:e.map((e,s)=>(0,a.jsxs)(\"tr\",{children:[(0,a.jsx)(\"td\",{className:\"px-4 py-2\",children:e.symbol}),(0,a.jsx)(\"td\",{className:\"px-4 py-2\",children:e.qty}),(0,a.jsxs)(\"td\",{className:\"px-4 py-2\",children:[\"$\",e.avg_entry_price]}),(0,a.jsxs)(\"td\",{className:\"px-4 py-2\",children:[\"$\",e.market_value]}),(0,a.jsxs)(\"td\",{className:\"px-4 py-2\",children:[\"$\",e.unrealized_pl]})]},s))})]})}function h(){let[e,s]=n.useState(null),[t,l]=n.useState(!0),[i,o]=n.useState(null);return(n.useEffect(()=>{!async function(){l(!0),o(null);try{let e=await d();s(e)}catch(e){e instanceof Error?o(e.message):o(\"Failed to load analytics\")}finally{l(!1)}}()},[]),t)?(0,a.jsx)(\"div\",{className:\"text-fuchsia-300\",children:\"Loading analytics...\"}):i?(0,a.jsx)(\"div\",{className:\"text-red-400\",children:i}):(0,a.jsxs)(\"div\",{className:\"grid grid-cols-1 md:grid-cols-3 gap-6\",children:[(0,a.jsxs)(\"div\",{className:\"glassmorphic p-4 rounded-xl shadow-lg\",children:[(0,a.jsx)(\"div\",{className:\"text-fuchsia-300 font-bold\",children:\"Performance\"}),(0,a.jsx)(\"div\",{className:\"text-white text-2xl\",children:(null==e?void 0:e.portfolio_value)?\"$\".concat(e.portfolio_value):\"-\"})]}),(0,a.jsxs)(\"div\",{className:\"glassmorphic p-4 rounded-xl shadow-lg\",children:[(0,a.jsx)(\"div\",{className:\"text-fuchsia-300 font-bold\",children:\"Buying Power\"}),(0,a.jsx)(\"div\",{className:\"text-white text-2xl\",children:(null==e?void 0:e.buying_power)?\"$\".concat(e.buying_power):\"-\"})]}),(0,a.jsxs)(\"div\",{className:\"glassmorphic p-4 rounded-xl shadow-lg\",children:[(0,a.jsx)(\"div\",{className:\"text-fuchsia-300 font-bold\",children:\"Status\"}),(0,a.jsx)(\"div\",{className:\"text-white text-2xl\",children:(null==e?void 0:e.status)||\"-\"})]})]})}function f(){let[e,s]=n.useState(!1),[t,l]=n.useState([]),[i,o]=n.useState(null),[r,c]=n.useState(\"Idle\");return n.useEffect(()=>{let s;return e?(c(\"Running\"),l(e=>[\"AI Bot started.\",...e]),s=setInterval(async()=>{try{let e=await d(),s=await x();o(Number(null==e?void 0:e.equity)-Number((null==e?void 0:e.last_equity)||(null==e?void 0:e.equity))),l(e=>[\"Checked positions: \".concat(s.map(e=>e.symbol).join(\", \")),...e]),Math.random()>.7&&l(e=>[\"AI Bot: Simulated trade executed.\",...e])}catch(s){let e=s instanceof Error?s.message:String(s);l(s=>[\"Error: \"+e,...s])}},5e3)):c(\"Idle\"),()=>clearInterval(s)},[e]),(0,a.jsxs)(\"div\",{className:\"glassmorphic rounded-xl p-6 shadow-xl flex flex-col gap-4\",children:[(0,a.jsxs)(\"div\",{className:\"flex items-center justify-between\",children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-bold text-fuchsia-300\",children:\"AI Trade Copilot\"}),(0,a.jsxs)(\"button\",{className:\"px-4 py-2 rounded-lg font-semibold transition-colors \".concat(e?\"bg-red-600 text-white\":\"bg-fuchsia-600 text-white\"),onClick:()=>s(e=>!e),children:[e?\"Stop\":\"Start\",\" Bot\"]})]}),(0,a.jsxs)(\"div\",{children:[\"Status: \",(0,a.jsx)(\"span\",{className:\"font-semibold\",children:r})]}),(0,a.jsxs)(\"div\",{children:[\"P&L: \",(0,a.jsx)(\"span\",{className:\"font-semibold\",children:null!==i?\"$\".concat(i.toFixed(2)):\"-\"})]}),(0,a.jsx)(\"div\",{className:\"bg-black/30 rounded p-2 text-xs h-32 overflow-y-auto\",children:t.map((e,s)=>(0,a.jsx)(\"div\",{children:e},s))}),(0,a.jsx)(\"div\",{className:\"text-fuchsia-200 text-xs mt-2\",children:\"* This is a demo AI bot. For real trading, connect your live API keys and enable production mode.\"})]})}let p=[{name:\"Quantum Momentum AI\",description:\"Combines quantum-inspired pattern recognition with real-time momentum analytics for ultra-fast trade signals.\",risk:\"Medium\"},{name:\"Deep Reinforcement Learning\",description:\"Self-learning agent adapts to market regimes, optimizing for risk-adjusted returns.\",risk:\"Dynamic\"},{name:\"Sentiment Alpha Fusion\",description:\"Fuses news, social, and insider sentiment with technicals for predictive edge.\",risk:\"Low\"},{name:\"AI Risk Guard\",description:\"Real-time risk engine with auto-stop, max drawdown, and volatility circuit breakers.\",risk:\"Custom\"}];function g(e){let{onSelect:s}=e;return(0,a.jsx)(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 gap-4\",children:p.map((e,t)=>(0,a.jsxs)(\"div\",{className:\"glassmorphic p-4 rounded-xl shadow-lg flex flex-col gap-2\",children:[(0,a.jsx)(\"div\",{className:\"text-fuchsia-300 font-bold text-lg\",children:e.name}),(0,a.jsx)(\"div\",{className:\"text-fuchsia-100 text-sm\",children:e.description}),(0,a.jsxs)(\"div\",{className:\"text-xs text-fuchsia-400\",children:[\"Risk: \",e.risk]}),s&&(0,a.jsx)(\"button\",{className:\"mt-2 px-3 py-1 rounded bg-fuchsia-700 text-white hover:bg-fuchsia-900 transition\",onClick:()=>s(e.name),children:\"Activate\"})]},t))})}let v=[{symbol:\"NVDA\",reason:\"AI momentum, strong earnings, and institutional buying\",confidence:.97,action:\"Buy\"},{symbol:\"TSLA\",reason:\"Unusual options activity and positive sentiment\",confidence:.93,action:\"Buy\"},{symbol:\"AAPL\",reason:\"Breakout pattern detected by deep learning model\",confidence:.91,action:\"Buy\"}];function b(){return(0,a.jsxs)(\"div\",{className:\"glassmorphic neon-border rounded-xl p-6 shadow-xl flex flex-col gap-4 animate-fade-in\",children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-bold text-fuchsia-300 mb-2\",children:\"\\uD83D\\uDD25 AI Hot Stock Tips (Today)\"}),(0,a.jsx)(\"ul\",{className:\"space-y-3\",children:v.map((e,s)=>(0,a.jsxs)(\"li\",{className:\"bg-black/40 rounded-lg p-3 flex flex-col gap-1\",children:[(0,a.jsx)(\"span\",{className:\"text-2xl font-extrabold text-cyan-400\",children:e.symbol}),(0,a.jsx)(\"span\",{className:\"text-fuchsia-200\",children:e.reason}),(0,a.jsxs)(\"span\",{className:\"text-yellow-300 font-semibold\",children:[\"Confidence: \",(100*e.confidence).toFixed(1),\"%\"]}),(0,a.jsxs)(\"span\",{className:\"text-green-400 font-bold\",children:[\"Action: \",e.action]})]},s))}),(0,a.jsx)(\"div\",{className:\"text-xs text-fuchsia-200 mt-2 italic\",children:\"* These tips are generated by advanced AI models analyzing real-time data, news, and market signals.\"})]})}let j=[{name:\"Deep Ensemble AI\",description:\"Combines multiple deep learning models, reinforcement learning, and real-time data for adaptive trading.\",async run(e,s,t){let a=.7+.3*Math.random(),n=a>.8?\"buy\":a<.6?\"sell\":\"hold\";return{action:n,confidence:a,reason:\"AI ensemble signals \".concat(n,\" with confidence \").concat(a.toFixed(2))}}},{name:\"Risk Adaptive AI\",description:\"Dynamically adjusts risk based on volatility, drawdown, and AI risk scoring.\",async run(e,s,t){let a=(null==e?void 0:e.volatility)||.2;return((null==s?void 0:s.drawdown)||.05)>.1?{action:\"hold\",confidence:.95,reason:\"Drawdown too high, pausing trades.\"}:a>.5?{action:\"hold\",confidence:.9,reason:\"Volatility filter active.\"}:{action:\"buy\",confidence:.8,reason:\"Risk within limits, opportunity detected.\"}}},{name:\"Momentum\",description:\"Buys stocks with upward momentum, sells on reversal.\",async run(e,s){let t=(null==e?void 0:e.momentum)||Math.random();return{action:t>.7?\"buy\":t<.3?\"sell\":\"hold\",confidence:2*Math.abs(t-.5),reason:\"Momentum score: \".concat(t.toFixed(2))}}},{name:\"Mean Reversion\",description:\"Buys oversold, sells overbought stocks.\",async run(e,s){let t=(null==e?void 0:e.zscore)||(Math.random()-.5)*4;return{action:t<-1?\"buy\":t>1?\"sell\":\"hold\",confidence:Math.abs(t)/2,reason:\"Z-score: \".concat(t.toFixed(2))}}},{name:\"Arbitrage\",description:\"Exploits price differences across markets.\",async run(e,s){let t=(null==e?void 0:e.arbitrage)||Math.random();return{action:t>.8?\"buy\":\"hold\",confidence:t,reason:\"Arbitrage opportunity: \".concat(t>.8?\"Yes\":\"No\")}}},{name:\"Sentiment/NLP\",description:\"Trades based on news and social sentiment.\",async run(e,s){let t=(null==e?void 0:e.sentiment)||(Math.random()-.5)*2;return{action:t>.5?\"buy\":t<-.5?\"sell\":\"hold\",confidence:Math.abs(t),reason:\"Sentiment score: \".concat(t.toFixed(2))}}},{name:\"Index Fund\",description:\"Tracks and trades index funds for diversified returns.\",async run(e,s){let t=(null==e?void 0:e.indexTrend)||Math.random();return{action:t>.6?\"buy\":t<.4?\"sell\":\"hold\",confidence:2*Math.abs(t-.5),reason:\"Index trend: \".concat(t.toFixed(2))}}},{name:\"Pattern Recognition\",description:\"Uses AI to detect technical chart patterns.\",async run(e,s){let t=(null==e?void 0:e.pattern)||(Math.random()>.7?\"breakout\":\"none\");return{action:\"breakout\"===t?\"buy\":\"hold\",confidence:\"breakout\"===t?.9:.5,reason:\"Pattern detected: \".concat(t)}}}];function y(){let[e,s]=n.useState(!1),[t,l]=n.useState([]),[i,o]=n.useState(null),[r,c]=n.useState(\"Idle\"),[u,m]=n.useState(j[0]),[h,f]=n.useState(null),[p,g]=n.useState(\"\"),[v,b]=n.useState(1e3),[y,N]=n.useState(\"Medium\"),[w,k]=n.useState(!0),[A,S]=n.useState(!1);return n.useEffect(()=>{let s;return e?(c(\"Running\"),l(e=>[\"AutoTrade Bot started.\",...e]),s=setInterval(async()=>{try{let e=await d(),s=await x();o(Number(null==e?void 0:e.equity)-Number((null==e?void 0:e.last_equity)||(null==e?void 0:e.equity)));let t=await u.run({volatility:.6*Math.random()},{...e,...s,risk:y,amount:v});f(t.confidence),g(t.reason),l(e=>[\"[\".concat(u.name,\"] Action: \").concat(t.action,\" | Confidence: \").concat(t.confidence.toFixed(2),\" | \").concat(t.reason),...e]),\"buy\"===t.action&&Math.random()>.5&&l(e=>[\"AutoTrade Bot: Executed BUY for $\".concat(v,\" (\").concat(y,\" risk)\"),...e])}catch(e){l(s=>[\"Error: \"+((null==e?void 0:e.message)||e),...s])}},4e3)):c(\"Idle\"),()=>clearInterval(s)},[e,u,v,y]),(0,a.jsxs)(\"div\",{className:\"glassmorphic neon-border rounded-2xl p-8 shadow-2xl flex flex-col gap-6 animate-fade-in\",children:[(0,a.jsxs)(\"div\",{className:\"flex items-center justify-between\",children:[(0,a.jsxs)(\"h3\",{className:\"text-2xl font-extrabold text-fuchsia-300 drop-shadow\",children:[\"AutoTrade Bot \",(0,a.jsx)(\"span\",{className:\"text-cyan-400\",children:\"Futuristic\"})]}),(0,a.jsxs)(\"div\",{className:\"flex gap-2 items-center\",children:[(0,a.jsxs)(\"button\",{className:\"px-6 py-3 rounded-xl font-bold text-lg transition-all \".concat(e?\"bg-red-600 text-white\":\"bg-fuchsia-600 text-white hover:bg-fuchsia-700\"),onClick:()=>s(e=>!e),children:[e?\"Stop\":\"Start\",\" Bot\"]}),(0,a.jsx)(\"button\",{className:\"px-4 py-2 rounded-xl font-bold text-base transition-all \".concat(w?\"bg-green-600 text-white\":\"bg-gray-600 text-white hover:bg-gray-700\"),onClick:()=>k(e=>!e),onMouseEnter:()=>S(!0),onMouseLeave:()=>S(!1),children:\"Smart Mode\"}),A&&(0,a.jsx)(\"span\",{className:\"ml-2 text-xs bg-black/80 text-white rounded px-2 py-1 shadow-lg animate-fade-in\",children:\"Let the AI pick the best strategy and settings for you!\"})]})]}),(0,a.jsxs)(\"div\",{className:\"flex gap-4 items-center\",children:[(0,a.jsx)(\"label\",{htmlFor:\"strategy-select\",className:\"text-fuchsia-200 font-semibold\",children:\"Strategy:\"}),(0,a.jsx)(\"select\",{id:\"strategy-select\",className:\"bg-black/40 text-fuchsia-200 rounded-lg px-4 py-2\",value:u.name,onChange:e=>{let s=j.find(s=>s.name===e.target.value);s&&m(s)},children:j.map(e=>(0,a.jsx)(\"option\",{value:e.name,children:e.name},e.name))})]}),(0,a.jsxs)(\"div\",{className:\"flex gap-4 items-center\",children:[(0,a.jsx)(\"label\",{htmlFor:\"amount-input\",className:\"text-fuchsia-200 font-semibold\",children:\"Amount to Invest ($):\"}),(0,a.jsx)(\"input\",{id:\"amount-input\",type:\"number\",min:100,step:100,className:\"bg-black/40 text-fuchsia-200 rounded-lg px-4 py-2 w-32\",value:v,onChange:e=>b(Number(e.target.value)),disabled:w}),(0,a.jsx)(\"label\",{htmlFor:\"risk-select\",className:\"text-fuchsia-200 font-semibold\",children:\"Risk:\"}),(0,a.jsxs)(\"select\",{id:\"risk-select\",className:\"bg-black/40 text-fuchsia-200 rounded-lg px-4 py-2\",value:y,onChange:e=>N(e.target.value),disabled:w,children:[(0,a.jsx)(\"option\",{value:\"Low\",children:\"Low\"}),(0,a.jsx)(\"option\",{value:\"Medium\",children:\"Medium\"}),(0,a.jsx)(\"option\",{value:\"High\",children:\"High\"})]})]}),(0,a.jsxs)(\"div\",{className:\"flex items-center gap-4\",children:[(0,a.jsx)(\"div\",{className:\"w-48 h-4 bg-gray-800 rounded-full overflow-hidden\",children:(0,a.jsx)(\"div\",{className:\"h-4 bg-yellow-400 transition-all\",style:{width:\"\".concat(null!==h?100*h:0,\"%\")}})}),(0,a.jsxs)(\"span\",{className:\"text-yellow-300 font-bold\",children:[\"AI Confidence: \",null!==h?\"\".concat((100*h).toFixed(1),\"%\"):\"-\"]})]}),(0,a.jsxs)(\"div\",{children:[\"Status: \",(0,a.jsx)(\"span\",{className:\"font-semibold text-cyan-300\",children:r})]}),(0,a.jsxs)(\"div\",{children:[\"P&L:\",\" \",(0,a.jsx)(\"span\",{className:\"font-semibold text-green-400\",children:null!==i?\"$\".concat(i.toFixed(2)):\"-\"})]}),(0,a.jsxs)(\"div\",{className:\"text-fuchsia-200\",children:[\"AI Reason: \",(0,a.jsx)(\"span\",{className:\"text-white\",children:p})]}),(0,a.jsx)(\"div\",{className:\"bg-black/40 rounded-xl p-3 text-xs h-40 overflow-y-auto neon-scrollbar\",children:t.map((e,s)=>(0,a.jsx)(\"div\",{children:e},s))}),(0,a.jsx)(\"div\",{className:\"text-green-400 text-lg font-bold animate-bounce\",style:{display:e&&i&&i>0?\"block\":\"none\"},children:\"\\uD83C\\uDF89 Profit! Your AI is making you money!\"}),(0,a.jsx)(\"div\",{className:\"text-fuchsia-200 text-xs mt-2 italic\",children:\"* One-Click Profit: Just press Start and let the AI do the rest. Safe for all ages and skill levels.\"}),(0,a.jsx)(\"div\",{className:\"text-fuchsia-200 text-xs mt-2 italic\",children:\"* This is a next-gen AutoTrade bot. For real trading, connect your live API keys and enable production mode. All actions are logged and risk-managed.\"})]})}let N=[{event:\"NBA Finals: Lakers vs Celtics\",pick:\"Lakers -3.5\",confidence:.92,reason:\"AI model: player stats, momentum, and injury analysis\"},{event:\"UEFA: Real Madrid vs Man City\",pick:\"Over 2.5 Goals\",confidence:.89,reason:\"Deep learning: offensive/defensive trends, weather, and sentiment\"},{event:\"NFL: Chiefs vs 49ers\",pick:\"Chiefs ML\",confidence:.95,reason:\"Reinforcement learning: historical matchups, form, and market odds\"}];function w(){return(0,a.jsxs)(\"div\",{className:\"glassmorphic neon-border rounded-xl p-6 shadow-xl flex flex-col gap-4 animate-fade-in\",children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-bold text-cyan-300 mb-2\",children:\"\\uD83C\\uDFC6 SportBeatBookie AI Bot\"}),(0,a.jsx)(\"ul\",{className:\"space-y-3\",children:N.map((e,s)=>(0,a.jsxs)(\"li\",{className:\"bg-black/40 rounded-lg p-3 flex flex-col gap-1\",children:[(0,a.jsx)(\"span\",{className:\"text-lg font-extrabold text-fuchsia-400\",children:e.event}),(0,a.jsx)(\"span\",{className:\"text-cyan-200\",children:e.pick}),(0,a.jsxs)(\"span\",{className:\"text-yellow-300 font-semibold\",children:[\"Confidence: \",(100*e.confidence).toFixed(1),\"%\"]}),(0,a.jsxs)(\"span\",{className:\"text-green-400 font-bold\",children:[\"Reason: \",e.reason]})]},s))}),(0,a.jsx)(\"div\",{className:\"text-xs text-cyan-200 mt-2 italic\",children:\"* These picks are generated by advanced AI models analyzing real-time stats, odds, and trends.\"})]})}function k(){return(0,a.jsxs)(\"main\",{className:\"p-6 max-w-7xl mx-auto\",children:[(0,a.jsx)(\"h1\",{className:\"text-4xl font-bold mb-6 text-fuchsia-400 drop-shadow-lg\",children:\"Dashboard\"}),(0,a.jsxs)(l.tU,{defaultValue:\"portfolio\",children:[(0,a.jsxs)(l.j7,{className:\"mb-4\",children:[(0,a.jsx)(l.Xi,{value:\"portfolio\",children:\"Portfolio\"}),(0,a.jsx)(l.Xi,{value:\"trade-history\",children:\"Trade History\"}),(0,a.jsx)(l.Xi,{value:\"analytics\",children:\"Analytics\"}),(0,a.jsx)(l.Xi,{value:\"algos\",children:\"Algorithm Selection\"}),(0,a.jsx)(l.Xi,{value:\"broker\",children:\"Brokerage Connection\"}),(0,a.jsx)(l.Xi,{value:\"onboarding\",children:\"Onboarding\"}),(0,a.jsx)(l.Xi,{value:\"support\",children:\"Support\"}),(0,a.jsx)(l.Xi,{value:\"sportsbook\",children:\"SportBeatBookie AI\"})]}),(0,a.jsx)(l.av,{value:\"portfolio\",children:(0,a.jsxs)(\"div\",{id:\"portfolio-section\",className:\"glassmorphic rounded-xl p-6 shadow-xl\",children:[(0,a.jsx)(\"h2\",{className:\"text-2xl font-semibold mb-2\",children:\"Your Portfolio\"}),(0,a.jsx)(u,{})]})}),(0,a.jsx)(l.av,{value:\"trade-history\",children:(0,a.jsxs)(\"div\",{id:\"trade-history-section\",className:\"glassmorphic rounded-xl p-6 shadow-xl\",children:[(0,a.jsx)(\"h2\",{className:\"text-2xl font-semibold mb-2\",children:\"Trade History\"}),(0,a.jsx)(m,{})]})}),(0,a.jsx)(l.av,{value:\"analytics\",children:(0,a.jsxs)(\"div\",{id:\"analytics-section\",className:\"glassmorphic rounded-xl p-6 shadow-xl\",children:[(0,a.jsx)(\"h2\",{className:\"text-2xl font-semibold mb-2\",children:\"Analytics\"}),(0,a.jsx)(h,{})]})}),(0,a.jsx)(l.av,{value:\"algos\",children:(0,a.jsxs)(\"div\",{id:\"algos-section\",className:\"glassmorphic rounded-xl p-6 shadow-xl flex flex-col gap-8\",children:[(0,a.jsx)(\"h2\",{className:\"text-2xl font-semibold mb-2\",children:\"Algorithm Selection & AI Trading\"}),(0,a.jsx)(f,{}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-bold text-fuchsia-300 mb-2\",children:\"Advanced AI Strategies\"}),(0,a.jsx)(g,{onSelect:e=>alert(\"Activated: \".concat(e))})]}),(0,a.jsx)(b,{}),(0,a.jsx)(y,{})]})}),(0,a.jsx)(l.av,{value:\"broker\",children:(0,a.jsx)(\"div\",{id:\"broker-section\",className:\"glassmorphic rounded-xl p-6 shadow-xl\",children:(0,a.jsx)(\"h2\",{className:\"text-2xl font-semibold mb-2\",children:\"Brokerage Connection\"})})}),(0,a.jsx)(l.av,{value:\"onboarding\",children:(0,a.jsx)(\"div\",{id:\"onboarding-section\",className:\"glassmorphic rounded-xl p-6 shadow-xl\",children:(0,a.jsx)(\"h2\",{className:\"text-2xl font-semibold mb-2\",children:\"Onboarding\"})})}),(0,a.jsx)(l.av,{value:\"support\",children:(0,a.jsx)(\"div\",{id:\"support-section\",className:\"glassmorphic rounded-xl p-6 shadow-xl\",children:(0,a.jsx)(\"h2\",{className:\"text-2xl font-semibold mb-2\",children:\"Support\"})})}),(0,a.jsx)(l.av,{value:\"sportsbook\",children:(0,a.jsxs)(\"div\",{id:\"sportsbook-section\",className:\"glassmorphic rounded-xl p-6 shadow-xl flex flex-col gap-8\",children:[(0,a.jsx)(\"h2\",{className:\"text-2xl font-semibold mb-2\",children:\"SportBeatBookie AI\"}),(0,a.jsx)(w,{})]})})]})]})}},3999:(e,s,t)=>{\"use strict\";t.d(s,{cn:()=>l});var a=t(2596),n=t(9688);function l(){for(var e=arguments.length,s=Array(e),t=0;t<e;t++)s[t]=arguments[t];return(0,n.QP)((0,a.$)(s))}},4964:(e,s,t)=>{\"use strict\";t.d(s,{Xi:()=>c,av:()=>d,j7:()=>r,tU:()=>o});var a=t(5155),n=t(2115),l=t(1482),i=t(3999);let o=l.bL,r=n.forwardRef((e,s)=>{let{className:t,...n}=e;return(0,a.jsx)(l.B8,{ref:s,className:(0,i.cn)(\"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",t),...n})});r.displayName=l.B8.displayName;let c=n.forwardRef((e,s)=>{let{className:t,...n}=e;return(0,a.jsx)(l.l9,{ref:s,className:(0,i.cn)(\"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",t),...n})});c.displayName=l.l9.displayName;let d=n.forwardRef((e,s)=>{let{className:t,...n}=e;return(0,a.jsx)(l.UC,{ref:s,className:(0,i.cn)(\"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",t),...n})});d.displayName=l.UC.displayName},7731:(e,s,t)=>{Promise.resolve().then(t.bind(t,1770))}},e=>{var s=s=>e(e.s=s);e.O(0,[848,482,464,441,684,358],()=>s(7731)),_N_E=e.O()}]);",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/demo/page-17e541e91f5ab811.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 9008,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9009
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9448,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9449
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9477,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9478
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9511,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9512
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9544,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9545
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9583,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9584
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9620,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9621
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9654,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9655
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9699,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9700
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 9701,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9702
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 9703,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9704
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9738,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9739
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9786,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9787
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9840,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9841
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9883,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9884
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9909,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9910
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 9911,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9912
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9952,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9953
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 9981,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 9982
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10015,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10016
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 10017,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10018
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 10019,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10020
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'a' is defined but never used.",
        "line": 1,
        "column": 10021,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10022
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10059,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10060
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10097,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10098
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10125,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10126
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 10127,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10128
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 10129,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10130
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10166,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10167
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 10168,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10169
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10204,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10205
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 10206,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10207
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10241,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10242
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 10243,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10244
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'s' is defined but never used.",
        "line": 1,
        "column": 10245,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10246
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10273,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10274
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10298,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10299
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 10300,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10301
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10327,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10328
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 10329,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10330
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10371,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10372
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 10373,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10374
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10409,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10410
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 10442,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10443
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 10473,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 10474
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'g' is assigned a value but never used.",
        "line": 1,
        "column": 18410,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 18411
      }
    ],
    "suppressedMessages": [],
    "errorCount": 46,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[436],{3999:(e,t,s)=>{\"use strict\";s.d(t,{cn:()=>r});var a=s(2596),i=s(9688);function r(){for(var e=arguments.length,t=Array(e),s=0;s<e;s++)t[s]=arguments[s];return(0,i.QP)((0,a.$)(t))}},4964:(e,t,s)=>{\"use strict\";s.d(t,{Xi:()=>c,av:()=>d,j7:()=>o,tU:()=>n});var a=s(5155),i=s(2115),r=s(1482),l=s(3999);let n=r.bL,o=i.forwardRef((e,t)=>{let{className:s,...i}=e;return(0,a.jsx)(r.B8,{ref:t,className:(0,l.cn)(\"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",s),...i})});o.displayName=r.B8.displayName;let c=i.forwardRef((e,t)=>{let{className:s,...i}=e;return(0,a.jsx)(r.l9,{ref:t,className:(0,l.cn)(\"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",s),...i})});c.displayName=r.l9.displayName;let d=i.forwardRef((e,t)=>{let{className:s,...i}=e;return(0,a.jsx)(r.UC,{ref:t,className:(0,l.cn)(\"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",s),...i})});d.displayName=r.UC.displayName},5048:(e,t,s)=>{Promise.resolve().then(s.bind(s,7807))},7168:(e,t,s)=>{\"use strict\";s.d(t,{Button:()=>n});var a=s(5155),i=s(2115),r=s(9708),l=s(3999);let n=i.forwardRef((e,t)=>{let{className:s,variant:i,size:n,asChild:o=!1,children:c,...d}=e,m=o?r.DX:\"button\";return(0,a.jsx)(m,{className:(0,l.cn)(function(e){let{variant:t=\"default\",size:s=\"default\",className:a}=e,i={default:\"bg-primary text-primary-foreground shadow hover:bg-primary/90\",destructive:\"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",outline:\"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",secondary:\"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",ghost:\"hover:bg-accent hover:text-accent-foreground\",link:\"text-primary underline-offset-4 hover:underline\"},r={default:\"h-9 px-4 py-2\",sm:\"h-8 rounded-md px-3 text-xs\",lg:\"h-10 rounded-md px-8\",icon:\"h-9 w-9\"};return(0,l.cn)(\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",i[t]||i.default,r[s]||r.default,a)}({variant:i,size:n,className:s})),ref:t,...d,children:c})});n.displayName=\"Button\"},7807:(e,t,s)=>{\"use strict\";s.d(t,{default:()=>S});var a=s(5155),i=s(2115),r=s(7168),l=s(8482),n=s(4964);class o{static getInstance(){return o.instance||(o.instance=new o),o.instance}async initializeModels(){this.models.set(\"momentum\",await this.loadMomentumModel()),this.models.set(\"meanReversion\",await this.loadMeanReversionModel()),this.models.set(\"sentimentAnalysis\",await this.loadSentimentModel()),this.models.set(\"riskAssessment\",await this.loadRiskModel()),this.models.set(\"portfolioOptimization\",await this.loadPortfolioModel())}async initialize(){this.initialized||(await this.initializeModels(),this.initialized=!0)}async analyzeMarket(e){let t=[];for(let s of e){let e=await this.getMarketData(s),a=await this.analyzeSentiment(s),i=await this.performTechnicalAnalysis(s,e),r=await this.assessRisk(s,e),l=await this.generatePrediction(s,{marketData:e,sentiment:a,technical:i,risk:r});t.push(l)}return t}async generateTradingSignals(e){let t=await this.analyzeMarket(e),s=[];for(let e of t)e.confidence>.7&&s.push({symbol:e.symbol,action:e.action,confidence:e.confidence,strength:e.confidence>.9?\"VERY_STRONG\":e.confidence>.8?\"STRONG\":e.confidence>.7?\"MODERATE\":\"WEAK\",timeframe:e.timeframe,targetPrice:e.targetPrice,stopLoss:e.stopLoss,reasoning:e.reasoning,indicators:{technical:0,fundamental:0,sentiment:0,momentum:0,volume:0},timestamp:new Date});return s}async optimizePortfolio(e,t){return this.models.get(\"portfolioOptimization\"),{suggestedAllocations:await this.calculateOptimalAllocations(e,t),riskMetrics:await this.calculatePortfolioRisk(e),expectedReturn:await this.calculateExpectedReturn(e),rebalanceActions:await this.getRebalanceActions(e)}}async performRealTimeAnalysis(e){let[t,s,a]=await Promise.all([this.analyzeSentiment(e),this.performTechnicalAnalysis(e),this.getMarketData(e)]),i=await this.assessRisk(e,a),r=await this.generatePrediction(e,{marketData:a,sentiment:t,technical:s,risk:i});return{sentiment:t,technicals:s,prediction:r,risk:i}}async getIntelligentRecommendation(e){let t=(await this.analyzeMarket([e]))[0];return{action:t.action,confidence:t.confidence,reasoning:t.reasoning,marketFactors:[\"Technical indicators showing strong momentum\",\"Volume analysis confirms trend\",\"Market sentiment remains positive\"],riskFactors:[\"High volatility in current market conditions\",\"Potential reversal signals detected\",\"Economic uncertainty may impact price\"],riskManagement:{stopLossPercent:.05,takeProfitPercent:.15,positionSize:.03}}}async getMarketIntelligence(){return{marketSentiment:{direction:\"BULLISH\",strength:.75},volatility:\"MODERATE\",riskLevel:\"OPTIMAL\",opportunities:[{symbol:\"AAPL\",reason:\"Strong earnings catalyst\",timeframe:\"1-2 weeks\"},{symbol:\"MSFT\",reason:\"Technical breakout pattern\",timeframe:\"2-3 days\"},{symbol:\"GOOGL\",reason:\"Oversold conditions\",timeframe:\"1 week\"}],topRecommendations:[{symbol:\"TSLA\",action:\"BUY\",confidence:.85},{symbol:\"NVDA\",action:\"HOLD\",confidence:.72},{symbol:\"META\",action:\"BUY\",confidence:.78}],supportingFactors:[\"Institutional accumulation patterns detected\",\"Technical indicators showing bullish divergence\",\"Earnings season providing positive catalysts\",\"Economic data supporting growth thesis\"]}}async loadMomentumModel(){return{predict:e=>{let t=this.calculateMomentum(e),s=this.analyzeVolumeProfile(e),a=this.detectBreakouts(e);return{momentum:t,volume:s,breakout:a,confidence:Math.min(t*s*a,1)}}}}async loadMeanReversionModel(){return{predict:e=>{let t=this.calculateRSI(e),s=this.calculateBollingerBands(e),a=this.findSupportResistance(e);return{rsi:t,bollingerBands:s,support:a,confidence:this.calculateMeanReversionConfidence(t,s,a)}}}}async loadSentimentModel(){return{analyze:async e=>{let t=await this.analyzeNewsData(e),s=await this.analyzeSocialMedia(e),a=await this.analyzeInstitutionalFlow(e);return{news:t.sentiment,social:s.sentiment,institutional:a.sentiment,overall:(t.sentiment+s.sentiment+a.sentiment)/3}}}}async loadRiskModel(){return{assess:(e,t)=>{let s=this.calculateVolatility(t),a=this.calculateVaR(t,.95),i=this.calculateMarketCorrelation(e),r=this.assessLiquidity(t);return{volatility:s,var95:a,correlation:i,liquidity:r,overallRisk:this.calculateOverallRisk(s,a,i,r)}}}}async loadPortfolioModel(){return{optimize:(e,t)=>{let s=this.calculateExpectedReturns(e),a=this.calculateCovarianceMatrix(e),i=this.optimizeWeights(s,a,t);return{optimalWeights:i,expectedReturn:this.calculatePortfolioReturn(i,s),risk:this.calculatePortfolioRisk(i,a),sharpeRatio:this.calculateSharpeRatio(i,s,a)}}}}calculateMomentum(e){if(e.length<20)return 0;let t=e.slice(-10),s=e.slice(-20,-10),a=t.reduce((e,t)=>e+t.price,0)/t.length,i=s.reduce((e,t)=>e+t.price,0)/s.length;return(a-i)/i}calculateRSI(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:14;if(e.length<t+1)return 50;let s=0,a=0;for(let i=e.length-t;i<e.length;i++){let t=e[i].price-e[i-1].price;t>0?s+=t:a-=t}return 100-100/(1+s/t/(a/t))}async getMarketData(e){let t=this.historicalData.get(e);if(t&&this.isDataFresh(t))return t;let s=await this.fetchMarketData(e);return this.historicalData.set(e,s),s}async analyzeSentiment(e){let t=this.sentimentCache.get(e);if(t&&this.isSentimentFresh(e))return t;let s=this.models.get(\"sentimentAnalysis\"),a=await s.analyze(e);return this.sentimentCache.set(e,a),a}async performTechnicalAnalysis(e,t){let s=t||await this.getMarketData(e);return{rsi:this.calculateRSI(s),macd:this.calculateMACD(s),bollingerBands:this.calculateBollingerBands(s),sma:this.calculateSMA(s,20),ema:this.calculateEMA(s,12),volume:this.analyzeVolumeProfile(s),support:this.findSupportResistance(s)}}async generatePrediction(e,t){var s;let{marketData:a,sentiment:i,technical:r,risk:l}=t,n=r.rsi>70?-.3:.3*(r.rsi<30),o=.4*i.overall,c=n+o+.2*r.volume.strength+(l.overallRisk>.8?-.5:.1),d=Math.abs(c),m=\"HOLD\";c>.3?m=\"BUY\":c<-.3&&(m=\"SELL\");let h=(null==(s=a[a.length-1])?void 0:s.price)||100,u=\"BUY\"===m?1.05*h:.95*h,x=\"BUY\"===m?.98*h:1.02*h,g=new Date;return{symbol:e,action:m,confidence:d,timeframe:\"1h\",targetPrice:u,stopLoss:x,takeProfit:u,reasoning:this.generateReasoning(t,c),modelVersion:\"v1.0.0\",features:{technical:r.rsi||50,fundamental:.5,sentiment:i.overall,macro:.5},probability:{up:\"BUY\"===m?d:1-d,down:\"SELL\"===m?d:1-d,sideways:\"HOLD\"===m?d:1-d},timestamp:g,expiresAt:new Date(g.getTime()+36e5)}}generateReasoning(e,t){let s=[];return e.sentiment.overall>.5&&s.push(\"Positive market sentiment detected\"),e.sentiment.overall<-.5&&s.push(\"Negative market sentiment detected\"),e.technical.rsi>70&&s.push(\"Overbought conditions (RSI > 70)\"),e.technical.rsi<30&&s.push(\"Oversold conditions (RSI < 30)\"),e.technical.volume.strength>.7&&s.push(\"Strong volume confirmation\"),e.risk.overallRisk>.8&&s.push(\"High risk detected - proceed with caution\"),s}isDataFresh(e){return!0}isSentimentFresh(e){return!0}async fetchMarketData(e){return[]}analyzeVolumeProfile(e){return{strength:.5}}detectBreakouts(e){return .5}calculateBollingerBands(e){return{}}findSupportResistance(e){return{}}calculateMeanReversionConfidence(e,t,s){return .5}async analyzeNewsData(e){return{sentiment:0}}async analyzeSocialMedia(e){return{sentiment:0}}async analyzeInstitutionalFlow(e){return{sentiment:0}}calculateVolatility(e){return .2}calculateVaR(e,t){return .05}calculateMarketCorrelation(e){return .5}assessLiquidity(e){return .8}calculateOverallRisk(e,t,s,a){return .4}calculateExpectedReturns(e){return[]}calculateCovarianceMatrix(e){return[]}optimizeWeights(e,t,s){return[]}calculatePortfolioReturn(e,t){return .1}calculatePortfolioRisk(e,t){return .15}calculateSharpeRatio(e,t,s){return 1.5}calculateMACD(e){return{}}calculateSMA(e,t){return 100}calculateEMA(e,t){return 100}calculateOptimalAllocations(e,t){return{}}calculateExpectedReturn(e){return .1}getRebalanceActions(e){return[]}async assessRisk(e,t){return{symbol:e,volatility:.2,var95:.05,maxDrawdown:.1,sharpeRatio:1.5,beta:1,riskScore:.4,recommendations:[\"Monitor position size\",\"Consider stop loss\"],timestamp:new Date}}constructor(){this.models=new Map,this.historicalData=new Map,this.sentimentCache=new Map,this.initialized=!1,this.initializeModels()}}let c=o.getInstance();window.location.origin;class d{getRiskSettings(e){return({LOW:{maxPositionSize:.05,stopLoss:.02,takeProfit:.03,maxDailyLoss:.01},MEDIUM:{maxPositionSize:.1,stopLoss:.03,takeProfit:.05,maxDailyLoss:.02},HIGH:{maxPositionSize:.2,stopLoss:.05,takeProfit:.08,maxDailyLoss:.03}})[e]}initializePerformanceMetrics(){return{totalReturn:0,dailyReturn:0,weeklyReturn:0,monthlyReturn:0,sharpeRatio:0,maxDrawdown:0,winRate:0,lastUpdated:new Date}}initializeStrategies(){this.strategies=[{id:\"momentum-ai\",name:\"AI Momentum Strategy\",description:\"Advanced momentum detection using AI\",type:\"MOMENTUM\",status:\"ACTIVE\",parameters:{lookback:20,threshold:.02,weight:.4},performance:{totalReturn:15.2,sharpeRatio:1.8,maxDrawdown:.08,winRate:65,profitFactor:1.4,avgTrade:2.1},risk:{maxPosition:.1,stopLoss:.03,takeProfit:.06,maxDailyLoss:.02},filters:{minVolume:1e6,minPrice:10,maxPrice:500},createdAt:new Date,updatedAt:new Date},{id:\"mean-reversion-ai\",name:\"AI Mean Reversion\",description:\"Mean reversion with AI sentiment analysis\",type:\"MEAN_REVERSION\",status:\"ACTIVE\",parameters:{oversold:30,overbought:70,weight:.3},performance:{totalReturn:12.8,sharpeRatio:1.6,maxDrawdown:.06,winRate:58,profitFactor:1.3,avgTrade:1.8},risk:{maxPosition:.08,stopLoss:.025,takeProfit:.05,maxDailyLoss:.015},filters:{minVolume:5e5,minPrice:5},createdAt:new Date,updatedAt:new Date}]}async fetchPrice(e){let t=Date.now(),s=e.split(\"\").reduce((e,t)=>e+t.charCodeAt(0),0),a=50+s%200,i=new Date().getHours();return(a+a*(.005*Math.sin((t+1e3*s)/1e6)+(Math.random()-.5)*.02))*(i>=9&&i<=16?1:.95)}async runAIAnalysis(e){try{let t=await c.analyzeMarket(e),s=await c.generateTradingSignals(e),a=await this.analyzePortfolio(),i=await this.assessPortfolioRisk();return{predictions:t,signals:s.filter(e=>e.confidence>.7),portfolioAnalysis:a,riskAnalysis:i,recommendations:await this.generateRecommendations(t,a)}}catch(e){return console.error(\"AI Analysis failed:\",e),this.getFallbackAnalysis()}}getFallbackAnalysis(){return{predictions:[],signals:[],portfolioAnalysis:{totalValue:this.portfolio.totalValue,totalPnL:0,positions:[],diversification:{sectors:{},risk:\"MEDIUM\"},recommendations:[\"System in fallback mode - limited analysis available\"]},riskAnalysis:{symbol:\"PORTFOLIO\",riskScore:50,volatility:.15,beta:1,recommendations:[\"Monitor system status\"],timestamp:new Date},recommendations:[\"AI system unavailable - using conservative approach\"]}}async executeAITrading(e){if(!this.tradingEnabled)return{success:!1,message:\"Trading is disabled\"};if(this.portfolio.dailyPnL<-this.maxDailyLoss*this.portfolio.totalValue)return this.tradingEnabled=!1,{success:!1,message:\"Daily loss limit reached\"};let t=await this.runAIAnalysis(e),s=[];for(let e of t.signals){let t=await this.processSignal(e);t&&(s.push(t),this.portfolio.trades.push(t))}return await this.updatePerformanceMetrics(),{success:!0,trades:s,portfolioValue:this.portfolio.totalValue,message:\"Executed \".concat(s.length,\" trades based on AI signals\")}}async processSignal(e){try{let t=await this.fetchPrice(e.symbol),s=this.calculatePositionSize(e,t);if(0===s)return null;let a={symbol:e.symbol,action:e.action.toLowerCase(),price:t,shares:Math.abs(s),time:new Date().toISOString(),reason:\"AI Signal: \".concat(e.reasoning.join(\", \")),confidence:e.confidence,strategy:\"AI_COMBINED\",stopLoss:e.stopLoss,takeProfit:e.takeProfit};if(await this.executeTrade(a))return a;return null}catch(t){return console.error(\"Failed to process signal for \".concat(e.symbol,\":\"),t),null}}calculatePositionSize(e,t){let s=Math.floor(Math.floor(this.portfolio.totalValue*this.riskSettings.maxPositionSize/t)*Math.min(e.confidence,1));if(\"BUY\"===e.action)return Math.min(s,Math.floor(this.portfolio.cash/t));let a=this.portfolio.holdings[e.symbol];return a?Math.min(s,a.shares):0}async executeTrade(e){try{if(\"buy\"===e.action){let t=e.shares*e.price;if(this.portfolio.cash>=t){if(this.portfolio.cash-=t,this.portfolio.holdings[e.symbol]){let t=this.portfolio.holdings[e.symbol],s=t.shares+e.shares,a=t.avgPrice*t.shares+e.price*e.shares;t.avgPrice=a/s,t.shares=s}else this.portfolio.holdings[e.symbol]={shares:e.shares,avgPrice:e.price};return!0}}else if(\"sell\"===e.action){let t=this.portfolio.holdings[e.symbol];if(t&&t.shares>=e.shares)return this.portfolio.cash+=e.shares*e.price,t.shares-=e.shares,0===t.shares&&delete this.portfolio.holdings[e.symbol],!0}return!1}catch(e){return console.error(\"Trade execution failed:\",e),!1}}async analyzePortfolio(){let e=Object.entries(this.portfolio.holdings),t={totalValue:0,totalPnL:0,positions:[],diversification:{sectors:{},risk:\"MEDIUM\"},recommendations:[]};for(let[s,a]of e){let e=await this.fetchPrice(s),i=a.shares*e,r=i-a.shares*a.avgPrice;t.positions.push({symbol:s,shares:a.shares,avgPrice:a.avgPrice,currentPrice:e,currentValue:i,pnl:r,pnlPercent:r/(a.shares*a.avgPrice)*100}),t.totalValue+=i,t.totalPnL+=r}return t.totalValue+=this.portfolio.cash,this.portfolio.totalValue=t.totalValue,t}async assessPortfolioRisk(){return{symbol:\"PORTFOLIO\",riskScore:45,volatility:.15,beta:1,sharpeRatio:1.2,maxDrawdown:.08,var95:.03,expectedReturn:.12,concentrationRisk:.3,liquidityRisk:.1,sectorRisk:.2,recommendations:[\"Consider diversification across sectors\",\"Monitor position sizes\"],timestamp:new Date}}async generateRecommendations(e,t){let s=[];Object.keys(this.portfolio.holdings).length<5&&s.push(\"Consider diversifying into more positions\");let a=e.filter(e=>e.confidence>.8);return a.length>0&&s.push(\"High confidence opportunities found in: \".concat(a.map(e=>e.symbol).join(\", \"))),t.totalValue<8e3&&s.push(\"Portfolio has declined significantly - consider risk review\"),s}async updatePerformanceMetrics(){let e=await this.analyzePortfolio();this.performanceMetrics.totalReturn=(e.totalValue-1e4)/1e4*100,this.performanceMetrics.lastUpdated=new Date}getPortfolio(){return{...this.portfolio,performance:this.performanceMetrics}}getStrategies(){return this.strategies}setTradingEnabled(e){this.tradingEnabled=e}emergencyStop(){this.tradingEnabled=!1,console.log(\"EMERGENCY STOP: Trading halted\")}async optimizePortfolio(){let e=Object.entries(this.portfolio.holdings).map(e=>{let[t,s]=e;return{symbol:t,shares:s.shares,avgPrice:s.avgPrice}}),t=await c.optimizePortfolio(e,this.portfolio.cash);return{currentAllocation:this.calculateCurrentAllocation(),suggestedAllocation:t.suggestedAllocations,rebalanceActions:t.rebalanceActions,expectedImprovement:{returnIncrease:.023,riskReduction:.015,sharpeImprovement:.18}}}calculateCurrentAllocation(){let e={},t=this.portfolio.totalValue;return Object.entries(this.portfolio.holdings).forEach(s=>{let[a,i]=s,r=100*i.shares;e[a]=r/t}),e.CASH=this.portfolio.cash/t,e}async assessRealTimeRisk(e){let t=await c.performRealTimeAnalysis(e);return{symbol:e,currentRisk:t.risk.riskScore,volatilityAlert:t.risk.volatility>.3,sentimentRisk:t.sentiment.overall<-.5,technicalRisk:this.assessTechnicalRisk(t.technicals),recommendation:this.getRiskRecommendation(t),timestamp:new Date}}assessTechnicalRisk(e){return e.rsi>80||e.rsi<20?\"HIGH\":e.rsi>70||e.rsi<30?\"MEDIUM\":\"LOW\"}getRiskRecommendation(e){return e.risk.riskScore>80?\"REDUCE_POSITION\":e.risk.riskScore>60?\"MONITOR_CLOSELY\":e.sentiment.overall>.7?\"CONSIDER_INCREASE\":\"MAINTAIN_POSITION\"}constructor(e=1e4,t=\"MEDIUM\"){this.strategies=[],this.tradingEnabled=!0,this.maxDailyLoss=.02,this.maxPositionSize=.1,this.portfolio={cash:e,holdings:{},trades:[],totalValue:e,dailyPnL:0,totalReturn:0},this.riskSettings=this.getRiskSettings(t),this.performanceMetrics=this.initializePerformanceMetrics(),this.initializeStrategies()}}var m=s(6081),h=s(3655),u=\"Progress\",[x,g]=(0,m.A)(u),[p,f]=x(u),y=i.forwardRef((e,t)=>{var s,i,r,l;let{__scopeProgress:n,value:o=null,max:c,getValueLabel:d=j,...m}=e;(c||0===c)&&!R(c)&&console.error((s=\"\".concat(c),i=\"Progress\",\"Invalid prop `max` of value `\".concat(s,\"` supplied to `\").concat(i,\"`. Only numbers greater than 0 are valid max values. Defaulting to `\").concat(100,\"`.\")));let u=R(c)?c:100;null===o||k(o,u)||console.error((r=\"\".concat(o),l=\"Progress\",\"Invalid prop `value` of value `\".concat(r,\"` supplied to `\").concat(l,\"`. The `value` prop must be:\\n  - a positive number\\n  - less than the value passed to `max` (or \").concat(100,\" if no `max` prop is set)\\n  - `null` or `undefined` if the progress is indeterminate.\\n\\nDefaulting to `null`.\")));let x=k(o,u)?o:null,g=w(x)?d(x,u):void 0;return(0,a.jsx)(p,{scope:n,value:x,max:u,children:(0,a.jsx)(h.sG.div,{\"aria-valuemax\":u,\"aria-valuemin\":0,\"aria-valuenow\":w(x)?x:void 0,\"aria-valuetext\":g,role:\"progressbar\",\"data-state\":N(x,u),\"data-value\":null!=x?x:void 0,\"data-max\":u,...m,ref:t})})});y.displayName=u;var v=\"ProgressIndicator\",b=i.forwardRef((e,t)=>{var s;let{__scopeProgress:i,...r}=e,l=f(v,i);return(0,a.jsx)(h.sG.div,{\"data-state\":N(l.value,l.max),\"data-value\":null!=(s=l.value)?s:void 0,\"data-max\":l.max,...r,ref:t})});function j(e,t){return\"\".concat(Math.round(e/t*100),\"%\")}function N(e,t){return null==e?\"indeterminate\":e===t?\"complete\":\"loading\"}function w(e){return\"number\"==typeof e}function R(e){return w(e)&&!isNaN(e)&&e>0}function k(e,t){return w(e)&&!isNaN(e)&&e<=t&&e>=0}b.displayName=v;var A=s(3999);let M=i.forwardRef((e,t)=>{let{className:s,value:i,...r}=e;return(0,a.jsx)(y,{ref:t,className:(0,A.cn)(\"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",s),...r,children:(0,a.jsx)(b,{className:\"h-full w-full flex-1 bg-primary transition-all\",style:{transform:\"translateX(-\".concat(100-(i||0),\"%)\")}})})});function P(){var e,t,s,o,c,m,h,u,x,g,p,f,y,v,b,j,N,w,R,k,A,P,S;let[D,I]=(0,i.useState)({trader:null,portfolio:null,isTrading:!1,performance:null,analysis:null,loading:!0,error:null}),[T]=(0,i.useState)([\"AAPL\",\"TSLA\",\"MSFT\",\"GOOGL\",\"AMZN\"]),[E,L]=(0,i.useState)(\"MEDIUM\"),z=(0,i.useCallback)(async()=>{try{let e=new d(5e4,E),t=e.getPortfolio();I(s=>({...s,trader:e,portfolio:t,loading:!1}))}catch(e){I(e=>({...e,error:\"Failed to initialize AI trader\",loading:!1}))}},[E]);(0,i.useEffect)(()=>{z()},[z]);let C=async()=>{if(D.trader){I(e=>({...e,loading:!0}));try{let e=await D.trader.runAIAnalysis(T),t=D.trader.getPortfolio();I(s=>({...s,analysis:e,portfolio:t,loading:!1}))}catch(e){I(e=>({...e,error:\"Analysis failed\",loading:!1}))}}},O=async()=>{if(D.trader){I(e=>({...e,isTrading:!0}));try{let e=await D.trader.executeAITrading(T),t=D.trader.getPortfolio();I(s=>({...s,portfolio:t,isTrading:!1,analysis:{...s.analysis,lastTradeResult:e}}))}catch(e){I(e=>({...e,error:\"Trading execution failed\",isTrading:!1}))}}};return D.loading&&!D.trader?(0,a.jsx)(\"div\",{className:\"min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-black text-white\",children:(0,a.jsx)(\"div\",{className:\"container mx-auto px-4 py-20\",children:(0,a.jsx)(\"div\",{className:\"flex items-center justify-center\",children:(0,a.jsxs)(\"div\",{className:\"text-center\",children:[(0,a.jsx)(\"div\",{className:\"animate-spin w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full mx-auto mb-4\"}),(0,a.jsx)(\"h2\",{className:\"text-xl font-semibold\",children:\"Initializing AI Trading Engine...\"})]})})})}):(0,a.jsx)(\"div\",{className:\"min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-black text-white\",children:(0,a.jsxs)(\"div\",{className:\"container mx-auto px-4 py-8\",children:[(0,a.jsxs)(\"div\",{className:\"mb-8\",children:[(0,a.jsx)(\"h1\",{className:\"text-4xl font-bold mb-2 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\",children:\"AI Trading Dashboard\"}),(0,a.jsx)(\"p\",{className:\"text-gray-300\",children:\"Advanced AI-powered trading with real-time analysis\"})]}),(0,a.jsx)(l.Zp,{className:\"p-6 mb-6 bg-gray-900/50 border-gray-700\",children:(0,a.jsxs)(\"div\",{className:\"flex flex-wrap gap-4 items-center justify-between\",children:[(0,a.jsxs)(\"div\",{className:\"flex gap-4 items-center\",children:[(0,a.jsx)(r.Button,{onClick:C,disabled:D.loading,className:\"bg-blue-600 hover:bg-blue-700\",children:D.loading?\"Analyzing...\":\"Run AI Analysis\"}),(0,a.jsx)(r.Button,{onClick:O,disabled:D.isTrading||!D.analysis,className:\"bg-green-600 hover:bg-green-700\",children:D.isTrading?\"Trading...\":\"Execute AI Trading\"}),(0,a.jsx)(r.Button,{onClick:()=>{D.trader&&(D.trader.emergencyStop(),I(e=>({...e,isTrading:!1})))},variant:\"destructive\",className:\"bg-red-600 hover:bg-red-700\",children:\"Emergency Stop\"})]}),(0,a.jsx)(\"div\",{className:\"flex gap-4 items-center\",children:(0,a.jsxs)(\"select\",{value:E,onChange:e=>L(e.target.value),className:\"px-3 py-2 bg-gray-800 border border-gray-600 rounded text-white\",children:[(0,a.jsx)(\"option\",{value:\"LOW\",children:\"Low Risk\"}),(0,a.jsx)(\"option\",{value:\"MEDIUM\",children:\"Medium Risk\"}),(0,a.jsx)(\"option\",{value:\"HIGH\",children:\"High Risk\"})]})})]})}),(0,a.jsxs)(n.tU,{defaultValue:\"portfolio\",className:\"space-y-6\",children:[(0,a.jsxs)(n.j7,{className:\"grid w-full grid-cols-5 bg-gray-800\",children:[(0,a.jsx)(n.Xi,{value:\"portfolio\",children:\"Portfolio\"}),(0,a.jsx)(n.Xi,{value:\"analysis\",children:\"AI Analysis\"}),(0,a.jsx)(n.Xi,{value:\"trades\",children:\"Trade History\"}),(0,a.jsx)(n.Xi,{value:\"performance\",children:\"Performance\"}),(0,a.jsx)(n.Xi,{value:\"strategies\",children:\"Strategies\"})]}),(0,a.jsx)(n.av,{value:\"portfolio\",children:(0,a.jsxs)(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-2 gap-6\",children:[(0,a.jsxs)(l.Zp,{className:\"p-6 bg-gray-900/50 border-gray-700\",children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-semibold mb-4\",children:\"Portfolio Overview\"}),D.portfolio&&(0,a.jsx)(\"div\",{className:\"space-y-4\",children:(0,a.jsxs)(\"div\",{className:\"grid grid-cols-2 gap-4\",children:[(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-sm text-gray-400\",children:\"Total Value\"}),(0,a.jsxs)(\"p\",{className:\"text-2xl font-bold text-green-400\",children:[\"$\",(null==(e=D.portfolio.totalValue)?void 0:e.toFixed(2))||\"0.00\"]})]}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-sm text-gray-400\",children:\"Cash\"}),(0,a.jsxs)(\"p\",{className:\"text-xl font-semibold\",children:[\"$\",(null==(t=D.portfolio.cash)?void 0:t.toFixed(2))||\"0.00\"]})]}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-sm text-gray-400\",children:\"Total Return\"}),(0,a.jsxs)(\"p\",{className:\"text-xl font-semibold \".concat((D.portfolio.totalReturn||0)>=0?\"text-green-400\":\"text-red-400\"),children:[(D.portfolio.totalReturn||0).toFixed(2),\"%\"]})]}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-sm text-gray-400\",children:\"Daily P&L\"}),(0,a.jsxs)(\"p\",{className:\"text-xl font-semibold \".concat((D.portfolio.dailyPnL||0)>=0?\"text-green-400\":\"text-red-400\"),children:[\"$\",(D.portfolio.dailyPnL||0).toFixed(2)]})]})]})})]}),(0,a.jsxs)(l.Zp,{className:\"p-6 bg-gray-900/50 border-gray-700\",children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-semibold mb-4\",children:\"Current Holdings\"}),(null==(s=D.portfolio)?void 0:s.holdings)&&Object.keys(D.portfolio.holdings).length>0?(0,a.jsx)(\"div\",{className:\"space-y-3\",children:Object.entries(D.portfolio.holdings).map(e=>{var t;let[s,i]=e;return(0,a.jsxs)(\"div\",{className:\"flex justify-between items-center p-3 bg-gray-800 rounded\",children:[(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"font-semibold\",children:s}),(0,a.jsxs)(\"p\",{className:\"text-sm text-gray-400\",children:[i.shares,\" shares\"]})]}),(0,a.jsxs)(\"div\",{className:\"text-right\",children:[(0,a.jsxs)(\"p\",{className:\"font-semibold\",children:[\"$\",null==(t=i.avgPrice)?void 0:t.toFixed(2)]}),(0,a.jsx)(\"p\",{className:\"text-sm text-gray-400\",children:\"Avg Cost\"})]})]},s)})}):(0,a.jsx)(\"p\",{className:\"text-gray-400\",children:\"No current holdings\"})]})]})}),(0,a.jsx)(n.av,{value:\"analysis\",children:(0,a.jsxs)(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-2 gap-6\",children:[(0,a.jsxs)(l.Zp,{className:\"p-6 bg-gray-900/50 border-gray-700\",children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-semibold mb-4\",children:\"AI Trading Signals\"}),(null==(c=D.analysis)||null==(o=c.signals)?void 0:o.length)?(0,a.jsx)(\"div\",{className:\"space-y-3\",children:null==(h=D.analysis)||null==(m=h.signals)?void 0:m.map((e,t)=>{var s;return(0,a.jsxs)(\"div\",{className:\"p-3 bg-gray-800 rounded\",children:[(0,a.jsxs)(\"div\",{className:\"flex justify-between items-start mb-2\",children:[(0,a.jsx)(\"span\",{className:\"font-semibold\",children:e.symbol}),(0,a.jsx)(\"span\",{className:\"px-2 py-1 rounded text-sm \".concat(\"BUY\"===e.action?\"bg-green-600\":\"bg-red-600\"),children:e.action})]}),(0,a.jsxs)(\"div\",{className:\"text-sm space-y-1\",children:[(0,a.jsxs)(\"p\",{children:[\"Confidence: \",(100*e.confidence).toFixed(1),\"%\"]}),(0,a.jsx)(M,{value:100*e.confidence,className:\"h-2\"}),(0,a.jsx)(\"p\",{className:\"text-gray-400\",children:null==(s=e.reasoning)?void 0:s.slice(0,2).join(\", \")})]})]},t)})}):(0,a.jsx)(\"p\",{className:\"text-gray-400\",children:\"Run AI analysis to see signals\"})]}),(0,a.jsxs)(l.Zp,{className:\"p-6 bg-gray-900/50 border-gray-700\",children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-semibold mb-4\",children:\"AI Recommendations\"}),(null==(x=D.analysis)||null==(u=x.recommendations)?void 0:u.length)?(0,a.jsx)(\"div\",{className:\"space-y-2\",children:null==(p=D.analysis)||null==(g=p.recommendations)?void 0:g.map((e,t)=>(0,a.jsx)(\"div\",{className:\"p-3 bg-blue-900/30 border border-blue-700 rounded\",children:(0,a.jsx)(\"p\",{className:\"text-sm\",children:e})},t))}):(0,a.jsx)(\"p\",{className:\"text-gray-400\",children:\"No recommendations available\"})]})]})}),(0,a.jsx)(n.av,{value:\"trades\",children:(0,a.jsxs)(l.Zp,{className:\"p-6 bg-gray-900/50 border-gray-700\",children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-semibold mb-4\",children:\"Recent Trades\"}),(null==(y=D.portfolio)||null==(f=y.trades)?void 0:f.length)?(0,a.jsx)(\"div\",{className:\"overflow-x-auto\",children:(0,a.jsxs)(\"table\",{className:\"w-full\",children:[(0,a.jsx)(\"thead\",{children:(0,a.jsxs)(\"tr\",{className:\"border-b border-gray-700\",children:[(0,a.jsx)(\"th\",{className:\"text-left p-2\",children:\"Symbol\"}),(0,a.jsx)(\"th\",{className:\"text-left p-2\",children:\"Action\"}),(0,a.jsx)(\"th\",{className:\"text-left p-2\",children:\"Shares\"}),(0,a.jsx)(\"th\",{className:\"text-left p-2\",children:\"Price\"}),(0,a.jsx)(\"th\",{className:\"text-left p-2\",children:\"Time\"}),(0,a.jsx)(\"th\",{className:\"text-left p-2\",children:\"Reason\"})]})}),(0,a.jsx)(\"tbody\",{children:null==(b=D.portfolio)||null==(v=b.trades)?void 0:v.slice(-10).reverse().map((e,t)=>(0,a.jsxs)(\"tr\",{className:\"border-b border-gray-800\",children:[(0,a.jsx)(\"td\",{className:\"p-2 font-semibold\",children:e.symbol}),(0,a.jsx)(\"td\",{className:\"p-2\",children:(0,a.jsx)(\"span\",{className:\"px-2 py-1 rounded text-xs \".concat(\"buy\"===e.action?\"bg-green-600\":\"bg-red-600\"),children:e.action.toUpperCase()})}),(0,a.jsx)(\"td\",{className:\"p-2\",children:e.shares}),(0,a.jsxs)(\"td\",{className:\"p-2\",children:[\"$\",e.price.toFixed(2)]}),(0,a.jsx)(\"td\",{className:\"p-2 text-sm text-gray-400\",children:new Date(e.time).toLocaleTimeString()}),(0,a.jsx)(\"td\",{className:\"p-2 text-sm text-gray-400 max-w-xs truncate\",children:e.reason})]},t))})]})}):(0,a.jsx)(\"p\",{className:\"text-gray-400\",children:\"No trades executed yet\"})]})}),(0,a.jsx)(n.av,{value:\"performance\",children:(0,a.jsxs)(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-2 gap-6\",children:[(0,a.jsxs)(l.Zp,{className:\"p-6 bg-gray-900/50 border-gray-700\",children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-semibold mb-4\",children:\"Performance Metrics\"}),(null==(j=D.portfolio)?void 0:j.performance)&&(0,a.jsx)(\"div\",{className:\"space-y-4\",children:(0,a.jsxs)(\"div\",{className:\"grid grid-cols-2 gap-4\",children:[(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-sm text-gray-400\",children:\"Total Return\"}),(0,a.jsxs)(\"p\",{className:\"text-xl font-semibold text-green-400\",children:[null==(N=D.portfolio.performance.totalReturn)?void 0:N.toFixed(2),\"%\"]})]}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-sm text-gray-400\",children:\"Sharpe Ratio\"}),(0,a.jsx)(\"p\",{className:\"text-xl font-semibold\",children:null==(w=D.portfolio.performance.sharpeRatio)?void 0:w.toFixed(2)})]}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-sm text-gray-400\",children:\"Max Drawdown\"}),(0,a.jsx)(\"p\",{className:\"text-xl font-semibold text-red-400\",children:(null==(k=D.portfolio)||null==(R=k.performance)?void 0:R.maxDrawdown)?(100*D.portfolio.performance.maxDrawdown).toFixed(2)+\"%\":\"N/A\"})]}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-sm text-gray-400\",children:\"Win Rate\"}),(0,a.jsxs)(\"p\",{className:\"text-xl font-semibold\",children:[null==(A=D.portfolio.performance.winRate)?void 0:A.toFixed(1),\"%\"]})]})]})})]}),(0,a.jsxs)(l.Zp,{className:\"p-6 bg-gray-900/50 border-gray-700\",children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-semibold mb-4\",children:\"Risk Analysis\"}),(null==(P=D.analysis)?void 0:P.riskAnalysis)&&(0,a.jsxs)(\"div\",{className:\"space-y-4\",children:[(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-sm text-gray-400\",children:\"Risk Score\"}),(0,a.jsxs)(\"div\",{className:\"flex items-center gap-2\",children:[(0,a.jsx)(M,{value:D.analysis.riskAnalysis.riskScore,className:\"flex-1 h-3\"}),(0,a.jsxs)(\"span\",{className:\"text-sm\",children:[D.analysis.riskAnalysis.riskScore,\"/100\"]})]})]}),(0,a.jsxs)(\"div\",{className:\"grid grid-cols-2 gap-4 text-sm\",children:[(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-gray-400\",children:\"Volatility\"}),(0,a.jsxs)(\"p\",{children:[(100*D.analysis.riskAnalysis.volatility).toFixed(1),\"%\"]})]}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-gray-400\",children:\"Beta\"}),(0,a.jsx)(\"p\",{children:null==(S=D.analysis.riskAnalysis.beta)?void 0:S.toFixed(2)})]})]})]})]})]})}),(0,a.jsx)(n.av,{value:\"strategies\",children:(0,a.jsxs)(l.Zp,{className:\"p-6 bg-gray-900/50 border-gray-700\",children:[(0,a.jsx)(\"h3\",{className:\"text-xl font-semibold mb-4\",children:\"Active AI Strategies\"}),D.trader&&(0,a.jsx)(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 gap-4\",children:D.trader.getStrategies().map(e=>{var t,s;return(0,a.jsxs)(\"div\",{className:\"p-4 bg-gray-800 rounded\",children:[(0,a.jsxs)(\"div\",{className:\"flex justify-between items-start mb-2\",children:[(0,a.jsx)(\"h4\",{className:\"font-semibold\",children:e.name}),(0,a.jsx)(\"span\",{className:\"px-2 py-1 rounded text-xs \".concat(\"ACTIVE\"===e.status?\"bg-green-600\":\"bg-gray-600\"),children:e.status})]}),(0,a.jsx)(\"p\",{className:\"text-sm text-gray-400 mb-3\",children:e.description}),(0,a.jsxs)(\"div\",{className:\"grid grid-cols-2 gap-2 text-xs\",children:[(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-gray-400\",children:\"Return\"}),(0,a.jsxs)(\"p\",{className:\"text-green-400\",children:[(null==(t=e.performance)?void 0:t.totalReturn)||0,\"%\"]})]}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"p\",{className:\"text-gray-400\",children:\"Win Rate\"}),(0,a.jsxs)(\"p\",{children:[(null==(s=e.performance)?void 0:s.winRate)||0,\"%\"]})]})]})]},e.id)})})]})})]})]})})}function S(){var e,t,s,o,c;let[m,h]=(0,i.useState)(!1),[u,x]=(0,i.useState)(null),[g,p]=(0,i.useState)(!1),[f,y]=(0,i.useState)(null);async function v(){p(!0),y(null);try{let e=new d(25e3,\"MEDIUM\");await e.executeAITrading([\"AAPL\",\"TSLA\",\"MSFT\"]);let t=e.getPortfolio();x(t)}catch(e){y(e.message||\"Unknown error\")}finally{p(!1)}}return m?(0,a.jsx)(P,{}):(0,a.jsx)(\"div\",{className:\"min-h-screen bg-gradient-to-br from-blue-900 via-purple-900 to-black text-white\",children:(0,a.jsx)(\"div\",{className:\"container mx-auto px-4 py-20\",children:(0,a.jsxs)(\"div\",{className:\"max-w-6xl mx-auto\",children:[(0,a.jsxs)(\"div\",{className:\"text-center mb-12\",children:[(0,a.jsx)(\"h1\",{className:\"text-5xl font-bold mb-6 bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\",children:\"AI Auto-Trader Demo\"}),(0,a.jsx)(\"p\",{className:\"text-xl text-gray-300 max-w-3xl mx-auto mb-8\",children:\"Experience the power of advanced AI-driven trading with real-time market analysis, sentiment evaluation, and automated portfolio optimization.\"})]}),(0,a.jsxs)(n.tU,{defaultValue:\"overview\",className:\"space-y-8\",children:[(0,a.jsxs)(n.j7,{className:\"grid w-full grid-cols-3 bg-gray-800\",children:[(0,a.jsx)(n.Xi,{value:\"overview\",children:\"Overview\"}),(0,a.jsx)(n.Xi,{value:\"features\",children:\"Features\"}),(0,a.jsx)(n.Xi,{value:\"demo\",children:\"Live Demo\"})]}),(0,a.jsx)(n.av,{value:\"overview\",children:(0,a.jsxs)(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-2 gap-8\",children:[(0,a.jsxs)(l.Zp,{className:\"p-8 bg-gray-900/50 border-gray-700\",children:[(0,a.jsx)(\"h3\",{className:\"text-2xl font-semibold mb-4 text-blue-400\",children:\"AI Trading Engine\"}),(0,a.jsxs)(\"div\",{className:\"space-y-4\",children:[(0,a.jsxs)(\"div\",{className:\"flex items-start space-x-3\",children:[(0,a.jsx)(\"div\",{className:\"w-2 h-2 bg-green-500 rounded-full mt-2\"}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"h4\",{className:\"font-semibold\",children:\"Advanced Pattern Recognition\"}),(0,a.jsx)(\"p\",{className:\"text-gray-300 text-sm\",children:\"AI identifies complex market patterns and trends\"})]})]}),(0,a.jsxs)(\"div\",{className:\"flex items-start space-x-3\",children:[(0,a.jsx)(\"div\",{className:\"w-2 h-2 bg-green-500 rounded-full mt-2\"}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"h4\",{className:\"font-semibold\",children:\"Sentiment Analysis\"}),(0,a.jsx)(\"p\",{className:\"text-gray-300 text-sm\",children:\"Real-time analysis of market sentiment and news\"})]})]}),(0,a.jsxs)(\"div\",{className:\"flex items-start space-x-3\",children:[(0,a.jsx)(\"div\",{className:\"w-2 h-2 bg-green-500 rounded-full mt-2\"}),(0,a.jsxs)(\"div\",{children:[(0,a.jsx)(\"h4\",{className:\"font-semibold\",children:\"Risk Management\"}),(0,a.jsx)(\"p\",{className:\"text-gray-300 text-sm\",children:\"Dynamic risk assessment and position sizing\"})]})]})]})]}),(0,a.jsxs)(l.Zp,{className:\"p-8 bg-gray-900/50 border-gray-700\",children:[(0,a.jsx)(\"h3\",{className:\"text-2xl font-semibold mb-4 text-purple-400\",children:\"Performance Metrics\"}),(0,a.jsxs)(\"div\",{className:\"grid grid-cols-2 gap-4\",children:[(0,a.jsxs)(\"div\",{className:\"text-center\",children:[(0,a.jsx)(\"div\",{className:\"text-3xl font-bold text-green-400\",children:\"94.7%\"}),(0,a.jsx)(\"div\",{className:\"text-sm text-gray-400\",children:\"Success Rate\"})]}),(0,a.jsxs)(\"div\",{className:\"text-center\",children:[(0,a.jsx)(\"div\",{className:\"text-3xl font-bold text-blue-400\",children:\"23.4%\"}),(0,a.jsx)(\"div\",{className:\"text-sm text-gray-400\",children:\"Avg Annual Return\"})]}),(0,a.jsxs)(\"div\",{className:\"text-center\",children:[(0,a.jsx)(\"div\",{className:\"text-3xl font-bold text-purple-400\",children:\"2.3\"}),(0,a.jsx)(\"div\",{className:\"text-sm text-gray-400\",children:\"Sharpe Ratio\"})]}),(0,a.jsxs)(\"div\",{className:\"text-center\",children:[(0,a.jsx)(\"div\",{className:\"text-3xl font-bold text-yellow-400\",children:\"8.2%\"}),(0,a.jsx)(\"div\",{className:\"text-sm text-gray-400\",children:\"Max Drawdown\"})]})]})]})]})}),(0,a.jsx)(n.av,{value:\"features\",children:(0,a.jsx)(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\",children:[{title:\"Multi-Strategy AI\",description:\"Combines momentum, mean reversion, and sentiment strategies\",icon:\"\\uD83E\\uDDE0\"},{title:\"Real-Time Analysis\",description:\"Live market data processing and signal generation\",icon:\"⚡\"},{title:\"Risk Controls\",description:\"Advanced risk management and position sizing\",icon:\"\\uD83D\\uDEE1️\"},{title:\"Portfolio Optimization\",description:\"AI-driven portfolio allocation and rebalancing\",icon:\"\\uD83D\\uDCCA\"},{title:\"Backtesting\",description:\"Historical performance validation and optimization\",icon:\"\\uD83D\\uDCC8\"},{title:\"24/7 Monitoring\",description:\"Continuous market monitoring and opportunity detection\",icon:\"\\uD83D\\uDD70️\"}].map((e,t)=>(0,a.jsxs)(l.Zp,{className:\"p-6 bg-gray-900/50 border-gray-700 hover:border-blue-500 transition-all\",children:[(0,a.jsx)(\"div\",{className:\"text-4xl mb-4\",children:e.icon}),(0,a.jsx)(\"h3\",{className:\"text-lg font-semibold mb-2\",children:e.title}),(0,a.jsx)(\"p\",{className:\"text-gray-300 text-sm\",children:e.description})]},t))})}),(0,a.jsx)(n.av,{value:\"demo\",children:(0,a.jsxs)(\"div\",{className:\"space-y-8\",children:[(0,a.jsx)(l.Zp,{className:\"p-8 bg-gray-900/50 border-gray-700\",children:(0,a.jsxs)(\"div\",{className:\"text-center\",children:[(0,a.jsx)(\"h3\",{className:\"text-2xl font-semibold mb-4\",children:\"Choose Your Demo Experience\"}),(0,a.jsxs)(\"div\",{className:\"grid grid-cols-1 md:grid-cols-2 gap-6 max-w-4xl mx-auto\",children:[(0,a.jsxs)(\"div\",{className:\"p-6 bg-gray-800 rounded-lg\",children:[(0,a.jsx)(\"h4\",{className:\"text-xl font-semibold mb-4 text-blue-400\",children:\"Quick Demo\"}),(0,a.jsx)(\"p\",{className:\"text-gray-300 mb-6\",children:\"See AI trading in action with a simulated portfolio and trades\"}),(0,a.jsx)(r.Button,{onClick:v,disabled:g,className:\"w-full bg-blue-600 hover:bg-blue-700\",children:g?\"Running Demo...\":\"Start Quick Demo\"}),f&&(0,a.jsxs)(\"div\",{className:\"mt-4 p-3 bg-red-900/50 border border-red-500 rounded text-red-300\",children:[\"Error: \",f]}),u&&(0,a.jsxs)(\"div\",{className:\"mt-6 p-4 bg-green-900/30 border border-green-500 rounded\",children:[(0,a.jsx)(\"h5\",{className:\"font-semibold mb-2\",children:\"Demo Results:\"}),(0,a.jsxs)(\"div\",{className:\"text-sm space-y-1\",children:[(0,a.jsxs)(\"p\",{children:[\"Portfolio Value:\",\" \",(0,a.jsxs)(\"span\",{className:\"text-green-400\",children:[\"$\",null==(e=u.totalValue)?void 0:e.toFixed(2)]})]}),(0,a.jsxs)(\"p\",{children:[\"Cash: $\",null==(t=u.cash)?void 0:t.toFixed(2)]}),(0,a.jsxs)(\"p\",{children:[\"Total Return:\",\" \",(0,a.jsxs)(\"span\",{className:\"text-green-400\",children:[null==(o=u.performance)||null==(s=o.totalReturn)?void 0:s.toFixed(2),\"%\"]})]}),(0,a.jsxs)(\"p\",{children:[\"Trades Executed: \",(null==(c=u.trades)?void 0:c.length)||0]})]})]})]}),(0,a.jsxs)(\"div\",{className:\"p-6 bg-gray-800 rounded-lg\",children:[(0,a.jsx)(\"h4\",{className:\"text-xl font-semibold mb-4 text-purple-400\",children:\"Full Dashboard\"}),(0,a.jsx)(\"p\",{className:\"text-gray-300 mb-6\",children:\"Access the complete AI trading dashboard with advanced features\"}),(0,a.jsx)(r.Button,{onClick:()=>h(!0),className:\"w-full bg-purple-600 hover:bg-purple-700\",children:\"Launch Full Dashboard\"}),(0,a.jsx)(\"div\",{className:\"mt-4 text-xs text-gray-400\",children:\"Includes: Portfolio management, AI signals, performance metrics, and more\"})]})]})]})}),(0,a.jsxs)(l.Zp,{className:\"p-8 bg-gray-900/50 border-gray-700\",children:[(0,a.jsx)(\"h3\",{className:\"text-2xl font-semibold mb-6 text-center\",children:\"AI Trading Strategies\"}),(0,a.jsxs)(\"div\",{className:\"grid grid-cols-1 lg:grid-cols-3 gap-6\",children:[(0,a.jsxs)(\"div\",{className:\"text-center\",children:[(0,a.jsx)(\"div\",{className:\"w-16 h-16 bg-blue-600 rounded-full flex items-center justify-center mx-auto mb-4\",children:(0,a.jsx)(\"span\",{className:\"text-2xl\",children:\"\\uD83D\\uDCC8\"})}),(0,a.jsx)(\"h4\",{className:\"text-lg font-semibold mb-2\",children:\"Momentum Strategy\"}),(0,a.jsx)(\"p\",{className:\"text-gray-300 text-sm\",children:\"Identifies and follows strong market trends with AI-powered confirmation\"})]}),(0,a.jsxs)(\"div\",{className:\"text-center\",children:[(0,a.jsx)(\"div\",{className:\"w-16 h-16 bg-purple-600 rounded-full flex items-center justify-center mx-auto mb-4\",children:(0,a.jsx)(\"span\",{className:\"text-2xl\",children:\"\\uD83C\\uDFAF\"})}),(0,a.jsx)(\"h4\",{className:\"text-lg font-semibold mb-2\",children:\"Mean Reversion\"}),(0,a.jsx)(\"p\",{className:\"text-gray-300 text-sm\",children:\"Exploits temporary price deviations from long-term averages\"})]}),(0,a.jsxs)(\"div\",{className:\"text-center\",children:[(0,a.jsx)(\"div\",{className:\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-4\",children:(0,a.jsx)(\"span\",{className:\"text-2xl\",children:\"\\uD83E\\uDDE0\"})}),(0,a.jsx)(\"h4\",{className:\"text-lg font-semibold mb-2\",children:\"Sentiment Analysis\"}),(0,a.jsx)(\"p\",{className:\"text-gray-300 text-sm\",children:\"Analyzes market sentiment from news, social media, and institutional flows\"})]})]})]})]})})]})]})})})}M.displayName=y.displayName},8482:(e,t,s)=>{\"use strict\";s.d(t,{BT:()=>o,Wu:()=>c,ZB:()=>n,Zp:()=>l,wL:()=>d});var a=s(5155),i=s(2115),r=s(3999);let l=i.forwardRef((e,t)=>{let{className:s,...i}=e;return(0,a.jsx)(\"div\",{ref:t,className:(0,r.cn)(\"rounded-2xl bg-black/60 border border-white/10 shadow-lg\",s),...i})});l.displayName=\"Card\",i.forwardRef((e,t)=>{let{className:s,...i}=e;return(0,a.jsx)(\"div\",{ref:t,className:(0,r.cn)(\"flex flex-col space-y-1.5 p-6\",s),...i})}).displayName=\"CardHeader\";let n=i.forwardRef((e,t)=>{let{className:s,children:i,...l}=e;return(0,a.jsx)(\"h3\",{ref:t,className:(0,r.cn)(\"text-2xl font-semibold leading-none tracking-tight\",s),...l,children:i})});n.displayName=\"CardTitle\";let o=i.forwardRef((e,t)=>{let{className:s,...i}=e;return(0,a.jsx)(\"p\",{ref:t,className:(0,r.cn)(\"text-sm text-muted-foreground\",s),...i})});o.displayName=\"CardDescription\";let c=i.forwardRef((e,t)=>{let{className:s,...i}=e;return(0,a.jsx)(\"div\",{ref:t,className:(0,r.cn)(\"p-6 pt-0\",s),...i})});c.displayName=\"CardContent\";let d=i.forwardRef((e,t)=>{let{className:s,...i}=e;return(0,a.jsx)(\"div\",{ref:t,className:(0,r.cn)(\"flex items-center p-6 pt-0\",s),...i})});d.displayName=\"CardFooter\"}},e=>{var t=t=>e(e.s=t);e.O(0,[848,482,441,684,358],()=>t(5048)),_N_E=e.O()}]);",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/error-882c4864a4155d97.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/faq/page-e71ed9749013822b.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/investors/page-09250bf2e463abd2.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/layout-4b9369d5e45b3a9e.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/legal/page-65bb368321e6c2f6.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/loading-65b2d45efd5067f3.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/not-found-c6980990f01dd5e9.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 1719,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 1720
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'j' is assigned a value but never used.",
        "line": 1,
        "column": 3258,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 3259
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[345],{1504:(e,t,r)=>{Promise.resolve().then(r.bind(r,7168)),Promise.resolve().then(r.t.bind(r,6874,23))},2664:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"isLocalURL\",{enumerable:!0,get:function(){return u}});let n=r(9991),o=r(7102);function u(e){if(!(0,n.isAbsoluteUrl)(e))return!0;try{let t=(0,n.getLocationOrigin)(),r=new URL(e,t);return r.origin===t&&(0,o.hasBasePath)(r.pathname)}catch(e){return!1}}},2757:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{formatUrl:function(){return u},formatWithValidation:function(){return a},urlObjectKeys:function(){return i}});let n=r(6966)._(r(8859)),o=/https?|ftp|gopher|file/;function u(e){let{auth:t,hostname:r}=e,u=e.protocol||\"\",i=e.pathname||\"\",a=e.hash||\"\",s=e.query||\"\",l=!1;t=t?encodeURIComponent(t).replace(/%3A/i,\":\")+\"@\":\"\",e.host?l=t+e.host:r&&(l=t+(~r.indexOf(\":\")?\"[\"+r+\"]\":r),e.port&&(l+=\":\"+e.port)),s&&\"object\"==typeof s&&(s=String(n.urlQueryToSearchParams(s)));let c=e.search||s&&\"?\"+s||\"\";return u&&!u.endsWith(\":\")&&(u+=\":\"),e.slashes||(!u||o.test(u))&&!1!==l?(l=\"//\"+(l||\"\"),i&&\"/\"!==i[0]&&(i=\"/\"+i)):l||(l=\"\"),a&&\"#\"!==a[0]&&(a=\"#\"+a),c&&\"?\"!==c[0]&&(c=\"?\"+c),\"\"+u+l+(i=i.replace(/[?#]/g,encodeURIComponent))+(c=c.replace(\"#\",\"%23\"))+a}let i=[\"auth\",\"hash\",\"host\",\"hostname\",\"href\",\"path\",\"pathname\",\"port\",\"protocol\",\"query\",\"search\",\"slashes\"];function a(e){return u(e)}},3180:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"errorOnce\",{enumerable:!0,get:function(){return r}});let r=e=>{}},3999:(e,t,r)=>{\"use strict\";r.d(t,{cn:()=>u});var n=r(2596),o=r(9688);function u(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return(0,o.QP)((0,n.$)(t))}},6654:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"useMergedRef\",{enumerable:!0,get:function(){return o}});let n=r(2115);function o(e,t){let r=(0,n.useRef)(null),o=(0,n.useRef)(null);return(0,n.useCallback)(n=>{if(null===n){let e=r.current;e&&(r.current=null,e());let t=o.current;t&&(o.current=null,t())}else e&&(r.current=u(e,n)),t&&(o.current=u(t,n))},[e,t])}function u(e,t){if(\"function\"!=typeof e)return e.current=t,()=>{e.current=null};{let r=e(t);return\"function\"==typeof r?r:()=>e(null)}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6874:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{default:function(){return y},useLinkStatus:function(){return b}});let n=r(6966),o=r(5155),u=n._(r(2115)),i=r(2757),a=r(5227),s=r(9818),l=r(6654),c=r(9991),f=r(5929);r(3230);let d=r(4930),p=r(2664),h=r(6634);function g(e){return\"string\"==typeof e?e:(0,i.formatUrl)(e)}function y(e){let t,r,n,[i,y]=(0,u.useOptimistic)(d.IDLE_LINK_STATUS),b=(0,u.useRef)(null),{href:v,as:P,children:_,prefetch:O=null,passHref:x,replace:E,shallow:j,scroll:N,onClick:T,onMouseEnter:w,onTouchStart:C,legacyBehavior:S=!1,onNavigate:A,ref:L,unstable_dynamicOnHover:M,...k}=e;t=_,S&&(\"string\"==typeof t||\"number\"==typeof t)&&(t=(0,o.jsx)(\"a\",{children:t}));let R=u.default.useContext(a.AppRouterContext),U=!1!==O,I=null===O?s.PrefetchKind.AUTO:s.PrefetchKind.FULL,{href:D,as:F}=u.default.useMemo(()=>{let e=g(v);return{href:e,as:P?g(P):e}},[v,P]);S&&(r=u.default.Children.only(t));let K=S?r&&\"object\"==typeof r&&r.ref:L,B=u.default.useCallback(e=>(null!==R&&(b.current=(0,d.mountLinkInstance)(e,D,R,I,U,y)),()=>{b.current&&((0,d.unmountLinkForCurrentNavigation)(b.current),b.current=null),(0,d.unmountPrefetchableInstance)(e)}),[U,D,R,I,y]),z={ref:(0,l.useMergedRef)(B,K),onClick(e){S||\"function\"!=typeof T||T(e),S&&r.props&&\"function\"==typeof r.props.onClick&&r.props.onClick(e),R&&(e.defaultPrevented||function(e,t,r,n,o,i,a){let{nodeName:s}=e.currentTarget;if(!(\"A\"===s.toUpperCase()&&function(e){let t=e.currentTarget.getAttribute(\"target\");return t&&\"_self\"!==t||e.metaKey||e.ctrlKey||e.shiftKey||e.altKey||e.nativeEvent&&2===e.nativeEvent.which}(e)||e.currentTarget.hasAttribute(\"download\"))){if(!(0,p.isLocalURL)(t)){o&&(e.preventDefault(),location.replace(t));return}e.preventDefault(),u.default.startTransition(()=>{if(a){let e=!1;if(a({preventDefault:()=>{e=!0}}),e)return}(0,h.dispatchNavigateAction)(r||t,o?\"replace\":\"push\",null==i||i,n.current)})}}(e,D,F,b,E,N,A))},onMouseEnter(e){S||\"function\"!=typeof w||w(e),S&&r.props&&\"function\"==typeof r.props.onMouseEnter&&r.props.onMouseEnter(e),R&&U&&(0,d.onNavigationIntent)(e.currentTarget,!0===M)},onTouchStart:function(e){S||\"function\"!=typeof C||C(e),S&&r.props&&\"function\"==typeof r.props.onTouchStart&&r.props.onTouchStart(e),R&&U&&(0,d.onNavigationIntent)(e.currentTarget,!0===M)}};return(0,c.isAbsoluteUrl)(F)?z.href=F:S&&!x&&(\"a\"!==r.type||\"href\"in r.props)||(z.href=(0,f.addBasePath)(F)),n=S?u.default.cloneElement(r,z):(0,o.jsx)(\"a\",{...k,...z,children:t}),(0,o.jsx)(m.Provider,{value:i,children:n})}r(3180);let m=(0,u.createContext)(d.IDLE_LINK_STATUS),b=()=>(0,u.useContext)(m);(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7168:(e,t,r)=>{\"use strict\";r.d(t,{Button:()=>a});var n=r(5155),o=r(2115),u=r(9708),i=r(3999);let a=o.forwardRef((e,t)=>{let{className:r,variant:o,size:a,asChild:s=!1,children:l,...c}=e,f=s?u.DX:\"button\";return(0,n.jsx)(f,{className:(0,i.cn)(function(e){let{variant:t=\"default\",size:r=\"default\",className:n}=e,o={default:\"bg-primary text-primary-foreground shadow hover:bg-primary/90\",destructive:\"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",outline:\"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",secondary:\"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",ghost:\"hover:bg-accent hover:text-accent-foreground\",link:\"text-primary underline-offset-4 hover:underline\"},u={default:\"h-9 px-4 py-2\",sm:\"h-8 rounded-md px-3 text-xs\",lg:\"h-10 rounded-md px-8\",icon:\"h-9 w-9\"};return(0,i.cn)(\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",o[t]||o.default,u[r]||u.default,n)}({variant:o,size:a,className:r})),ref:t,...c,children:l})});a.displayName=\"Button\"},8859:(e,t)=>{\"use strict\";function r(e){let t={};for(let[r,n]of e.entries()){let e=t[r];void 0===e?t[r]=n:Array.isArray(e)?e.push(n):t[r]=[e,n]}return t}function n(e){return\"string\"==typeof e?e:(\"number\"!=typeof e||isNaN(e))&&\"boolean\"!=typeof e?\"\":String(e)}function o(e){let t=new URLSearchParams;for(let[r,o]of Object.entries(e))if(Array.isArray(o))for(let e of o)t.append(r,n(e));else t.set(r,n(o));return t}function u(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];for(let t of r){for(let r of t.keys())e.delete(r);for(let[r,n]of t.entries())e.append(r,n)}return e}Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{assign:function(){return u},searchParamsToUrlQuery:function(){return r},urlQueryToSearchParams:function(){return o}})},9991:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{DecodeError:function(){return h},MiddlewareNotFoundError:function(){return b},MissingStaticPage:function(){return m},NormalizeError:function(){return g},PageNotFoundError:function(){return y},SP:function(){return d},ST:function(){return p},WEB_VITALS:function(){return r},execOnce:function(){return n},getDisplayName:function(){return s},getLocationOrigin:function(){return i},getURL:function(){return a},isAbsoluteUrl:function(){return u},isResSent:function(){return l},loadGetInitialProps:function(){return f},normalizeRepeatedSlashes:function(){return c},stringifyError:function(){return v}});let r=[\"CLS\",\"FCP\",\"FID\",\"INP\",\"LCP\",\"TTFB\"];function n(e){let t,r=!1;return function(){for(var n=arguments.length,o=Array(n),u=0;u<n;u++)o[u]=arguments[u];return r||(r=!0,t=e(...o)),t}}let o=/^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/,u=e=>o.test(e);function i(){let{protocol:e,hostname:t,port:r}=window.location;return e+\"//\"+t+(r?\":\"+r:\"\")}function a(){let{href:e}=window.location,t=i();return e.substring(t.length)}function s(e){return\"string\"==typeof e?e:e.displayName||e.name||\"Unknown\"}function l(e){return e.finished||e.headersSent}function c(e){let t=e.split(\"?\");return t[0].replace(/\\\\/g,\"/\").replace(/\\/\\/+/g,\"/\")+(t[1]?\"?\"+t.slice(1).join(\"?\"):\"\")}async function f(e,t){let r=t.res||t.ctx&&t.ctx.res;if(!e.getInitialProps)return t.ctx&&t.Component?{pageProps:await f(t.Component,t.ctx)}:{};let n=await e.getInitialProps(t);if(r&&l(r))return n;if(!n)throw Object.defineProperty(Error('\"'+s(e)+'.getInitialProps()\" should resolve to an object. But found \"'+n+'\" instead.'),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0});return n}let d=\"undefined\"!=typeof performance,p=d&&[\"mark\",\"measure\",\"getEntriesByName\"].every(e=>\"function\"==typeof performance[e]);class h extends Error{}class g extends Error{}class y extends Error{constructor(e){super(),this.code=\"ENOENT\",this.name=\"PageNotFoundError\",this.message=\"Cannot find module for page: \"+e}}class m extends Error{constructor(e,t){super(),this.message=\"Failed to load static file for page: \"+e+\" \"+t}}class b extends Error{constructor(){super(),this.code=\"ENOENT\",this.message=\"Cannot find the middleware module\"}}function v(e){return JSON.stringify({message:e.message,stack:e.stack})}}},e=>{var t=t=>e(e.s=t);e.O(0,[848,441,684,358],()=>t(1504)),_N_E=e.O()}]);",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/page-e17ae4943288730f.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/profile/page-0b8b66c70e518e31.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/subscribe/page-60999f1332095bd5.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/app/subscription/page-2402dece5584f168.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/framework-d8e05d6664389c0a.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'r' is defined but never used.",
        "line": 1,
        "column": 21315,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21316
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'l' is defined but never used.",
        "line": 1,
        "column": 21317,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21318
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'a' is defined but never used.",
        "line": 1,
        "column": 21319,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21320
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'u' is defined but never used.",
        "line": 1,
        "column": 21321,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21322
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'o' is defined but never used.",
        "line": 1,
        "column": 21323,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21324
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'i' is defined but never used.",
        "line": 1,
        "column": 21325,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21326
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 21498,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21499
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'n' is defined but never used.",
        "line": 1,
        "column": 21500,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21501
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 21502,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21503
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'r' is defined but never used.",
        "line": 1,
        "column": 21504,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21505
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'l' is defined but never used.",
        "line": 1,
        "column": 21506,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21507
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'a' is defined but never used.",
        "line": 1,
        "column": 21508,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21509
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'u' is defined but never used.",
        "line": 1,
        "column": 21510,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21511
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'o' is defined but never used.",
        "line": 1,
        "column": 21512,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21513
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'i' is defined but never used.",
        "line": 1,
        "column": 21514,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 21515
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 39824,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 39825
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'n' is defined but never used.",
        "line": 1,
        "column": 39826,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 39827
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 39828,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 39829
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'r' is defined but never used.",
        "line": 1,
        "column": 39830,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 39831
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'l' is defined but never used.",
        "line": 1,
        "column": 39832,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 39833
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'a' is defined but never used.",
        "line": 1,
        "column": 39834,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 39835
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'u' is defined but never used.",
        "line": 1,
        "column": 39836,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 39837
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'o' is defined but never used.",
        "line": 1,
        "column": 39838,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 39839
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'i' is defined but never used.",
        "line": 1,
        "column": 39840,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 39841
      }
    ],
    "suppressedMessages": [],
    "errorCount": 24,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use strict\";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[593],{1733:(e,n)=>{var t=Symbol.for(\"react.element\"),r=Symbol.for(\"react.portal\"),l=Symbol.for(\"react.fragment\"),a=Symbol.for(\"react.strict_mode\"),u=Symbol.for(\"react.profiler\"),o=Symbol.for(\"react.provider\"),i=Symbol.for(\"react.context\"),s=Symbol.for(\"react.forward_ref\"),c=Symbol.for(\"react.suspense\"),f=Symbol.for(\"react.memo\"),d=Symbol.for(\"react.lazy\"),p=Symbol.iterator,m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,g={};function v(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||m}function y(){}function b(e,n,t){this.props=e,this.context=n,this.refs=g,this.updater=t||m}v.prototype.isReactComponent={},v.prototype.setState=function(e,n){if(\"object\"!=typeof e&&\"function\"!=typeof e&&null!=e)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,e,n,\"setState\")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,\"forceUpdate\")},y.prototype=v.prototype;var k=b.prototype=new y;k.constructor=b,h(k,v.prototype),k.isPureReactComponent=!0;var w=Array.isArray,S=Object.prototype.hasOwnProperty,x={current:null},E={key:!0,ref:!0,__self:!0,__source:!0};function _(e,n,r){var l,a={},u=null,o=null;if(null!=n)for(l in void 0!==n.ref&&(o=n.ref),void 0!==n.key&&(u=\"\"+n.key),n)S.call(n,l)&&!E.hasOwnProperty(l)&&(a[l]=n[l]);var i=arguments.length-2;if(1===i)a.children=r;else if(1<i){for(var s=Array(i),c=0;c<i;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(l in i=e.defaultProps)void 0===a[l]&&(a[l]=i[l]);return{$$typeof:t,type:e,key:u,ref:o,props:a,_owner:x.current}}function C(e){return\"object\"==typeof e&&null!==e&&e.$$typeof===t}var P=/\\/+/g;function N(e,n){var t,r;return\"object\"==typeof e&&null!==e&&null!=e.key?(t=\"\"+e.key,r={\"=\":\"=0\",\":\":\"=2\"},\"$\"+t.replace(/[=:]/g,function(e){return r[e]})):n.toString(36)}function z(e,n,l){if(null==e)return e;var a=[],u=0;return!function e(n,l,a,u,o){var i,s,c,f=typeof n;(\"undefined\"===f||\"boolean\"===f)&&(n=null);var d=!1;if(null===n)d=!0;else switch(f){case\"string\":case\"number\":d=!0;break;case\"object\":switch(n.$$typeof){case t:case r:d=!0}}if(d)return o=o(d=n),n=\"\"===u?\".\"+N(d,0):u,w(o)?(a=\"\",null!=n&&(a=n.replace(P,\"$&/\")+\"/\"),e(o,l,a,\"\",function(e){return e})):null!=o&&(C(o)&&(i=o,s=a+(!o.key||d&&d.key===o.key?\"\":(\"\"+o.key).replace(P,\"$&/\")+\"/\")+n,o={$$typeof:t,type:i.type,key:s,ref:i.ref,props:i.props,_owner:i._owner}),l.push(o)),1;if(d=0,u=\"\"===u?\".\":u+\":\",w(n))for(var m=0;m<n.length;m++){var h=u+N(f=n[m],m);d+=e(f,l,a,h,o)}else if(\"function\"==typeof(h=null===(c=n)||\"object\"!=typeof c?null:\"function\"==typeof(c=p&&c[p]||c[\"@@iterator\"])?c:null))for(n=h.call(n),m=0;!(f=n.next()).done;)h=u+N(f=f.value,m++),d+=e(f,l,a,h,o);else if(\"object\"===f)throw Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===(l=String(n))?\"object with keys {\"+Object.keys(n).join(\", \")+\"}\":l)+\"). If you meant to render a collection of children, use an array instead.\");return d}(e,a,\"\",\"\",function(e){return n.call(l,e,u++)}),a}function T(e){if(-1===e._status){var n=e._result;(n=n()).then(function(n){(0===e._status||-1===e._status)&&(e._status=1,e._result=n)},function(n){(0===e._status||-1===e._status)&&(e._status=2,e._result=n)}),-1===e._status&&(e._status=0,e._result=n)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},R={transition:null};function M(){throw Error(\"act(...) is not supported in production builds of React.\")}n.Children={map:z,forEach:function(e,n,t){z(e,function(){n.apply(this,arguments)},t)},count:function(e){var n=0;return z(e,function(){n++}),n},toArray:function(e){return z(e,function(e){return e})||[]},only:function(e){if(!C(e))throw Error(\"React.Children.only expected to receive a single React element child.\");return e}},n.Component=v,n.Fragment=l,n.Profiler=u,n.PureComponent=b,n.StrictMode=a,n.Suspense=c,n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:R,ReactCurrentOwner:x},n.act=M,n.cloneElement=function(e,n,r){if(null==e)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+e+\".\");var l=h({},e.props),a=e.key,u=e.ref,o=e._owner;if(null!=n){if(void 0!==n.ref&&(u=n.ref,o=x.current),void 0!==n.key&&(a=\"\"+n.key),e.type&&e.type.defaultProps)var i=e.type.defaultProps;for(s in n)S.call(n,s)&&!E.hasOwnProperty(s)&&(l[s]=void 0===n[s]&&void 0!==i?i[s]:n[s])}var s=arguments.length-2;if(1===s)l.children=r;else if(1<s){i=Array(s);for(var c=0;c<s;c++)i[c]=arguments[c+2];l.children=i}return{$$typeof:t,type:e.type,key:a,ref:u,props:l,_owner:o}},n.createContext=function(e){return(e={$$typeof:i,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:o,_context:e},e.Consumer=e},n.createElement=_,n.createFactory=function(e){var n=_.bind(null,e);return n.type=e,n},n.createRef=function(){return{current:null}},n.forwardRef=function(e){return{$$typeof:s,render:e}},n.isValidElement=C,n.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:T}},n.memo=function(e,n){return{$$typeof:f,type:e,compare:void 0===n?null:n}},n.startTransition=function(e){var n=R.transition;R.transition={};try{e()}finally{R.transition=n}},n.unstable_act=M,n.useCallback=function(e,n){return L.current.useCallback(e,n)},n.useContext=function(e){return L.current.useContext(e)},n.useDebugValue=function(){},n.useDeferredValue=function(e){return L.current.useDeferredValue(e)},n.useEffect=function(e,n){return L.current.useEffect(e,n)},n.useId=function(){return L.current.useId()},n.useImperativeHandle=function(e,n,t){return L.current.useImperativeHandle(e,n,t)},n.useInsertionEffect=function(e,n){return L.current.useInsertionEffect(e,n)},n.useLayoutEffect=function(e,n){return L.current.useLayoutEffect(e,n)},n.useMemo=function(e,n){return L.current.useMemo(e,n)},n.useReducer=function(e,n,t){return L.current.useReducer(e,n,t)},n.useRef=function(e){return L.current.useRef(e)},n.useState=function(e){return L.current.useState(e)},n.useSyncExternalStore=function(e,n,t){return L.current.useSyncExternalStore(e,n,t)},n.useTransition=function(){return L.current.useTransition()},n.version=\"18.3.1\"},4232:(e,n,t)=>{e.exports=t(1733)},5549:(e,n,t)=>{var r,l,a,u,o,i,s=t(4232),c=t(9752);function f(e){for(var n=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+e,t=1;t<arguments.length;t++)n+=\"&args[]=\"+encodeURIComponent(arguments[t]);return\"Minified React error #\"+e+\"; visit \"+n+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var d=new Set,p={};function m(e,n){h(e,n),h(e+\"Capture\",n)}function h(e,n){for(p[e]=n,e=0;e<n.length;e++)d.add(n[e])}var g=\"undefined\"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,v=Object.prototype.hasOwnProperty,y=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,b={},k={};function w(e,n,t,r,l,a,u){this.acceptsBooleans=2===n||3===n||4===n,this.attributeName=r,this.attributeNamespace=l,this.mustUseProperty=t,this.propertyName=e,this.type=n,this.sanitizeURL=a,this.removeEmptyString=u}var S={};\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(e){S[e]=new w(e,0,!1,e,null,!1,!1)}),[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(e){var n=e[0];S[n]=new w(n,1,!1,e[1],null,!1,!1)}),[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(e){S[e]=new w(e,2,!1,e.toLowerCase(),null,!1,!1)}),[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(e){S[e]=new w(e,2,!1,e,null,!1,!1)}),\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(e){S[e]=new w(e,3,!1,e.toLowerCase(),null,!1,!1)}),[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(e){S[e]=new w(e,3,!0,e,null,!1,!1)}),[\"capture\",\"download\"].forEach(function(e){S[e]=new w(e,4,!1,e,null,!1,!1)}),[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(e){S[e]=new w(e,6,!1,e,null,!1,!1)}),[\"rowSpan\",\"start\"].forEach(function(e){S[e]=new w(e,5,!1,e.toLowerCase(),null,!1,!1)});var x=/[\\-:]([a-z])/g;function E(e){return e[1].toUpperCase()}function _(e,n,t,r){var l,a=S.hasOwnProperty(n)?S[n]:null;(null!==a?0!==a.type:r||!(2<n.length)||\"o\"!==n[0]&&\"O\"!==n[0]||\"n\"!==n[1]&&\"N\"!==n[1])&&(function(e,n,t,r){if(null==n||function(e,n,t,r){if(null!==t&&0===t.type)return!1;switch(typeof n){case\"function\":case\"symbol\":return!0;case\"boolean\":if(r)return!1;if(null!==t)return!t.acceptsBooleans;return\"data-\"!==(e=e.toLowerCase().slice(0,5))&&\"aria-\"!==e;default:return!1}}(e,n,t,r))return!0;if(r)return!1;if(null!==t)switch(t.type){case 3:return!n;case 4:return!1===n;case 5:return isNaN(n);case 6:return isNaN(n)||1>n}return!1}(n,t,a,r)&&(t=null),r||null===a?(l=n,(v.call(k,l)||!v.call(b,l)&&(y.test(l)?k[l]=!0:(b[l]=!0,!1)))&&(null===t?e.removeAttribute(n):e.setAttribute(n,\"\"+t))):a.mustUseProperty?e[a.propertyName]=null===t?3!==a.type&&\"\":t:(n=a.attributeName,r=a.attributeNamespace,null===t?e.removeAttribute(n):(t=3===(a=a.type)||4===a&&!0===t?\"\":\"\"+t,r?e.setAttributeNS(r,n,t):e.setAttribute(n,t))))}\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(e){var n=e.replace(x,E);S[n]=new w(n,1,!1,e,null,!1,!1)}),\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(e){var n=e.replace(x,E);S[n]=new w(n,1,!1,e,\"http://www.w3.org/1999/xlink\",!1,!1)}),[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(e){var n=e.replace(x,E);S[n]=new w(n,1,!1,e,\"http://www.w3.org/XML/1998/namespace\",!1,!1)}),[\"tabIndex\",\"crossOrigin\"].forEach(function(e){S[e]=new w(e,1,!1,e.toLowerCase(),null,!1,!1)}),S.xlinkHref=new w(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1),[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(e){S[e]=new w(e,1,!1,e.toLowerCase(),null,!0,!0)});var C=s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,P=Symbol.for(\"react.element\"),N=Symbol.for(\"react.portal\"),z=Symbol.for(\"react.fragment\"),T=Symbol.for(\"react.strict_mode\"),L=Symbol.for(\"react.profiler\"),R=Symbol.for(\"react.provider\"),M=Symbol.for(\"react.context\"),F=Symbol.for(\"react.forward_ref\"),O=Symbol.for(\"react.suspense\"),D=Symbol.for(\"react.suspense_list\"),I=Symbol.for(\"react.memo\"),U=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\"),Symbol.for(\"react.debug_trace_mode\");var V=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\"),Symbol.for(\"react.cache\"),Symbol.for(\"react.tracing_marker\");var $=Symbol.iterator;function A(e){return null===e||\"object\"!=typeof e?null:\"function\"==typeof(e=$&&e[$]||e[\"@@iterator\"])?e:null}var j,B=Object.assign;function H(e){if(void 0===j)try{throw Error()}catch(e){var n=e.stack.trim().match(/\\n( *(at )?)/);j=n&&n[1]||\"\"}return\"\\n\"+j+e}var W=!1;function Q(e,n){if(!e||W)return\"\";W=!0;var t=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(n)if(n=function(){throw Error()},Object.defineProperty(n.prototype,\"props\",{set:function(){throw Error()}}),\"object\"==typeof Reflect&&Reflect.construct){try{Reflect.construct(n,[])}catch(e){var r=e}Reflect.construct(e,[],n)}else{try{n.call()}catch(e){r=e}e.call(n.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(n){if(n&&r&&\"string\"==typeof n.stack){for(var l=n.stack.split(\"\\n\"),a=r.stack.split(\"\\n\"),u=l.length-1,o=a.length-1;1<=u&&0<=o&&l[u]!==a[o];)o--;for(;1<=u&&0<=o;u--,o--)if(l[u]!==a[o]){if(1!==u||1!==o)do if(u--,0>--o||l[u]!==a[o]){var i=\"\\n\"+l[u].replace(\" at new \",\" at \");return e.displayName&&i.includes(\"<anonymous>\")&&(i=i.replace(\"<anonymous>\",e.displayName)),i}while(1<=u&&0<=o);break}}}finally{W=!1,Error.prepareStackTrace=t}return(e=e?e.displayName||e.name:\"\")?H(e):\"\"}function q(e){switch(typeof e){case\"boolean\":case\"number\":case\"string\":case\"undefined\":case\"object\":return e;default:return\"\"}}function K(e){var n=e.type;return(e=e.nodeName)&&\"input\"===e.toLowerCase()&&(\"checkbox\"===n||\"radio\"===n)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var n=K(e)?\"checked\":\"value\",t=Object.getOwnPropertyDescriptor(e.constructor.prototype,n),r=\"\"+e[n];if(!e.hasOwnProperty(n)&&void 0!==t&&\"function\"==typeof t.get&&\"function\"==typeof t.set){var l=t.get,a=t.set;return Object.defineProperty(e,n,{configurable:!0,get:function(){return l.call(this)},set:function(e){r=\"\"+e,a.call(this,e)}}),Object.defineProperty(e,n,{enumerable:t.enumerable}),{getValue:function(){return r},setValue:function(e){r=\"\"+e},stopTracking:function(){e._valueTracker=null,delete e[n]}}}}(e))}function X(e){if(!e)return!1;var n=e._valueTracker;if(!n)return!0;var t=n.getValue(),r=\"\";return e&&(r=K(e)?e.checked?\"true\":\"false\":e.value),(e=r)!==t&&(n.setValue(e),!0)}function G(e){if(void 0===(e=e||(\"undefined\"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(n){return e.body}}function Z(e,n){var t=n.checked;return B({},n,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=t?t:e._wrapperState.initialChecked})}function J(e,n){var t=null==n.defaultValue?\"\":n.defaultValue;e._wrapperState={initialChecked:null!=n.checked?n.checked:n.defaultChecked,initialValue:t=q(null!=n.value?n.value:t),controlled:\"checkbox\"===n.type||\"radio\"===n.type?null!=n.checked:null!=n.value}}function ee(e,n){null!=(n=n.checked)&&_(e,\"checked\",n,!1)}function en(e,n){ee(e,n);var t=q(n.value),r=n.type;if(null!=t)\"number\"===r?(0===t&&\"\"===e.value||e.value!=t)&&(e.value=\"\"+t):e.value!==\"\"+t&&(e.value=\"\"+t);else if(\"submit\"===r||\"reset\"===r)return void e.removeAttribute(\"value\");n.hasOwnProperty(\"value\")?er(e,n.type,t):n.hasOwnProperty(\"defaultValue\")&&er(e,n.type,q(n.defaultValue)),null==n.checked&&null!=n.defaultChecked&&(e.defaultChecked=!!n.defaultChecked)}function et(e,n,t){if(n.hasOwnProperty(\"value\")||n.hasOwnProperty(\"defaultValue\")){var r=n.type;if((\"submit\"===r||\"reset\"===r)&&(void 0===n.value||null===n.value))return;n=\"\"+e._wrapperState.initialValue,t||n===e.value||(e.value=n),e.defaultValue=n}\"\"!==(t=e.name)&&(e.name=\"\"),e.defaultChecked=!!e._wrapperState.initialChecked,\"\"!==t&&(e.name=t)}function er(e,n,t){(\"number\"!==n||G(e.ownerDocument)!==e)&&(null==t?e.defaultValue=\"\"+e._wrapperState.initialValue:e.defaultValue!==\"\"+t&&(e.defaultValue=\"\"+t))}var el=Array.isArray;function ea(e,n,t,r){if(e=e.options,n){n={};for(var l=0;l<t.length;l++)n[\"$\"+t[l]]=!0;for(t=0;t<e.length;t++)l=n.hasOwnProperty(\"$\"+e[t].value),e[t].selected!==l&&(e[t].selected=l),l&&r&&(e[t].defaultSelected=!0)}else{for(l=0,t=\"\"+q(t),n=null;l<e.length;l++){if(e[l].value===t){e[l].selected=!0,r&&(e[l].defaultSelected=!0);return}null!==n||e[l].disabled||(n=e[l])}null!==n&&(n.selected=!0)}}function eu(e,n){if(null!=n.dangerouslySetInnerHTML)throw Error(f(91));return B({},n,{value:void 0,defaultValue:void 0,children:\"\"+e._wrapperState.initialValue})}function eo(e,n){var t=n.value;if(null==t){if(t=n.children,n=n.defaultValue,null!=t){if(null!=n)throw Error(f(92));if(el(t)){if(1<t.length)throw Error(f(93));t=t[0]}n=t}null==n&&(n=\"\"),t=n}e._wrapperState={initialValue:q(t)}}function ei(e,n){var t=q(n.value),r=q(n.defaultValue);null!=t&&((t=\"\"+t)!==e.value&&(e.value=t),null==n.defaultValue&&e.defaultValue!==t&&(e.defaultValue=t)),null!=r&&(e.defaultValue=\"\"+r)}function es(e){var n=e.textContent;n===e._wrapperState.initialValue&&\"\"!==n&&null!==n&&(e.value=n)}function ec(e){switch(e){case\"svg\":return\"http://www.w3.org/2000/svg\";case\"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}function ef(e,n){return null==e||\"http://www.w3.org/1999/xhtml\"===e?ec(n):\"http://www.w3.org/2000/svg\"===e&&\"foreignObject\"===n?\"http://www.w3.org/1999/xhtml\":e}var ed,ep=function(e){return\"undefined\"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(n,t,r,l){MSApp.execUnsafeLocalFunction(function(){return e(n,t,r,l)})}:e}(function(e,n){if(\"http://www.w3.org/2000/svg\"!==e.namespaceURI||\"innerHTML\"in e)e.innerHTML=n;else{for((ed=ed||document.createElement(\"div\")).innerHTML=\"<svg>\"+n.valueOf().toString()+\"</svg>\",n=ed.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}});function em(e,n){if(n){var t=e.firstChild;if(t&&t===e.lastChild&&3===t.nodeType){t.nodeValue=n;return}}e.textContent=n}var eh={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},eg=[\"Webkit\",\"ms\",\"Moz\",\"O\"];function ev(e,n,t){return null==n||\"boolean\"==typeof n||\"\"===n?\"\":t||\"number\"!=typeof n||0===n||eh.hasOwnProperty(e)&&eh[e]?(\"\"+n).trim():n+\"px\"}function ey(e,n){for(var t in e=e.style,n)if(n.hasOwnProperty(t)){var r=0===t.indexOf(\"--\"),l=ev(t,n[t],r);\"float\"===t&&(t=\"cssFloat\"),r?e.setProperty(t,l):e[t]=l}}Object.keys(eh).forEach(function(e){eg.forEach(function(n){eh[n=n+e.charAt(0).toUpperCase()+e.substring(1)]=eh[e]})});var eb=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ek(e,n){if(n){if(eb[e]&&(null!=n.children||null!=n.dangerouslySetInnerHTML))throw Error(f(137,e));if(null!=n.dangerouslySetInnerHTML){if(null!=n.children)throw Error(f(60));if(\"object\"!=typeof n.dangerouslySetInnerHTML||!(\"__html\"in n.dangerouslySetInnerHTML))throw Error(f(61))}if(null!=n.style&&\"object\"!=typeof n.style)throw Error(f(62))}}function ew(e,n){if(-1===e.indexOf(\"-\"))return\"string\"==typeof n.is;switch(e){case\"annotation-xml\":case\"color-profile\":case\"font-face\":case\"font-face-src\":case\"font-face-uri\":case\"font-face-format\":case\"font-face-name\":case\"missing-glyph\":return!1;default:return!0}}var eS=null;function ex(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var eE=null,e_=null,eC=null;function eP(e){if(e=rO(e)){if(\"function\"!=typeof eE)throw Error(f(280));var n=e.stateNode;n&&(n=rI(n),eE(e.stateNode,e.type,n))}}function eN(e){e_?eC?eC.push(e):eC=[e]:e_=e}function ez(){if(e_){var e=e_,n=eC;if(eC=e_=null,eP(e),n)for(e=0;e<n.length;e++)eP(n[e])}}function eT(e,n){return e(n)}function eL(){}var eR=!1;function eM(e,n,t){if(eR)return e(n,t);eR=!0;try{return eT(e,n,t)}finally{eR=!1,(null!==e_||null!==eC)&&(eL(),ez())}}function eF(e,n){var t=e.stateNode;if(null===t)return null;var r=rI(t);if(null===r)return null;switch(t=r[n],n){case\"onClick\":case\"onClickCapture\":case\"onDoubleClick\":case\"onDoubleClickCapture\":case\"onMouseDown\":case\"onMouseDownCapture\":case\"onMouseMove\":case\"onMouseMoveCapture\":case\"onMouseUp\":case\"onMouseUpCapture\":case\"onMouseEnter\":(r=!r.disabled)||(r=\"button\"!==(e=e.type)&&\"input\"!==e&&\"select\"!==e&&\"textarea\"!==e),e=!r;break;default:e=!1}if(e)return null;if(t&&\"function\"!=typeof t)throw Error(f(231,n,typeof t));return t}var eO=!1;if(g)try{var eD={};Object.defineProperty(eD,\"passive\",{get:function(){eO=!0}}),window.addEventListener(\"test\",eD,eD),window.removeEventListener(\"test\",eD,eD)}catch(e){eO=!1}function eI(e,n,t,r,l,a,u,o,i){var s=Array.prototype.slice.call(arguments,3);try{n.apply(t,s)}catch(e){this.onError(e)}}var eU=!1,eV=null,e$=!1,eA=null,ej={onError:function(e){eU=!0,eV=e}};function eB(e,n,t,r,l,a,u,o,i){eU=!1,eV=null,eI.apply(ej,arguments)}function eH(e){var n=e,t=e;if(e.alternate)for(;n.return;)n=n.return;else{e=n;do 0!=(4098&(n=e).flags)&&(t=n.return),e=n.return;while(e)}return 3===n.tag?t:null}function eW(e){if(13===e.tag){var n=e.memoizedState;if(null===n&&null!==(e=e.alternate)&&(n=e.memoizedState),null!==n)return n.dehydrated}return null}function eQ(e){if(eH(e)!==e)throw Error(f(188))}function eq(e){return null!==(e=function(e){var n=e.alternate;if(!n){if(null===(n=eH(e)))throw Error(f(188));return n!==e?null:e}for(var t=e,r=n;;){var l=t.return;if(null===l)break;var a=l.alternate;if(null===a){if(null!==(r=l.return)){t=r;continue}break}if(l.child===a.child){for(a=l.child;a;){if(a===t)return eQ(l),e;if(a===r)return eQ(l),n;a=a.sibling}throw Error(f(188))}if(t.return!==r.return)t=l,r=a;else{for(var u=!1,o=l.child;o;){if(o===t){u=!0,t=l,r=a;break}if(o===r){u=!0,r=l,t=a;break}o=o.sibling}if(!u){for(o=a.child;o;){if(o===t){u=!0,t=a,r=l;break}if(o===r){u=!0,r=a,t=l;break}o=o.sibling}if(!u)throw Error(f(189))}}if(t.alternate!==r)throw Error(f(190))}if(3!==t.tag)throw Error(f(188));return t.stateNode.current===t?e:n}(e))?function e(n){if(5===n.tag||6===n.tag)return n;for(n=n.child;null!==n;){var t=e(n);if(null!==t)return t;n=n.sibling}return null}(e):null}var eK=c.unstable_scheduleCallback,eY=c.unstable_cancelCallback,eX=c.unstable_shouldYield,eG=c.unstable_requestPaint,eZ=c.unstable_now,eJ=c.unstable_getCurrentPriorityLevel,e0=c.unstable_ImmediatePriority,e1=c.unstable_UserBlockingPriority,e2=c.unstable_NormalPriority,e3=c.unstable_LowPriority,e4=c.unstable_IdlePriority,e8=null,e5=null,e6=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(e9(e)/e7|0)|0},e9=Math.log,e7=Math.LN2,ne=64,nn=4194304;function nt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 0x1000000:case 0x2000000:case 0x4000000:return 0x7c00000&e;case 0x8000000:return 0x8000000;case 0x10000000:return 0x10000000;case 0x20000000:return 0x20000000;case 0x40000000:return 0x40000000;default:return e}}function nr(e,n){var t=e.pendingLanes;if(0===t)return 0;var r=0,l=e.suspendedLanes,a=e.pingedLanes,u=0xfffffff&t;if(0!==u){var o=u&~l;0!==o?r=nt(o):0!=(a&=u)&&(r=nt(a))}else 0!=(u=t&~l)?r=nt(u):0!==a&&(r=nt(a));if(0===r)return 0;if(0!==n&&n!==r&&0==(n&l)&&((l=r&-r)>=(a=n&-n)||16===l&&0!=(4194240&a)))return n;if(0!=(4&r)&&(r|=16&t),0!==(n=e.entangledLanes))for(e=e.entanglements,n&=r;0<n;)l=1<<(t=31-e6(n)),r|=e[t],n&=~l;return r}function nl(e){return 0!=(e=-0x40000001&e.pendingLanes)?e:0x40000000&e?0x40000000:0}function na(){var e=ne;return 0==(4194240&(ne<<=1))&&(ne=64),e}function nu(e){for(var n=[],t=0;31>t;t++)n.push(e);return n}function no(e,n,t){e.pendingLanes|=n,0x20000000!==n&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[n=31-e6(n)]=t}function ni(e,n){var t=e.entangledLanes|=n;for(e=e.entanglements;t;){var r=31-e6(t),l=1<<r;l&n|e[r]&n&&(e[r]|=n),t&=~l}}var ns=0;function nc(e){return 1<(e&=-e)?4<e?0!=(0xfffffff&e)?16:0x20000000:4:1}var nf,nd,np,nm,nh,ng=!1,nv=[],ny=null,nb=null,nk=null,nw=new Map,nS=new Map,nx=[],nE=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");function n_(e,n){switch(e){case\"focusin\":case\"focusout\":ny=null;break;case\"dragenter\":case\"dragleave\":nb=null;break;case\"mouseover\":case\"mouseout\":nk=null;break;case\"pointerover\":case\"pointerout\":nw.delete(n.pointerId);break;case\"gotpointercapture\":case\"lostpointercapture\":nS.delete(n.pointerId)}}function nC(e,n,t,r,l,a){return null===e||e.nativeEvent!==a?(e={blockedOn:n,domEventName:t,eventSystemFlags:r,nativeEvent:a,targetContainers:[l]},null!==n&&null!==(n=rO(n))&&nd(n)):(e.eventSystemFlags|=r,n=e.targetContainers,null!==l&&-1===n.indexOf(l)&&n.push(l)),e}function nP(e){var n=rF(e.target);if(null!==n){var t=eH(n);if(null!==t){if(13===(n=t.tag)){if(null!==(n=eW(t))){e.blockedOn=n,nh(e.priority,function(){np(t)});return}}else if(3===n&&t.stateNode.current.memoizedState.isDehydrated){e.blockedOn=3===t.tag?t.stateNode.containerInfo:null;return}}}e.blockedOn=null}function nN(e){if(null!==e.blockedOn)return!1;for(var n=e.targetContainers;0<n.length;){var t=nV(e.domEventName,e.eventSystemFlags,n[0],e.nativeEvent);if(null!==t)return null!==(n=rO(t))&&nd(n),e.blockedOn=t,!1;var r=new(t=e.nativeEvent).constructor(t.type,t);eS=r,t.target.dispatchEvent(r),eS=null,n.shift()}return!0}function nz(e,n,t){nN(e)&&t.delete(n)}function nT(){ng=!1,null!==ny&&nN(ny)&&(ny=null),null!==nb&&nN(nb)&&(nb=null),null!==nk&&nN(nk)&&(nk=null),nw.forEach(nz),nS.forEach(nz)}function nL(e,n){e.blockedOn===n&&(e.blockedOn=null,ng||(ng=!0,c.unstable_scheduleCallback(c.unstable_NormalPriority,nT)))}function nR(e){function n(n){return nL(n,e)}if(0<nv.length){nL(nv[0],e);for(var t=1;t<nv.length;t++){var r=nv[t];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==ny&&nL(ny,e),null!==nb&&nL(nb,e),null!==nk&&nL(nk,e),nw.forEach(n),nS.forEach(n),t=0;t<nx.length;t++)(r=nx[t]).blockedOn===e&&(r.blockedOn=null);for(;0<nx.length&&null===(t=nx[0]).blockedOn;)nP(t),null===t.blockedOn&&nx.shift()}var nM=C.ReactCurrentBatchConfig,nF=!0;function nO(e,n,t,r){var l=ns,a=nM.transition;nM.transition=null;try{ns=1,nI(e,n,t,r)}finally{ns=l,nM.transition=a}}function nD(e,n,t,r){var l=ns,a=nM.transition;nM.transition=null;try{ns=4,nI(e,n,t,r)}finally{ns=l,nM.transition=a}}function nI(e,n,t,r){if(nF){var l=nV(e,n,t,r);if(null===l)ru(e,n,r,nU,t),n_(e,r);else if(function(e,n,t,r,l){switch(n){case\"focusin\":return ny=nC(ny,e,n,t,r,l),!0;case\"dragenter\":return nb=nC(nb,e,n,t,r,l),!0;case\"mouseover\":return nk=nC(nk,e,n,t,r,l),!0;case\"pointerover\":var a=l.pointerId;return nw.set(a,nC(nw.get(a)||null,e,n,t,r,l)),!0;case\"gotpointercapture\":return a=l.pointerId,nS.set(a,nC(nS.get(a)||null,e,n,t,r,l)),!0}return!1}(l,e,n,t,r))r.stopPropagation();else if(n_(e,r),4&n&&-1<nE.indexOf(e)){for(;null!==l;){var a=rO(l);if(null!==a&&nf(a),null===(a=nV(e,n,t,r))&&ru(e,n,r,nU,t),a===l)break;l=a}null!==l&&r.stopPropagation()}else ru(e,n,r,null,t)}}var nU=null;function nV(e,n,t,r){if(nU=null,null!==(e=rF(e=ex(r))))if(null===(n=eH(e)))e=null;else if(13===(t=n.tag)){if(null!==(e=eW(n)))return e;e=null}else if(3===t){if(n.stateNode.current.memoizedState.isDehydrated)return 3===n.tag?n.stateNode.containerInfo:null;e=null}else n!==e&&(e=null);return nU=e,null}function n$(e){switch(e){case\"cancel\":case\"click\":case\"close\":case\"contextmenu\":case\"copy\":case\"cut\":case\"auxclick\":case\"dblclick\":case\"dragend\":case\"dragstart\":case\"drop\":case\"focusin\":case\"focusout\":case\"input\":case\"invalid\":case\"keydown\":case\"keypress\":case\"keyup\":case\"mousedown\":case\"mouseup\":case\"paste\":case\"pause\":case\"play\":case\"pointercancel\":case\"pointerdown\":case\"pointerup\":case\"ratechange\":case\"reset\":case\"resize\":case\"seeked\":case\"submit\":case\"touchcancel\":case\"touchend\":case\"touchstart\":case\"volumechange\":case\"change\":case\"selectionchange\":case\"textInput\":case\"compositionstart\":case\"compositionend\":case\"compositionupdate\":case\"beforeblur\":case\"afterblur\":case\"beforeinput\":case\"blur\":case\"fullscreenchange\":case\"focus\":case\"hashchange\":case\"popstate\":case\"select\":case\"selectstart\":return 1;case\"drag\":case\"dragenter\":case\"dragexit\":case\"dragleave\":case\"dragover\":case\"mousemove\":case\"mouseout\":case\"mouseover\":case\"pointermove\":case\"pointerout\":case\"pointerover\":case\"scroll\":case\"toggle\":case\"touchmove\":case\"wheel\":case\"mouseenter\":case\"mouseleave\":case\"pointerenter\":case\"pointerleave\":return 4;case\"message\":switch(eJ()){case e0:return 1;case e1:return 4;case e2:case e3:return 16;case e4:return 0x20000000;default:return 16}default:return 16}}var nA=null,nj=null,nB=null;function nH(){if(nB)return nB;var e,n,t=nj,r=t.length,l=\"value\"in nA?nA.value:nA.textContent,a=l.length;for(e=0;e<r&&t[e]===l[e];e++);var u=r-e;for(n=1;n<=u&&t[r-n]===l[a-n];n++);return nB=l.slice(e,1<n?1-n:void 0)}function nW(e){var n=e.keyCode;return\"charCode\"in e?0===(e=e.charCode)&&13===n&&(e=13):e=n,10===e&&(e=13),32<=e||13===e?e:0}function nQ(){return!0}function nq(){return!1}function nK(e){function n(n,t,r,l,a){for(var u in this._reactName=n,this._targetInst=r,this.type=t,this.nativeEvent=l,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(u)&&(n=e[u],this[u]=n?n(l):l[u]);return this.isDefaultPrevented=(null!=l.defaultPrevented?l.defaultPrevented:!1===l.returnValue)?nQ:nq,this.isPropagationStopped=nq,this}return B(n.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():\"unknown\"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nQ)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():\"unknown\"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nQ)},persist:function(){},isPersistent:nQ}),n}var nY,nX,nG,nZ={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},nJ=nK(nZ),n0=B({},nZ,{view:0,detail:0}),n1=nK(n0),n2=B({},n0,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:tr,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return\"movementX\"in e?e.movementX:(e!==nG&&(nG&&\"mousemove\"===e.type?(nY=e.screenX-nG.screenX,nX=e.screenY-nG.screenY):nX=nY=0,nG=e),nY)},movementY:function(e){return\"movementY\"in e?e.movementY:nX}}),n3=nK(n2),n4=nK(B({},n2,{dataTransfer:0})),n8=nK(B({},n0,{relatedTarget:0})),n5=nK(B({},nZ,{animationName:0,elapsedTime:0,pseudoElement:0})),n6=nK(B({},nZ,{clipboardData:function(e){return\"clipboardData\"in e?e.clipboardData:window.clipboardData}})),n9=nK(B({},nZ,{data:0})),n7={Esc:\"Escape\",Spacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},te={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},tn={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function tt(e){var n=this.nativeEvent;return n.getModifierState?n.getModifierState(e):!!(e=tn[e])&&!!n[e]}function tr(){return tt}var tl=nK(B({},n0,{key:function(e){if(e.key){var n=n7[e.key]||e.key;if(\"Unidentified\"!==n)return n}return\"keypress\"===e.type?13===(e=nW(e))?\"Enter\":String.fromCharCode(e):\"keydown\"===e.type||\"keyup\"===e.type?te[e.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:tr,charCode:function(e){return\"keypress\"===e.type?nW(e):0},keyCode:function(e){return\"keydown\"===e.type||\"keyup\"===e.type?e.keyCode:0},which:function(e){return\"keypress\"===e.type?nW(e):\"keydown\"===e.type||\"keyup\"===e.type?e.keyCode:0}})),ta=nK(B({},n2,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),tu=nK(B({},n0,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:tr})),to=nK(B({},nZ,{propertyName:0,elapsedTime:0,pseudoElement:0})),ti=nK(B({},n2,{deltaX:function(e){return\"deltaX\"in e?e.deltaX:\"wheelDeltaX\"in e?-e.wheelDeltaX:0},deltaY:function(e){return\"deltaY\"in e?e.deltaY:\"wheelDeltaY\"in e?-e.wheelDeltaY:\"wheelDelta\"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),ts=[9,13,27,32],tc=g&&\"CompositionEvent\"in window,tf=null;g&&\"documentMode\"in document&&(tf=document.documentMode);var td=g&&\"TextEvent\"in window&&!tf,tp=g&&(!tc||tf&&8<tf&&11>=tf),tm=!1;function th(e,n){switch(e){case\"keyup\":return -1!==ts.indexOf(n.keyCode);case\"keydown\":return 229!==n.keyCode;case\"keypress\":case\"mousedown\":case\"focusout\":return!0;default:return!1}}function tg(e){return\"object\"==typeof(e=e.detail)&&\"data\"in e?e.data:null}var tv=!1,ty={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function tb(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return\"input\"===n?!!ty[e.type]:\"textarea\"===n}function tk(e,n,t,r){eN(r),0<(n=ri(n,\"onChange\")).length&&(t=new nJ(\"onChange\",\"change\",null,t,r),e.push({event:t,listeners:n}))}var tw=null,tS=null;function tx(e){re(e,0)}function tE(e){if(X(rD(e)))return e}function t_(e,n){if(\"change\"===e)return n}var tC=!1;if(g){if(g){var tP=\"oninput\"in document;if(!tP){var tN=document.createElement(\"div\");tN.setAttribute(\"oninput\",\"return;\"),tP=\"function\"==typeof tN.oninput}r=tP}else r=!1;tC=r&&(!document.documentMode||9<document.documentMode)}function tz(){tw&&(tw.detachEvent(\"onpropertychange\",tT),tS=tw=null)}function tT(e){if(\"value\"===e.propertyName&&tE(tS)){var n=[];tk(n,tS,e,ex(e)),eM(tx,n)}}function tL(e,n,t){\"focusin\"===e?(tz(),tw=n,tS=t,tw.attachEvent(\"onpropertychange\",tT)):\"focusout\"===e&&tz()}function tR(e){if(\"selectionchange\"===e||\"keyup\"===e||\"keydown\"===e)return tE(tS)}function tM(e,n){if(\"click\"===e)return tE(n)}function tF(e,n){if(\"input\"===e||\"change\"===e)return tE(n)}var tO=\"function\"==typeof Object.is?Object.is:function(e,n){return e===n&&(0!==e||1/e==1/n)||e!=e&&n!=n};function tD(e,n){if(tO(e,n))return!0;if(\"object\"!=typeof e||null===e||\"object\"!=typeof n||null===n)return!1;var t=Object.keys(e),r=Object.keys(n);if(t.length!==r.length)return!1;for(r=0;r<t.length;r++){var l=t[r];if(!v.call(n,l)||!tO(e[l],n[l]))return!1}return!0}function tI(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function tU(e,n){var t,r=tI(e);for(e=0;r;){if(3===r.nodeType){if(t=e+r.textContent.length,e<=n&&t>=n)return{node:r,offset:n-e};e=t}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=tI(r)}}function tV(){for(var e=window,n=G();n instanceof e.HTMLIFrameElement;){try{var t=\"string\"==typeof n.contentWindow.location.href}catch(e){t=!1}if(t)e=n.contentWindow;else break;n=G(e.document)}return n}function t$(e){var n=e&&e.nodeName&&e.nodeName.toLowerCase();return n&&(\"input\"===n&&(\"text\"===e.type||\"search\"===e.type||\"tel\"===e.type||\"url\"===e.type||\"password\"===e.type)||\"textarea\"===n||\"true\"===e.contentEditable)}var tA=g&&\"documentMode\"in document&&11>=document.documentMode,tj=null,tB=null,tH=null,tW=!1;function tQ(e,n,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;tW||null==tj||tj!==G(r)||(r=\"selectionStart\"in(r=tj)&&t$(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},tH&&tD(tH,r)||(tH=r,0<(r=ri(tB,\"onSelect\")).length&&(n=new nJ(\"onSelect\",\"select\",null,n,t),e.push({event:n,listeners:r}),n.target=tj)))}function tq(e,n){var t={};return t[e.toLowerCase()]=n.toLowerCase(),t[\"Webkit\"+e]=\"webkit\"+n,t[\"Moz\"+e]=\"moz\"+n,t}var tK={animationend:tq(\"Animation\",\"AnimationEnd\"),animationiteration:tq(\"Animation\",\"AnimationIteration\"),animationstart:tq(\"Animation\",\"AnimationStart\"),transitionend:tq(\"Transition\",\"TransitionEnd\")},tY={},tX={};function tG(e){if(tY[e])return tY[e];if(!tK[e])return e;var n,t=tK[e];for(n in t)if(t.hasOwnProperty(n)&&n in tX)return tY[e]=t[n];return e}g&&(tX=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete tK.animationend.animation,delete tK.animationiteration.animation,delete tK.animationstart.animation),\"TransitionEvent\"in window||delete tK.transitionend.transition);var tZ=tG(\"animationend\"),tJ=tG(\"animationiteration\"),t0=tG(\"animationstart\"),t1=tG(\"transitionend\"),t2=new Map,t3=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");function t4(e,n){t2.set(e,n),m(n,[e])}for(var t8=0;t8<t3.length;t8++){var t5=t3[t8];t4(t5.toLowerCase(),\"on\"+(t5[0].toUpperCase()+t5.slice(1)))}t4(tZ,\"onAnimationEnd\"),t4(tJ,\"onAnimationIteration\"),t4(t0,\"onAnimationStart\"),t4(\"dblclick\",\"onDoubleClick\"),t4(\"focusin\",\"onFocus\"),t4(\"focusout\",\"onBlur\"),t4(t1,\"onTransitionEnd\"),h(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]),h(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]),h(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]),h(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]),m(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \")),m(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \")),m(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]),m(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \")),m(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \")),m(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var t6=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),t9=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(t6));function t7(e,n,t){var r=e.type||\"unknown-event\";e.currentTarget=t,function(e,n,t,r,l,a,u,o,i){if(eB.apply(this,arguments),eU){if(eU){var s=eV;eU=!1,eV=null}else throw Error(f(198));e$||(e$=!0,eA=s)}}(r,n,void 0,e),e.currentTarget=null}function re(e,n){n=0!=(4&n);for(var t=0;t<e.length;t++){var r=e[t],l=r.event;r=r.listeners;e:{var a=void 0;if(n)for(var u=r.length-1;0<=u;u--){var o=r[u],i=o.instance,s=o.currentTarget;if(o=o.listener,i!==a&&l.isPropagationStopped())break e;t7(l,o,s),a=i}else for(u=0;u<r.length;u++){if(i=(o=r[u]).instance,s=o.currentTarget,o=o.listener,i!==a&&l.isPropagationStopped())break e;t7(l,o,s),a=i}}}if(e$)throw e=eA,e$=!1,eA=null,e}function rn(e,n){var t=n[rL];void 0===t&&(t=n[rL]=new Set);var r=e+\"__bubble\";t.has(r)||(ra(n,e,2,!1),t.add(r))}function rt(e,n,t){var r=0;n&&(r|=4),ra(t,e,r,n)}var rr=\"_reactListening\"+Math.random().toString(36).slice(2);function rl(e){if(!e[rr]){e[rr]=!0,d.forEach(function(n){\"selectionchange\"!==n&&(t9.has(n)||rt(n,!1,e),rt(n,!0,e))});var n=9===e.nodeType?e:e.ownerDocument;null===n||n[rr]||(n[rr]=!0,rt(\"selectionchange\",!1,n))}}function ra(e,n,t,r){switch(n$(n)){case 1:var l=nO;break;case 4:l=nD;break;default:l=nI}t=l.bind(null,n,t,e),l=void 0,eO&&(\"touchstart\"===n||\"touchmove\"===n||\"wheel\"===n)&&(l=!0),r?void 0!==l?e.addEventListener(n,t,{capture:!0,passive:l}):e.addEventListener(n,t,!0):void 0!==l?e.addEventListener(n,t,{passive:l}):e.addEventListener(n,t,!1)}function ru(e,n,t,r,l){var a=r;if(0==(1&n)&&0==(2&n)&&null!==r)e:for(;;){if(null===r)return;var u=r.tag;if(3===u||4===u){var o=r.stateNode.containerInfo;if(o===l||8===o.nodeType&&o.parentNode===l)break;if(4===u)for(u=r.return;null!==u;){var i=u.tag;if((3===i||4===i)&&((i=u.stateNode.containerInfo)===l||8===i.nodeType&&i.parentNode===l))return;u=u.return}for(;null!==o;){if(null===(u=rF(o)))return;if(5===(i=u.tag)||6===i){r=a=u;continue e}o=o.parentNode}}r=r.return}eM(function(){var r=a,l=ex(t),u=[];e:{var o=t2.get(e);if(void 0!==o){var i=nJ,s=e;switch(e){case\"keypress\":if(0===nW(t))break e;case\"keydown\":case\"keyup\":i=tl;break;case\"focusin\":s=\"focus\",i=n8;break;case\"focusout\":s=\"blur\",i=n8;break;case\"beforeblur\":case\"afterblur\":i=n8;break;case\"click\":if(2===t.button)break e;case\"auxclick\":case\"dblclick\":case\"mousedown\":case\"mousemove\":case\"mouseup\":case\"mouseout\":case\"mouseover\":case\"contextmenu\":i=n3;break;case\"drag\":case\"dragend\":case\"dragenter\":case\"dragexit\":case\"dragleave\":case\"dragover\":case\"dragstart\":case\"drop\":i=n4;break;case\"touchcancel\":case\"touchend\":case\"touchmove\":case\"touchstart\":i=tu;break;case tZ:case tJ:case t0:i=n5;break;case t1:i=to;break;case\"scroll\":i=n1;break;case\"wheel\":i=ti;break;case\"copy\":case\"cut\":case\"paste\":i=n6;break;case\"gotpointercapture\":case\"lostpointercapture\":case\"pointercancel\":case\"pointerdown\":case\"pointermove\":case\"pointerout\":case\"pointerover\":case\"pointerup\":i=ta}var c=0!=(4&n),f=!c&&\"scroll\"===e,d=c?null!==o?o+\"Capture\":null:o;c=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==d&&null!=(h=eF(m,d))&&c.push(ro(m,h,p))),f)break;m=m.return}0<c.length&&(o=new i(o,s,null,t,l),u.push({event:o,listeners:c}))}}if(0==(7&n)){if((o=\"mouseover\"===e||\"pointerover\"===e,i=\"mouseout\"===e||\"pointerout\"===e,!(o&&t!==eS&&(s=t.relatedTarget||t.fromElement)&&(rF(s)||s[rT])))&&(i||o)&&(o=l.window===l?l:(o=l.ownerDocument)?o.defaultView||o.parentWindow:window,i?(s=t.relatedTarget||t.toElement,i=r,null!==(s=s?rF(s):null)&&(f=eH(s),s!==f||5!==s.tag&&6!==s.tag)&&(s=null)):(i=null,s=r),i!==s)){if(c=n3,h=\"onMouseLeave\",d=\"onMouseEnter\",m=\"mouse\",(\"pointerout\"===e||\"pointerover\"===e)&&(c=ta,h=\"onPointerLeave\",d=\"onPointerEnter\",m=\"pointer\"),f=null==i?o:rD(i),p=null==s?o:rD(s),(o=new c(h,m+\"leave\",i,t,l)).target=f,o.relatedTarget=p,h=null,rF(l)===r&&((c=new c(d,m+\"enter\",s,t,l)).target=p,c.relatedTarget=f,h=c),f=h,i&&s)n:{for(c=i,d=s,m=0,p=c;p;p=rs(p))m++;for(p=0,h=d;h;h=rs(h))p++;for(;0<m-p;)c=rs(c),m--;for(;0<p-m;)d=rs(d),p--;for(;m--;){if(c===d||null!==d&&c===d.alternate)break n;c=rs(c),d=rs(d)}c=null}else c=null;null!==i&&rc(u,o,i,c,!1),null!==s&&null!==f&&rc(u,f,s,c,!0)}e:{if(\"select\"===(i=(o=r?rD(r):window).nodeName&&o.nodeName.toLowerCase())||\"input\"===i&&\"file\"===o.type)var g,v=t_;else if(tb(o))if(tC)v=tF;else{v=tR;var y=tL}else(i=o.nodeName)&&\"input\"===i.toLowerCase()&&(\"checkbox\"===o.type||\"radio\"===o.type)&&(v=tM);if(v&&(v=v(e,r))){tk(u,v,t,l);break e}y&&y(e,o,r),\"focusout\"===e&&(y=o._wrapperState)&&y.controlled&&\"number\"===o.type&&er(o,\"number\",o.value)}switch(y=r?rD(r):window,e){case\"focusin\":(tb(y)||\"true\"===y.contentEditable)&&(tj=y,tB=r,tH=null);break;case\"focusout\":tH=tB=tj=null;break;case\"mousedown\":tW=!0;break;case\"contextmenu\":case\"mouseup\":case\"dragend\":tW=!1,tQ(u,t,l);break;case\"selectionchange\":if(tA)break;case\"keydown\":case\"keyup\":tQ(u,t,l)}if(tc)n:{switch(e){case\"compositionstart\":var b=\"onCompositionStart\";break n;case\"compositionend\":b=\"onCompositionEnd\";break n;case\"compositionupdate\":b=\"onCompositionUpdate\";break n}b=void 0}else tv?th(e,t)&&(b=\"onCompositionEnd\"):\"keydown\"===e&&229===t.keyCode&&(b=\"onCompositionStart\");b&&(tp&&\"ko\"!==t.locale&&(tv||\"onCompositionStart\"!==b?\"onCompositionEnd\"===b&&tv&&(g=nH()):(nj=\"value\"in(nA=l)?nA.value:nA.textContent,tv=!0)),0<(y=ri(r,b)).length&&(b=new n9(b,e,null,t,l),u.push({event:b,listeners:y}),g?b.data=g:null!==(g=tg(t))&&(b.data=g))),(g=td?function(e,n){switch(e){case\"compositionend\":return tg(n);case\"keypress\":if(32!==n.which)return null;return tm=!0,\" \";case\"textInput\":return\" \"===(e=n.data)&&tm?null:e;default:return null}}(e,t):function(e,n){if(tv)return\"compositionend\"===e||!tc&&th(e,n)?(e=nH(),nB=nj=nA=null,tv=!1,e):null;switch(e){case\"paste\":default:return null;case\"keypress\":if(!(n.ctrlKey||n.altKey||n.metaKey)||n.ctrlKey&&n.altKey){if(n.char&&1<n.char.length)return n.char;if(n.which)return String.fromCharCode(n.which)}return null;case\"compositionend\":return tp&&\"ko\"!==n.locale?null:n.data}}(e,t))&&0<(r=ri(r,\"onBeforeInput\")).length&&(l=new n9(\"onBeforeInput\",\"beforeinput\",null,t,l),u.push({event:l,listeners:r}),l.data=g)}re(u,n)})}function ro(e,n,t){return{instance:e,listener:n,currentTarget:t}}function ri(e,n){for(var t=n+\"Capture\",r=[];null!==e;){var l=e,a=l.stateNode;5===l.tag&&null!==a&&(l=a,null!=(a=eF(e,t))&&r.unshift(ro(e,a,l)),null!=(a=eF(e,n))&&r.push(ro(e,a,l))),e=e.return}return r}function rs(e){if(null===e)return null;do e=e.return;while(e&&5!==e.tag);return e||null}function rc(e,n,t,r,l){for(var a=n._reactName,u=[];null!==t&&t!==r;){var o=t,i=o.alternate,s=o.stateNode;if(null!==i&&i===r)break;5===o.tag&&null!==s&&(o=s,l?null!=(i=eF(t,a))&&u.unshift(ro(t,i,o)):l||null!=(i=eF(t,a))&&u.push(ro(t,i,o))),t=t.return}0!==u.length&&e.push({event:n,listeners:u})}var rf=/\\r\\n?/g,rd=/\\u0000|\\uFFFD/g;function rp(e){return(\"string\"==typeof e?e:\"\"+e).replace(rf,\"\\n\").replace(rd,\"\")}function rm(e,n,t){if(n=rp(n),rp(e)!==n&&t)throw Error(f(425))}function rh(){}var rg=null,rv=null;function ry(e,n){return\"textarea\"===e||\"noscript\"===e||\"string\"==typeof n.children||\"number\"==typeof n.children||\"object\"==typeof n.dangerouslySetInnerHTML&&null!==n.dangerouslySetInnerHTML&&null!=n.dangerouslySetInnerHTML.__html}var rb=\"function\"==typeof setTimeout?setTimeout:void 0,rk=\"function\"==typeof clearTimeout?clearTimeout:void 0,rw=\"function\"==typeof Promise?Promise:void 0,rS=\"function\"==typeof queueMicrotask?queueMicrotask:void 0!==rw?function(e){return rw.resolve(null).then(e).catch(rx)}:rb;function rx(e){setTimeout(function(){throw e})}function rE(e,n){var t=n,r=0;do{var l=t.nextSibling;if(e.removeChild(t),l&&8===l.nodeType)if(\"/$\"===(t=l.data)){if(0===r){e.removeChild(l),nR(n);return}r--}else\"$\"!==t&&\"$?\"!==t&&\"$!\"!==t||r++;t=l}while(t);nR(n)}function r_(e){for(;null!=e;e=e.nextSibling){var n=e.nodeType;if(1===n||3===n)break;if(8===n){if(\"$\"===(n=e.data)||\"$!\"===n||\"$?\"===n)break;if(\"/$\"===n)return null}}return e}function rC(e){e=e.previousSibling;for(var n=0;e;){if(8===e.nodeType){var t=e.data;if(\"$\"===t||\"$!\"===t||\"$?\"===t){if(0===n)return e;n--}else\"/$\"===t&&n++}e=e.previousSibling}return null}var rP=Math.random().toString(36).slice(2),rN=\"__reactFiber$\"+rP,rz=\"__reactProps$\"+rP,rT=\"__reactContainer$\"+rP,rL=\"__reactEvents$\"+rP,rR=\"__reactListeners$\"+rP,rM=\"__reactHandles$\"+rP;function rF(e){var n=e[rN];if(n)return n;for(var t=e.parentNode;t;){if(n=t[rT]||t[rN]){if(t=n.alternate,null!==n.child||null!==t&&null!==t.child)for(e=rC(e);null!==e;){if(t=e[rN])return t;e=rC(e)}return n}t=(e=t).parentNode}return null}function rO(e){return(e=e[rN]||e[rT])&&(5===e.tag||6===e.tag||13===e.tag||3===e.tag)?e:null}function rD(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(f(33))}function rI(e){return e[rz]||null}var rU=[],rV=-1;function r$(e){return{current:e}}function rA(e){0>rV||(e.current=rU[rV],rU[rV]=null,rV--)}function rj(e,n){rU[++rV]=e.current,e.current=n}var rB={},rH=r$(rB),rW=r$(!1),rQ=rB;function rq(e,n){var t=e.type.contextTypes;if(!t)return rB;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===n)return r.__reactInternalMemoizedMaskedChildContext;var l,a={};for(l in t)a[l]=n[l];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=n,e.__reactInternalMemoizedMaskedChildContext=a),a}function rK(e){return null!=(e=e.childContextTypes)}function rY(){rA(rW),rA(rH)}function rX(e,n,t){if(rH.current!==rB)throw Error(f(168));rj(rH,n),rj(rW,t)}function rG(e,n,t){var r=e.stateNode;if(n=n.childContextTypes,\"function\"!=typeof r.getChildContext)return t;for(var l in r=r.getChildContext())if(!(l in n))throw Error(f(108,function(e){var n=e.type;switch(e.tag){case 24:return\"Cache\";case 9:return(n.displayName||\"Context\")+\".Consumer\";case 10:return(n._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return e=(e=n.render).displayName||e.name||\"\",n.displayName||(\"\"!==e?\"ForwardRef(\"+e+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return n;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return function e(n){if(null==n)return null;if(\"function\"==typeof n)return n.displayName||n.name||null;if(\"string\"==typeof n)return n;switch(n){case z:return\"Fragment\";case N:return\"Portal\";case L:return\"Profiler\";case T:return\"StrictMode\";case O:return\"Suspense\";case D:return\"SuspenseList\"}if(\"object\"==typeof n)switch(n.$$typeof){case M:return(n.displayName||\"Context\")+\".Consumer\";case R:return(n._context.displayName||\"Context\")+\".Provider\";case F:var t=n.render;return(n=n.displayName)||(n=\"\"!==(n=t.displayName||t.name||\"\")?\"ForwardRef(\"+n+\")\":\"ForwardRef\"),n;case I:return null!==(t=n.displayName||null)?t:e(n.type)||\"Memo\";case U:t=n._payload,n=n._init;try{return e(n(t))}catch(e){}}return null}(n);case 8:return n===T?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";case 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"==typeof n)return n.displayName||n.name||null;if(\"string\"==typeof n)return n}return null}(e)||\"Unknown\",l));return B({},t,r)}function rZ(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||rB,rQ=rH.current,rj(rH,e),rj(rW,rW.current),!0}function rJ(e,n,t){var r=e.stateNode;if(!r)throw Error(f(169));t?(r.__reactInternalMemoizedMergedChildContext=e=rG(e,n,rQ),rA(rW),rA(rH),rj(rH,e)):rA(rW),rj(rW,t)}var r0=null,r1=!1,r2=!1;function r3(e){null===r0?r0=[e]:r0.push(e)}function r4(){if(!r2&&null!==r0){r2=!0;var e=0,n=ns;try{var t=r0;for(ns=1;e<t.length;e++){var r=t[e];do r=r(!0);while(null!==r)}r0=null,r1=!1}catch(n){throw null!==r0&&(r0=r0.slice(e+1)),eK(e0,r4),n}finally{ns=n,r2=!1}}return null}var r8=[],r5=0,r6=null,r9=0,r7=[],le=0,ln=null,lt=1,lr=\"\";function ll(e,n){r8[r5++]=r9,r8[r5++]=r6,r6=e,r9=n}function la(e,n,t){r7[le++]=lt,r7[le++]=lr,r7[le++]=ln,ln=e;var r=lt;e=lr;var l=32-e6(r)-1;r&=~(1<<l),t+=1;var a=32-e6(n)+l;if(30<a){var u=l-l%5;a=(r&(1<<u)-1).toString(32),r>>=u,l-=u,lt=1<<32-e6(n)+l|t<<l|r,lr=a+e}else lt=1<<a|t<<l|r,lr=e}function lu(e){null!==e.return&&(ll(e,1),la(e,1,0))}function lo(e){for(;e===r6;)r6=r8[--r5],r8[r5]=null,r9=r8[--r5],r8[r5]=null;for(;e===ln;)ln=r7[--le],r7[le]=null,lr=r7[--le],r7[le]=null,lt=r7[--le],r7[le]=null}var li=null,ls=null,lc=!1,lf=null;function ld(e,n){var t=oW(5,null,null,0);t.elementType=\"DELETED\",t.stateNode=n,t.return=e,null===(n=e.deletions)?(e.deletions=[t],e.flags|=16):n.push(t)}function lp(e,n){switch(e.tag){case 5:var t=e.type;return null!==(n=1!==n.nodeType||t.toLowerCase()!==n.nodeName.toLowerCase()?null:n)&&(e.stateNode=n,li=e,ls=r_(n.firstChild),!0);case 6:return null!==(n=\"\"===e.pendingProps||3!==n.nodeType?null:n)&&(e.stateNode=n,li=e,ls=null,!0);case 13:return null!==(n=8!==n.nodeType?null:n)&&(e.memoizedState={dehydrated:n,treeContext:t=null!==ln?{id:lt,overflow:lr}:null,retryLane:0x40000000},(t=oW(18,null,null,0)).stateNode=n,t.return=e,e.child=t,li=e,ls=null,!0);default:return!1}}function lm(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function lh(e){if(lc){var n=ls;if(n){var t=n;if(!lp(e,n)){if(lm(e))throw Error(f(418));n=r_(t.nextSibling);var r=li;n&&lp(e,n)?ld(r,t):(e.flags=-4097&e.flags|2,lc=!1,li=e)}}else{if(lm(e))throw Error(f(418));e.flags=-4097&e.flags|2,lc=!1,li=e}}}function lg(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;li=e}function lv(e){if(e!==li)return!1;if(!lc)return lg(e),lc=!0,!1;if((n=3!==e.tag)&&!(n=5!==e.tag)&&(n=\"head\"!==(n=e.type)&&\"body\"!==n&&!ry(e.type,e.memoizedProps)),n&&(n=ls)){if(lm(e))throw ly(),Error(f(418));for(;n;)ld(e,n),n=r_(n.nextSibling)}if(lg(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(f(317));e:{for(n=0,e=e.nextSibling;e;){if(8===e.nodeType){var n,t=e.data;if(\"/$\"===t){if(0===n){ls=r_(e.nextSibling);break e}n--}else\"$\"!==t&&\"$!\"!==t&&\"$?\"!==t||n++}e=e.nextSibling}ls=null}}else ls=li?r_(e.stateNode.nextSibling):null;return!0}function ly(){for(var e=ls;e;)e=r_(e.nextSibling)}function lb(){ls=li=null,lc=!1}function lk(e){null===lf?lf=[e]:lf.push(e)}var lw=C.ReactCurrentBatchConfig;function lS(e,n,t){if(null!==(e=t.ref)&&\"function\"!=typeof e&&\"object\"!=typeof e){if(t._owner){if(t=t._owner){if(1!==t.tag)throw Error(f(309));var r=t.stateNode}if(!r)throw Error(f(147,e));var l=r,a=\"\"+e;return null!==n&&null!==n.ref&&\"function\"==typeof n.ref&&n.ref._stringRef===a?n.ref:((n=function(e){var n=l.refs;null===e?delete n[a]:n[a]=e})._stringRef=a,n)}if(\"string\"!=typeof e)throw Error(f(284));if(!t._owner)throw Error(f(290,e))}return e}function lx(e,n){throw Error(f(31,\"[object Object]\"===(e=Object.prototype.toString.call(n))?\"object with keys {\"+Object.keys(n).join(\", \")+\"}\":e))}function lE(e){return(0,e._init)(e._payload)}function l_(e){function n(n,t){if(e){var r=n.deletions;null===r?(n.deletions=[t],n.flags|=16):r.push(t)}}function t(t,r){if(!e)return null;for(;null!==r;)n(t,r),r=r.sibling;return null}function r(e,n){for(e=new Map;null!==n;)null!==n.key?e.set(n.key,n):e.set(n.index,n),n=n.sibling;return e}function l(e,n){return(e=oq(e,n)).index=0,e.sibling=null,e}function a(n,t,r){return(n.index=r,e)?null!==(r=n.alternate)?(r=r.index)<t?(n.flags|=2,t):r:(n.flags|=2,t):(n.flags|=1048576,t)}function u(n){return e&&null===n.alternate&&(n.flags|=2),n}function o(e,n,t,r){return null===n||6!==n.tag?(n=oG(t,e.mode,r)).return=e:(n=l(n,t)).return=e,n}function i(e,n,t,r){var a=t.type;return a===z?c(e,n,t.props.children,r,t.key):(null!==n&&(n.elementType===a||\"object\"==typeof a&&null!==a&&a.$$typeof===U&&lE(a)===n.type)?(r=l(n,t.props)).ref=lS(e,n,t):(r=oK(t.type,t.key,t.props,null,e.mode,r)).ref=lS(e,n,t),r.return=e,r)}function s(e,n,t,r){return null===n||4!==n.tag||n.stateNode.containerInfo!==t.containerInfo||n.stateNode.implementation!==t.implementation?(n=oZ(t,e.mode,r)).return=e:(n=l(n,t.children||[])).return=e,n}function c(e,n,t,r,a){return null===n||7!==n.tag?(n=oY(t,e.mode,r,a)).return=e:(n=l(n,t)).return=e,n}function d(e,n,t){if(\"string\"==typeof n&&\"\"!==n||\"number\"==typeof n)return(n=oG(\"\"+n,e.mode,t)).return=e,n;if(\"object\"==typeof n&&null!==n){switch(n.$$typeof){case P:return(t=oK(n.type,n.key,n.props,null,e.mode,t)).ref=lS(e,null,n),t.return=e,t;case N:return(n=oZ(n,e.mode,t)).return=e,n;case U:return d(e,(0,n._init)(n._payload),t)}if(el(n)||A(n))return(n=oY(n,e.mode,t,null)).return=e,n;lx(e,n)}return null}function p(e,n,t,r){var l=null!==n?n.key:null;if(\"string\"==typeof t&&\"\"!==t||\"number\"==typeof t)return null!==l?null:o(e,n,\"\"+t,r);if(\"object\"==typeof t&&null!==t){switch(t.$$typeof){case P:return t.key===l?i(e,n,t,r):null;case N:return t.key===l?s(e,n,t,r):null;case U:return p(e,n,(l=t._init)(t._payload),r)}if(el(t)||A(t))return null!==l?null:c(e,n,t,r,null);lx(e,t)}return null}function m(e,n,t,r,l){if(\"string\"==typeof r&&\"\"!==r||\"number\"==typeof r)return o(n,e=e.get(t)||null,\"\"+r,l);if(\"object\"==typeof r&&null!==r){switch(r.$$typeof){case P:return i(n,e=e.get(null===r.key?t:r.key)||null,r,l);case N:return s(n,e=e.get(null===r.key?t:r.key)||null,r,l);case U:return m(e,n,t,(0,r._init)(r._payload),l)}if(el(r)||A(r))return c(n,e=e.get(t)||null,r,l,null);lx(n,r)}return null}return function o(i,s,c,h){if(\"object\"==typeof c&&null!==c&&c.type===z&&null===c.key&&(c=c.props.children),\"object\"==typeof c&&null!==c){switch(c.$$typeof){case P:e:{for(var g=c.key,v=s;null!==v;){if(v.key===g){if((g=c.type)===z){if(7===v.tag){t(i,v.sibling),(s=l(v,c.props.children)).return=i,i=s;break e}}else if(v.elementType===g||\"object\"==typeof g&&null!==g&&g.$$typeof===U&&lE(g)===v.type){t(i,v.sibling),(s=l(v,c.props)).ref=lS(i,v,c),s.return=i,i=s;break e}t(i,v);break}n(i,v),v=v.sibling}c.type===z?((s=oY(c.props.children,i.mode,h,c.key)).return=i,i=s):((h=oK(c.type,c.key,c.props,null,i.mode,h)).ref=lS(i,s,c),h.return=i,i=h)}return u(i);case N:e:{for(v=c.key;null!==s;){if(s.key===v)if(4===s.tag&&s.stateNode.containerInfo===c.containerInfo&&s.stateNode.implementation===c.implementation){t(i,s.sibling),(s=l(s,c.children||[])).return=i,i=s;break e}else{t(i,s);break}n(i,s),s=s.sibling}(s=oZ(c,i.mode,h)).return=i,i=s}return u(i);case U:return o(i,s,(v=c._init)(c._payload),h)}if(el(c))return function(l,u,o,i){for(var s=null,c=null,f=u,h=u=0,g=null;null!==f&&h<o.length;h++){f.index>h?(g=f,f=null):g=f.sibling;var v=p(l,f,o[h],i);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&n(l,f),u=a(v,u,h),null===c?s=v:c.sibling=v,c=v,f=g}if(h===o.length)return t(l,f),lc&&ll(l,h),s;if(null===f){for(;h<o.length;h++)null!==(f=d(l,o[h],i))&&(u=a(f,u,h),null===c?s=f:c.sibling=f,c=f);return lc&&ll(l,h),s}for(f=r(l,f);h<o.length;h++)null!==(g=m(f,l,h,o[h],i))&&(e&&null!==g.alternate&&f.delete(null===g.key?h:g.key),u=a(g,u,h),null===c?s=g:c.sibling=g,c=g);return e&&f.forEach(function(e){return n(l,e)}),lc&&ll(l,h),s}(i,s,c,h);if(A(c))return function(l,u,o,i){var s=A(o);if(\"function\"!=typeof s)throw Error(f(150));if(null==(o=s.call(o)))throw Error(f(151));for(var c=s=null,h=u,g=u=0,v=null,y=o.next();null!==h&&!y.done;g++,y=o.next()){h.index>g?(v=h,h=null):v=h.sibling;var b=p(l,h,y.value,i);if(null===b){null===h&&(h=v);break}e&&h&&null===b.alternate&&n(l,h),u=a(b,u,g),null===c?s=b:c.sibling=b,c=b,h=v}if(y.done)return t(l,h),lc&&ll(l,g),s;if(null===h){for(;!y.done;g++,y=o.next())null!==(y=d(l,y.value,i))&&(u=a(y,u,g),null===c?s=y:c.sibling=y,c=y);return lc&&ll(l,g),s}for(h=r(l,h);!y.done;g++,y=o.next())null!==(y=m(h,l,g,y.value,i))&&(e&&null!==y.alternate&&h.delete(null===y.key?g:y.key),u=a(y,u,g),null===c?s=y:c.sibling=y,c=y);return e&&h.forEach(function(e){return n(l,e)}),lc&&ll(l,g),s}(i,s,c,h);lx(i,c)}return\"string\"==typeof c&&\"\"!==c||\"number\"==typeof c?(c=\"\"+c,null!==s&&6===s.tag?(t(i,s.sibling),(s=l(s,c)).return=i):(t(i,s),(s=oG(c,i.mode,h)).return=i),u(i=s)):t(i,s)}}var lC=l_(!0),lP=l_(!1),lN=r$(null),lz=null,lT=null,lL=null;function lR(){lL=lT=lz=null}function lM(e){var n=lN.current;rA(lN),e._currentValue=n}function lF(e,n,t){for(;null!==e;){var r=e.alternate;if((e.childLanes&n)!==n?(e.childLanes|=n,null!==r&&(r.childLanes|=n)):null!==r&&(r.childLanes&n)!==n&&(r.childLanes|=n),e===t)break;e=e.return}}function lO(e,n){lz=e,lL=lT=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&n)&&(ul=!0),e.firstContext=null)}function lD(e){var n=e._currentValue;if(lL!==e)if(e={context:e,memoizedValue:n,next:null},null===lT){if(null===lz)throw Error(f(308));lT=e,lz.dependencies={lanes:0,firstContext:e}}else lT=lT.next=e;return n}var lI=null;function lU(e){null===lI?lI=[e]:lI.push(e)}function lV(e,n,t,r){var l=n.interleaved;return null===l?(t.next=t,lU(n)):(t.next=l.next,l.next=t),n.interleaved=t,l$(e,r)}function l$(e,n){e.lanes|=n;var t=e.alternate;for(null!==t&&(t.lanes|=n),t=e,e=e.return;null!==e;)e.childLanes|=n,null!==(t=e.alternate)&&(t.childLanes|=n),t=e,e=e.return;return 3===t.tag?t.stateNode:null}var lA=!1;function lj(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function lB(e,n){e=e.updateQueue,n.updateQueue===e&&(n.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function lH(e,n){return{eventTime:e,lane:n,tag:0,payload:null,callback:null,next:null}}function lW(e,n,t){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&u1)){var l=r.pending;return null===l?n.next=n:(n.next=l.next,l.next=n),r.pending=n,l$(e,t)}return null===(l=r.interleaved)?(n.next=n,lU(r)):(n.next=l.next,l.next=n),r.interleaved=n,l$(e,t)}function lQ(e,n,t){if(null!==(n=n.updateQueue)&&(n=n.shared,0!=(4194240&t))){var r=n.lanes;r&=e.pendingLanes,t|=r,n.lanes=t,ni(e,t)}}function lq(e,n){var t=e.updateQueue,r=e.alternate;if(null!==r&&t===(r=r.updateQueue)){var l=null,a=null;if(null!==(t=t.firstBaseUpdate)){do{var u={eventTime:t.eventTime,lane:t.lane,tag:t.tag,payload:t.payload,callback:t.callback,next:null};null===a?l=a=u:a=a.next=u,t=t.next}while(null!==t);null===a?l=a=n:a=a.next=n}else l=a=n;t={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:a,shared:r.shared,effects:r.effects},e.updateQueue=t;return}null===(e=t.lastBaseUpdate)?t.firstBaseUpdate=n:e.next=n,t.lastBaseUpdate=n}function lK(e,n,t,r){var l=e.updateQueue;lA=!1;var a=l.firstBaseUpdate,u=l.lastBaseUpdate,o=l.shared.pending;if(null!==o){l.shared.pending=null;var i=o,s=i.next;i.next=null,null===u?a=s:u.next=s,u=i;var c=e.alternate;null!==c&&(o=(c=c.updateQueue).lastBaseUpdate)!==u&&(null===o?c.firstBaseUpdate=s:o.next=s,c.lastBaseUpdate=i)}if(null!==a){var f=l.baseState;for(u=0,c=s=i=null,o=a;;){var d=o.lane,p=o.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:o.tag,payload:o.payload,callback:o.callback,next:null});e:{var m=e,h=o;switch(d=n,p=t,h.tag){case 1:if(\"function\"==typeof(m=h.payload)){f=m.call(p,f,d);break e}f=m;break e;case 3:m.flags=-65537&m.flags|128;case 0:if(null==(d=\"function\"==typeof(m=h.payload)?m.call(p,f,d):m))break e;f=B({},f,d);break e;case 2:lA=!0}}null!==o.callback&&0!==o.lane&&(e.flags|=64,null===(d=l.effects)?l.effects=[o]:d.push(o))}else p={eventTime:p,lane:d,tag:o.tag,payload:o.payload,callback:o.callback,next:null},null===c?(s=c=p,i=f):c=c.next=p,u|=d;if(null===(o=o.next))if(null===(o=l.shared.pending))break;else o=(d=o).next,d.next=null,l.lastBaseUpdate=d,l.shared.pending=null}if(null===c&&(i=f),l.baseState=i,l.firstBaseUpdate=s,l.lastBaseUpdate=c,null!==(n=l.shared.interleaved)){l=n;do u|=l.lane,l=l.next;while(l!==n)}else null===a&&(l.shared.lanes=0);u7|=u,e.lanes=u,e.memoizedState=f}}function lY(e,n,t){if(e=n.effects,n.effects=null,null!==e)for(n=0;n<e.length;n++){var r=e[n],l=r.callback;if(null!==l){if(r.callback=null,r=t,\"function\"!=typeof l)throw Error(f(191,l));l.call(r)}}}var lX={},lG=r$(lX),lZ=r$(lX),lJ=r$(lX);function l0(e){if(e===lX)throw Error(f(174));return e}function l1(e,n){switch(rj(lJ,n),rj(lZ,e),rj(lG,lX),e=n.nodeType){case 9:case 11:n=(n=n.documentElement)?n.namespaceURI:ef(null,\"\");break;default:n=ef(n=(e=8===e?n.parentNode:n).namespaceURI||null,e=e.tagName)}rA(lG),rj(lG,n)}function l2(){rA(lG),rA(lZ),rA(lJ)}function l3(e){l0(lJ.current);var n=l0(lG.current),t=ef(n,e.type);n!==t&&(rj(lZ,e),rj(lG,t))}function l4(e){lZ.current===e&&(rA(lG),rA(lZ))}var l8=r$(0);function l5(e){for(var n=e;null!==n;){if(13===n.tag){var t=n.memoizedState;if(null!==t&&(null===(t=t.dehydrated)||\"$?\"===t.data||\"$!\"===t.data))return n}else if(19===n.tag&&void 0!==n.memoizedProps.revealOrder){if(0!=(128&n.flags))return n}else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}return null}var l6=[];function l9(){for(var e=0;e<l6.length;e++)l6[e]._workInProgressVersionPrimary=null;l6.length=0}var l7=C.ReactCurrentDispatcher,ae=C.ReactCurrentBatchConfig,an=0,at=null,ar=null,al=null,aa=!1,au=!1,ao=0,ai=0;function as(){throw Error(f(321))}function ac(e,n){if(null===n)return!1;for(var t=0;t<n.length&&t<e.length;t++)if(!tO(e[t],n[t]))return!1;return!0}function af(e,n,t,r,l,a){if(an=a,at=n,n.memoizedState=null,n.updateQueue=null,n.lanes=0,l7.current=null===e||null===e.memoizedState?aK:aY,e=t(r,l),au){a=0;do{if(au=!1,ao=0,25<=a)throw Error(f(301));a+=1,al=ar=null,n.updateQueue=null,l7.current=aX,e=t(r,l)}while(au)}if(l7.current=aq,n=null!==ar&&null!==ar.next,an=0,al=ar=at=null,aa=!1,n)throw Error(f(300));return e}function ad(){var e=0!==ao;return ao=0,e}function ap(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===al?at.memoizedState=al=e:al=al.next=e,al}function am(){if(null===ar){var e=at.alternate;e=null!==e?e.memoizedState:null}else e=ar.next;var n=null===al?at.memoizedState:al.next;if(null!==n)al=n,ar=e;else{if(null===e)throw Error(f(310));e={memoizedState:(ar=e).memoizedState,baseState:ar.baseState,baseQueue:ar.baseQueue,queue:ar.queue,next:null},null===al?at.memoizedState=al=e:al=al.next=e}return al}function ah(e,n){return\"function\"==typeof n?n(e):n}function ag(e){var n=am(),t=n.queue;if(null===t)throw Error(f(311));t.lastRenderedReducer=e;var r=ar,l=r.baseQueue,a=t.pending;if(null!==a){if(null!==l){var u=l.next;l.next=a.next,a.next=u}r.baseQueue=l=a,t.pending=null}if(null!==l){a=l.next,r=r.baseState;var o=u=null,i=null,s=a;do{var c=s.lane;if((an&c)===c)null!==i&&(i=i.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var d={lane:c,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===i?(o=i=d,u=r):i=i.next=d,at.lanes|=c,u7|=c}s=s.next}while(null!==s&&s!==a);null===i?u=r:i.next=o,tO(r,n.memoizedState)||(ul=!0),n.memoizedState=r,n.baseState=u,n.baseQueue=i,t.lastRenderedState=r}if(null!==(e=t.interleaved)){l=e;do a=l.lane,at.lanes|=a,u7|=a,l=l.next;while(l!==e)}else null===l&&(t.lanes=0);return[n.memoizedState,t.dispatch]}function av(e){var n=am(),t=n.queue;if(null===t)throw Error(f(311));t.lastRenderedReducer=e;var r=t.dispatch,l=t.pending,a=n.memoizedState;if(null!==l){t.pending=null;var u=l=l.next;do a=e(a,u.action),u=u.next;while(u!==l);tO(a,n.memoizedState)||(ul=!0),n.memoizedState=a,null===n.baseQueue&&(n.baseState=a),t.lastRenderedState=a}return[a,r]}function ay(){}function ab(e,n){var t=at,r=am(),l=n(),a=!tO(r.memoizedState,l);if(a&&(r.memoizedState=l,ul=!0),r=r.queue,aL(aS.bind(null,t,r,e),[e]),r.getSnapshot!==n||a||null!==al&&1&al.memoizedState.tag){if(t.flags|=2048,aC(9,aw.bind(null,t,r,l,n),void 0,null),null===u2)throw Error(f(349));0!=(30&an)||ak(t,n,l)}return l}function ak(e,n,t){e.flags|=16384,e={getSnapshot:n,value:t},null===(n=at.updateQueue)?(n={lastEffect:null,stores:null},at.updateQueue=n,n.stores=[e]):null===(t=n.stores)?n.stores=[e]:t.push(e)}function aw(e,n,t,r){n.value=t,n.getSnapshot=r,ax(n)&&aE(e)}function aS(e,n,t){return t(function(){ax(n)&&aE(e)})}function ax(e){var n=e.getSnapshot;e=e.value;try{var t=n();return!tO(e,t)}catch(e){return!0}}function aE(e){var n=l$(e,1);null!==n&&ob(n,e,1,-1)}function a_(e){var n=ap();return\"function\"==typeof e&&(e=e()),n.memoizedState=n.baseState=e,n.queue=e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ah,lastRenderedState:e},e=e.dispatch=aB.bind(null,at,e),[n.memoizedState,e]}function aC(e,n,t,r){return e={tag:e,create:n,destroy:t,deps:r,next:null},null===(n=at.updateQueue)?(n={lastEffect:null,stores:null},at.updateQueue=n,n.lastEffect=e.next=e):null===(t=n.lastEffect)?n.lastEffect=e.next=e:(r=t.next,t.next=e,e.next=r,n.lastEffect=e),e}function aP(){return am().memoizedState}function aN(e,n,t,r){var l=ap();at.flags|=e,l.memoizedState=aC(1|n,t,void 0,void 0===r?null:r)}function az(e,n,t,r){var l=am();r=void 0===r?null:r;var a=void 0;if(null!==ar){var u=ar.memoizedState;if(a=u.destroy,null!==r&&ac(r,u.deps)){l.memoizedState=aC(n,t,a,r);return}}at.flags|=e,l.memoizedState=aC(1|n,t,a,r)}function aT(e,n){return aN(8390656,8,e,n)}function aL(e,n){return az(2048,8,e,n)}function aR(e,n){return az(4,2,e,n)}function aM(e,n){return az(4,4,e,n)}function aF(e,n){return\"function\"==typeof n?(n(e=e()),function(){n(null)}):null!=n?(n.current=e=e(),function(){n.current=null}):void 0}function aO(e,n,t){return t=null!=t?t.concat([e]):null,az(4,4,aF.bind(null,n,e),t)}function aD(){}function aI(e,n){var t=am();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&ac(n,r[1])?r[0]:(t.memoizedState=[e,n],e)}function aU(e,n){var t=am();n=void 0===n?null:n;var r=t.memoizedState;return null!==r&&null!==n&&ac(n,r[1])?r[0]:(t.memoizedState=[e=e(),n],e)}function aV(e,n,t){return 0==(21&an)?(e.baseState&&(e.baseState=!1,ul=!0),e.memoizedState=t):(tO(t,n)||(t=na(),at.lanes|=t,u7|=t,e.baseState=!0),n)}function a$(e,n){var t=ns;ns=0!==t&&4>t?t:4,e(!0);var r=ae.transition;ae.transition={};try{e(!1),n()}finally{ns=t,ae.transition=r}}function aA(){return am().memoizedState}function aj(e,n,t){var r=oy(e);t={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null},aH(e)?aW(n,t):null!==(t=lV(e,n,t,r))&&(ob(t,e,r,ov()),aQ(t,n,r))}function aB(e,n,t){var r=oy(e),l={lane:r,action:t,hasEagerState:!1,eagerState:null,next:null};if(aH(e))aW(n,l);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=n.lastRenderedReducer))try{var u=n.lastRenderedState,o=a(u,t);if(l.hasEagerState=!0,l.eagerState=o,tO(o,u)){var i=n.interleaved;null===i?(l.next=l,lU(n)):(l.next=i.next,i.next=l),n.interleaved=l;return}}catch(e){}finally{}null!==(t=lV(e,n,l,r))&&(ob(t,e,r,l=ov()),aQ(t,n,r))}}function aH(e){var n=e.alternate;return e===at||null!==n&&n===at}function aW(e,n){au=aa=!0;var t=e.pending;null===t?n.next=n:(n.next=t.next,t.next=n),e.pending=n}function aQ(e,n,t){if(0!=(4194240&t)){var r=n.lanes;r&=e.pendingLanes,n.lanes=t|=r,ni(e,t)}}var aq={readContext:lD,useCallback:as,useContext:as,useEffect:as,useImperativeHandle:as,useInsertionEffect:as,useLayoutEffect:as,useMemo:as,useReducer:as,useRef:as,useState:as,useDebugValue:as,useDeferredValue:as,useTransition:as,useMutableSource:as,useSyncExternalStore:as,useId:as,unstable_isNewReconciler:!1},aK={readContext:lD,useCallback:function(e,n){return ap().memoizedState=[e,void 0===n?null:n],e},useContext:lD,useEffect:aT,useImperativeHandle:function(e,n,t){return t=null!=t?t.concat([e]):null,aN(4194308,4,aF.bind(null,n,e),t)},useLayoutEffect:function(e,n){return aN(4194308,4,e,n)},useInsertionEffect:function(e,n){return aN(4,2,e,n)},useMemo:function(e,n){return n=void 0===n?null:n,ap().memoizedState=[e=e(),n],e},useReducer:function(e,n,t){var r=ap();return r.memoizedState=r.baseState=n=void 0!==t?t(n):n,r.queue=e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:n},e=e.dispatch=aj.bind(null,at,e),[r.memoizedState,e]},useRef:function(e){return ap().memoizedState=e={current:e}},useState:a_,useDebugValue:aD,useDeferredValue:function(e){return ap().memoizedState=e},useTransition:function(){var e=a_(!1),n=e[0];return e=a$.bind(null,e[1]),ap().memoizedState=e,[n,e]},useMutableSource:function(){},useSyncExternalStore:function(e,n,t){var r=at,l=ap();if(lc){if(void 0===t)throw Error(f(407));t=t()}else{if(t=n(),null===u2)throw Error(f(349));0!=(30&an)||ak(r,n,t)}l.memoizedState=t;var a={value:t,getSnapshot:n};return l.queue=a,aT(aS.bind(null,r,a,e),[e]),r.flags|=2048,aC(9,aw.bind(null,r,a,t,n),void 0,null),t},useId:function(){var e=ap(),n=u2.identifierPrefix;if(lc){var t=lr,r=lt;n=\":\"+n+\"R\"+(t=(r&~(1<<32-e6(r)-1)).toString(32)+t),0<(t=ao++)&&(n+=\"H\"+t.toString(32)),n+=\":\"}else n=\":\"+n+\"r\"+(t=ai++).toString(32)+\":\";return e.memoizedState=n},unstable_isNewReconciler:!1},aY={readContext:lD,useCallback:aI,useContext:lD,useEffect:aL,useImperativeHandle:aO,useInsertionEffect:aR,useLayoutEffect:aM,useMemo:aU,useReducer:ag,useRef:aP,useState:function(){return ag(ah)},useDebugValue:aD,useDeferredValue:function(e){return aV(am(),ar.memoizedState,e)},useTransition:function(){return[ag(ah)[0],am().memoizedState]},useMutableSource:ay,useSyncExternalStore:ab,useId:aA,unstable_isNewReconciler:!1},aX={readContext:lD,useCallback:aI,useContext:lD,useEffect:aL,useImperativeHandle:aO,useInsertionEffect:aR,useLayoutEffect:aM,useMemo:aU,useReducer:av,useRef:aP,useState:function(){return av(ah)},useDebugValue:aD,useDeferredValue:function(e){var n=am();return null===ar?n.memoizedState=e:aV(n,ar.memoizedState,e)},useTransition:function(){return[av(ah)[0],am().memoizedState]},useMutableSource:ay,useSyncExternalStore:ab,useId:aA,unstable_isNewReconciler:!1};function aG(e,n){if(e&&e.defaultProps)for(var t in n=B({},n),e=e.defaultProps)void 0===n[t]&&(n[t]=e[t]);return n}function aZ(e,n,t,r){t=null==(t=t(r,n=e.memoizedState))?n:B({},n,t),e.memoizedState=t,0===e.lanes&&(e.updateQueue.baseState=t)}var aJ={isMounted:function(e){return!!(e=e._reactInternals)&&eH(e)===e},enqueueSetState:function(e,n,t){e=e._reactInternals;var r=ov(),l=oy(e),a=lH(r,l);a.payload=n,null!=t&&(a.callback=t),null!==(n=lW(e,a,l))&&(ob(n,e,l,r),lQ(n,e,l))},enqueueReplaceState:function(e,n,t){e=e._reactInternals;var r=ov(),l=oy(e),a=lH(r,l);a.tag=1,a.payload=n,null!=t&&(a.callback=t),null!==(n=lW(e,a,l))&&(ob(n,e,l,r),lQ(n,e,l))},enqueueForceUpdate:function(e,n){e=e._reactInternals;var t=ov(),r=oy(e),l=lH(t,r);l.tag=2,null!=n&&(l.callback=n),null!==(n=lW(e,l,r))&&(ob(n,e,r,t),lQ(n,e,r))}};function a0(e,n,t,r,l,a,u){return\"function\"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,u):!n.prototype||!n.prototype.isPureReactComponent||!tD(t,r)||!tD(l,a)}function a1(e,n,t){var r=!1,l=rB,a=n.contextType;return\"object\"==typeof a&&null!==a?a=lD(a):(l=rK(n)?rQ:rH.current,a=(r=null!=(r=n.contextTypes))?rq(e,l):rB),n=new n(t,a),e.memoizedState=null!==n.state&&void 0!==n.state?n.state:null,n.updater=aJ,e.stateNode=n,n._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=l,e.__reactInternalMemoizedMaskedChildContext=a),n}function a2(e,n,t,r){e=n.state,\"function\"==typeof n.componentWillReceiveProps&&n.componentWillReceiveProps(t,r),\"function\"==typeof n.UNSAFE_componentWillReceiveProps&&n.UNSAFE_componentWillReceiveProps(t,r),n.state!==e&&aJ.enqueueReplaceState(n,n.state,null)}function a3(e,n,t,r){var l=e.stateNode;l.props=t,l.state=e.memoizedState,l.refs={},lj(e);var a=n.contextType;\"object\"==typeof a&&null!==a?l.context=lD(a):l.context=rq(e,a=rK(n)?rQ:rH.current),l.state=e.memoizedState,\"function\"==typeof(a=n.getDerivedStateFromProps)&&(aZ(e,n,a,t),l.state=e.memoizedState),\"function\"==typeof n.getDerivedStateFromProps||\"function\"==typeof l.getSnapshotBeforeUpdate||\"function\"!=typeof l.UNSAFE_componentWillMount&&\"function\"!=typeof l.componentWillMount||(n=l.state,\"function\"==typeof l.componentWillMount&&l.componentWillMount(),\"function\"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount(),n!==l.state&&aJ.enqueueReplaceState(l,l.state,null),lK(e,t,l,r),l.state=e.memoizedState),\"function\"==typeof l.componentDidMount&&(e.flags|=4194308)}function a4(e,n){try{var t=\"\",r=n;do t+=function(e){switch(e.tag){case 5:return H(e.type);case 16:return H(\"Lazy\");case 13:return H(\"Suspense\");case 19:return H(\"SuspenseList\");case 0:case 2:case 15:return e=Q(e.type,!1);case 11:return e=Q(e.type.render,!1);case 1:return e=Q(e.type,!0);default:return\"\"}}(r),r=r.return;while(r);var l=t}catch(e){l=\"\\nError generating stack: \"+e.message+\"\\n\"+e.stack}return{value:e,source:n,stack:l,digest:null}}function a8(e,n,t){return{value:e,source:null,stack:null!=t?t:null,digest:null!=n?n:null}}function a5(e,n){try{console.error(n.value)}catch(e){setTimeout(function(){throw e})}}var a6=\"function\"==typeof WeakMap?WeakMap:Map;function a9(e,n,t){(t=lH(-1,t)).tag=3,t.payload={element:null};var r=n.value;return t.callback=function(){oo||(oo=!0,oi=r),a5(e,n)},t}function a7(e,n,t){(t=lH(-1,t)).tag=3;var r=e.type.getDerivedStateFromError;if(\"function\"==typeof r){var l=n.value;t.payload=function(){return r(l)},t.callback=function(){a5(e,n)}}var a=e.stateNode;return null!==a&&\"function\"==typeof a.componentDidCatch&&(t.callback=function(){a5(e,n),\"function\"!=typeof r&&(null===os?os=new Set([this]):os.add(this));var t=n.stack;this.componentDidCatch(n.value,{componentStack:null!==t?t:\"\"})}),t}function ue(e,n,t){var r=e.pingCache;if(null===r){r=e.pingCache=new a6;var l=new Set;r.set(n,l)}else void 0===(l=r.get(n))&&(l=new Set,r.set(n,l));l.has(t)||(l.add(t),e=o$.bind(null,e,n,t),n.then(e,e))}function un(e){do{var n;if((n=13===e.tag)&&(n=null===(n=e.memoizedState)||null!==n.dehydrated),n)return e;e=e.return}while(null!==e);return null}function ut(e,n,t,r,l){return 0==(1&e.mode)?e===n?e.flags|=65536:(e.flags|=128,t.flags|=131072,t.flags&=-52805,1===t.tag&&(null===t.alternate?t.tag=17:((n=lH(-1,1)).tag=2,lW(t,n,1))),t.lanes|=1):(e.flags|=65536,e.lanes=l),e}var ur=C.ReactCurrentOwner,ul=!1;function ua(e,n,t,r){n.child=null===e?lP(n,null,t,r):lC(n,e.child,t,r)}function uu(e,n,t,r,l){t=t.render;var a=n.ref;return(lO(n,l),r=af(e,n,t,r,a,l),t=ad(),null===e||ul)?(lc&&t&&lu(n),n.flags|=1,ua(e,n,r,l),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~l,u_(e,n,l))}function uo(e,n,t,r,l){if(null===e){var a=t.type;return\"function\"!=typeof a||oQ(a)||void 0!==a.defaultProps||null!==t.compare||void 0!==t.defaultProps?((e=oK(t.type,null,r,n,n.mode,l)).ref=n.ref,e.return=n,n.child=e):(n.tag=15,n.type=a,ui(e,n,a,r,l))}if(a=e.child,0==(e.lanes&l)){var u=a.memoizedProps;if((t=null!==(t=t.compare)?t:tD)(u,r)&&e.ref===n.ref)return u_(e,n,l)}return n.flags|=1,(e=oq(a,r)).ref=n.ref,e.return=n,n.child=e}function ui(e,n,t,r,l){if(null!==e){var a=e.memoizedProps;if(tD(a,r)&&e.ref===n.ref)if(ul=!1,n.pendingProps=r=a,0==(e.lanes&l))return n.lanes=e.lanes,u_(e,n,l);else 0!=(131072&e.flags)&&(ul=!0)}return uf(e,n,t,r,l)}function us(e,n,t){var r=n.pendingProps,l=r.children,a=null!==e?e.memoizedState:null;if(\"hidden\"===r.mode)if(0==(1&n.mode))n.memoizedState={baseLanes:0,cachePool:null,transitions:null},rj(u5,u8),u8|=t;else{if(0==(0x40000000&t))return e=null!==a?a.baseLanes|t:t,n.lanes=n.childLanes=0x40000000,n.memoizedState={baseLanes:e,cachePool:null,transitions:null},n.updateQueue=null,rj(u5,u8),u8|=e,null;n.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:t,rj(u5,u8),u8|=r}else null!==a?(r=a.baseLanes|t,n.memoizedState=null):r=t,rj(u5,u8),u8|=r;return ua(e,n,l,t),n.child}function uc(e,n){var t=n.ref;(null===e&&null!==t||null!==e&&e.ref!==t)&&(n.flags|=512,n.flags|=2097152)}function uf(e,n,t,r,l){var a=rK(t)?rQ:rH.current;return(a=rq(n,a),lO(n,l),t=af(e,n,t,r,a,l),r=ad(),null===e||ul)?(lc&&r&&lu(n),n.flags|=1,ua(e,n,t,l),n.child):(n.updateQueue=e.updateQueue,n.flags&=-2053,e.lanes&=~l,u_(e,n,l))}function ud(e,n,t,r,l){if(rK(t)){var a=!0;rZ(n)}else a=!1;if(lO(n,l),null===n.stateNode)uE(e,n),a1(n,t,r),a3(n,t,r,l),r=!0;else if(null===e){var u=n.stateNode,o=n.memoizedProps;u.props=o;var i=u.context,s=t.contextType;s=\"object\"==typeof s&&null!==s?lD(s):rq(n,s=rK(t)?rQ:rH.current);var c=t.getDerivedStateFromProps,f=\"function\"==typeof c||\"function\"==typeof u.getSnapshotBeforeUpdate;f||\"function\"!=typeof u.UNSAFE_componentWillReceiveProps&&\"function\"!=typeof u.componentWillReceiveProps||(o!==r||i!==s)&&a2(n,u,r,s),lA=!1;var d=n.memoizedState;u.state=d,lK(n,r,u,l),i=n.memoizedState,o!==r||d!==i||rW.current||lA?(\"function\"==typeof c&&(aZ(n,t,c,r),i=n.memoizedState),(o=lA||a0(n,t,o,r,d,i,s))?(f||\"function\"!=typeof u.UNSAFE_componentWillMount&&\"function\"!=typeof u.componentWillMount||(\"function\"==typeof u.componentWillMount&&u.componentWillMount(),\"function\"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),\"function\"==typeof u.componentDidMount&&(n.flags|=4194308)):(\"function\"==typeof u.componentDidMount&&(n.flags|=4194308),n.memoizedProps=r,n.memoizedState=i),u.props=r,u.state=i,u.context=s,r=o):(\"function\"==typeof u.componentDidMount&&(n.flags|=4194308),r=!1)}else{u=n.stateNode,lB(e,n),o=n.memoizedProps,s=n.type===n.elementType?o:aG(n.type,o),u.props=s,f=n.pendingProps,d=u.context,i=\"object\"==typeof(i=t.contextType)&&null!==i?lD(i):rq(n,i=rK(t)?rQ:rH.current);var p=t.getDerivedStateFromProps;(c=\"function\"==typeof p||\"function\"==typeof u.getSnapshotBeforeUpdate)||\"function\"!=typeof u.UNSAFE_componentWillReceiveProps&&\"function\"!=typeof u.componentWillReceiveProps||(o!==f||d!==i)&&a2(n,u,r,i),lA=!1,d=n.memoizedState,u.state=d,lK(n,r,u,l);var m=n.memoizedState;o!==f||d!==m||rW.current||lA?(\"function\"==typeof p&&(aZ(n,t,p,r),m=n.memoizedState),(s=lA||a0(n,t,s,r,d,m,i)||!1)?(c||\"function\"!=typeof u.UNSAFE_componentWillUpdate&&\"function\"!=typeof u.componentWillUpdate||(\"function\"==typeof u.componentWillUpdate&&u.componentWillUpdate(r,m,i),\"function\"==typeof u.UNSAFE_componentWillUpdate&&u.UNSAFE_componentWillUpdate(r,m,i)),\"function\"==typeof u.componentDidUpdate&&(n.flags|=4),\"function\"==typeof u.getSnapshotBeforeUpdate&&(n.flags|=1024)):(\"function\"!=typeof u.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),\"function\"!=typeof u.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),n.memoizedProps=r,n.memoizedState=m),u.props=r,u.state=m,u.context=i,r=s):(\"function\"!=typeof u.componentDidUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=4),\"function\"!=typeof u.getSnapshotBeforeUpdate||o===e.memoizedProps&&d===e.memoizedState||(n.flags|=1024),r=!1)}return up(e,n,t,r,a,l)}function up(e,n,t,r,l,a){uc(e,n);var u=0!=(128&n.flags);if(!r&&!u)return l&&rJ(n,t,!1),u_(e,n,a);r=n.stateNode,ur.current=n;var o=u&&\"function\"!=typeof t.getDerivedStateFromError?null:r.render();return n.flags|=1,null!==e&&u?(n.child=lC(n,e.child,null,a),n.child=lC(n,null,o,a)):ua(e,n,o,a),n.memoizedState=r.state,l&&rJ(n,t,!0),n.child}function um(e){var n=e.stateNode;n.pendingContext?rX(e,n.pendingContext,n.pendingContext!==n.context):n.context&&rX(e,n.context,!1),l1(e,n.containerInfo)}function uh(e,n,t,r,l){return lb(),lk(l),n.flags|=256,ua(e,n,t,r),n.child}var ug={dehydrated:null,treeContext:null,retryLane:0};function uv(e){return{baseLanes:e,cachePool:null,transitions:null}}function uy(e,n,t){var r,l=n.pendingProps,a=l8.current,u=!1,o=0!=(128&n.flags);if((r=o)||(r=(null===e||null!==e.memoizedState)&&0!=(2&a)),r?(u=!0,n.flags&=-129):(null===e||null!==e.memoizedState)&&(a|=1),rj(l8,1&a),null===e)return(lh(n),null!==(e=n.memoizedState)&&null!==(e=e.dehydrated))?(0==(1&n.mode)?n.lanes=1:\"$!\"===e.data?n.lanes=8:n.lanes=0x40000000,null):(o=l.children,e=l.fallback,u?(l=n.mode,u=n.child,o={mode:\"hidden\",children:o},0==(1&l)&&null!==u?(u.childLanes=0,u.pendingProps=o):u=oX(o,l,0,null),e=oY(e,l,t,null),u.return=n,e.return=n,u.sibling=e,n.child=u,n.child.memoizedState=uv(t),n.memoizedState=ug,e):ub(n,o));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated)){var i=e,s=n,c=o,d=l,p=r,m=a,h=t;if(c)return 256&s.flags?(s.flags&=-257,uk(i,s,h,d=a8(Error(f(422))))):null!==s.memoizedState?(s.child=i.child,s.flags|=128,null):(m=d.fallback,p=s.mode,d=oX({mode:\"visible\",children:d.children},p,0,null),m=oY(m,p,h,null),m.flags|=2,d.return=s,m.return=s,d.sibling=m,s.child=d,0!=(1&s.mode)&&lC(s,i.child,null,h),s.child.memoizedState=uv(h),s.memoizedState=ug,m);if(0==(1&s.mode))return uk(i,s,h,null);if(\"$!\"===p.data){if(d=p.nextSibling&&p.nextSibling.dataset)var g=d.dgst;return d=g,uk(i,s,h,d=a8(m=Error(f(419)),d,void 0))}if(g=0!=(h&i.childLanes),ul||g){if(null!==(d=u2)){switch(h&-h){case 4:p=2;break;case 16:p=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 0x1000000:case 0x2000000:case 0x4000000:p=32;break;case 0x20000000:p=0x10000000;break;default:p=0}0!==(p=0!=(p&(d.suspendedLanes|h))?0:p)&&p!==m.retryLane&&(m.retryLane=p,l$(i,p),ob(d,i,p,-1))}return oR(),uk(i,s,h,d=a8(Error(f(421))))}return\"$?\"===p.data?(s.flags|=128,s.child=i.child,s=oj.bind(null,i),p._reactRetry=s,null):(i=m.treeContext,ls=r_(p.nextSibling),li=s,lc=!0,lf=null,null!==i&&(r7[le++]=lt,r7[le++]=lr,r7[le++]=ln,lt=i.id,lr=i.overflow,ln=s),s=ub(s,d.children),s.flags|=4096,s)}if(u){u=l.fallback,o=n.mode,r=(a=e.child).sibling;var v={mode:\"hidden\",children:l.children};return 0==(1&o)&&n.child!==a?((l=n.child).childLanes=0,l.pendingProps=v,n.deletions=null):(l=oq(a,v)).subtreeFlags=0xe00000&a.subtreeFlags,null!==r?u=oq(r,u):(u=oY(u,o,t,null),u.flags|=2),u.return=n,l.return=n,l.sibling=u,n.child=l,l=u,u=n.child,o=null===(o=e.child.memoizedState)?uv(t):{baseLanes:o.baseLanes|t,cachePool:null,transitions:o.transitions},u.memoizedState=o,u.childLanes=e.childLanes&~t,n.memoizedState=ug,l}return e=(u=e.child).sibling,l=oq(u,{mode:\"visible\",children:l.children}),0==(1&n.mode)&&(l.lanes=t),l.return=n,l.sibling=null,null!==e&&(null===(t=n.deletions)?(n.deletions=[e],n.flags|=16):t.push(e)),n.child=l,n.memoizedState=null,l}function ub(e,n){return(n=oX({mode:\"visible\",children:n},e.mode,0,null)).return=e,e.child=n}function uk(e,n,t,r){return null!==r&&lk(r),lC(n,e.child,null,t),e=ub(n,n.pendingProps.children),e.flags|=2,n.memoizedState=null,e}function uw(e,n,t){e.lanes|=n;var r=e.alternate;null!==r&&(r.lanes|=n),lF(e.return,n,t)}function uS(e,n,t,r,l){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:n,rendering:null,renderingStartTime:0,last:r,tail:t,tailMode:l}:(a.isBackwards=n,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=t,a.tailMode=l)}function ux(e,n,t){var r=n.pendingProps,l=r.revealOrder,a=r.tail;if(ua(e,n,r.children,t),0!=(2&(r=l8.current)))r=1&r|2,n.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=n.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&uw(e,t,n);else if(19===e.tag)uw(e,t,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(rj(l8,r),0==(1&n.mode))n.memoizedState=null;else switch(l){case\"forwards\":for(l=null,t=n.child;null!==t;)null!==(e=t.alternate)&&null===l5(e)&&(l=t),t=t.sibling;null===(t=l)?(l=n.child,n.child=null):(l=t.sibling,t.sibling=null),uS(n,!1,l,t,a);break;case\"backwards\":for(t=null,l=n.child,n.child=null;null!==l;){if(null!==(e=l.alternate)&&null===l5(e)){n.child=l;break}e=l.sibling,l.sibling=t,t=l,l=e}uS(n,!0,t,null,a);break;case\"together\":uS(n,!1,null,null,void 0);break;default:n.memoizedState=null}return n.child}function uE(e,n){0==(1&n.mode)&&null!==e&&(e.alternate=null,n.alternate=null,n.flags|=2)}function u_(e,n,t){if(null!==e&&(n.dependencies=e.dependencies),u7|=n.lanes,0==(t&n.childLanes))return null;if(null!==e&&n.child!==e.child)throw Error(f(153));if(null!==n.child){for(t=oq(e=n.child,e.pendingProps),n.child=t,t.return=n;null!==e.sibling;)e=e.sibling,(t=t.sibling=oq(e,e.pendingProps)).return=n;t.sibling=null}return n.child}function uC(e,n){if(!lc)switch(e.tailMode){case\"hidden\":n=e.tail;for(var t=null;null!==n;)null!==n.alternate&&(t=n),n=n.sibling;null===t?e.tail=null:t.sibling=null;break;case\"collapsed\":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?n||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function uP(e){var n=null!==e.alternate&&e.alternate.child===e.child,t=0,r=0;if(n)for(var l=e.child;null!==l;)t|=l.lanes|l.childLanes,r|=0xe00000&l.subtreeFlags,r|=0xe00000&l.flags,l.return=e,l=l.sibling;else for(l=e.child;null!==l;)t|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=t,n}l=function(e,n){for(var t=n.child;null!==t;){if(5===t.tag||6===t.tag)e.appendChild(t.stateNode);else if(4!==t.tag&&null!==t.child){t.child.return=t,t=t.child;continue}if(t===n)break;for(;null===t.sibling;){if(null===t.return||t.return===n)return;t=t.return}t.sibling.return=t.return,t=t.sibling}},a=function(){},u=function(e,n,t,r){var l=e.memoizedProps;if(l!==r){e=n.stateNode,l0(lG.current);var a,u=null;switch(t){case\"input\":l=Z(e,l),r=Z(e,r),u=[];break;case\"select\":l=B({},l,{value:void 0}),r=B({},r,{value:void 0}),u=[];break;case\"textarea\":l=eu(e,l),r=eu(e,r),u=[];break;default:\"function\"!=typeof l.onClick&&\"function\"==typeof r.onClick&&(e.onclick=rh)}for(s in ek(t,r),t=null,l)if(!r.hasOwnProperty(s)&&l.hasOwnProperty(s)&&null!=l[s])if(\"style\"===s){var o=l[s];for(a in o)o.hasOwnProperty(a)&&(t||(t={}),t[a]=\"\")}else\"dangerouslySetInnerHTML\"!==s&&\"children\"!==s&&\"suppressContentEditableWarning\"!==s&&\"suppressHydrationWarning\"!==s&&\"autoFocus\"!==s&&(p.hasOwnProperty(s)?u||(u=[]):(u=u||[]).push(s,null));for(s in r){var i=r[s];if(o=null!=l?l[s]:void 0,r.hasOwnProperty(s)&&i!==o&&(null!=i||null!=o))if(\"style\"===s)if(o){for(a in o)!o.hasOwnProperty(a)||i&&i.hasOwnProperty(a)||(t||(t={}),t[a]=\"\");for(a in i)i.hasOwnProperty(a)&&o[a]!==i[a]&&(t||(t={}),t[a]=i[a])}else t||(u||(u=[]),u.push(s,t)),t=i;else\"dangerouslySetInnerHTML\"===s?(i=i?i.__html:void 0,o=o?o.__html:void 0,null!=i&&o!==i&&(u=u||[]).push(s,i)):\"children\"===s?\"string\"!=typeof i&&\"number\"!=typeof i||(u=u||[]).push(s,\"\"+i):\"suppressContentEditableWarning\"!==s&&\"suppressHydrationWarning\"!==s&&(p.hasOwnProperty(s)?(null!=i&&\"onScroll\"===s&&rn(\"scroll\",e),u||o===i||(u=[])):(u=u||[]).push(s,i))}t&&(u=u||[]).push(\"style\",t);var s=u;(n.updateQueue=s)&&(n.flags|=4)}},o=function(e,n,t,r){t!==r&&(n.flags|=4)};var uN=!1,uz=!1,uT=\"function\"==typeof WeakSet?WeakSet:Set,uL=null;function uR(e,n){var t=e.ref;if(null!==t)if(\"function\"==typeof t)try{t(null)}catch(t){oV(e,n,t)}else t.current=null}function uM(e,n,t){try{t()}catch(t){oV(e,n,t)}}var uF=!1;function uO(e,n,t){var r=n.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var l=r=r.next;do{if((l.tag&e)===e){var a=l.destroy;l.destroy=void 0,void 0!==a&&uM(n,t,a)}l=l.next}while(l!==r)}}function uD(e,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var t=n=n.next;do{if((t.tag&e)===e){var r=t.create;t.destroy=r()}t=t.next}while(t!==n)}}function uI(e){var n=e.ref;if(null!==n){var t=e.stateNode;e.tag,e=t,\"function\"==typeof n?n(e):n.current=e}}function uU(e){return 5===e.tag||3===e.tag||4===e.tag}function uV(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||uU(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags||null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}var u$=null,uA=!1;function uj(e,n,t){for(t=t.child;null!==t;)uB(e,n,t),t=t.sibling}function uB(e,n,t){if(e5&&\"function\"==typeof e5.onCommitFiberUnmount)try{e5.onCommitFiberUnmount(e8,t)}catch(e){}switch(t.tag){case 5:uz||uR(t,n);case 6:var r=u$,l=uA;u$=null,uj(e,n,t),u$=r,uA=l,null!==u$&&(uA?(e=u$,t=t.stateNode,8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)):u$.removeChild(t.stateNode));break;case 18:null!==u$&&(uA?(e=u$,t=t.stateNode,8===e.nodeType?rE(e.parentNode,t):1===e.nodeType&&rE(e,t),nR(e)):rE(u$,t.stateNode));break;case 4:r=u$,l=uA,u$=t.stateNode.containerInfo,uA=!0,uj(e,n,t),u$=r,uA=l;break;case 0:case 11:case 14:case 15:if(!uz&&null!==(r=t.updateQueue)&&null!==(r=r.lastEffect)){l=r=r.next;do{var a=l,u=a.destroy;a=a.tag,void 0!==u&&(0!=(2&a)?uM(t,n,u):0!=(4&a)&&uM(t,n,u)),l=l.next}while(l!==r)}uj(e,n,t);break;case 1:if(!uz&&(uR(t,n),\"function\"==typeof(r=t.stateNode).componentWillUnmount))try{r.props=t.memoizedProps,r.state=t.memoizedState,r.componentWillUnmount()}catch(e){oV(t,n,e)}uj(e,n,t);break;case 21:default:uj(e,n,t);break;case 22:1&t.mode?(uz=(r=uz)||null!==t.memoizedState,uj(e,n,t),uz=r):uj(e,n,t)}}function uH(e){var n=e.updateQueue;if(null!==n){e.updateQueue=null;var t=e.stateNode;null===t&&(t=e.stateNode=new uT),n.forEach(function(n){var r=oB.bind(null,e,n);t.has(n)||(t.add(n),n.then(r,r))})}}function uW(e,n){var t=n.deletions;if(null!==t)for(var r=0;r<t.length;r++){var l=t[r];try{var a=n,u=a;e:for(;null!==u;){switch(u.tag){case 5:u$=u.stateNode,uA=!1;break e;case 3:case 4:u$=u.stateNode.containerInfo,uA=!0;break e}u=u.return}if(null===u$)throw Error(f(160));uB(e,a,l),u$=null,uA=!1;var o=l.alternate;null!==o&&(o.return=null),l.return=null}catch(e){oV(l,n,e)}}if(12854&n.subtreeFlags)for(n=n.child;null!==n;)uQ(n,e),n=n.sibling}function uQ(e,n){var t=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(uW(n,e),uq(e),4&r){try{uO(3,e,e.return),uD(3,e)}catch(n){oV(e,e.return,n)}try{uO(5,e,e.return)}catch(n){oV(e,e.return,n)}}break;case 1:uW(n,e),uq(e),512&r&&null!==t&&uR(t,t.return);break;case 5:if(uW(n,e),uq(e),512&r&&null!==t&&uR(t,t.return),32&e.flags){var l=e.stateNode;try{em(l,\"\")}catch(n){oV(e,e.return,n)}}if(4&r&&null!=(l=e.stateNode)){var a=e.memoizedProps,u=null!==t?t.memoizedProps:a,o=e.type,i=e.updateQueue;if(e.updateQueue=null,null!==i)try{\"input\"===o&&\"radio\"===a.type&&null!=a.name&&ee(l,a),ew(o,u);var s=ew(o,a);for(u=0;u<i.length;u+=2){var c=i[u],d=i[u+1];\"style\"===c?ey(l,d):\"dangerouslySetInnerHTML\"===c?ep(l,d):\"children\"===c?em(l,d):_(l,c,d,s)}switch(o){case\"input\":en(l,a);break;case\"textarea\":ei(l,a);break;case\"select\":var p=l._wrapperState.wasMultiple;l._wrapperState.wasMultiple=!!a.multiple;var m=a.value;null!=m?ea(l,!!a.multiple,m,!1):!!a.multiple!==p&&(null!=a.defaultValue?ea(l,!!a.multiple,a.defaultValue,!0):ea(l,!!a.multiple,a.multiple?[]:\"\",!1))}l[rz]=a}catch(n){oV(e,e.return,n)}}break;case 6:if(uW(n,e),uq(e),4&r){if(null===e.stateNode)throw Error(f(162));l=e.stateNode,a=e.memoizedProps;try{l.nodeValue=a}catch(n){oV(e,e.return,n)}}break;case 3:if(uW(n,e),uq(e),4&r&&null!==t&&t.memoizedState.isDehydrated)try{nR(n.containerInfo)}catch(n){oV(e,e.return,n)}break;case 4:default:uW(n,e),uq(e);break;case 13:uW(n,e),uq(e),8192&(l=e.child).flags&&(a=null!==l.memoizedState,l.stateNode.isHidden=a,a&&(null===l.alternate||null===l.alternate.memoizedState)&&(ol=eZ())),4&r&&uH(e);break;case 22:if(c=null!==t&&null!==t.memoizedState,1&e.mode?(uz=(s=uz)||c,uW(n,e),uz=s):uW(n,e),uq(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!c&&0!=(1&e.mode))for(uL=e,c=e.child;null!==c;){for(d=uL=c;null!==uL;){switch(m=(p=uL).child,p.tag){case 0:case 11:case 14:case 15:uO(4,p,p.return);break;case 1:uR(p,p.return);var h=p.stateNode;if(\"function\"==typeof h.componentWillUnmount){r=p,t=p.return;try{h.props=(n=r).memoizedProps,h.state=n.memoizedState,h.componentWillUnmount()}catch(e){oV(r,t,e)}}break;case 5:uR(p,p.return);break;case 22:if(null!==p.memoizedState){uY(d);continue}}null!==m?(m.return=p,uL=m):uY(d)}c=c.sibling}e:for(c=null,d=e;;){if(5===d.tag){if(null===c){c=d;try{l=d.stateNode,s?(a=l.style,\"function\"==typeof a.setProperty?a.setProperty(\"display\",\"none\",\"important\"):a.display=\"none\"):(o=d.stateNode,u=null!=(i=d.memoizedProps.style)&&i.hasOwnProperty(\"display\")?i.display:null,o.style.display=ev(\"display\",u))}catch(n){oV(e,e.return,n)}}}else if(6===d.tag){if(null===c)try{d.stateNode.nodeValue=s?\"\":d.memoizedProps}catch(n){oV(e,e.return,n)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;c===d&&(c=null),d=d.return}c===d&&(c=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:uW(n,e),uq(e),4&r&&uH(e);case 21:}}function uq(e){var n=e.flags;if(2&n){try{e:{for(var t=e.return;null!==t;){if(uU(t)){var r=t;break e}t=t.return}throw Error(f(160))}switch(r.tag){case 5:var l=r.stateNode;32&r.flags&&(em(l,\"\"),r.flags&=-33);var a=uV(e);!function e(n,t,r){var l=n.tag;if(5===l||6===l)n=n.stateNode,t?r.insertBefore(n,t):r.appendChild(n);else if(4!==l&&null!==(n=n.child))for(e(n,t,r),n=n.sibling;null!==n;)e(n,t,r),n=n.sibling}(e,a,l);break;case 3:case 4:var u=r.stateNode.containerInfo,o=uV(e);!function e(n,t,r){var l=n.tag;if(5===l||6===l)n=n.stateNode,t?8===r.nodeType?r.parentNode.insertBefore(n,t):r.insertBefore(n,t):(8===r.nodeType?(t=r.parentNode).insertBefore(n,r):(t=r).appendChild(n),null!=(r=r._reactRootContainer)||null!==t.onclick||(t.onclick=rh));else if(4!==l&&null!==(n=n.child))for(e(n,t,r),n=n.sibling;null!==n;)e(n,t,r),n=n.sibling}(e,o,u);break;default:throw Error(f(161))}}catch(n){oV(e,e.return,n)}e.flags&=-3}4096&n&&(e.flags&=-4097)}function uK(e){for(;null!==uL;){var n=uL;if(0!=(8772&n.flags)){var t=n.alternate;try{if(0!=(8772&n.flags))switch(n.tag){case 0:case 11:case 15:uz||uD(5,n);break;case 1:var r=n.stateNode;if(4&n.flags&&!uz)if(null===t)r.componentDidMount();else{var l=n.elementType===n.type?t.memoizedProps:aG(n.type,t.memoizedProps);r.componentDidUpdate(l,t.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=n.updateQueue;null!==a&&lY(n,a,r);break;case 3:var u=n.updateQueue;if(null!==u){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}lY(n,u,t)}break;case 5:var o=n.stateNode;if(null===t&&4&n.flags){t=o;var i=n.memoizedProps;switch(n.type){case\"button\":case\"input\":case\"select\":case\"textarea\":i.autoFocus&&t.focus();break;case\"img\":i.src&&(t.src=i.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===n.memoizedState){var s=n.alternate;if(null!==s){var c=s.memoizedState;if(null!==c){var d=c.dehydrated;null!==d&&nR(d)}}}break;default:throw Error(f(163))}uz||512&n.flags&&uI(n)}catch(e){oV(n,n.return,e)}}if(n===e){uL=null;break}if(null!==(t=n.sibling)){t.return=n.return,uL=t;break}uL=n.return}}function uY(e){for(;null!==uL;){var n=uL;if(n===e){uL=null;break}var t=n.sibling;if(null!==t){t.return=n.return,uL=t;break}uL=n.return}}function uX(e){for(;null!==uL;){var n=uL;try{switch(n.tag){case 0:case 11:case 15:var t=n.return;try{uD(4,n)}catch(e){oV(n,t,e)}break;case 1:var r=n.stateNode;if(\"function\"==typeof r.componentDidMount){var l=n.return;try{r.componentDidMount()}catch(e){oV(n,l,e)}}var a=n.return;try{uI(n)}catch(e){oV(n,a,e)}break;case 5:var u=n.return;try{uI(n)}catch(e){oV(n,u,e)}}}catch(e){oV(n,n.return,e)}if(n===e){uL=null;break}var o=n.sibling;if(null!==o){o.return=n.return,uL=o;break}uL=n.return}}var uG=Math.ceil,uZ=C.ReactCurrentDispatcher,uJ=C.ReactCurrentOwner,u0=C.ReactCurrentBatchConfig,u1=0,u2=null,u3=null,u4=0,u8=0,u5=r$(0),u6=0,u9=null,u7=0,oe=0,on=0,ot=null,or=null,ol=0,oa=1/0,ou=null,oo=!1,oi=null,os=null,oc=!1,of=null,od=0,op=0,om=null,oh=-1,og=0;function ov(){return 0!=(6&u1)?eZ():-1!==oh?oh:oh=eZ()}function oy(e){return 0==(1&e.mode)?1:0!=(2&u1)&&0!==u4?u4&-u4:null!==lw.transition?(0===og&&(og=na()),og):0!==(e=ns)?e:e=void 0===(e=window.event)?16:n$(e.type)}function ob(e,n,t,r){if(50<op)throw op=0,om=null,Error(f(185));no(e,t,r),(0==(2&u1)||e!==u2)&&(e===u2&&(0==(2&u1)&&(oe|=t),4===u6&&oE(e,u4)),ok(e,r),1===t&&0===u1&&0==(1&n.mode)&&(oa=eZ()+500,r1&&r4()))}function ok(e,n){var t,r=e.callbackNode;!function(e,n){for(var t=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,a=e.pendingLanes;0<a;){var u=31-e6(a),o=1<<u,i=l[u];-1===i?(0==(o&t)||0!=(o&r))&&(l[u]=function(e,n){switch(e){case 1:case 2:case 4:return n+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return n+5e3;default:return -1}}(o,n)):i<=n&&(e.expiredLanes|=o),a&=~o}}(e,n);var l=nr(e,e===u2?u4:0);if(0===l)null!==r&&eY(r),e.callbackNode=null,e.callbackPriority=0;else if(n=l&-l,e.callbackPriority!==n){if(null!=r&&eY(r),1===n)0===e.tag?(t=o_.bind(null,e),r1=!0,r3(t)):r3(o_.bind(null,e)),rS(function(){0==(6&u1)&&r4()}),r=null;else{switch(nc(l)){case 1:r=e0;break;case 4:r=e1;break;case 16:default:r=e2;break;case 0x20000000:r=e4}r=eK(r,ow.bind(null,e))}e.callbackPriority=n,e.callbackNode=r}}function ow(e,n){if(oh=-1,og=0,0!=(6&u1))throw Error(f(327));var t=e.callbackNode;if(oI()&&e.callbackNode!==t)return null;var r=nr(e,e===u2?u4:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||n)n=oM(e,r);else{n=r;var l=u1;u1|=2;var a=oL();for((u2!==e||u4!==n)&&(ou=null,oa=eZ()+500,oz(e,n));;)try{for(;null!==u3&&!eX();)oF(u3);break}catch(n){oT(e,n)}lR(),uZ.current=a,u1=l,null!==u3?n=0:(u2=null,u4=0,n=u6)}if(0!==n){if(2===n&&0!==(l=nl(e))&&(r=l,n=oS(e,l)),1===n)throw t=u9,oz(e,0),oE(e,r),ok(e,eZ()),t;if(6===n)oE(e,r);else{if(l=e.current.alternate,0==(30&r)&&!function(e){for(var n=e;;){if(16384&n.flags){var t=n.updateQueue;if(null!==t&&null!==(t=t.stores))for(var r=0;r<t.length;r++){var l=t[r],a=l.getSnapshot;l=l.value;try{if(!tO(a(),l))return!1}catch(e){return!1}}}if(t=n.child,16384&n.subtreeFlags&&null!==t)t.return=n,n=t;else{if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return!0;n=n.return}n.sibling.return=n.return,n=n.sibling}}return!0}(l)&&(2===(n=oM(e,r))&&0!==(a=nl(e))&&(r=a,n=oS(e,a)),1===n))throw t=u9,oz(e,0),oE(e,r),ok(e,eZ()),t;switch(e.finishedWork=l,e.finishedLanes=r,n){case 0:case 1:throw Error(f(345));case 2:case 5:oD(e,or,ou);break;case 3:if(oE(e,r),(0x7c00000&r)===r&&10<(n=ol+500-eZ())){if(0!==nr(e,0))break;if(((l=e.suspendedLanes)&r)!==r){ov(),e.pingedLanes|=e.suspendedLanes&l;break}e.timeoutHandle=rb(oD.bind(null,e,or,ou),n);break}oD(e,or,ou);break;case 4:if(oE(e,r),(4194240&r)===r)break;for(l=-1,n=e.eventTimes;0<r;){var u=31-e6(r);a=1<<u,(u=n[u])>l&&(l=u),r&=~a}if(r=l,10<(r=(120>(r=eZ()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*uG(r/1960))-r)){e.timeoutHandle=rb(oD.bind(null,e,or,ou),r);break}oD(e,or,ou);break;default:throw Error(f(329))}}}return ok(e,eZ()),e.callbackNode===t?ow.bind(null,e):null}function oS(e,n){var t=ot;return e.current.memoizedState.isDehydrated&&(oz(e,n).flags|=256),2!==(e=oM(e,n))&&(n=or,or=t,null!==n&&ox(n)),e}function ox(e){null===or?or=e:or.push.apply(or,e)}function oE(e,n){for(n&=~on,n&=~oe,e.suspendedLanes|=n,e.pingedLanes&=~n,e=e.expirationTimes;0<n;){var t=31-e6(n),r=1<<t;e[t]=-1,n&=~r}}function o_(e){if(0!=(6&u1))throw Error(f(327));oI();var n=nr(e,0);if(0==(1&n))return ok(e,eZ()),null;var t=oM(e,n);if(0!==e.tag&&2===t){var r=nl(e);0!==r&&(n=r,t=oS(e,r))}if(1===t)throw t=u9,oz(e,0),oE(e,n),ok(e,eZ()),t;if(6===t)throw Error(f(345));return e.finishedWork=e.current.alternate,e.finishedLanes=n,oD(e,or,ou),ok(e,eZ()),null}function oC(e,n){var t=u1;u1|=1;try{return e(n)}finally{0===(u1=t)&&(oa=eZ()+500,r1&&r4())}}function oP(e){null!==of&&0===of.tag&&0==(6&u1)&&oI();var n=u1;u1|=1;var t=u0.transition,r=ns;try{if(u0.transition=null,ns=1,e)return e()}finally{ns=r,u0.transition=t,0==(6&(u1=n))&&r4()}}function oN(){u8=u5.current,rA(u5)}function oz(e,n){e.finishedWork=null,e.finishedLanes=0;var t=e.timeoutHandle;if(-1!==t&&(e.timeoutHandle=-1,rk(t)),null!==u3)for(t=u3.return;null!==t;){var r=t;switch(lo(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&rY();break;case 3:l2(),rA(rW),rA(rH),l9();break;case 5:l4(r);break;case 4:l2();break;case 13:case 19:rA(l8);break;case 10:lM(r.type._context);break;case 22:case 23:oN()}t=t.return}if(u2=e,u3=e=oq(e.current,null),u4=u8=n,u6=0,u9=null,on=oe=u7=0,or=ot=null,null!==lI){for(n=0;n<lI.length;n++)if(null!==(r=(t=lI[n]).interleaved)){t.interleaved=null;var l=r.next,a=t.pending;if(null!==a){var u=a.next;a.next=l,r.next=u}t.pending=r}lI=null}return e}function oT(e,n){for(;;){var t=u3;try{if(lR(),l7.current=aq,aa){for(var r=at.memoizedState;null!==r;){var l=r.queue;null!==l&&(l.pending=null),r=r.next}aa=!1}if(an=0,al=ar=at=null,au=!1,ao=0,uJ.current=null,null===t||null===t.return){u6=1,u9=n,u3=null;break}e:{var a=e,u=t.return,o=t,i=n;if(n=u4,o.flags|=32768,null!==i&&\"object\"==typeof i&&\"function\"==typeof i.then){var s=i,c=o,d=c.tag;if(0==(1&c.mode)&&(0===d||11===d||15===d)){var p=c.alternate;p?(c.updateQueue=p.updateQueue,c.memoizedState=p.memoizedState,c.lanes=p.lanes):(c.updateQueue=null,c.memoizedState=null)}var m=un(u);if(null!==m){m.flags&=-257,ut(m,u,o,a,n),1&m.mode&&ue(a,s,n),n=m,i=s;var h=n.updateQueue;if(null===h){var g=new Set;g.add(i),n.updateQueue=g}else h.add(i);break e}if(0==(1&n)){ue(a,s,n),oR();break e}i=Error(f(426))}else if(lc&&1&o.mode){var v=un(u);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),ut(v,u,o,a,n),lk(a4(i,o));break e}}a=i=a4(i,o),4!==u6&&(u6=2),null===ot?ot=[a]:ot.push(a),a=u;do{switch(a.tag){case 3:a.flags|=65536,n&=-n,a.lanes|=n;var y=a9(a,i,n);lq(a,y);break e;case 1:o=i;var b=a.type,k=a.stateNode;if(0==(128&a.flags)&&(\"function\"==typeof b.getDerivedStateFromError||null!==k&&\"function\"==typeof k.componentDidCatch&&(null===os||!os.has(k)))){a.flags|=65536,n&=-n,a.lanes|=n;var w=a7(a,o,n);lq(a,w);break e}}a=a.return}while(null!==a)}oO(t)}catch(e){n=e,u3===t&&null!==t&&(u3=t=t.return);continue}break}}function oL(){var e=uZ.current;return uZ.current=aq,null===e?aq:e}function oR(){(0===u6||3===u6||2===u6)&&(u6=4),null===u2||0==(0xfffffff&u7)&&0==(0xfffffff&oe)||oE(u2,u4)}function oM(e,n){var t=u1;u1|=2;var r=oL();for((u2!==e||u4!==n)&&(ou=null,oz(e,n));;)try{for(;null!==u3;)oF(u3);break}catch(n){oT(e,n)}if(lR(),u1=t,uZ.current=r,null!==u3)throw Error(f(261));return u2=null,u4=0,u6}function oF(e){var n=i(e.alternate,e,u8);e.memoizedProps=e.pendingProps,null===n?oO(e):u3=n,uJ.current=null}function oO(e){var n=e;do{var t=n.alternate;if(e=n.return,0==(32768&n.flags)){if(null!==(t=function(e,n,t){var r=n.pendingProps;switch(lo(n),n.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return uP(n),null;case 1:case 17:return rK(n.type)&&rY(),uP(n),null;case 3:return r=n.stateNode,l2(),rA(rW),rA(rH),l9(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(null===e||null===e.child)&&(lv(n)?n.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&n.flags)||(n.flags|=1024,null!==lf&&(ox(lf),lf=null))),a(e,n),uP(n),null;case 5:l4(n);var i=l0(lJ.current);if(t=n.type,null!==e&&null!=n.stateNode)u(e,n,t,r,i),e.ref!==n.ref&&(n.flags|=512,n.flags|=2097152);else{if(!r){if(null===n.stateNode)throw Error(f(166));return uP(n),null}if(e=l0(lG.current),lv(n)){r=n.stateNode,t=n.type;var s=n.memoizedProps;switch(r[rN]=n,r[rz]=s,e=0!=(1&n.mode),t){case\"dialog\":rn(\"cancel\",r),rn(\"close\",r);break;case\"iframe\":case\"object\":case\"embed\":rn(\"load\",r);break;case\"video\":case\"audio\":for(i=0;i<t6.length;i++)rn(t6[i],r);break;case\"source\":rn(\"error\",r);break;case\"img\":case\"image\":case\"link\":rn(\"error\",r),rn(\"load\",r);break;case\"details\":rn(\"toggle\",r);break;case\"input\":J(r,s),rn(\"invalid\",r);break;case\"select\":r._wrapperState={wasMultiple:!!s.multiple},rn(\"invalid\",r);break;case\"textarea\":eo(r,s),rn(\"invalid\",r)}for(var c in ek(t,s),i=null,s)if(s.hasOwnProperty(c)){var d=s[c];\"children\"===c?\"string\"==typeof d?r.textContent!==d&&(!0!==s.suppressHydrationWarning&&rm(r.textContent,d,e),i=[\"children\",d]):\"number\"==typeof d&&r.textContent!==\"\"+d&&(!0!==s.suppressHydrationWarning&&rm(r.textContent,d,e),i=[\"children\",\"\"+d]):p.hasOwnProperty(c)&&null!=d&&\"onScroll\"===c&&rn(\"scroll\",r)}switch(t){case\"input\":Y(r),et(r,s,!0);break;case\"textarea\":Y(r),es(r);break;case\"select\":case\"option\":break;default:\"function\"==typeof s.onClick&&(r.onclick=rh)}r=i,n.updateQueue=r,null!==r&&(n.flags|=4)}else{c=9===i.nodeType?i:i.ownerDocument,\"http://www.w3.org/1999/xhtml\"===e&&(e=ec(t)),\"http://www.w3.org/1999/xhtml\"===e?\"script\"===t?((e=c.createElement(\"div\")).innerHTML=\"<script><\\/script>\",e=e.removeChild(e.firstChild)):\"string\"==typeof r.is?e=c.createElement(t,{is:r.is}):(e=c.createElement(t),\"select\"===t&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,t),e[rN]=n,e[rz]=r,l(e,n,!1,!1),n.stateNode=e;e:{switch(c=ew(t,r),t){case\"dialog\":rn(\"cancel\",e),rn(\"close\",e),i=r;break;case\"iframe\":case\"object\":case\"embed\":rn(\"load\",e),i=r;break;case\"video\":case\"audio\":for(i=0;i<t6.length;i++)rn(t6[i],e);i=r;break;case\"source\":rn(\"error\",e),i=r;break;case\"img\":case\"image\":case\"link\":rn(\"error\",e),rn(\"load\",e),i=r;break;case\"details\":rn(\"toggle\",e),i=r;break;case\"input\":J(e,r),i=Z(e,r),rn(\"invalid\",e);break;case\"option\":default:i=r;break;case\"select\":e._wrapperState={wasMultiple:!!r.multiple},i=B({},r,{value:void 0}),rn(\"invalid\",e);break;case\"textarea\":eo(e,r),i=eu(e,r),rn(\"invalid\",e)}for(s in ek(t,i),d=i)if(d.hasOwnProperty(s)){var m=d[s];\"style\"===s?ey(e,m):\"dangerouslySetInnerHTML\"===s?null!=(m=m?m.__html:void 0)&&ep(e,m):\"children\"===s?\"string\"==typeof m?(\"textarea\"!==t||\"\"!==m)&&em(e,m):\"number\"==typeof m&&em(e,\"\"+m):\"suppressContentEditableWarning\"!==s&&\"suppressHydrationWarning\"!==s&&\"autoFocus\"!==s&&(p.hasOwnProperty(s)?null!=m&&\"onScroll\"===s&&rn(\"scroll\",e):null!=m&&_(e,s,m,c))}switch(t){case\"input\":Y(e),et(e,r,!1);break;case\"textarea\":Y(e),es(e);break;case\"option\":null!=r.value&&e.setAttribute(\"value\",\"\"+q(r.value));break;case\"select\":e.multiple=!!r.multiple,null!=(s=r.value)?ea(e,!!r.multiple,s,!1):null!=r.defaultValue&&ea(e,!!r.multiple,r.defaultValue,!0);break;default:\"function\"==typeof i.onClick&&(e.onclick=rh)}switch(t){case\"button\":case\"input\":case\"select\":case\"textarea\":r=!!r.autoFocus;break e;case\"img\":r=!0;break e;default:r=!1}}r&&(n.flags|=4)}null!==n.ref&&(n.flags|=512,n.flags|=2097152)}return uP(n),null;case 6:if(e&&null!=n.stateNode)o(e,n,e.memoizedProps,r);else{if(\"string\"!=typeof r&&null===n.stateNode)throw Error(f(166));if(t=l0(lJ.current),l0(lG.current),lv(n)){if(r=n.stateNode,t=n.memoizedProps,r[rN]=n,(s=r.nodeValue!==t)&&null!==(e=li))switch(e.tag){case 3:rm(r.nodeValue,t,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&rm(r.nodeValue,t,0!=(1&e.mode))}s&&(n.flags|=4)}else(r=(9===t.nodeType?t:t.ownerDocument).createTextNode(r))[rN]=n,n.stateNode=r}return uP(n),null;case 13:if(rA(l8),r=n.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(lc&&null!==ls&&0!=(1&n.mode)&&0==(128&n.flags))ly(),lb(),n.flags|=98560,s=!1;else if(s=lv(n),null!==r&&null!==r.dehydrated){if(null===e){if(!s)throw Error(f(318));if(!(s=null!==(s=n.memoizedState)?s.dehydrated:null))throw Error(f(317));s[rN]=n}else lb(),0==(128&n.flags)&&(n.memoizedState=null),n.flags|=4;uP(n),s=!1}else null!==lf&&(ox(lf),lf=null),s=!0;if(!s)return 65536&n.flags?n:null}if(0!=(128&n.flags))return n.lanes=t,n;return(r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(n.child.flags|=8192,0!=(1&n.mode)&&(null===e||0!=(1&l8.current)?0===u6&&(u6=3):oR())),null!==n.updateQueue&&(n.flags|=4),uP(n),null;case 4:return l2(),a(e,n),null===e&&rl(n.stateNode.containerInfo),uP(n),null;case 10:return lM(n.type._context),uP(n),null;case 19:if(rA(l8),null===(s=n.memoizedState))return uP(n),null;if(r=0!=(128&n.flags),null===(c=s.rendering))if(r)uC(s,!1);else{if(0!==u6||null!==e&&0!=(128&e.flags))for(e=n.child;null!==e;){if(null!==(c=l5(e))){for(n.flags|=128,uC(s,!1),null!==(r=c.updateQueue)&&(n.updateQueue=r,n.flags|=4),n.subtreeFlags=0,r=t,t=n.child;null!==t;)s=t,e=r,s.flags&=0xe00002,null===(c=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=c.childLanes,s.lanes=c.lanes,s.child=c.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=c.memoizedProps,s.memoizedState=c.memoizedState,s.updateQueue=c.updateQueue,s.type=c.type,e=c.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),t=t.sibling;return rj(l8,1&l8.current|2),n.child}e=e.sibling}null!==s.tail&&eZ()>oa&&(n.flags|=128,r=!0,uC(s,!1),n.lanes=4194304)}else{if(!r)if(null!==(e=l5(c))){if(n.flags|=128,r=!0,null!==(t=e.updateQueue)&&(n.updateQueue=t,n.flags|=4),uC(s,!0),null===s.tail&&\"hidden\"===s.tailMode&&!c.alternate&&!lc)return uP(n),null}else 2*eZ()-s.renderingStartTime>oa&&0x40000000!==t&&(n.flags|=128,r=!0,uC(s,!1),n.lanes=4194304);s.isBackwards?(c.sibling=n.child,n.child=c):(null!==(t=s.last)?t.sibling=c:n.child=c,s.last=c)}if(null!==s.tail)return n=s.tail,s.rendering=n,s.tail=n.sibling,s.renderingStartTime=eZ(),n.sibling=null,t=l8.current,rj(l8,r?1&t|2:1&t),n;return uP(n),null;case 22:case 23:return oN(),r=null!==n.memoizedState,null!==e&&null!==e.memoizedState!==r&&(n.flags|=8192),r&&0!=(1&n.mode)?0!=(0x40000000&u8)&&(uP(n),6&n.subtreeFlags&&(n.flags|=8192)):uP(n),null;case 24:case 25:return null}throw Error(f(156,n.tag))}(t,n,u8))){u3=t;return}}else{if(null!==(t=function(e,n){switch(lo(n),n.tag){case 1:return rK(n.type)&&rY(),65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 3:return l2(),rA(rW),rA(rH),l9(),0!=(65536&(e=n.flags))&&0==(128&e)?(n.flags=-65537&e|128,n):null;case 5:return l4(n),null;case 13:if(rA(l8),null!==(e=n.memoizedState)&&null!==e.dehydrated){if(null===n.alternate)throw Error(f(340));lb()}return 65536&(e=n.flags)?(n.flags=-65537&e|128,n):null;case 19:return rA(l8),null;case 4:return l2(),null;case 10:return lM(n.type._context),null;case 22:case 23:return oN(),null;default:return null}}(t,n))){t.flags&=32767,u3=t;return}if(null!==e)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{u6=6,u3=null;return}}if(null!==(n=n.sibling)){u3=n;return}u3=n=e}while(null!==n);0===u6&&(u6=5)}function oD(e,n,t){var r=ns,l=u0.transition;try{u0.transition=null,ns=1,function(e,n,t,r){do oI();while(null!==of);if(0!=(6&u1))throw Error(f(327));t=e.finishedWork;var l=e.finishedLanes;if(null!==t){if(e.finishedWork=null,e.finishedLanes=0,t===e.current)throw Error(f(177));e.callbackNode=null,e.callbackPriority=0;var a=t.lanes|t.childLanes,u=e,o=a,i=u.pendingLanes&~o;u.pendingLanes=o,u.suspendedLanes=0,u.pingedLanes=0,u.expiredLanes&=o,u.mutableReadLanes&=o,u.entangledLanes&=o,o=u.entanglements;var s=u.eventTimes;for(u=u.expirationTimes;0<i;){var c=31-e6(i),d=1<<c;o[c]=0,s[c]=-1,u[c]=-1,i&=~d}if(e===u2&&(u3=u2=null,u4=0),0==(2064&t.subtreeFlags)&&0==(2064&t.flags)||oc||(oc=!0,function(e,n){eK(e,n)}(e2,function(){return oI(),null})),a=0!=(15990&t.flags),0!=(15990&t.subtreeFlags)||a){a=u0.transition,u0.transition=null;var p,m,h,g=ns;ns=1;var v=u1;u1|=4,uJ.current=null,function(e,n){if(rg=nF,t$(e=tV())){if(\"selectionStart\"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(r&&0!==r.rangeCount){t=r.anchorNode;var l,a=r.anchorOffset,u=r.focusNode;r=r.focusOffset;try{t.nodeType,u.nodeType}catch(e){t=null;break e}var o=0,i=-1,s=-1,c=0,d=0,p=e,m=null;n:for(;;){for(;p!==t||0!==a&&3!==p.nodeType||(i=o+a),p!==u||0!==r&&3!==p.nodeType||(s=o+r),3===p.nodeType&&(o+=p.nodeValue.length),null!==(l=p.firstChild);)m=p,p=l;for(;;){if(p===e)break n;if(m===t&&++c===a&&(i=o),m===u&&++d===r&&(s=o),null!==(l=p.nextSibling))break;m=(p=m).parentNode}p=l}t=-1===i||-1===s?null:{start:i,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;for(rv={focusedElem:e,selectionRange:t},nF=!1,uL=n;null!==uL;)if(e=(n=uL).child,0!=(1028&n.subtreeFlags)&&null!==e)e.return=n,uL=e;else for(;null!==uL;){n=uL;try{var h=n.alternate;if(0!=(1024&n.flags))switch(n.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var g=h.memoizedProps,v=h.memoizedState,y=n.stateNode,b=y.getSnapshotBeforeUpdate(n.elementType===n.type?g:aG(n.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var k=n.stateNode.containerInfo;1===k.nodeType?k.textContent=\"\":9===k.nodeType&&k.documentElement&&k.removeChild(k.documentElement);break;default:throw Error(f(163))}}catch(e){oV(n,n.return,e)}if(null!==(e=n.sibling)){e.return=n.return,uL=e;break}uL=n.return}h=uF,uF=!1}(e,t),uQ(t,e),function(e){var n=tV(),t=e.focusedElem,r=e.selectionRange;if(n!==t&&t&&t.ownerDocument&&function e(n,t){return!!n&&!!t&&(n===t||(!n||3!==n.nodeType)&&(t&&3===t.nodeType?e(n,t.parentNode):\"contains\"in n?n.contains(t):!!n.compareDocumentPosition&&!!(16&n.compareDocumentPosition(t))))}(t.ownerDocument.documentElement,t)){if(null!==r&&t$(t)){if(n=r.start,void 0===(e=r.end)&&(e=n),\"selectionStart\"in t)t.selectionStart=n,t.selectionEnd=Math.min(e,t.value.length);else if((e=(n=t.ownerDocument||document)&&n.defaultView||window).getSelection){e=e.getSelection();var l=t.textContent.length,a=Math.min(r.start,l);r=void 0===r.end?a:Math.min(r.end,l),!e.extend&&a>r&&(l=r,r=a,a=l),l=tU(t,a);var u=tU(t,r);l&&u&&(1!==e.rangeCount||e.anchorNode!==l.node||e.anchorOffset!==l.offset||e.focusNode!==u.node||e.focusOffset!==u.offset)&&((n=n.createRange()).setStart(l.node,l.offset),e.removeAllRanges(),a>r?(e.addRange(n),e.extend(u.node,u.offset)):(n.setEnd(u.node,u.offset),e.addRange(n)))}}for(n=[],e=t;e=e.parentNode;)1===e.nodeType&&n.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(\"function\"==typeof t.focus&&t.focus(),t=0;t<n.length;t++)(e=n[t]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}(rv),nF=!!rg,rv=rg=null,e.current=t,p=t,m=e,h=l,uL=p,function e(n,t,r){for(var l=0!=(1&n.mode);null!==uL;){var a=uL,u=a.child;if(22===a.tag&&l){var o=null!==a.memoizedState||uN;if(!o){var i=a.alternate,s=null!==i&&null!==i.memoizedState||uz;i=uN;var c=uz;if(uN=o,(uz=s)&&!c)for(uL=a;null!==uL;)s=(o=uL).child,22===o.tag&&null!==o.memoizedState?uX(a):null!==s?(s.return=o,uL=s):uX(a);for(;null!==u;)uL=u,e(u,t,r),u=u.sibling;uL=a,uN=i,uz=c}uK(n,t,r)}else 0!=(8772&a.subtreeFlags)&&null!==u?(u.return=a,uL=u):uK(n,t,r)}}(p,m,h),eG(),u1=v,ns=g,u0.transition=a}else e.current=t;oc&&(oc=!1,of=e,od=l),0===(a=e.pendingLanes)&&(os=null);var y=t.stateNode;if(e5&&\"function\"==typeof e5.onCommitFiberRoot)try{e5.onCommitFiberRoot(e8,y,void 0,128==(128&y.current.flags))}catch(e){}if(ok(e,eZ()),null!==n)for(r=e.onRecoverableError,t=0;t<n.length;t++)r((l=n[t]).value,{componentStack:l.stack,digest:l.digest});if(oo)throw oo=!1,e=oi,oi=null,e;0!=(1&od)&&0!==e.tag&&oI(),0!=(1&(a=e.pendingLanes))?e===om?op++:(op=0,om=e):op=0,r4()}}(e,n,t,r)}finally{u0.transition=l,ns=r}return null}function oI(){if(null!==of){var e=nc(od),n=u0.transition,t=ns;try{if(u0.transition=null,ns=16>e?16:e,null===of)var r=!1;else{if(e=of,of=null,od=0,0!=(6&u1))throw Error(f(331));var l=u1;for(u1|=4,uL=e.current;null!==uL;){var a=uL,u=a.child;if(0!=(16&uL.flags)){var o=a.deletions;if(null!==o){for(var i=0;i<o.length;i++){var s=o[i];for(uL=s;null!==uL;){var c=uL;switch(c.tag){case 0:case 11:case 15:uO(8,c,a)}var d=c.child;if(null!==d)d.return=c,uL=d;else for(;null!==uL;){var p=(c=uL).sibling,m=c.return;if(!function e(n){var t=n.alternate;null!==t&&(n.alternate=null,e(t)),n.child=null,n.deletions=null,n.sibling=null,5===n.tag&&null!==(t=n.stateNode)&&(delete t[rN],delete t[rz],delete t[rL],delete t[rR],delete t[rM]),n.stateNode=null,n.return=null,n.dependencies=null,n.memoizedProps=null,n.memoizedState=null,n.pendingProps=null,n.stateNode=null,n.updateQueue=null}(c),c===s){uL=null;break}if(null!==p){p.return=m,uL=p;break}uL=m}}}var h=a.alternate;if(null!==h){var g=h.child;if(null!==g){h.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}uL=a}}if(0!=(2064&a.subtreeFlags)&&null!==u)u.return=a,uL=u;else for(;null!==uL;){if(a=uL,0!=(2048&a.flags))switch(a.tag){case 0:case 11:case 15:uO(9,a,a.return)}var y=a.sibling;if(null!==y){y.return=a.return,uL=y;break}uL=a.return}}var b=e.current;for(uL=b;null!==uL;){var k=(u=uL).child;if(0!=(2064&u.subtreeFlags)&&null!==k)k.return=u,uL=k;else for(u=b;null!==uL;){if(o=uL,0!=(2048&o.flags))try{switch(o.tag){case 0:case 11:case 15:uD(9,o)}}catch(e){oV(o,o.return,e)}if(o===u){uL=null;break}var w=o.sibling;if(null!==w){w.return=o.return,uL=w;break}uL=o.return}}if(u1=l,r4(),e5&&\"function\"==typeof e5.onPostCommitFiberRoot)try{e5.onPostCommitFiberRoot(e8,e)}catch(e){}r=!0}return r}finally{ns=t,u0.transition=n}}return!1}function oU(e,n,t){n=a9(e,n=a4(t,n),1),e=lW(e,n,1),n=ov(),null!==e&&(no(e,1,n),ok(e,n))}function oV(e,n,t){if(3===e.tag)oU(e,e,t);else for(;null!==n;){if(3===n.tag){oU(n,e,t);break}if(1===n.tag){var r=n.stateNode;if(\"function\"==typeof n.type.getDerivedStateFromError||\"function\"==typeof r.componentDidCatch&&(null===os||!os.has(r))){e=a7(n,e=a4(t,e),1),n=lW(n,e,1),e=ov(),null!==n&&(no(n,1,e),ok(n,e));break}}n=n.return}}function o$(e,n,t){var r=e.pingCache;null!==r&&r.delete(n),n=ov(),e.pingedLanes|=e.suspendedLanes&t,u2===e&&(u4&t)===t&&(4===u6||3===u6&&(0x7c00000&u4)===u4&&500>eZ()-ol?oz(e,0):on|=t),ok(e,n)}function oA(e,n){0===n&&(0==(1&e.mode)?n=1:(n=nn,0==(0x7c00000&(nn<<=1))&&(nn=4194304)));var t=ov();null!==(e=l$(e,n))&&(no(e,n,t),ok(e,t))}function oj(e){var n=e.memoizedState,t=0;null!==n&&(t=n.retryLane),oA(e,t)}function oB(e,n){var t=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;null!==l&&(t=l.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(f(314))}null!==r&&r.delete(n),oA(e,t)}function oH(e,n,t,r){this.tag=e,this.key=t,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=n,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function oW(e,n,t,r){return new oH(e,n,t,r)}function oQ(e){return!(!(e=e.prototype)||!e.isReactComponent)}function oq(e,n){var t=e.alternate;return null===t?((t=oW(e.tag,n,e.key,e.mode)).elementType=e.elementType,t.type=e.type,t.stateNode=e.stateNode,t.alternate=e,e.alternate=t):(t.pendingProps=n,t.type=e.type,t.flags=0,t.subtreeFlags=0,t.deletions=null),t.flags=0xe00000&e.flags,t.childLanes=e.childLanes,t.lanes=e.lanes,t.child=e.child,t.memoizedProps=e.memoizedProps,t.memoizedState=e.memoizedState,t.updateQueue=e.updateQueue,n=e.dependencies,t.dependencies=null===n?null:{lanes:n.lanes,firstContext:n.firstContext},t.sibling=e.sibling,t.index=e.index,t.ref=e.ref,t}function oK(e,n,t,r,l,a){var u=2;if(r=e,\"function\"==typeof e)oQ(e)&&(u=1);else if(\"string\"==typeof e)u=5;else e:switch(e){case z:return oY(t.children,l,a,n);case T:u=8,l|=8;break;case L:return(e=oW(12,t,n,2|l)).elementType=L,e.lanes=a,e;case O:return(e=oW(13,t,n,l)).elementType=O,e.lanes=a,e;case D:return(e=oW(19,t,n,l)).elementType=D,e.lanes=a,e;case V:return oX(t,l,a,n);default:if(\"object\"==typeof e&&null!==e)switch(e.$$typeof){case R:u=10;break e;case M:u=9;break e;case F:u=11;break e;case I:u=14;break e;case U:u=16,r=null;break e}throw Error(f(130,null==e?e:typeof e,\"\"))}return(n=oW(u,t,n,l)).elementType=e,n.type=r,n.lanes=a,n}function oY(e,n,t,r){return(e=oW(7,e,r,n)).lanes=t,e}function oX(e,n,t,r){return(e=oW(22,e,r,n)).elementType=V,e.lanes=t,e.stateNode={isHidden:!1},e}function oG(e,n,t){return(e=oW(6,e,null,n)).lanes=t,e}function oZ(e,n,t){return(n=oW(4,null!==e.children?e.children:[],e.key,n)).lanes=t,n.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},n}function oJ(e,n,t,r,l){this.tag=n,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=nu(0),this.expirationTimes=nu(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=nu(0),this.identifierPrefix=r,this.onRecoverableError=l,this.mutableSourceEagerHydrationData=null}function o0(e,n,t,r,l,a,u,o,i){return e=new oJ(e,n,t,o,i),1===n?(n=1,!0===a&&(n|=8)):n=0,a=oW(3,null,null,n),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:t,cache:null,transitions:null,pendingSuspenseBoundaries:null},lj(a),e}function o1(e){if(!e)return rB;e=e._reactInternals;e:{if(eH(e)!==e||1!==e.tag)throw Error(f(170));var n=e;do{switch(n.tag){case 3:n=n.stateNode.context;break e;case 1:if(rK(n.type)){n=n.stateNode.__reactInternalMemoizedMergedChildContext;break e}}n=n.return}while(null!==n);throw Error(f(171))}if(1===e.tag){var t=e.type;if(rK(t))return rG(e,t,n)}return n}function o2(e,n,t,r,l,a,u,o,i){return(e=o0(t,r,!0,e,l,a,u,o,i)).context=o1(null),t=e.current,(a=lH(r=ov(),l=oy(t))).callback=null!=n?n:null,lW(t,a,l),e.current.lanes=l,no(e,l,r),ok(e,r),e}function o3(e,n,t,r){var l=n.current,a=ov(),u=oy(l);return t=o1(t),null===n.context?n.context=t:n.pendingContext=t,(n=lH(a,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(n.callback=r),null!==(e=lW(l,n,u))&&(ob(e,l,u,a),lQ(e,l,u)),u}function o4(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function o8(e,n){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var t=e.retryLane;e.retryLane=0!==t&&t<n?t:n}}function o5(e,n){o8(e,n),(e=e.alternate)&&o8(e,n)}i=function(e,n,t){if(null!==e)if(e.memoizedProps!==n.pendingProps||rW.current)ul=!0;else{if(0==(e.lanes&t)&&0==(128&n.flags))return ul=!1,function(e,n,t){switch(n.tag){case 3:um(n),lb();break;case 5:l3(n);break;case 1:rK(n.type)&&rZ(n);break;case 4:l1(n,n.stateNode.containerInfo);break;case 10:var r=n.type._context,l=n.memoizedProps.value;rj(lN,r._currentValue),r._currentValue=l;break;case 13:if(null!==(r=n.memoizedState)){if(null!==r.dehydrated)return rj(l8,1&l8.current),n.flags|=128,null;if(0!=(t&n.child.childLanes))return uy(e,n,t);return rj(l8,1&l8.current),null!==(e=u_(e,n,t))?e.sibling:null}rj(l8,1&l8.current);break;case 19:if(r=0!=(t&n.childLanes),0!=(128&e.flags)){if(r)return ux(e,n,t);n.flags|=128}if(null!==(l=n.memoizedState)&&(l.rendering=null,l.tail=null,l.lastEffect=null),rj(l8,l8.current),!r)return null;break;case 22:case 23:return n.lanes=0,us(e,n,t)}return u_(e,n,t)}(e,n,t);ul=0!=(131072&e.flags)}else ul=!1,lc&&0!=(1048576&n.flags)&&la(n,r9,n.index);switch(n.lanes=0,n.tag){case 2:var r=n.type;uE(e,n),e=n.pendingProps;var l=rq(n,rH.current);lO(n,t),l=af(null,n,r,e,l,t);var a=ad();return n.flags|=1,\"object\"==typeof l&&null!==l&&\"function\"==typeof l.render&&void 0===l.$$typeof?(n.tag=1,n.memoizedState=null,n.updateQueue=null,rK(r)?(a=!0,rZ(n)):a=!1,n.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,lj(n),l.updater=aJ,n.stateNode=l,l._reactInternals=n,a3(n,r,e,t),n=up(null,n,r,!0,a,t)):(n.tag=0,lc&&a&&lu(n),ua(null,n,l,t),n=n.child),n;case 16:r=n.elementType;e:{switch(uE(e,n),e=n.pendingProps,r=(l=r._init)(r._payload),n.type=r,l=n.tag=function(e){if(\"function\"==typeof e)return+!!oQ(e);if(null!=e){if((e=e.$$typeof)===F)return 11;if(e===I)return 14}return 2}(r),e=aG(r,e),l){case 0:n=uf(null,n,r,e,t);break e;case 1:n=ud(null,n,r,e,t);break e;case 11:n=uu(null,n,r,e,t);break e;case 14:n=uo(null,n,r,aG(r.type,e),t);break e}throw Error(f(306,r,\"\"))}return n;case 0:return r=n.type,l=n.pendingProps,l=n.elementType===r?l:aG(r,l),uf(e,n,r,l,t);case 1:return r=n.type,l=n.pendingProps,l=n.elementType===r?l:aG(r,l),ud(e,n,r,l,t);case 3:e:{if(um(n),null===e)throw Error(f(387));r=n.pendingProps,l=(a=n.memoizedState).element,lB(e,n),lK(n,r,null,t);var u=n.memoizedState;if(r=u.element,a.isDehydrated)if(a={element:r,isDehydrated:!1,cache:u.cache,pendingSuspenseBoundaries:u.pendingSuspenseBoundaries,transitions:u.transitions},n.updateQueue.baseState=a,n.memoizedState=a,256&n.flags){l=a4(Error(f(423)),n),n=uh(e,n,r,t,l);break e}else if(r!==l){l=a4(Error(f(424)),n),n=uh(e,n,r,t,l);break e}else for(ls=r_(n.stateNode.containerInfo.firstChild),li=n,lc=!0,lf=null,t=lP(n,null,r,t),n.child=t;t;)t.flags=-3&t.flags|4096,t=t.sibling;else{if(lb(),r===l){n=u_(e,n,t);break e}ua(e,n,r,t)}n=n.child}return n;case 5:return l3(n),null===e&&lh(n),r=n.type,l=n.pendingProps,a=null!==e?e.memoizedProps:null,u=l.children,ry(r,l)?u=null:null!==a&&ry(r,a)&&(n.flags|=32),uc(e,n),ua(e,n,u,t),n.child;case 6:return null===e&&lh(n),null;case 13:return uy(e,n,t);case 4:return l1(n,n.stateNode.containerInfo),r=n.pendingProps,null===e?n.child=lC(n,null,r,t):ua(e,n,r,t),n.child;case 11:return r=n.type,l=n.pendingProps,l=n.elementType===r?l:aG(r,l),uu(e,n,r,l,t);case 7:return ua(e,n,n.pendingProps,t),n.child;case 8:case 12:return ua(e,n,n.pendingProps.children,t),n.child;case 10:e:{if(r=n.type._context,l=n.pendingProps,a=n.memoizedProps,u=l.value,rj(lN,r._currentValue),r._currentValue=u,null!==a)if(tO(a.value,u)){if(a.children===l.children&&!rW.current){n=u_(e,n,t);break e}}else for(null!==(a=n.child)&&(a.return=n);null!==a;){var o=a.dependencies;if(null!==o){u=a.child;for(var i=o.firstContext;null!==i;){if(i.context===r){if(1===a.tag){(i=lH(-1,t&-t)).tag=2;var s=a.updateQueue;if(null!==s){var c=(s=s.shared).pending;null===c?i.next=i:(i.next=c.next,c.next=i),s.pending=i}}a.lanes|=t,null!==(i=a.alternate)&&(i.lanes|=t),lF(a.return,t,n),o.lanes|=t;break}i=i.next}}else if(10===a.tag)u=a.type===n.type?null:a.child;else if(18===a.tag){if(null===(u=a.return))throw Error(f(341));u.lanes|=t,null!==(o=u.alternate)&&(o.lanes|=t),lF(u,t,n),u=a.sibling}else u=a.child;if(null!==u)u.return=a;else for(u=a;null!==u;){if(u===n){u=null;break}if(null!==(a=u.sibling)){a.return=u.return,u=a;break}u=u.return}a=u}ua(e,n,l.children,t),n=n.child}return n;case 9:return l=n.type,r=n.pendingProps.children,lO(n,t),r=r(l=lD(l)),n.flags|=1,ua(e,n,r,t),n.child;case 14:return l=aG(r=n.type,n.pendingProps),l=aG(r.type,l),uo(e,n,r,l,t);case 15:return ui(e,n,n.type,n.pendingProps,t);case 17:return r=n.type,l=n.pendingProps,l=n.elementType===r?l:aG(r,l),uE(e,n),n.tag=1,rK(r)?(e=!0,rZ(n)):e=!1,lO(n,t),a1(n,r,l),a3(n,r,l,t),up(null,n,r,!0,e,t);case 19:return ux(e,n,t);case 22:return us(e,n,t)}throw Error(f(156,n.tag))};var o6=\"function\"==typeof reportError?reportError:function(e){console.error(e)};function o9(e){this._internalRoot=e}function o7(e){this._internalRoot=e}function ie(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function it(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||\" react-mount-point-unstable \"!==e.nodeValue))}function ir(){}function il(e,n,t,r,l){var a=t._reactRootContainer;if(a){var u=a;if(\"function\"==typeof l){var o=l;l=function(){var e=o4(u);o.call(e)}}o3(n,u,e,l)}else u=function(e,n,t,r,l){if(l){if(\"function\"==typeof r){var a=r;r=function(){var e=o4(u);a.call(e)}}var u=o2(n,r,e,0,null,!1,!1,\"\",ir);return e._reactRootContainer=u,e[rT]=u.current,rl(8===e.nodeType?e.parentNode:e),oP(),u}for(;l=e.lastChild;)e.removeChild(l);if(\"function\"==typeof r){var o=r;r=function(){var e=o4(i);o.call(e)}}var i=o0(e,0,!1,null,null,!1,!1,\"\",ir);return e._reactRootContainer=i,e[rT]=i.current,rl(8===e.nodeType?e.parentNode:e),oP(function(){o3(n,i,t,r)}),i}(t,n,e,l,r);return o4(u)}o7.prototype.render=o9.prototype.render=function(e){var n=this._internalRoot;if(null===n)throw Error(f(409));o3(e,n,null,null)},o7.prototype.unmount=o9.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var n=e.containerInfo;oP(function(){o3(null,e,null,null)}),n[rT]=null}},o7.prototype.unstable_scheduleHydration=function(e){if(e){var n=nm();e={blockedOn:null,target:e,priority:n};for(var t=0;t<nx.length&&0!==n&&n<nx[t].priority;t++);nx.splice(t,0,e),0===t&&nP(e)}},nf=function(e){switch(e.tag){case 3:var n=e.stateNode;if(n.current.memoizedState.isDehydrated){var t=nt(n.pendingLanes);0!==t&&(ni(n,1|t),ok(n,eZ()),0==(6&u1)&&(oa=eZ()+500,r4()))}break;case 13:oP(function(){var n=l$(e,1);null!==n&&ob(n,e,1,ov())}),o5(e,1)}},nd=function(e){if(13===e.tag){var n=l$(e,0x8000000);null!==n&&ob(n,e,0x8000000,ov()),o5(e,0x8000000)}},np=function(e){if(13===e.tag){var n=oy(e),t=l$(e,n);null!==t&&ob(t,e,n,ov()),o5(e,n)}},nm=function(){return ns},nh=function(e,n){var t=ns;try{return ns=e,n()}finally{ns=t}},eE=function(e,n,t){switch(n){case\"input\":if(en(e,t),n=t.name,\"radio\"===t.type&&null!=n){for(t=e;t.parentNode;)t=t.parentNode;for(t=t.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+n)+'][type=\"radio\"]'),n=0;n<t.length;n++){var r=t[n];if(r!==e&&r.form===e.form){var l=rI(r);if(!l)throw Error(f(90));X(r),en(r,l)}}}break;case\"textarea\":ei(e,t);break;case\"select\":null!=(n=t.value)&&ea(e,!!t.multiple,n,!1)}},eT=oC,eL=oP;var ia={findFiberByHostInstance:rF,bundleType:0,version:\"18.3.1\",rendererPackageName:\"react-dom\"},iu={bundleType:ia.bundleType,version:ia.version,rendererPackageName:ia.rendererPackageName,rendererConfig:ia.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:C.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=eq(e))?null:e.stateNode},findFiberByHostInstance:ia.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.3.1-next-f1338f8080-20240426\"};if(\"undefined\"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var io=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!io.isDisabled&&io.supportsFiber)try{e8=io.inject(iu),e5=io}catch(e){}}n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED={usingClientEntryPoint:!1,Events:[rO,rD,rI,eN,ez,oC]},n.createPortal=function(e,n){var t=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ie(n))throw Error(f(200));return function(e,n,t){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:N,key:null==r?null:\"\"+r,children:e,containerInfo:n,implementation:t}}(e,n,null,t)},n.createRoot=function(e,n){if(!ie(e))throw Error(f(299));var t=!1,r=\"\",l=o6;return null!=n&&(!0===n.unstable_strictMode&&(t=!0),void 0!==n.identifierPrefix&&(r=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),n=o0(e,1,!1,null,null,t,!1,r,l),e[rT]=n.current,rl(8===e.nodeType?e.parentNode:e),new o9(n)},n.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var n=e._reactInternals;if(void 0===n){if(\"function\"==typeof e.render)throw Error(f(188));throw Error(f(268,e=Object.keys(e).join(\",\")))}return e=null===(e=eq(n))?null:e.stateNode},n.flushSync=function(e){return oP(e)},n.hydrate=function(e,n,t){if(!it(n))throw Error(f(200));return il(null,e,n,!0,t)},n.hydrateRoot=function(e,n,t){if(!ie(e))throw Error(f(405));var r=null!=t&&t.hydratedSources||null,l=!1,a=\"\",u=o6;if(null!=t&&(!0===t.unstable_strictMode&&(l=!0),void 0!==t.identifierPrefix&&(a=t.identifierPrefix),void 0!==t.onRecoverableError&&(u=t.onRecoverableError)),n=o2(n,null,e,1,null!=t?t:null,l,!1,a,u),e[rT]=n.current,rl(e),r)for(e=0;e<r.length;e++)l=(l=(t=r[e])._getVersion)(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,l]:n.mutableSourceEagerHydrationData.push(t,l);return new o7(n)},n.render=function(e,n,t){if(!it(n))throw Error(f(200));return il(null,e,n,!1,t)},n.unmountComponentAtNode=function(e){if(!it(e))throw Error(f(40));return!!e._reactRootContainer&&(oP(function(){il(null,null,e,!1,function(){e._reactRootContainer=null,e[rT]=null})}),!0)},n.unstable_batchedUpdates=oC,n.unstable_renderSubtreeIntoContainer=function(e,n,t,r){if(!it(t))throw Error(f(200));if(null==e||void 0===e._reactInternals)throw Error(f(38));return il(e,n,t,!1,r)},n.version=\"18.3.1-next-f1338f8080-20240426\"},7423:(e,n)=>{function t(e,n){var t=e.length;for(e.push(n);0<t;){var r=t-1>>>1,l=e[r];if(0<a(l,n))e[r]=n,e[t]=l,t=r;else break}}function r(e){return 0===e.length?null:e[0]}function l(e){if(0===e.length)return null;var n=e[0],t=e.pop();if(t!==n){e[0]=t;for(var r=0,l=e.length,u=l>>>1;r<u;){var o=2*(r+1)-1,i=e[o],s=o+1,c=e[s];if(0>a(i,t))s<l&&0>a(c,i)?(e[r]=c,e[s]=t,r=s):(e[r]=i,e[o]=t,r=o);else if(s<l&&0>a(c,t))e[r]=c,e[s]=t,r=s;else break}}return n}function a(e,n){var t=e.sortIndex-n.sortIndex;return 0!==t?t:e.id-n.id}if(\"object\"==typeof performance&&\"function\"==typeof performance.now){var u,o=performance;n.unstable_now=function(){return o.now()}}else{var i=Date,s=i.now();n.unstable_now=function(){return i.now()-s}}var c=[],f=[],d=1,p=null,m=3,h=!1,g=!1,v=!1,y=\"function\"==typeof setTimeout?setTimeout:null,b=\"function\"==typeof clearTimeout?clearTimeout:null,k=\"undefined\"!=typeof setImmediate?setImmediate:null;function w(e){for(var n=r(f);null!==n;){if(null===n.callback)l(f);else if(n.startTime<=e)l(f),n.sortIndex=n.expirationTime,t(c,n);else break;n=r(f)}}function S(e){if(v=!1,w(e),!g)if(null!==r(c))g=!0,M(x);else{var n=r(f);null!==n&&F(S,n.startTime-e)}}function x(e,t){g=!1,v&&(v=!1,b(C),C=-1),h=!0;var a=m;try{for(w(t),p=r(c);null!==p&&(!(p.expirationTime>t)||e&&!z());){var u=p.callback;if(\"function\"==typeof u){p.callback=null,m=p.priorityLevel;var o=u(p.expirationTime<=t);t=n.unstable_now(),\"function\"==typeof o?p.callback=o:p===r(c)&&l(c),w(t)}else l(c);p=r(c)}if(null!==p)var i=!0;else{var s=r(f);null!==s&&F(S,s.startTime-t),i=!1}return i}finally{p=null,m=a,h=!1}}\"undefined\"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var E=!1,_=null,C=-1,P=5,N=-1;function z(){return!(n.unstable_now()-N<P)}function T(){if(null!==_){var e=n.unstable_now();N=e;var t=!0;try{t=_(!0,e)}finally{t?u():(E=!1,_=null)}}else E=!1}if(\"function\"==typeof k)u=function(){k(T)};else if(\"undefined\"!=typeof MessageChannel){var L=new MessageChannel,R=L.port2;L.port1.onmessage=T,u=function(){R.postMessage(null)}}else u=function(){y(T,0)};function M(e){_=e,E||(E=!0,u())}function F(e,t){C=y(function(){e(n.unstable_now())},t)}n.unstable_IdlePriority=5,n.unstable_ImmediatePriority=1,n.unstable_LowPriority=4,n.unstable_NormalPriority=3,n.unstable_Profiling=null,n.unstable_UserBlockingPriority=2,n.unstable_cancelCallback=function(e){e.callback=null},n.unstable_continueExecution=function(){g||h||(g=!0,M(x))},n.unstable_forceFrameRate=function(e){0>e||125<e?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<e?Math.floor(1e3/e):5},n.unstable_getCurrentPriorityLevel=function(){return m},n.unstable_getFirstCallbackNode=function(){return r(c)},n.unstable_next=function(e){switch(m){case 1:case 2:case 3:var n=3;break;default:n=m}var t=m;m=n;try{return e()}finally{m=t}},n.unstable_pauseExecution=function(){},n.unstable_requestPaint=function(){},n.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var t=m;m=e;try{return n()}finally{m=t}},n.unstable_scheduleCallback=function(e,l,a){var u=n.unstable_now();switch(a=\"object\"==typeof a&&null!==a&&\"number\"==typeof(a=a.delay)&&0<a?u+a:u,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=0x3fffffff;break;case 4:o=1e4;break;default:o=5e3}return o=a+o,e={id:d++,callback:l,priorityLevel:e,startTime:a,expirationTime:o,sortIndex:-1},a>u?(e.sortIndex=a,t(f,e),null===r(c)&&e===r(f)&&(v?(b(C),C=-1):v=!0,F(S,a-u))):(e.sortIndex=o,t(c,e),g||h||(g=!0,M(x))),e},n.unstable_shouldYield=z,n.unstable_wrapCallback=function(e){var n=m;return function(){var t=m;m=n;try{return e.apply(this,arguments)}finally{m=t}}}},7876:(e,n,t)=>{e.exports=t(8538)},8477:(e,n,t)=>{!function e(){if(\"undefined\"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&\"function\"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=t(5549)},8538:(e,n,t)=>{var r=t(4232),l=Symbol.for(\"react.element\"),a=Symbol.for(\"react.fragment\"),u=Object.prototype.hasOwnProperty,o=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,i={key:!0,ref:!0,__self:!0,__source:!0};function s(e,n,t){var r,a={},s=null,c=null;for(r in void 0!==t&&(s=\"\"+t),void 0!==n.key&&(s=\"\"+n.key),void 0!==n.ref&&(c=n.ref),n)u.call(n,r)&&!i.hasOwnProperty(r)&&(a[r]=n[r]);if(e&&e.defaultProps)for(r in n=e.defaultProps)void 0===a[r]&&(a[r]=n[r]);return{$$typeof:l,type:e,key:s,ref:c,props:a,_owner:o.current}}n.Fragment=a,n.jsx=s,n.jsxs=s},8944:(e,n,t)=>{var r=t(8477);n.createRoot=r.createRoot,n.hydrateRoot=r.hydrateRoot},9752:(e,n,t)=>{e.exports=t(7423)}}]);",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/main-a8ee851dd69730fd.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 8713,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 8714
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 32178,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 32179
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 55324,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 55325
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 55356,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 55357
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 55453,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 55454
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 56696,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 56697
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 66528,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 66529
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'l' is assigned a value but never used.",
        "line": 1,
        "column": 74965,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 74966
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'U' is assigned a value but never used.",
        "line": 1,
        "column": 81521,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 81522
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'m' is defined but never used.",
        "line": 1,
        "column": 93862,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 93863
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'b' is defined but never used.",
        "line": 1,
        "column": 93878,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 93879
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'E' is defined but never used.",
        "line": 1,
        "column": 93894,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 93895
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is assigned a value but never used.",
        "line": 1,
        "column": 105370,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 105371
      }
    ],
    "suppressedMessages": [],
    "errorCount": 13,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[792],{303:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"AmpStateContext\",{enumerable:!0,get:function(){return n}});let n=r(4252)._(r(4232)).default.createContext({})},472:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"default\",{enumerable:!0,get:function(){return u}});let n=r(4252),o=r(7876),a=n._(r(4232)),i=r(2746);async function l(e){let{Component:t,ctx:r}=e;return{pageProps:await (0,i.loadGetInitialProps)(t,r)}}class u extends a.default.Component{render(){let{Component:e,pageProps:t}=this.props;return(0,o.jsx)(e,{...t})}}u.origGetInitialProps=l,u.getInitialProps=l,(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},536:(e,t)=>{\"use strict\";function r(e){return e.split(\"/\").map(e=>encodeURIComponent(e)).join(\"/\")}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"encodeURIPath\",{enumerable:!0,get:function(){return r}})},541:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"parseRelativeUrl\",{enumerable:!0,get:function(){return a}});let n=r(2746),o=r(8040);function a(e,t,r){void 0===r&&(r=!0);let a=new URL((0,n.getLocationOrigin)()),i=t?new URL(t,a):e.startsWith(\".\")?new URL(window.location.href):a,{pathname:l,searchParams:u,search:s,hash:c,href:f,origin:d}=new URL(e,i);if(d!==a.origin)throw Object.defineProperty(Error(\"invariant: invalid relative URL, router received \"+e),\"__NEXT_ERROR_CODE\",{value:\"E159\",enumerable:!1,configurable:!0});return{pathname:l,query:r?(0,o.searchParamsToUrlQuery)(u):void 0,search:s,hash:c,href:f.slice(d.length)}}},938:(e,t)=>{\"use strict\";function r(e){return e.startsWith(\"/\")?e:\"/\"+e}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"ensureLeadingSlash\",{enumerable:!0,get:function(){return r}})},990:(e,t)=>{\"use strict\";function r(e,t){let r={};return Object.keys(e).forEach(n=>{t.includes(n)||(r[n]=e[n])}),r}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"omit\",{enumerable:!0,get:function(){return r}})},1017:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"RedirectStatusCode\",{enumerable:!0,get:function(){return r}});var r=function(e){return e[e.SeeOther=303]=\"SeeOther\",e[e.TemporaryRedirect=307]=\"TemporaryRedirect\",e[e.PermanentRedirect=308]=\"PermanentRedirect\",e}({});(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1025:(e,t,r)=>{\"use strict\";function n(e){return e}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"removeBasePath\",{enumerable:!0,get:function(){return n}}),r(6023),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1226:()=>{},1291:()=>{\"trimStart\"in String.prototype||(String.prototype.trimStart=String.prototype.trimLeft),\"trimEnd\"in String.prototype||(String.prototype.trimEnd=String.prototype.trimRight),\"description\"in Symbol.prototype||Object.defineProperty(Symbol.prototype,\"description\",{configurable:!0,get:function(){var e=/\\((.*)\\)/.exec(this.toString());return e?e[1]:void 0}}),Array.prototype.flat||(Array.prototype.flat=function(e,t){return t=this.concat.apply([],this),e>1&&t.some(Array.isArray)?t.flat(e-1):t},Array.prototype.flatMap=function(e,t){return this.map(e,t).flat()}),Promise.prototype.finally||(Promise.prototype.finally=function(e){if(\"function\"!=typeof e)return this.then(e,e);var t=this.constructor||Promise;return this.then(function(r){return t.resolve(e()).then(function(){return r})},function(r){return t.resolve(e()).then(function(){throw r})})}),Object.fromEntries||(Object.fromEntries=function(e){return Array.from(e).reduce(function(e,t){return e[t[0]]=t[1],e},{})}),Array.prototype.at||(Array.prototype.at=function(e){var t=Math.trunc(e)||0;if(t<0&&(t+=this.length),!(t<0||t>=this.length))return this[t]}),Object.hasOwn||(Object.hasOwn=function(e,t){if(null==e)throw TypeError(\"Cannot convert undefined or null to object\");return Object.prototype.hasOwnProperty.call(Object(e),t)}),\"canParse\"in URL||(URL.canParse=function(e,t){try{return new URL(e,t),!0}catch(e){return!1}})},1318:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{RouteAnnouncer:function(){return u},default:function(){return s}});let n=r(4252),o=r(7876),a=n._(r(4232)),i=r(4294),l={border:0,clip:\"rect(0 0 0 0)\",height:\"1px\",margin:\"-1px\",overflow:\"hidden\",padding:0,position:\"absolute\",top:0,width:\"1px\",whiteSpace:\"nowrap\",wordWrap:\"normal\"},u=()=>{let{asPath:e}=(0,i.useRouter)(),[t,r]=a.default.useState(\"\"),n=a.default.useRef(e);return a.default.useEffect(()=>{if(n.current!==e)if(n.current=e,document.title)r(document.title);else{var t;let n=document.querySelector(\"h1\");r((null!=(t=null==n?void 0:n.innerText)?t:null==n?void 0:n.textContent)||e)}},[e]),(0,o.jsx)(\"p\",{\"aria-live\":\"assertive\",id:\"__next-route-announcer__\",role:\"alert\",style:l,children:t})},s=u;(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1533:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"isLocalURL\",{enumerable:!0,get:function(){return a}});let n=r(2746),o=r(6023);function a(e){if(!(0,n.isAbsoluteUrl)(e))return!0;try{let t=(0,n.getLocationOrigin)(),r=new URL(e,t);return r.origin===t&&(0,o.hasBasePath)(r.pathname)}catch(e){return!1}}},1827:(e,t)=>{\"use strict\";function r(e,t){return void 0===t&&(t=\"\"),(\"/\"===e?\"/index\":/^\\/index(\\/|$)/.test(e)?\"/index\"+e:e)+t}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"default\",{enumerable:!0,get:function(){return r}})},1862:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"normalizeLocalePath\",{enumerable:!0,get:function(){return n}});let r=new WeakMap;function n(e,t){let n;if(!t)return{pathname:e};let o=r.get(t);o||(o=t.map(e=>e.toLowerCase()),r.set(t,o));let a=e.split(\"/\",2);if(!a[1])return{pathname:e};let i=a[1].toLowerCase(),l=o.indexOf(i);return l<0?{pathname:e}:(n=t[l],{pathname:e=e.slice(n.length+1)||\"/\",detectedLocale:n})}},1921:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"resolveHref\",{enumerable:!0,get:function(){return f}});let n=r(8040),o=r(8480),a=r(990),i=r(2746),l=r(8205),u=r(1533),s=r(3069),c=r(8069);function f(e,t,r){let f,d=\"string\"==typeof t?t:(0,o.formatWithValidation)(t),p=d.match(/^[a-zA-Z]{1,}:\\/\\//),h=p?d.slice(p[0].length):d;if((h.split(\"?\",1)[0]||\"\").match(/(\\/\\/|\\\\)/)){console.error(\"Invalid href '\"+d+\"' passed to next/router in page: '\"+e.pathname+\"'. Repeated forward-slashes (//) or backslashes \\\\ are not valid in the href.\");let t=(0,i.normalizeRepeatedSlashes)(h);d=(p?p[0]:\"\")+t}if(!(0,u.isLocalURL)(d))return r?[d]:d;try{f=new URL(d.startsWith(\"#\")?e.asPath:e.pathname,\"http://n\")}catch(e){f=new URL(\"/\",\"http://n\")}try{let e=new URL(d,f);e.pathname=(0,l.normalizePathTrailingSlash)(e.pathname);let t=\"\";if((0,s.isDynamicRoute)(e.pathname)&&e.searchParams&&r){let r=(0,n.searchParamsToUrlQuery)(e.searchParams),{result:i,params:l}=(0,c.interpolateAs)(e.pathname,e.pathname,r);i&&(t=(0,o.formatWithValidation)({pathname:i,hash:e.hash,query:(0,a.omit)(r,l)}))}let i=e.origin===f.origin?e.href.slice(e.origin.length):e.href;return r?[i,t||i]:i}catch(e){return r?[d]:d}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},1924:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"escapeStringRegexp\",{enumerable:!0,get:function(){return o}});let r=/[|\\\\{}()[\\]^$+*?.-]/,n=/[|\\\\{}()[\\]^$+*?.-]/g;function o(e){return r.test(e)?e.replace(n,\"\\\\$&\"):e}},2092:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"addBasePath\",{enumerable:!0,get:function(){return a}});let n=r(2889),o=r(8205);function a(e,t){return(0,o.normalizePathTrailingSlash)((0,n.addPathPrefix)(e,\"\"))}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},2326:(e,t)=>{\"use strict\";function r(e){return\"/api\"===e||!!(null==e?void 0:e.startsWith(\"/api/\"))}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"isAPIRoute\",{enumerable:!0,get:function(){return r}})},2455:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"HTML_LIMITED_BOT_UA_RE\",{enumerable:!0,get:function(){return r}});let r=/Mediapartners-Google|Slurp|DuckDuckBot|baiduspider|yandex|sogou|bitlybot|tumblr|vkShare|quora link preview|redditbot|ia_archiver|Bingbot|BingPreview|applebot|facebookexternalhit|facebookcatalog|Twitterbot|LinkedInBot|Slackbot|Discordbot|WhatsApp|SkypeUriPreview|Yeti/i},2591:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{REDIRECT_ERROR_CODE:function(){return o},RedirectType:function(){return a},isRedirectError:function(){return i}});let n=r(1017),o=\"NEXT_REDIRECT\";var a=function(e){return e.push=\"push\",e.replace=\"replace\",e}({});function i(e){if(\"object\"!=typeof e||null===e||!(\"digest\"in e)||\"string\"!=typeof e.digest)return!1;let t=e.digest.split(\";\"),[r,a]=t,i=t.slice(2,-2).join(\";\"),l=Number(t.at(-2));return r===o&&(\"replace\"===a||\"push\"===a)&&\"string\"==typeof i&&!isNaN(l)&&l in n.RedirectStatusCode}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},2616:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"detectDomainLocale\",{enumerable:!0,get:function(){return r}});let r=function(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r]};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},2746:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{DecodeError:function(){return h},MiddlewareNotFoundError:function(){return b},MissingStaticPage:function(){return g},NormalizeError:function(){return _},PageNotFoundError:function(){return m},SP:function(){return d},ST:function(){return p},WEB_VITALS:function(){return r},execOnce:function(){return n},getDisplayName:function(){return u},getLocationOrigin:function(){return i},getURL:function(){return l},isAbsoluteUrl:function(){return a},isResSent:function(){return s},loadGetInitialProps:function(){return f},normalizeRepeatedSlashes:function(){return c},stringifyError:function(){return E}});let r=[\"CLS\",\"FCP\",\"FID\",\"INP\",\"LCP\",\"TTFB\"];function n(e){let t,r=!1;return function(){for(var n=arguments.length,o=Array(n),a=0;a<n;a++)o[a]=arguments[a];return r||(r=!0,t=e(...o)),t}}let o=/^[a-zA-Z][a-zA-Z\\d+\\-.]*?:/,a=e=>o.test(e);function i(){let{protocol:e,hostname:t,port:r}=window.location;return e+\"//\"+t+(r?\":\"+r:\"\")}function l(){let{href:e}=window.location,t=i();return e.substring(t.length)}function u(e){return\"string\"==typeof e?e:e.displayName||e.name||\"Unknown\"}function s(e){return e.finished||e.headersSent}function c(e){let t=e.split(\"?\");return t[0].replace(/\\\\/g,\"/\").replace(/\\/\\/+/g,\"/\")+(t[1]?\"?\"+t.slice(1).join(\"?\"):\"\")}async function f(e,t){let r=t.res||t.ctx&&t.ctx.res;if(!e.getInitialProps)return t.ctx&&t.Component?{pageProps:await f(t.Component,t.ctx)}:{};let n=await e.getInitialProps(t);if(r&&s(r))return n;if(!n)throw Object.defineProperty(Error('\"'+u(e)+'.getInitialProps()\" should resolve to an object. But found \"'+n+'\" instead.'),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0});return n}let d=\"undefined\"!=typeof performance,p=d&&[\"mark\",\"measure\",\"getEntriesByName\"].every(e=>\"function\"==typeof performance[e]);class h extends Error{}class _ extends Error{}class m extends Error{constructor(e){super(),this.code=\"ENOENT\",this.name=\"PageNotFoundError\",this.message=\"Cannot find module for page: \"+e}}class g extends Error{constructor(e,t){super(),this.message=\"Failed to load static file for page: \"+e+\" \"+t}}class b extends Error{constructor(){super(),this.code=\"ENOENT\",this.message=\"Cannot find the middleware module\"}}function E(e){return JSON.stringify({message:e.message,stack:e.stack})}},2792:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"default\",{enumerable:!0,get:function(){return d}});let n=r(4252),o=r(2092),a=r(8069),i=n._(r(1827)),l=r(4591),u=r(9163),s=r(541),c=r(4902),f=r(7176);r(3802);class d{getPageList(){return(0,f.getClientBuildManifest)().then(e=>e.sortedPages)}getMiddleware(){return window.__MIDDLEWARE_MATCHERS=[],window.__MIDDLEWARE_MATCHERS}getDataHref(e){let{asPath:t,href:r,locale:n}=e,{pathname:f,query:d,search:p}=(0,s.parseRelativeUrl)(r),{pathname:h}=(0,s.parseRelativeUrl)(t),_=(0,c.removeTrailingSlash)(f);if(\"/\"!==_[0])throw Object.defineProperty(Error('Route name should start with a \"/\", got \"'+_+'\"'),\"__NEXT_ERROR_CODE\",{value:\"E303\",enumerable:!1,configurable:!0});var m=e.skipInterpolation?h:(0,u.isDynamicRoute)(_)?(0,a.interpolateAs)(f,h,d).result:_;let g=(0,i.default)((0,c.removeTrailingSlash)((0,l.addLocale)(m,n)),\".json\");return(0,o.addBasePath)(\"/_next/data/\"+this.buildId+g+p,!0)}_isSsg(e){return this.promisedSsgManifest.then(t=>t.has(e))}loadPage(e){return this.routeLoader.loadRoute(e).then(e=>{if(\"component\"in e)return{page:e.component,mod:e.exports,styleSheets:e.styles.map(e=>({href:e.href,text:e.content}))};throw e.error})}prefetch(e){return this.routeLoader.prefetch(e)}constructor(e,t){this.routeLoader=(0,f.createRouteLoader)(t),this.buildId=e,this.assetPrefix=t,this.promisedSsgManifest=new Promise(e=>{window.__SSG_MANIFEST?e(window.__SSG_MANIFEST):window.__SSG_MANIFEST_CB=()=>{e(window.__SSG_MANIFEST)}})}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},2850:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{AppRouterContext:function(){return o},GlobalLayoutRouterContext:function(){return i},LayoutRouterContext:function(){return a},MissingSlotContext:function(){return u},TemplateContext:function(){return l}});let n=r(4252)._(r(4232)),o=n.default.createContext(null),a=n.default.createContext(null),i=n.default.createContext(null),l=n.default.createContext(null),u=n.default.createContext(new Set)},2889:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"addPathPrefix\",{enumerable:!0,get:function(){return o}});let n=r(3670);function o(e,t){if(!e.startsWith(\"/\")||!t)return e;let{pathname:r,query:o,hash:a}=(0,n.parsePath)(e);return\"\"+t+r+o+a}},2917:(e,t)=>{\"use strict\";let r;Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{default:function(){return n},setConfig:function(){return o}});let n=()=>r;function o(e){r=e}},2959:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{normalizeAppPath:function(){return a},normalizeRscURL:function(){return i}});let n=r(938),o=r(8714);function a(e){return(0,n.ensureLeadingSlash)(e.split(\"/\").reduce((e,t,r,n)=>!t||(0,o.isGroupSegment)(t)||\"@\"===t[0]||(\"page\"===t||\"route\"===t)&&r===n.length-1?e:e+\"/\"+t,\"\"))}function i(e){return e.replace(/\\.rsc($|\\?)/,\"$1\")}},3069:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{getSortedRouteObjects:function(){return n.getSortedRouteObjects},getSortedRoutes:function(){return n.getSortedRoutes},isDynamicRoute:function(){return o.isDynamicRoute}});let n=r(3703),o=r(9163)},3090:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"Portal\",{enumerable:!0,get:function(){return a}});let n=r(4232),o=r(8477),a=e=>{let{children:t,type:r}=e,[a,i]=(0,n.useState)(null);return(0,n.useEffect)(()=>{let e=document.createElement(r);return document.body.appendChild(e),i(e),()=>{document.body.removeChild(e)}},[r]),a?(0,o.createPortal)(t,a):null};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3123:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{BailoutToCSRError:function(){return n},isBailoutToCSRError:function(){return o}});let r=\"BAILOUT_TO_CLIENT_SIDE_RENDERING\";class n extends Error{constructor(e){super(\"Bail out to client-side rendering: \"+e),this.reason=e,this.digest=r}}function o(e){return\"object\"==typeof e&&null!==e&&\"digest\"in e&&e.digest===r}},3132:(e,t)=>{\"use strict\";function r(e,t){if(void 0===t&&(t={}),t.onlyHashChange)return void e();let r=document.documentElement,n=r.style.scrollBehavior;r.style.scrollBehavior=\"auto\",t.dontForceLayout||r.getClientRects(),e(),r.style.scrollBehavior=n}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"handleSmoothScroll\",{enumerable:!0,get:function(){return r}})},3407:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"getNextPathnameInfo\",{enumerable:!0,get:function(){return i}});let n=r(1862),o=r(6292),a=r(3716);function i(e,t){var r,i;let{basePath:l,i18n:u,trailingSlash:s}=null!=(r=t.nextConfig)?r:{},c={pathname:e,trailingSlash:\"/\"!==e?e.endsWith(\"/\"):s};l&&(0,a.pathHasPrefix)(c.pathname,l)&&(c.pathname=(0,o.removePathPrefix)(c.pathname,l),c.basePath=l);let f=c.pathname;if(c.pathname.startsWith(\"/_next/data/\")&&c.pathname.endsWith(\".json\")){let e=c.pathname.replace(/^\\/_next\\/data\\//,\"\").replace(/\\.json$/,\"\").split(\"/\");c.buildId=e[0],f=\"index\"!==e[1]?\"/\"+e.slice(1).join(\"/\"):\"/\",!0===t.parseData&&(c.pathname=f)}if(u){let e=t.i18nProvider?t.i18nProvider.analyze(c.pathname):(0,n.normalizeLocalePath)(c.pathname,u.locales);c.locale=e.detectedLocale,c.pathname=null!=(i=e.pathname)?i:c.pathname,!e.detectedLocale&&c.buildId&&(e=t.i18nProvider?t.i18nProvider.analyze(f):(0,n.normalizeLocalePath)(f,u.locales)).detectedLocale&&(c.locale=e.detectedLocale)}return c}},3575:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"getReactStitchedError\",{enumerable:!0,get:function(){return s}});let n=r(4252),o=n._(r(4232)),a=n._(r(6240)),i=r(8089),l=\"react-stack-bottom-frame\",u=RegExp(\"(at \"+l+\" )|(\"+l+\"\\\\@)\");function s(e){let t=(0,a.default)(e),r=t&&e.stack||\"\",n=t?e.message:\"\",l=r.split(\"\\n\"),s=l.findIndex(e=>u.test(e)),c=s>=0?l.slice(0,s).join(\"\\n\"):r,f=Object.defineProperty(Error(n),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0});return Object.assign(f,e),(0,i.copyNextErrorCode)(e,f),f.stack=c,function(e){if(!o.default.captureOwnerStack)return;let t=e.stack||\"\",r=o.default.captureOwnerStack();r&&!1===t.endsWith(r)&&(e.stack=t+=r)}(f),f}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3670:(e,t)=>{\"use strict\";function r(e){let t=e.indexOf(\"#\"),r=e.indexOf(\"?\"),n=r>-1&&(t<0||r<t);return n||t>-1?{pathname:e.substring(0,n?r:t),query:n?e.substring(r,t>-1?t:void 0):\"\",hash:t>-1?e.slice(t):\"\"}:{pathname:e,query:\"\",hash:\"\"}}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"parsePath\",{enumerable:!0,get:function(){return r}})},3703:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{getSortedRouteObjects:function(){return o},getSortedRoutes:function(){return n}});class r{insert(e){this._insert(e.split(\"/\").filter(Boolean),[],!1)}smoosh(){return this._smoosh()}_smoosh(e){void 0===e&&(e=\"/\");let t=[...this.children.keys()].sort();null!==this.slugName&&t.splice(t.indexOf(\"[]\"),1),null!==this.restSlugName&&t.splice(t.indexOf(\"[...]\"),1),null!==this.optionalRestSlugName&&t.splice(t.indexOf(\"[[...]]\"),1);let r=t.map(t=>this.children.get(t)._smoosh(\"\"+e+t+\"/\")).reduce((e,t)=>[...e,...t],[]);if(null!==this.slugName&&r.push(...this.children.get(\"[]\")._smoosh(e+\"[\"+this.slugName+\"]/\")),!this.placeholder){let t=\"/\"===e?\"/\":e.slice(0,-1);if(null!=this.optionalRestSlugName)throw Object.defineProperty(Error('You cannot define a route with the same specificity as a optional catch-all route (\"'+t+'\" and \"'+t+\"[[...\"+this.optionalRestSlugName+']]\").'),\"__NEXT_ERROR_CODE\",{value:\"E458\",enumerable:!1,configurable:!0});r.unshift(t)}return null!==this.restSlugName&&r.push(...this.children.get(\"[...]\")._smoosh(e+\"[...\"+this.restSlugName+\"]/\")),null!==this.optionalRestSlugName&&r.push(...this.children.get(\"[[...]]\")._smoosh(e+\"[[...\"+this.optionalRestSlugName+\"]]/\")),r}_insert(e,t,n){if(0===e.length){this.placeholder=!1;return}if(n)throw Object.defineProperty(Error(\"Catch-all must be the last part of the URL.\"),\"__NEXT_ERROR_CODE\",{value:\"E392\",enumerable:!1,configurable:!0});let o=e[0];if(o.startsWith(\"[\")&&o.endsWith(\"]\")){let r=o.slice(1,-1),i=!1;if(r.startsWith(\"[\")&&r.endsWith(\"]\")&&(r=r.slice(1,-1),i=!0),r.startsWith(\"…\"))throw Object.defineProperty(Error(\"Detected a three-dot character ('…') at ('\"+r+\"'). Did you mean ('...')?\"),\"__NEXT_ERROR_CODE\",{value:\"E147\",enumerable:!1,configurable:!0});if(r.startsWith(\"...\")&&(r=r.substring(3),n=!0),r.startsWith(\"[\")||r.endsWith(\"]\"))throw Object.defineProperty(Error(\"Segment names may not start or end with extra brackets ('\"+r+\"').\"),\"__NEXT_ERROR_CODE\",{value:\"E421\",enumerable:!1,configurable:!0});if(r.startsWith(\".\"))throw Object.defineProperty(Error(\"Segment names may not start with erroneous periods ('\"+r+\"').\"),\"__NEXT_ERROR_CODE\",{value:\"E288\",enumerable:!1,configurable:!0});function a(e,r){if(null!==e&&e!==r)throw Object.defineProperty(Error(\"You cannot use different slug names for the same dynamic path ('\"+e+\"' !== '\"+r+\"').\"),\"__NEXT_ERROR_CODE\",{value:\"E337\",enumerable:!1,configurable:!0});t.forEach(e=>{if(e===r)throw Object.defineProperty(Error('You cannot have the same slug name \"'+r+'\" repeat within a single dynamic path'),\"__NEXT_ERROR_CODE\",{value:\"E247\",enumerable:!1,configurable:!0});if(e.replace(/\\W/g,\"\")===o.replace(/\\W/g,\"\"))throw Object.defineProperty(Error('You cannot have the slug names \"'+e+'\" and \"'+r+'\" differ only by non-word symbols within a single dynamic path'),\"__NEXT_ERROR_CODE\",{value:\"E499\",enumerable:!1,configurable:!0})}),t.push(r)}if(n)if(i){if(null!=this.restSlugName)throw Object.defineProperty(Error('You cannot use both an required and optional catch-all route at the same level (\"[...'+this.restSlugName+']\" and \"'+e[0]+'\" ).'),\"__NEXT_ERROR_CODE\",{value:\"E299\",enumerable:!1,configurable:!0});a(this.optionalRestSlugName,r),this.optionalRestSlugName=r,o=\"[[...]]\"}else{if(null!=this.optionalRestSlugName)throw Object.defineProperty(Error('You cannot use both an optional and required catch-all route at the same level (\"[[...'+this.optionalRestSlugName+']]\" and \"'+e[0]+'\").'),\"__NEXT_ERROR_CODE\",{value:\"E300\",enumerable:!1,configurable:!0});a(this.restSlugName,r),this.restSlugName=r,o=\"[...]\"}else{if(i)throw Object.defineProperty(Error('Optional route parameters are not yet supported (\"'+e[0]+'\").'),\"__NEXT_ERROR_CODE\",{value:\"E435\",enumerable:!1,configurable:!0});a(this.slugName,r),this.slugName=r,o=\"[]\"}}this.children.has(o)||this.children.set(o,new r),this.children.get(o)._insert(e.slice(1),t,n)}constructor(){this.placeholder=!0,this.children=new Map,this.slugName=null,this.restSlugName=null,this.optionalRestSlugName=null}}function n(e){let t=new r;return e.forEach(e=>t.insert(e)),t.smoosh()}function o(e,t){let r={},o=[];for(let n=0;n<e.length;n++){let a=t(e[n]);r[a]=n,o[n]=a}return n(o).map(t=>e[r[t]])}},3716:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"pathHasPrefix\",{enumerable:!0,get:function(){return o}});let n=r(3670);function o(e,t){if(\"string\"!=typeof e)return!1;let{pathname:r}=(0,n.parsePath)(e);return r===t||r.startsWith(t+\"/\")}},3718:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),r(8757),self.__next_set_public_path__=e=>{r.p=e},(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3776:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"default\",{enumerable:!0,get:function(){return i}});let n=r(4232),o=n.useLayoutEffect,a=n.useEffect;function i(e){let{headManager:t,reduceComponentsToState:r}=e;function i(){if(t&&t.mountedInstances){let o=n.Children.toArray(Array.from(t.mountedInstances).filter(Boolean));t.updateHead(r(o,e))}}return o(()=>{var r;return null==t||null==(r=t.mountedInstances)||r.add(e.children),()=>{var r;null==t||null==(r=t.mountedInstances)||r.delete(e.children)}}),o(()=>(t&&(t._pendingUpdate=i),()=>{t&&(t._pendingUpdate=i)})),a(()=>(t&&t._pendingUpdate&&(t._pendingUpdate(),t._pendingUpdate=null),()=>{t&&t._pendingUpdate&&(t._pendingUpdate(),t._pendingUpdate=null)})),null}},3802:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{APP_BUILD_MANIFEST:function(){return E},APP_CLIENT_INTERNALS:function(){return Q},APP_PATHS_MANIFEST:function(){return m},APP_PATH_ROUTES_MANIFEST:function(){return g},BARREL_OPTIMIZATION_PREFIX:function(){return X},BLOCKED_PAGES:function(){return U},BUILD_ID_FILE:function(){return D},BUILD_MANIFEST:function(){return b},CLIENT_PUBLIC_FILES_PATH:function(){return k},CLIENT_REFERENCE_MANIFEST:function(){return W},CLIENT_STATIC_FILES_PATH:function(){return F},CLIENT_STATIC_FILES_RUNTIME_AMP:function(){return Z},CLIENT_STATIC_FILES_RUNTIME_MAIN:function(){return K},CLIENT_STATIC_FILES_RUNTIME_MAIN_APP:function(){return $},CLIENT_STATIC_FILES_RUNTIME_POLYFILLS:function(){return et},CLIENT_STATIC_FILES_RUNTIME_POLYFILLS_SYMBOL:function(){return er},CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH:function(){return J},CLIENT_STATIC_FILES_RUNTIME_WEBPACK:function(){return ee},COMPILER_INDEXES:function(){return a},COMPILER_NAMES:function(){return o},CONFIG_FILES:function(){return L},DEFAULT_RUNTIME_WEBPACK:function(){return en},DEFAULT_SANS_SERIF_FONT:function(){return eu},DEFAULT_SERIF_FONT:function(){return el},DEV_CLIENT_MIDDLEWARE_MANIFEST:function(){return N},DEV_CLIENT_PAGES_MANIFEST:function(){return C},DYNAMIC_CSS_MANIFEST:function(){return Y},EDGE_RUNTIME_WEBPACK:function(){return eo},EDGE_UNSUPPORTED_NODE_APIS:function(){return ep},EXPORT_DETAIL:function(){return O},EXPORT_MARKER:function(){return R},FUNCTIONS_CONFIG_MANIFEST:function(){return y},IMAGES_MANIFEST:function(){return T},INTERCEPTION_ROUTE_REWRITE_MANIFEST:function(){return z},MIDDLEWARE_BUILD_MANIFEST:function(){return q},MIDDLEWARE_MANIFEST:function(){return w},MIDDLEWARE_REACT_LOADABLE_MANIFEST:function(){return V},MODERN_BROWSERSLIST_TARGET:function(){return n.default},NEXT_BUILTIN_DOCUMENT:function(){return H},NEXT_FONT_MANIFEST:function(){return v},PAGES_MANIFEST:function(){return h},PHASE_DEVELOPMENT_SERVER:function(){return f},PHASE_EXPORT:function(){return u},PHASE_INFO:function(){return p},PHASE_PRODUCTION_BUILD:function(){return s},PHASE_PRODUCTION_SERVER:function(){return c},PHASE_TEST:function(){return d},PRERENDER_MANIFEST:function(){return S},REACT_LOADABLE_MANIFEST:function(){return x},ROUTES_MANIFEST:function(){return j},RSC_MODULE_TYPES:function(){return ed},SERVER_DIRECTORY:function(){return M},SERVER_FILES_MANIFEST:function(){return A},SERVER_PROPS_ID:function(){return ei},SERVER_REFERENCE_MANIFEST:function(){return G},STATIC_PROPS_ID:function(){return ea},STATIC_STATUS_PAGES:function(){return es},STRING_LITERAL_DROP_BUNDLE:function(){return B},SUBRESOURCE_INTEGRITY_MANIFEST:function(){return P},SYSTEM_ENTRYPOINTS:function(){return eh},TRACE_OUTPUT_VERSION:function(){return ec},TURBOPACK_CLIENT_MIDDLEWARE_MANIFEST:function(){return I},TURBO_TRACE_DEFAULT_MEMORY_LIMIT:function(){return ef},UNDERSCORE_NOT_FOUND_ROUTE:function(){return i},UNDERSCORE_NOT_FOUND_ROUTE_ENTRY:function(){return l},WEBPACK_STATS:function(){return _}});let n=r(4252)._(r(6582)),o={client:\"client\",server:\"server\",edgeServer:\"edge-server\"},a={[o.client]:0,[o.server]:1,[o.edgeServer]:2},i=\"/_not-found\",l=\"\"+i+\"/page\",u=\"phase-export\",s=\"phase-production-build\",c=\"phase-production-server\",f=\"phase-development-server\",d=\"phase-test\",p=\"phase-info\",h=\"pages-manifest.json\",_=\"webpack-stats.json\",m=\"app-paths-manifest.json\",g=\"app-path-routes-manifest.json\",b=\"build-manifest.json\",E=\"app-build-manifest.json\",y=\"functions-config-manifest.json\",P=\"subresource-integrity-manifest\",v=\"next-font-manifest\",R=\"export-marker.json\",O=\"export-detail.json\",S=\"prerender-manifest.json\",j=\"routes-manifest.json\",T=\"images-manifest.json\",A=\"required-server-files.json\",C=\"_devPagesManifest.json\",w=\"middleware-manifest.json\",I=\"_clientMiddlewareManifest.json\",N=\"_devMiddlewareManifest.json\",x=\"react-loadable-manifest.json\",M=\"server\",L=[\"next.config.js\",\"next.config.mjs\",\"next.config.ts\"],D=\"BUILD_ID\",U=[\"/_document\",\"/_app\",\"/_error\"],k=\"public\",F=\"static\",B=\"__NEXT_DROP_CLIENT_FILE__\",H=\"__NEXT_BUILTIN_DOCUMENT__\",X=\"__barrel_optimize__\",W=\"client-reference-manifest\",G=\"server-reference-manifest\",q=\"middleware-build-manifest\",V=\"middleware-react-loadable-manifest\",z=\"interception-route-rewrite-manifest\",Y=\"dynamic-css-manifest\",K=\"main\",$=\"\"+K+\"-app\",Q=\"app-pages-internals\",J=\"react-refresh\",Z=\"amp\",ee=\"webpack\",et=\"polyfills\",er=Symbol(et),en=\"webpack-runtime\",eo=\"edge-runtime-webpack\",ea=\"__N_SSG\",ei=\"__N_SSP\",el={name:\"Times New Roman\",xAvgCharWidth:821,azAvgWidth:854.3953488372093,unitsPerEm:2048},eu={name:\"Arial\",xAvgCharWidth:904,azAvgWidth:934.5116279069767,unitsPerEm:2048},es=[\"/500\"],ec=1,ef=6e3,ed={client:\"client\",server:\"server\"},ep=[\"clearImmediate\",\"setImmediate\",\"BroadcastChannel\",\"ByteLengthQueuingStrategy\",\"CompressionStream\",\"CountQueuingStrategy\",\"DecompressionStream\",\"DomException\",\"MessageChannel\",\"MessageEvent\",\"MessagePort\",\"ReadableByteStreamController\",\"ReadableStreamBYOBRequest\",\"ReadableStreamDefaultController\",\"TransformStreamDefaultController\",\"WritableStreamDefaultController\"],eh=new Set([K,J,Z,$]);(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3836:(e,t,r)=>{\"use strict\";function n(e,t){return e}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"removeLocale\",{enumerable:!0,get:function(){return n}}),r(3670),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},3996:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{default:function(){return b},handleClientScriptLoad:function(){return _},initScriptLoader:function(){return m}});let n=r(4252),o=r(8365),a=r(7876),i=n._(r(8477)),l=o._(r(4232)),u=r(8831),s=r(9611),c=r(6959),f=new Map,d=new Set,p=e=>{if(i.default.preinit)return void e.forEach(e=>{i.default.preinit(e,{as:\"style\"})});{let t=document.head;e.forEach(e=>{let r=document.createElement(\"link\");r.type=\"text/css\",r.rel=\"stylesheet\",r.href=e,t.appendChild(r)})}},h=e=>{let{src:t,id:r,onLoad:n=()=>{},onReady:o=null,dangerouslySetInnerHTML:a,children:i=\"\",strategy:l=\"afterInteractive\",onError:u,stylesheets:c}=e,h=r||t;if(h&&d.has(h))return;if(f.has(t)){d.add(h),f.get(t).then(n,u);return}let _=()=>{o&&o(),d.add(h)},m=document.createElement(\"script\"),g=new Promise((e,t)=>{m.addEventListener(\"load\",function(t){e(),n&&n.call(this,t),_()}),m.addEventListener(\"error\",function(e){t(e)})}).catch(function(e){u&&u(e)});a?(m.innerHTML=a.__html||\"\",_()):i?(m.textContent=\"string\"==typeof i?i:Array.isArray(i)?i.join(\"\"):\"\",_()):t&&(m.src=t,f.set(t,g)),(0,s.setAttributesFromProps)(m,e),\"worker\"===l&&m.setAttribute(\"type\",\"text/partytown\"),m.setAttribute(\"data-nscript\",l),c&&p(c),document.body.appendChild(m)};function _(e){let{strategy:t=\"afterInteractive\"}=e;\"lazyOnload\"===t?window.addEventListener(\"load\",()=>{(0,c.requestIdleCallback)(()=>h(e))}):h(e)}function m(e){e.forEach(_),[...document.querySelectorAll('[data-nscript=\"beforeInteractive\"]'),...document.querySelectorAll('[data-nscript=\"beforePageRender\"]')].forEach(e=>{let t=e.id||e.getAttribute(\"src\");d.add(t)})}function g(e){let{id:t,src:r=\"\",onLoad:n=()=>{},onReady:o=null,strategy:s=\"afterInteractive\",onError:f,stylesheets:p,..._}=e,{updateScripts:m,scripts:g,getIsSsr:b,appDir:E,nonce:y}=(0,l.useContext)(u.HeadManagerContext),P=(0,l.useRef)(!1);(0,l.useEffect)(()=>{let e=t||r;P.current||(o&&e&&d.has(e)&&o(),P.current=!0)},[o,t,r]);let v=(0,l.useRef)(!1);if((0,l.useEffect)(()=>{if(!v.current){if(\"afterInteractive\"===s)h(e);else\"lazyOnload\"===s&&(\"complete\"===document.readyState?(0,c.requestIdleCallback)(()=>h(e)):window.addEventListener(\"load\",()=>{(0,c.requestIdleCallback)(()=>h(e))}));v.current=!0}},[e,s]),(\"beforeInteractive\"===s||\"worker\"===s)&&(m?(g[s]=(g[s]||[]).concat([{id:t,src:r,onLoad:n,onReady:o,onError:f,..._}]),m(g)):b&&b()?d.add(t||r):b&&!b()&&h(e)),E){if(p&&p.forEach(e=>{i.default.preinit(e,{as:\"style\"})}),\"beforeInteractive\"===s)if(!r)return _.dangerouslySetInnerHTML&&(_.children=_.dangerouslySetInnerHTML.__html,delete _.dangerouslySetInnerHTML),(0,a.jsx)(\"script\",{nonce:y,dangerouslySetInnerHTML:{__html:\"(self.__next_s=self.__next_s||[]).push(\"+JSON.stringify([0,{..._,id:t}])+\")\"}});else return i.default.preload(r,_.integrity?{as:\"script\",integrity:_.integrity,nonce:y,crossOrigin:_.crossOrigin}:{as:\"script\",nonce:y,crossOrigin:_.crossOrigin}),(0,a.jsx)(\"script\",{nonce:y,dangerouslySetInnerHTML:{__html:\"(self.__next_s=self.__next_s||[]).push(\"+JSON.stringify([r,{..._,id:t}])+\")\"}});\"afterInteractive\"===s&&r&&i.default.preload(r,_.integrity?{as:\"script\",integrity:_.integrity,nonce:y,crossOrigin:_.crossOrigin}:{as:\"script\",nonce:y,crossOrigin:_.crossOrigin})}return null}Object.defineProperty(g,\"__nextScript\",{value:!0});let b=g;(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4069:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"BloomFilter\",{enumerable:!0,get:function(){return r}});class r{static from(e,t){void 0===t&&(t=1e-4);let n=new r(e.length,t);for(let t of e)n.add(t);return n}export(){return{numItems:this.numItems,errorRate:this.errorRate,numBits:this.numBits,numHashes:this.numHashes,bitArray:this.bitArray}}import(e){this.numItems=e.numItems,this.errorRate=e.errorRate,this.numBits=e.numBits,this.numHashes=e.numHashes,this.bitArray=e.bitArray}add(e){this.getHashValues(e).forEach(e=>{this.bitArray[e]=1})}contains(e){return this.getHashValues(e).every(e=>this.bitArray[e])}getHashValues(e){let t=[];for(let r=1;r<=this.numHashes;r++){let n=function(e){let t=0;for(let r=0;r<e.length;r++)t=Math.imul(t^e.charCodeAt(r),0x5bd1e995),t^=t>>>13,t=Math.imul(t,0x5bd1e995);return t>>>0}(\"\"+e+r)%this.numBits;t.push(n)}return t}constructor(e,t=1e-4){this.numItems=e,this.errorRate=t,this.numBits=Math.ceil(-(e*Math.log(t))/(Math.log(2)*Math.log(2))),this.numHashes=Math.ceil(this.numBits/e*Math.log(2)),this.bitArray=Array(this.numBits).fill(0)}}},4181:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{HTTPAccessErrorStatus:function(){return r},HTTP_ERROR_FALLBACK_ERROR_CODE:function(){return o},getAccessFallbackErrorTypeByStatus:function(){return l},getAccessFallbackHTTPStatus:function(){return i},isHTTPAccessFallbackError:function(){return a}});let r={NOT_FOUND:404,FORBIDDEN:403,UNAUTHORIZED:401},n=new Set(Object.values(r)),o=\"NEXT_HTTP_ERROR_FALLBACK\";function a(e){if(\"object\"!=typeof e||null===e||!(\"digest\"in e)||\"string\"!=typeof e.digest)return!1;let[t,r]=e.digest.split(\";\");return t===o&&n.has(Number(r))}function i(e){return Number(e.digest.split(\";\")[1])}function l(e){switch(e){case 401:return\"unauthorized\";case 403:return\"forbidden\";case 404:return\"not-found\";default:return}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4252:(e,t,r)=>{\"use strict\";function n(e){return e&&e.__esModule?e:{default:e}}r.r(t),r.d(t,{_:()=>n})},4294:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{Router:function(){return a.default},createRouter:function(){return _},default:function(){return p},makePublicRouterInstance:function(){return m},useRouter:function(){return h},withRouter:function(){return u.default}});let n=r(4252),o=n._(r(4232)),a=n._(r(8276)),i=r(9948),l=n._(r(6240)),u=n._(r(8147)),s={router:null,readyCallbacks:[],ready(e){if(this.router)return e();this.readyCallbacks.push(e)}},c=[\"pathname\",\"route\",\"query\",\"asPath\",\"components\",\"isFallback\",\"basePath\",\"locale\",\"locales\",\"defaultLocale\",\"isReady\",\"isPreview\",\"isLocaleDomain\",\"domainLocales\"],f=[\"push\",\"replace\",\"reload\",\"back\",\"prefetch\",\"beforePopState\"];function d(){if(!s.router)throw Object.defineProperty(Error('No router instance found.\\nYou should only use \"next/router\" on the client side of your app.\\n'),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0});return s.router}Object.defineProperty(s,\"events\",{get:()=>a.default.events}),c.forEach(e=>{Object.defineProperty(s,e,{get:()=>d()[e]})}),f.forEach(e=>{s[e]=function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];return d()[e](...r)}}),[\"routeChangeStart\",\"beforeHistoryChange\",\"routeChangeComplete\",\"routeChangeError\",\"hashChangeStart\",\"hashChangeComplete\"].forEach(e=>{s.ready(()=>{a.default.events.on(e,function(){for(var t=arguments.length,r=Array(t),n=0;n<t;n++)r[n]=arguments[n];let o=\"on\"+e.charAt(0).toUpperCase()+e.substring(1);if(s[o])try{s[o](...r)}catch(e){console.error(\"Error when running the Router event: \"+o),console.error((0,l.default)(e)?e.message+\"\\n\"+e.stack:e+\"\")}})})});let p=s;function h(){let e=o.default.useContext(i.RouterContext);if(!e)throw Object.defineProperty(Error(\"NextRouter was not mounted. https://nextjs.org/docs/messages/next-router-not-mounted\"),\"__NEXT_ERROR_CODE\",{value:\"E509\",enumerable:!1,configurable:!0});return e}function _(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];return s.router=new a.default(...t),s.readyCallbacks.forEach(e=>e()),s.readyCallbacks=[],s.router}function m(e){let t={};for(let r of c){if(\"object\"==typeof e[r]){t[r]=Object.assign(Array.isArray(e[r])?[]:{},e[r]);continue}t[r]=e[r]}return t.events=a.default.events,f.forEach(r=>{t[r]=function(){for(var t=arguments.length,n=Array(t),o=0;o<t;o++)n[o]=arguments[o];return e[r](...n)}}),t}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4359:(e,t)=>{\"use strict\";function r(e,t){let r=Object.keys(e);if(r.length!==Object.keys(t).length)return!1;for(let n=r.length;n--;){let o=r[n];if(\"query\"===o){let r=Object.keys(e.query);if(r.length!==Object.keys(t.query).length)return!1;for(let n=r.length;n--;){let o=r[n];if(!t.query.hasOwnProperty(o)||e.query[o]!==t.query[o])return!1}}else if(!t.hasOwnProperty(o)||e[o]!==t[o])return!1}return!0}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"compareRouterStates\",{enumerable:!0,get:function(){return r}})},4547:(e,t,r)=>{\"use strict\";let n;Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{default:function(){return i},isEqualNode:function(){return a}});let o=r(9611);function a(e,t){if(e instanceof HTMLElement&&t instanceof HTMLElement){let r=t.getAttribute(\"nonce\");if(r&&!e.getAttribute(\"nonce\")){let n=t.cloneNode(!0);return n.setAttribute(\"nonce\",\"\"),n.nonce=r,r===e.nonce&&e.isEqualNode(n)}}return e.isEqualNode(t)}function i(){return{mountedInstances:new Set,updateHead:e=>{let t={};e.forEach(e=>{if(\"link\"===e.type&&e.props[\"data-optimized-fonts\"])if(document.querySelector('style[data-href=\"'+e.props[\"data-href\"]+'\"]'))return;else e.props.href=e.props[\"data-href\"],e.props[\"data-href\"]=void 0;let r=t[e.type]||[];r.push(e),t[e.type]=r});let r=t.title?t.title[0]:null,o=\"\";if(r){let{children:e}=r.props;o=\"string\"==typeof e?e:Array.isArray(e)?e.join(\"\"):\"\"}o!==document.title&&(document.title=o),[\"meta\",\"base\",\"link\",\"style\",\"script\"].forEach(e=>{n(e,t[e]||[])})}}}n=(e,t)=>{let r=document.querySelector(\"head\");if(!r)return;let n=new Set(r.querySelectorAll(\"\"+e+\"[data-next-head]\"));if(\"meta\"===e){let e=r.querySelector(\"meta[charset]\");null!==e&&n.add(e)}let i=[];for(let e=0;e<t.length;e++){let r=function(e){let{type:t,props:r}=e,n=document.createElement(t);(0,o.setAttributesFromProps)(n,r);let{children:a,dangerouslySetInnerHTML:i}=r;return i?n.innerHTML=i.__html||\"\":a&&(n.textContent=\"string\"==typeof a?a:Array.isArray(a)?a.join(\"\"):\"\"),n}(t[e]);r.setAttribute(\"data-next-head\",\"\");let l=!0;for(let e of n)if(a(e,r)){n.delete(e),l=!1;break}l&&i.push(r)}for(let e of n){var l;null==(l=e.parentNode)||l.removeChild(e)}for(let e of i)\"meta\"===e.tagName.toLowerCase()&&null!==e.getAttribute(\"charset\")&&r.prepend(e),r.appendChild(e)},(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4569:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"reportGlobalError\",{enumerable:!0,get:function(){return r}});let r=\"function\"==typeof reportError?reportError:e=>{globalThis.console.error(e)};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4591:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"addLocale\",{enumerable:!0,get:function(){return n}}),r(8205);let n=function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];return e};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4609:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"default\",{enumerable:!0,get:function(){return i}});let n=r(4252)._(r(9871));class o{end(e){if(\"ended\"===this.state.state)throw Object.defineProperty(Error(\"Span has already ended\"),\"__NEXT_ERROR_CODE\",{value:\"E17\",enumerable:!1,configurable:!0});this.state={state:\"ended\",endTime:null!=e?e:Date.now()},this.onSpanEnd(this)}constructor(e,t,r){var n,o;this.name=e,this.attributes=null!=(n=t.attributes)?n:{},this.startTime=null!=(o=t.startTime)?o:Date.now(),this.onSpanEnd=r,this.state={state:\"inprogress\"}}}class a{startSpan(e,t){return new o(e,t,this.handleSpanEnd)}onSpanEnd(e){return this._emitter.on(\"spanend\",e),()=>{this._emitter.off(\"spanend\",e)}}constructor(){this._emitter=(0,n.default)(),this.handleSpanEnd=e=>{this._emitter.emit(\"spanend\",e)}}}let i=new a;(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},4902:(e,t)=>{\"use strict\";function r(e){return e.replace(/\\/$/,\"\")||\"/\"}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"removeTrailingSlash\",{enumerable:!0,get:function(){return r}})},4980:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"formatNextPathnameInfo\",{enumerable:!0,get:function(){return l}});let n=r(4902),o=r(2889),a=r(7952),i=r(6711);function l(e){let t=(0,i.addLocale)(e.pathname,e.locale,e.buildId?void 0:e.defaultLocale,e.ignorePrefix);return(e.buildId||!e.trailingSlash)&&(t=(0,n.removeTrailingSlash)(t)),e.buildId&&(t=(0,a.addPathSuffix)((0,o.addPathPrefix)(t,\"/_next/data/\"+e.buildId),\"/\"===e.pathname?\"index.json\":\".json\")),t=(0,o.addPathPrefix)(t,e.basePath),!e.buildId&&e.trailingSlash?t.endsWith(\"/\")?t:(0,a.addPathSuffix)(t,\"/\"):(0,n.removeTrailingSlash)(t)}},5195:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"denormalizePagePath\",{enumerable:!0,get:function(){return a}});let n=r(3069),o=r(5419);function a(e){let t=(0,o.normalizePathSep)(e);return t.startsWith(\"/index/\")&&!(0,n.isDynamicRoute)(t)?t.slice(6):\"/index\"!==t?t:\"/\"}},5214:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{getNamedMiddlewareRegex:function(){return _},getNamedRouteRegex:function(){return h},getRouteRegex:function(){return f},parseParameter:function(){return u}});let n=r(9308),o=r(7188),a=r(1924),i=r(4902),l=/^([^[]*)\\[((?:\\[[^\\]]*\\])|[^\\]]+)\\](.*)$/;function u(e){let t=e.match(l);return t?s(t[2]):s(e)}function s(e){let t=e.startsWith(\"[\")&&e.endsWith(\"]\");t&&(e=e.slice(1,-1));let r=e.startsWith(\"...\");return r&&(e=e.slice(3)),{key:e,repeat:r,optional:t}}function c(e,t,r){let n={},u=1,c=[];for(let f of(0,i.removeTrailingSlash)(e).slice(1).split(\"/\")){let e=o.INTERCEPTION_ROUTE_MARKERS.find(e=>f.startsWith(e)),i=f.match(l);if(e&&i&&i[2]){let{key:t,optional:r,repeat:o}=s(i[2]);n[t]={pos:u++,repeat:o,optional:r},c.push(\"/\"+(0,a.escapeStringRegexp)(e)+\"([^/]+?)\")}else if(i&&i[2]){let{key:e,repeat:t,optional:o}=s(i[2]);n[e]={pos:u++,repeat:t,optional:o},r&&i[1]&&c.push(\"/\"+(0,a.escapeStringRegexp)(i[1]));let l=t?o?\"(?:/(.+?))?\":\"/(.+?)\":\"/([^/]+?)\";r&&i[1]&&(l=l.substring(1)),c.push(l)}else c.push(\"/\"+(0,a.escapeStringRegexp)(f));t&&i&&i[3]&&c.push((0,a.escapeStringRegexp)(i[3]))}return{parameterizedRoute:c.join(\"\"),groups:n}}function f(e,t){let{includeSuffix:r=!1,includePrefix:n=!1,excludeOptionalTrailingSlash:o=!1}=void 0===t?{}:t,{parameterizedRoute:a,groups:i}=c(e,r,n),l=a;return o||(l+=\"(?:/)?\"),{re:RegExp(\"^\"+l+\"$\"),groups:i}}function d(e){let t,{interceptionMarker:r,getSafeRouteKey:n,segment:o,routeKeys:i,keyPrefix:l,backreferenceDuplicateKeys:u}=e,{key:c,optional:f,repeat:d}=s(o),p=c.replace(/\\W/g,\"\");l&&(p=\"\"+l+p);let h=!1;(0===p.length||p.length>30)&&(h=!0),isNaN(parseInt(p.slice(0,1)))||(h=!0),h&&(p=n());let _=p in i;l?i[p]=\"\"+l+c:i[p]=c;let m=r?(0,a.escapeStringRegexp)(r):\"\";return t=_&&u?\"\\\\k<\"+p+\">\":d?\"(?<\"+p+\">.+?)\":\"(?<\"+p+\">[^/]+?)\",f?\"(?:/\"+m+t+\")?\":\"/\"+m+t}function p(e,t,r,u,s){let c,f=(c=0,()=>{let e=\"\",t=++c;for(;t>0;)e+=String.fromCharCode(97+(t-1)%26),t=Math.floor((t-1)/26);return e}),p={},h=[];for(let c of(0,i.removeTrailingSlash)(e).slice(1).split(\"/\")){let e=o.INTERCEPTION_ROUTE_MARKERS.some(e=>c.startsWith(e)),i=c.match(l);if(e&&i&&i[2])h.push(d({getSafeRouteKey:f,interceptionMarker:i[1],segment:i[2],routeKeys:p,keyPrefix:t?n.NEXT_INTERCEPTION_MARKER_PREFIX:void 0,backreferenceDuplicateKeys:s}));else if(i&&i[2]){u&&i[1]&&h.push(\"/\"+(0,a.escapeStringRegexp)(i[1]));let e=d({getSafeRouteKey:f,segment:i[2],routeKeys:p,keyPrefix:t?n.NEXT_QUERY_PARAM_PREFIX:void 0,backreferenceDuplicateKeys:s});u&&i[1]&&(e=e.substring(1)),h.push(e)}else h.push(\"/\"+(0,a.escapeStringRegexp)(c));r&&i&&i[3]&&h.push((0,a.escapeStringRegexp)(i[3]))}return{namedParameterizedRoute:h.join(\"\"),routeKeys:p}}function h(e,t){var r,n,o;let a=p(e,t.prefixRouteKeys,null!=(r=t.includeSuffix)&&r,null!=(n=t.includePrefix)&&n,null!=(o=t.backreferenceDuplicateKeys)&&o),i=a.namedParameterizedRoute;return t.excludeOptionalTrailingSlash||(i+=\"(?:/)?\"),{...f(e,t),namedRegex:\"^\"+i+\"$\",routeKeys:a.routeKeys}}function _(e,t){let{parameterizedRoute:r}=c(e,!1,!1),{catchAll:n=!0}=t;if(\"/\"===r)return{namedRegex:\"^/\"+(n?\".*\":\"\")+\"$\"};let{namedParameterizedRoute:o}=p(e,!1,!1,!1,!1);return{namedRegex:\"^\"+o+(n?\"(?:(/.*)?)\":\"\")+\"$\"}}},5364:(e,t,r)=>{\"use strict\";var n,o;e.exports=(null==(n=r.g.process)?void 0:n.env)&&\"object\"==typeof(null==(o=r.g.process)?void 0:o.env)?r.g.process:r(5861)},5419:(e,t)=>{\"use strict\";function r(e){return e.replace(/\\\\/g,\"/\")}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"normalizePathSep\",{enumerable:!0,get:function(){return r}})},5519:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"getRouteMatcher\",{enumerable:!0,get:function(){return o}});let n=r(2746);function o(e){let{re:t,groups:r}=e;return e=>{let o=t.exec(e);if(!o)return!1;let a=e=>{try{return decodeURIComponent(e)}catch(e){throw Object.defineProperty(new n.DecodeError(\"failed to decode param\"),\"__NEXT_ERROR_CODE\",{value:\"E528\",enumerable:!1,configurable:!0})}},i={};for(let[e,t]of Object.entries(r)){let r=o[t.pos];void 0!==r&&(t.repeat?i[e]=r.split(\"/\").map(e=>a(e)):i[e]=a(r))}return i}}},5679:(e,t,r)=>{\"use strict\";var n=r(5364);Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{default:function(){return m},defaultHead:function(){return d}});let o=r(4252),a=r(8365),i=r(7876),l=a._(r(4232)),u=o._(r(3776)),s=r(303),c=r(8831),f=r(6807);function d(e){void 0===e&&(e=!1);let t=[(0,i.jsx)(\"meta\",{charSet:\"utf-8\"},\"charset\")];return e||t.push((0,i.jsx)(\"meta\",{name:\"viewport\",content:\"width=device-width\"},\"viewport\")),t}function p(e,t){return\"string\"==typeof t||\"number\"==typeof t?e:t.type===l.default.Fragment?e.concat(l.default.Children.toArray(t.props.children).reduce((e,t)=>\"string\"==typeof t||\"number\"==typeof t?e:e.concat(t),[])):e.concat(t)}r(6079);let h=[\"name\",\"httpEquiv\",\"charSet\",\"itemProp\"];function _(e,t){let{inAmpMode:r}=t;return e.reduce(p,[]).reverse().concat(d(r).reverse()).filter(function(){let e=new Set,t=new Set,r=new Set,n={};return o=>{let a=!0,i=!1;if(o.key&&\"number\"!=typeof o.key&&o.key.indexOf(\"$\")>0){i=!0;let t=o.key.slice(o.key.indexOf(\"$\")+1);e.has(t)?a=!1:e.add(t)}switch(o.type){case\"title\":case\"base\":t.has(o.type)?a=!1:t.add(o.type);break;case\"meta\":for(let e=0,t=h.length;e<t;e++){let t=h[e];if(o.props.hasOwnProperty(t))if(\"charSet\"===t)r.has(t)?a=!1:r.add(t);else{let e=o.props[t],r=n[t]||new Set;(\"name\"!==t||!i)&&r.has(e)?a=!1:(r.add(e),n[t]=r)}}}return a}}()).reverse().map((e,t)=>{let o=e.key||t;if(n.env.__NEXT_OPTIMIZE_FONTS&&!r&&\"link\"===e.type&&e.props.href&&[\"https://fonts.googleapis.com/css\",\"https://use.typekit.net/\"].some(t=>e.props.href.startsWith(t))){let t={...e.props||{}};return t[\"data-href\"]=t.href,t.href=void 0,t[\"data-optimized-fonts\"]=!0,l.default.cloneElement(e,t)}return l.default.cloneElement(e,{key:o})})}let m=function(e){let{children:t}=e,r=(0,l.useContext)(s.AmpStateContext),n=(0,l.useContext)(c.HeadManagerContext);return(0,i.jsx)(u.default,{reduceComponentsToState:_,headManager:n,inAmpMode:(0,f.isInAmpMode)(r),children:t})};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5842:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),r(3718),r(7647);let n=r(9525);window.next={version:n.version,get router(){return n.router},emitter:n.emitter},(0,n.initialize)({}).then(()=>(0,n.hydrate)()).catch(console.error),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},5861:e=>{!function(){var t={229:function(e){var t,r,n,o=e.exports={};function a(){throw Error(\"setTimeout has not been defined\")}function i(){throw Error(\"clearTimeout has not been defined\")}try{t=\"function\"==typeof setTimeout?setTimeout:a}catch(e){t=a}try{r=\"function\"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}function l(e){if(t===setTimeout)return setTimeout(e,0);if((t===a||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}var u=[],s=!1,c=-1;function f(){s&&n&&(s=!1,n.length?u=n.concat(u):c=-1,u.length&&d())}function d(){if(!s){var e=l(f);s=!0;for(var t=u.length;t;){for(n=u,u=[];++c<t;)n&&n[c].run();c=-1,t=u.length}n=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function h(){}o.nextTick=function(e){var t=Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];u.push(new p(e,t)),1!==u.length||s||l(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title=\"browser\",o.browser=!0,o.env={},o.argv=[],o.version=\"\",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(e){return[]},o.binding=function(e){throw Error(\"process.binding is not supported\")},o.cwd=function(){return\"/\"},o.chdir=function(e){throw Error(\"process.chdir is not supported\")},o.umask=function(){return 0}}},r={};function n(e){var o=r[e];if(void 0!==o)return o.exports;var a=r[e]={exports:{}},i=!0;try{t[e](a,a.exports,n),i=!1}finally{i&&delete r[e]}return a.exports}n.ab=\"//\",e.exports=n(229)}()},5931:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{PathParamsContext:function(){return i},PathnameContext:function(){return a},SearchParamsContext:function(){return o}});let n=r(4232),o=(0,n.createContext)(null),a=(0,n.createContext)(null),i=(0,n.createContext)(null)},6023:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"hasBasePath\",{enumerable:!0,get:function(){return o}});let n=r(3716);function o(e){return(0,n.pathHasPrefix)(e,\"\")}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6079:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"warnOnce\",{enumerable:!0,get:function(){return r}});let r=e=>{}},6240:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{default:function(){return o},getProperError:function(){return a}});let n=r(8096);function o(e){return\"object\"==typeof e&&null!==e&&\"name\"in e&&\"message\"in e}function a(e){return o(e)?e:Object.defineProperty(Error((0,n.isPlainObject)(e)?function(e){let t=new WeakSet;return JSON.stringify(e,(e,r)=>{if(\"object\"==typeof r&&null!==r){if(t.has(r))return\"[Circular]\";t.add(r)}return r})}(e):e+\"\"),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0})}},6292:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"removePathPrefix\",{enumerable:!0,get:function(){return o}});let n=r(3716);function o(e,t){if(!(0,n.pathHasPrefix)(e,t))return e;let r=e.slice(t.length);return r.startsWith(\"/\")?r:\"/\"+r}},6582:e=>{\"use strict\";e.exports=[\"chrome 64\",\"edge 79\",\"firefox 67\",\"opera 51\",\"safari 12\"]},6711:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"addLocale\",{enumerable:!0,get:function(){return a}});let n=r(2889),o=r(3716);function a(e,t,r,a){if(!t||t===r)return e;let i=e.toLowerCase();return!a&&((0,o.pathHasPrefix)(i,\"/api\")||(0,o.pathHasPrefix)(i,\"/\"+t.toLowerCase()))?e:(0,n.addPathPrefix)(e,\"/\"+t)}},6807:(e,t)=>{\"use strict\";function r(e){let{ampFirst:t=!1,hybrid:r=!1,hasQuery:n=!1}=void 0===e?{}:e;return t||r&&n}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"isInAmpMode\",{enumerable:!0,get:function(){return r}})},6818:(e,t)=>{\"use strict\";let r;function n(e){var t;return(null==(t=function(){if(void 0===r){var e;r=(null==(e=window.trustedTypes)?void 0:e.createPolicy(\"nextjs\",{createHTML:e=>e,createScript:e=>e,createScriptURL:e=>e}))||null}return r}())?void 0:t.createScriptURL(e))||e}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"__unsafeCreateTrustedScriptURL\",{enumerable:!0,get:function(){return n}}),(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6959:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{cancelIdleCallback:function(){return n},requestIdleCallback:function(){return r}});let r=\"undefined\"!=typeof self&&self.requestIdleCallback&&self.requestIdleCallback.bind(window)||function(e){let t=Date.now();return self.setTimeout(function(){e({didTimeout:!1,timeRemaining:function(){return Math.max(0,50-(Date.now()-t))}})},1)},n=\"undefined\"!=typeof self&&self.cancelIdleCallback&&self.cancelIdleCallback.bind(window)||function(e){return clearTimeout(e)};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},6999:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"isNextRouterError\",{enumerable:!0,get:function(){return a}});let n=r(4181),o=r(2591);function a(e){return(0,o.isRedirectError)(e)||(0,n.isHTTPAccessFallbackError)(e)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7176:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{createRouteLoader:function(){return m},getClientBuildManifest:function(){return h},isAssetError:function(){return c},markAssetError:function(){return s}}),r(4252),r(1827);let n=r(6818),o=r(6959),a=r(8757),i=r(536);function l(e,t,r){let n,o=t.get(e);if(o)return\"future\"in o?o.future:Promise.resolve(o);let a=new Promise(e=>{n=e});return t.set(e,{resolve:n,future:a}),r?r().then(e=>(n(e),e)).catch(r=>{throw t.delete(e),r}):a}let u=Symbol(\"ASSET_LOAD_ERROR\");function s(e){return Object.defineProperty(e,u,{})}function c(e){return e&&u in e}let f=function(e){try{return e=document.createElement(\"link\"),!!window.MSInputMethodContext&&!!document.documentMode||e.relList.supports(\"prefetch\")}catch(e){return!1}}(),d=()=>(0,a.getDeploymentIdQueryOrEmptyString)();function p(e,t,r){return new Promise((n,a)=>{let i=!1;e.then(e=>{i=!0,n(e)}).catch(a),(0,o.requestIdleCallback)(()=>setTimeout(()=>{i||a(r)},t))})}function h(){return self.__BUILD_MANIFEST?Promise.resolve(self.__BUILD_MANIFEST):p(new Promise(e=>{let t=self.__BUILD_MANIFEST_CB;self.__BUILD_MANIFEST_CB=()=>{e(self.__BUILD_MANIFEST),t&&t()}}),3800,s(Object.defineProperty(Error(\"Failed to load client build manifest\"),\"__NEXT_ERROR_CODE\",{value:\"E273\",enumerable:!1,configurable:!0})))}function _(e,t){return h().then(r=>{if(!(t in r))throw s(Object.defineProperty(Error(\"Failed to lookup route: \"+t),\"__NEXT_ERROR_CODE\",{value:\"E446\",enumerable:!1,configurable:!0}));let o=r[t].map(t=>e+\"/_next/\"+(0,i.encodeURIPath)(t));return{scripts:o.filter(e=>e.endsWith(\".js\")).map(e=>(0,n.__unsafeCreateTrustedScriptURL)(e)+d()),css:o.filter(e=>e.endsWith(\".css\")).map(e=>e+d())}})}function m(e){let t=new Map,r=new Map,n=new Map,a=new Map;function i(e){{var t;let n=r.get(e.toString());return n?n:document.querySelector('script[src^=\"'+e+'\"]')?Promise.resolve():(r.set(e.toString(),n=new Promise((r,n)=>{(t=document.createElement(\"script\")).onload=r,t.onerror=()=>n(s(Object.defineProperty(Error(\"Failed to load script: \"+e),\"__NEXT_ERROR_CODE\",{value:\"E74\",enumerable:!1,configurable:!0}))),t.crossOrigin=void 0,t.src=e,document.body.appendChild(t)})),n)}}function u(e){let t=n.get(e);return t||n.set(e,t=fetch(e,{credentials:\"same-origin\"}).then(t=>{if(!t.ok)throw Object.defineProperty(Error(\"Failed to load stylesheet: \"+e),\"__NEXT_ERROR_CODE\",{value:\"E189\",enumerable:!1,configurable:!0});return t.text().then(t=>({href:e,content:t}))}).catch(e=>{throw s(e)})),t}return{whenEntrypoint:e=>l(e,t),onEntrypoint(e,r){(r?Promise.resolve().then(()=>r()).then(e=>({component:e&&e.default||e,exports:e}),e=>({error:e})):Promise.resolve(void 0)).then(r=>{let n=t.get(e);n&&\"resolve\"in n?r&&(t.set(e,r),n.resolve(r)):(r?t.set(e,r):t.delete(e),a.delete(e))})},loadRoute(r,n){return l(r,a,()=>{let o;return p(_(e,r).then(e=>{let{scripts:n,css:o}=e;return Promise.all([t.has(r)?[]:Promise.all(n.map(i)),Promise.all(o.map(u))])}).then(e=>this.whenEntrypoint(r).then(t=>({entrypoint:t,styles:e[1]}))),3800,s(Object.defineProperty(Error(\"Route did not complete loading: \"+r),\"__NEXT_ERROR_CODE\",{value:\"E12\",enumerable:!1,configurable:!0}))).then(e=>{let{entrypoint:t,styles:r}=e,n=Object.assign({styles:r},t);return\"error\"in t?t:n}).catch(e=>{if(n)throw e;return{error:e}}).finally(()=>null==o?void 0:o())})},prefetch(t){let r;return(r=navigator.connection)&&(r.saveData||/2g/.test(r.effectiveType))?Promise.resolve():_(e,t).then(e=>Promise.all(f?e.scripts.map(e=>{var t,r,n;return t=e.toString(),r=\"script\",new Promise((e,o)=>{let a='\\n      link[rel=\"prefetch\"][href^=\"'+t+'\"],\\n      link[rel=\"preload\"][href^=\"'+t+'\"],\\n      script[src^=\"'+t+'\"]';if(document.querySelector(a))return e();n=document.createElement(\"link\"),r&&(n.as=r),n.rel=\"prefetch\",n.crossOrigin=void 0,n.onload=e,n.onerror=()=>o(s(Object.defineProperty(Error(\"Failed to prefetch: \"+t),\"__NEXT_ERROR_CODE\",{value:\"E268\",enumerable:!1,configurable:!0}))),n.href=t,document.head.appendChild(n)})}):[])).then(()=>{(0,o.requestIdleCallback)(()=>this.loadRoute(t,!0).catch(()=>{}))}).catch(()=>{})}}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7188:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{INTERCEPTION_ROUTE_MARKERS:function(){return o},extractInterceptionRouteInformation:function(){return i},isInterceptionRouteAppPath:function(){return a}});let n=r(2959),o=[\"(..)(..)\",\"(.)\",\"(..)\",\"(...)\"];function a(e){return void 0!==e.split(\"/\").find(e=>o.find(t=>e.startsWith(t)))}function i(e){let t,r,a;for(let n of e.split(\"/\"))if(r=o.find(e=>n.startsWith(e))){[t,a]=e.split(r,2);break}if(!t||!r||!a)throw Object.defineProperty(Error(\"Invalid interception route: \"+e+\". Must be in the format /<intercepting route>/(..|...|..)(..)/<intercepted route>\"),\"__NEXT_ERROR_CODE\",{value:\"E269\",enumerable:!1,configurable:!0});switch(t=(0,n.normalizeAppPath)(t),r){case\"(.)\":a=\"/\"===t?\"/\"+a:t+\"/\"+a;break;case\"(..)\":if(\"/\"===t)throw Object.defineProperty(Error(\"Invalid interception route: \"+e+\". Cannot use (..) marker at the root level, use (.) instead.\"),\"__NEXT_ERROR_CODE\",{value:\"E207\",enumerable:!1,configurable:!0});a=t.split(\"/\").slice(0,-1).concat(a).join(\"/\");break;case\"(...)\":a=\"/\"+a;break;case\"(..)(..)\":let i=t.split(\"/\");if(i.length<=2)throw Object.defineProperty(Error(\"Invalid interception route: \"+e+\". Cannot use (..)(..) marker at the root level or one level up.\"),\"__NEXT_ERROR_CODE\",{value:\"E486\",enumerable:!1,configurable:!0});a=i.slice(0,-2).concat(a).join(\"/\");break;default:throw Object.defineProperty(Error(\"Invariant: unexpected marker\"),\"__NEXT_ERROR_CODE\",{value:\"E112\",enumerable:!1,configurable:!0})}return{interceptingRoute:t,interceptedRoute:a}}},7207:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"onRecoverableError\",{enumerable:!0,get:function(){return u}});let n=r(4252),o=r(3123),a=r(4569),i=r(3575),l=n._(r(6240)),u=(e,t)=>{let r=(0,l.default)(e)&&\"cause\"in e?e.cause:e,n=(0,i.getReactStitchedError)(r);(0,o.isBailoutToCSRError)(r)||(0,a.reportGlobalError)(n)};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},7407:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{HTML_LIMITED_BOT_UA_RE:function(){return n.HTML_LIMITED_BOT_UA_RE},HTML_LIMITED_BOT_UA_RE_STRING:function(){return a},getBotType:function(){return u},isBot:function(){return l}});let n=r(2455),o=/Googlebot|Google-PageRenderer|AdsBot-Google|googleweblight|Storebot-Google/i,a=n.HTML_LIMITED_BOT_UA_RE.source;function i(e){return n.HTML_LIMITED_BOT_UA_RE.test(e)}function l(e){return o.test(e)||i(e)}function u(e){return o.test(e)?\"dom\":i(e)?\"html\":void 0}},7539:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{VALID_LOADERS:function(){return r},imageConfigDefault:function(){return n}});let r=[\"default\",\"imgix\",\"cloudinary\",\"akamai\",\"custom\"],n={deviceSizes:[640,750,828,1080,1200,1920,2048,3840],imageSizes:[16,32,48,64,96,128,256,384],path:\"/_next/image\",loader:\"default\",loaderFile:\"\",domains:[],disableStaticImages:!1,minimumCacheTTL:60,formats:[\"image/webp\"],dangerouslyAllowSVG:!1,contentSecurityPolicy:\"script-src 'none'; frame-src 'none'; sandbox;\",contentDispositionType:\"attachment\",localPatterns:void 0,remotePatterns:[],qualities:void 0,unoptimized:!1}},7647:(e,t,r)=>{\"use strict\";e.exports=r(9393)},7952:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"addPathSuffix\",{enumerable:!0,get:function(){return o}});let n=r(3670);function o(e,t){if(!e.startsWith(\"/\")||!t)return e;let{pathname:r,query:o,hash:a}=(0,n.parsePath)(e);return\"\"+r+t+o+a}},8040:(e,t)=>{\"use strict\";function r(e){let t={};for(let[r,n]of e.entries()){let e=t[r];void 0===e?t[r]=n:Array.isArray(e)?e.push(n):t[r]=[e,n]}return t}function n(e){return\"string\"==typeof e?e:(\"number\"!=typeof e||isNaN(e))&&\"boolean\"!=typeof e?\"\":String(e)}function o(e){let t=new URLSearchParams;for(let[r,o]of Object.entries(e))if(Array.isArray(o))for(let e of o)t.append(r,n(e));else t.set(r,n(o));return t}function a(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];for(let t of r){for(let r of t.keys())e.delete(r);for(let[r,n]of t.entries())e.append(r,n)}return e}Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{assign:function(){return a},searchParamsToUrlQuery:function(){return r},urlQueryToSearchParams:function(){return o}})},8069:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"interpolateAs\",{enumerable:!0,get:function(){return a}});let n=r(5519),o=r(5214);function a(e,t,r){let a=\"\",i=(0,o.getRouteRegex)(e),l=i.groups,u=(t!==e?(0,n.getRouteMatcher)(i)(t):\"\")||r;a=e;let s=Object.keys(l);return s.every(e=>{let t=u[e]||\"\",{repeat:r,optional:n}=l[e],o=\"[\"+(r?\"...\":\"\")+e+\"]\";return n&&(o=(t?\"\":\"/\")+\"[\"+o+\"]\"),r&&!Array.isArray(t)&&(t=[t]),(n||e in u)&&(a=a.replace(o,r?t.map(e=>encodeURIComponent(e)).join(\"/\"):encodeURIComponent(t))||\"/\")})||(a=\"\"),{params:s,result:a}}},8089:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{copyNextErrorCode:function(){return n},createDigestWithErrorCode:function(){return r},extractNextErrorCode:function(){return o}});let r=(e,t)=>\"object\"==typeof e&&null!==e&&\"__NEXT_ERROR_CODE\"in e?`${t}@${e.__NEXT_ERROR_CODE}`:t,n=(e,t)=>{let r=o(e);r&&\"object\"==typeof t&&null!==t&&Object.defineProperty(t,\"__NEXT_ERROR_CODE\",{value:r,enumerable:!1,configurable:!0})},o=e=>\"object\"==typeof e&&null!==e&&\"__NEXT_ERROR_CODE\"in e&&\"string\"==typeof e.__NEXT_ERROR_CODE?e.__NEXT_ERROR_CODE:\"object\"==typeof e&&null!==e&&\"digest\"in e&&\"string\"==typeof e.digest?e.digest.split(\"@\").find(e=>e.startsWith(\"E\")):void 0},8096:(e,t)=>{\"use strict\";function r(e){return Object.prototype.toString.call(e)}function n(e){if(\"[object Object]\"!==r(e))return!1;let t=Object.getPrototypeOf(e);return null===t||t.hasOwnProperty(\"isPrototypeOf\")}Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{getObjectClassLabel:function(){return r},isPlainObject:function(){return n}})},8147:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"default\",{enumerable:!0,get:function(){return a}}),r(4252);let n=r(7876);r(4232);let o=r(4294);function a(e){function t(t){return(0,n.jsx)(e,{router:(0,o.useRouter)(),...t})}return t.getInitialProps=e.getInitialProps,t.origGetInitialProps=e.origGetInitialProps,t}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8205:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"normalizePathTrailingSlash\",{enumerable:!0,get:function(){return a}});let n=r(4902),o=r(3670),a=e=>{if(!e.startsWith(\"/\"))return e;let{pathname:t,query:r,hash:a}=(0,o.parsePath)(e);return/\\.[^/]+\\/?$/.test(t)?\"\"+(0,n.removeTrailingSlash)(t)+r+a:t.endsWith(\"/\")?\"\"+t+r+a:t+\"/\"+r+a};(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},8213:(e,t)=>{\"use strict\";function r(e){return new URL(e,\"http://n\").searchParams}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"asPathToSearchParams\",{enumerable:!0,get:function(){return r}})},8276:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{createKey:function(){return G},default:function(){return z},matchesMiddleware:function(){return D}});let n=r(4252),o=r(8365),a=r(4902),i=r(7176),l=r(3996),u=o._(r(6240)),s=r(5195),c=r(1862),f=n._(r(9871)),d=r(2746),p=r(9163),h=r(541);r(1226);let _=r(5519),m=r(5214),g=r(8480);r(2616);let b=r(3670),E=r(4591),y=r(3836),P=r(1025),v=r(2092),R=r(6023),O=r(1921),S=r(2326),j=r(3407),T=r(4980),A=r(4359),C=r(1533),w=r(7407),I=r(990),N=r(8069),x=r(3132),M=r(9308);function L(){return Object.assign(Object.defineProperty(Error(\"Route Cancelled\"),\"__NEXT_ERROR_CODE\",{value:\"E315\",enumerable:!1,configurable:!0}),{cancelled:!0})}async function D(e){let t=await Promise.resolve(e.router.pageLoader.getMiddleware());if(!t)return!1;let{pathname:r}=(0,b.parsePath)(e.asPath),n=(0,R.hasBasePath)(r)?(0,P.removeBasePath)(r):r,o=(0,v.addBasePath)((0,E.addLocale)(n,e.locale));return t.some(e=>new RegExp(e.regexp).test(o))}function U(e){let t=(0,d.getLocationOrigin)();return e.startsWith(t)?e.substring(t.length):e}function k(e,t,r){let[n,o]=(0,O.resolveHref)(e,t,!0),a=(0,d.getLocationOrigin)(),i=n.startsWith(a),l=o&&o.startsWith(a);n=U(n),o=o?U(o):o;let u=i?n:(0,v.addBasePath)(n),s=r?U((0,O.resolveHref)(e,r)):o||n;return{url:u,as:l?s:(0,v.addBasePath)(s)}}function F(e,t){let r=(0,a.removeTrailingSlash)((0,s.denormalizePagePath)(e));return\"/404\"===r||\"/_error\"===r?e:(t.includes(r)||t.some(t=>{if((0,p.isDynamicRoute)(t)&&(0,m.getRouteRegex)(t).re.test(r))return e=t,!0}),(0,a.removeTrailingSlash)(e))}async function B(e){if(!await D(e)||!e.fetchData)return null;let t=await e.fetchData(),r=await function(e,t,r){let n={basePath:r.router.basePath,i18n:{locales:r.router.locales},trailingSlash:!0},o=t.headers.get(\"x-nextjs-rewrite\"),l=o||t.headers.get(\"x-nextjs-matched-path\"),u=t.headers.get(M.MATCHED_PATH_HEADER);if(!u||l||u.includes(\"__next_data_catchall\")||u.includes(\"/_error\")||u.includes(\"/404\")||(l=u),l){if(l.startsWith(\"/\")){let t=(0,h.parseRelativeUrl)(l),u=(0,j.getNextPathnameInfo)(t.pathname,{nextConfig:n,parseData:!0}),s=(0,a.removeTrailingSlash)(u.pathname);return Promise.all([r.router.pageLoader.getPageList(),(0,i.getClientBuildManifest)()]).then(a=>{let[i,{__rewrites:l}]=a,f=(0,E.addLocale)(u.pathname,u.locale);if((0,p.isDynamicRoute)(f)||!o&&i.includes((0,c.normalizeLocalePath)((0,P.removeBasePath)(f),r.router.locales).pathname)){let r=(0,j.getNextPathnameInfo)((0,h.parseRelativeUrl)(e).pathname,{nextConfig:n,parseData:!0});t.pathname=f=(0,v.addBasePath)(r.pathname)}if(!i.includes(s)){let e=F(s,i);e!==s&&(s=e)}let d=i.includes(s)?s:F((0,c.normalizeLocalePath)((0,P.removeBasePath)(t.pathname),r.router.locales).pathname,i);if((0,p.isDynamicRoute)(d)){let e=(0,_.getRouteMatcher)((0,m.getRouteRegex)(d))(f);Object.assign(t.query,e||{})}return{type:\"rewrite\",parsedAs:t,resolvedHref:d}})}let t=(0,b.parsePath)(e);return Promise.resolve({type:\"redirect-external\",destination:\"\"+(0,T.formatNextPathnameInfo)({...(0,j.getNextPathnameInfo)(t.pathname,{nextConfig:n,parseData:!0}),defaultLocale:r.router.defaultLocale,buildId:\"\"})+t.query+t.hash})}let s=t.headers.get(\"x-nextjs-redirect\");if(s){if(s.startsWith(\"/\")){let e=(0,b.parsePath)(s),t=(0,T.formatNextPathnameInfo)({...(0,j.getNextPathnameInfo)(e.pathname,{nextConfig:n,parseData:!0}),defaultLocale:r.router.defaultLocale,buildId:\"\"});return Promise.resolve({type:\"redirect-internal\",newAs:\"\"+t+e.query+e.hash,newUrl:\"\"+t+e.query+e.hash})}return Promise.resolve({type:\"redirect-external\",destination:s})}return Promise.resolve({type:\"next\"})}(t.dataHref,t.response,e);return{dataHref:t.dataHref,json:t.json,response:t.response,text:t.text,cacheKey:t.cacheKey,effect:r}}let H=Symbol(\"SSG_DATA_NOT_FOUND\");function X(e){try{return JSON.parse(e)}catch(e){return null}}function W(e){let{dataHref:t,inflightCache:r,isPrefetch:n,hasMiddleware:o,isServerRender:a,parseJSON:l,persistCache:u,isBackground:s,unstable_skipClientCache:c}=e,{href:f}=new URL(t,window.location.href),d=e=>{var s;return(function e(t,r,n){return fetch(t,{credentials:\"same-origin\",method:n.method||\"GET\",headers:Object.assign({},n.headers,{\"x-nextjs-data\":\"1\"})}).then(o=>!o.ok&&r>1&&o.status>=500?e(t,r-1,n):o)})(t,a?3:1,{headers:Object.assign({},n?{purpose:\"prefetch\"}:{},n&&o?{\"x-middleware-prefetch\":\"1\"}:{},{}),method:null!=(s=null==e?void 0:e.method)?s:\"GET\"}).then(r=>r.ok&&(null==e?void 0:e.method)===\"HEAD\"?{dataHref:t,response:r,text:\"\",json:{},cacheKey:f}:r.text().then(e=>{if(!r.ok){if(o&&[301,302,307,308].includes(r.status))return{dataHref:t,response:r,text:e,json:{},cacheKey:f};if(404===r.status){var n;if(null==(n=X(e))?void 0:n.notFound)return{dataHref:t,json:{notFound:H},response:r,text:e,cacheKey:f}}let l=Object.defineProperty(Error(\"Failed to load static props\"),\"__NEXT_ERROR_CODE\",{value:\"E124\",enumerable:!1,configurable:!0});throw a||(0,i.markAssetError)(l),l}return{dataHref:t,json:l?X(e):null,response:r,text:e,cacheKey:f}})).then(e=>(u&&\"no-cache\"!==e.response.headers.get(\"x-middleware-cache\")||delete r[f],e)).catch(e=>{throw c||delete r[f],(\"Failed to fetch\"===e.message||\"NetworkError when attempting to fetch resource.\"===e.message||\"Load failed\"===e.message)&&(0,i.markAssetError)(e),e})};return c&&u?d({}).then(e=>(\"no-cache\"!==e.response.headers.get(\"x-middleware-cache\")&&(r[f]=Promise.resolve(e)),e)):void 0!==r[f]?r[f]:r[f]=d(s?{method:\"HEAD\"}:{})}function G(){return Math.random().toString(36).slice(2,10)}function q(e){let{url:t,router:r}=e;if(t===(0,v.addBasePath)((0,E.addLocale)(r.asPath,r.locale)))throw Object.defineProperty(Error(\"Invariant: attempted to hard navigate to the same URL \"+t+\" \"+location.href),\"__NEXT_ERROR_CODE\",{value:\"E282\",enumerable:!1,configurable:!0});window.location.href=t}let V=e=>{let{route:t,router:r}=e,n=!1,o=r.clc=()=>{n=!0};return()=>{if(n){let e=Object.defineProperty(Error('Abort fetching component for route: \"'+t+'\"'),\"__NEXT_ERROR_CODE\",{value:\"E483\",enumerable:!1,configurable:!0});throw e.cancelled=!0,e}o===r.clc&&(r.clc=null)}};class z{reload(){window.location.reload()}back(){window.history.back()}forward(){window.history.forward()}push(e,t,r){return void 0===r&&(r={}),{url:e,as:t}=k(this,e,t),this.change(\"pushState\",e,t,r)}replace(e,t,r){return void 0===r&&(r={}),{url:e,as:t}=k(this,e,t),this.change(\"replaceState\",e,t,r)}async _bfl(e,t,n,o){{if(!this._bfl_s&&!this._bfl_d){let t,a,{BloomFilter:l}=r(4069);try{({__routerFilterStatic:t,__routerFilterDynamic:a}=await (0,i.getClientBuildManifest)())}catch(t){if(console.error(t),o)return!0;return q({url:(0,v.addBasePath)((0,E.addLocale)(e,n||this.locale,this.defaultLocale)),router:this}),new Promise(()=>{})}(null==t?void 0:t.numHashes)&&(this._bfl_s=new l(t.numItems,t.errorRate),this._bfl_s.import(t)),(null==a?void 0:a.numHashes)&&(this._bfl_d=new l(a.numItems,a.errorRate),this._bfl_d.import(a))}let c=!1,f=!1;for(let{as:r,allowMatchCurrent:i}of[{as:e},{as:t}])if(r){let t=(0,a.removeTrailingSlash)(new URL(r,\"http://n\").pathname),d=(0,v.addBasePath)((0,E.addLocale)(t,n||this.locale));if(i||t!==(0,a.removeTrailingSlash)(new URL(this.asPath,\"http://n\").pathname)){var l,u,s;for(let e of(c=c||!!(null==(l=this._bfl_s)?void 0:l.contains(t))||!!(null==(u=this._bfl_s)?void 0:u.contains(d)),[t,d])){let t=e.split(\"/\");for(let e=0;!f&&e<t.length+1;e++){let r=t.slice(0,e).join(\"/\");if(r&&(null==(s=this._bfl_d)?void 0:s.contains(r))){f=!0;break}}}if(c||f){if(o)return!0;return q({url:(0,v.addBasePath)((0,E.addLocale)(e,n||this.locale,this.defaultLocale)),router:this}),new Promise(()=>{})}}}}return!1}async change(e,t,r,n,o){var s,c,f,O,S,j,T,w,x;let M,U;if(!(0,C.isLocalURL)(t))return q({url:t,router:this}),!1;let B=1===n._h;B||n.shallow||await this._bfl(r,void 0,n.locale);let X=B||n._shouldResolveHref||(0,b.parsePath)(t).pathname===(0,b.parsePath)(r).pathname,W={...this.state},G=!0!==this.isReady;this.isReady=!0;let V=this.isSsr;if(B||(this.isSsr=!1),B&&this.clc)return!1;let Y=W.locale;d.ST&&performance.mark(\"routeChange\");let{shallow:K=!1,scroll:$=!0}=n,Q={shallow:K};this._inFlightRoute&&this.clc&&(V||z.events.emit(\"routeChangeError\",L(),this._inFlightRoute,Q),this.clc(),this.clc=null),r=(0,v.addBasePath)((0,E.addLocale)((0,R.hasBasePath)(r)?(0,P.removeBasePath)(r):r,n.locale,this.defaultLocale));let J=(0,y.removeLocale)((0,R.hasBasePath)(r)?(0,P.removeBasePath)(r):r,W.locale);this._inFlightRoute=r;let Z=Y!==W.locale;if(!B&&this.onlyAHashChange(J)&&!Z){W.asPath=J,z.events.emit(\"hashChangeStart\",r,Q),this.changeState(e,t,r,{...n,scroll:!1}),$&&this.scrollToHash(J);try{await this.set(W,this.components[W.route],null)}catch(e){throw(0,u.default)(e)&&e.cancelled&&z.events.emit(\"routeChangeError\",e,J,Q),e}return z.events.emit(\"hashChangeComplete\",r,Q),!0}let ee=(0,h.parseRelativeUrl)(t),{pathname:et,query:er}=ee;try{[M,{__rewrites:U}]=await Promise.all([this.pageLoader.getPageList(),(0,i.getClientBuildManifest)(),this.pageLoader.getMiddleware()])}catch(e){return q({url:r,router:this}),!1}this.urlIsNew(J)||Z||(e=\"replaceState\");let en=r;et=et?(0,a.removeTrailingSlash)((0,P.removeBasePath)(et)):et;let eo=(0,a.removeTrailingSlash)(et),ea=r.startsWith(\"/\")&&(0,h.parseRelativeUrl)(r).pathname;if(null==(s=this.components[et])?void 0:s.__appRouter)return q({url:r,router:this}),new Promise(()=>{});let ei=!!(ea&&eo!==ea&&(!(0,p.isDynamicRoute)(eo)||!(0,_.getRouteMatcher)((0,m.getRouteRegex)(eo))(ea))),el=!n.shallow&&await D({asPath:r,locale:W.locale,router:this});if(B&&el&&(X=!1),X&&\"/_error\"!==et&&(n._shouldResolveHref=!0,ee.pathname=F(et,M),ee.pathname!==et&&(et=ee.pathname,ee.pathname=(0,v.addBasePath)(et),el||(t=(0,g.formatWithValidation)(ee)))),!(0,C.isLocalURL)(r))return q({url:r,router:this}),!1;en=(0,y.removeLocale)((0,P.removeBasePath)(en),W.locale),eo=(0,a.removeTrailingSlash)(et);let eu=!1;if((0,p.isDynamicRoute)(eo)){let e=(0,h.parseRelativeUrl)(en),n=e.pathname,o=(0,m.getRouteRegex)(eo);eu=(0,_.getRouteMatcher)(o)(n);let a=eo===n,i=a?(0,N.interpolateAs)(eo,n,er):{};if(eu&&(!a||i.result))a?r=(0,g.formatWithValidation)(Object.assign({},e,{pathname:i.result,query:(0,I.omit)(er,i.params)})):Object.assign(er,eu);else{let e=Object.keys(o.groups).filter(e=>!er[e]&&!o.groups[e].optional);if(e.length>0&&!el)throw Object.defineProperty(Error((a?\"The provided `href` (\"+t+\") value is missing query values (\"+e.join(\", \")+\") to be interpolated properly. \":\"The provided `as` value (\"+n+\") is incompatible with the `href` value (\"+eo+\"). \")+\"Read more: https://nextjs.org/docs/messages/\"+(a?\"href-interpolation-failed\":\"incompatible-href-as\")),\"__NEXT_ERROR_CODE\",{value:\"E344\",enumerable:!1,configurable:!0})}}B||z.events.emit(\"routeChangeStart\",r,Q);let es=\"/404\"===this.pathname||\"/_error\"===this.pathname;try{let a=await this.getRouteInfo({route:eo,pathname:et,query:er,as:r,resolvedAs:en,routeProps:Q,locale:W.locale,isPreview:W.isPreview,hasMiddleware:el,unstable_skipClientCache:n.unstable_skipClientCache,isQueryUpdating:B&&!this.isFallback,isMiddlewareRewrite:ei});if(B||n.shallow||await this._bfl(r,\"resolvedAs\"in a?a.resolvedAs:void 0,W.locale),\"route\"in a&&el){eo=et=a.route||eo,Q.shallow||(er=Object.assign({},a.query||{},er));let e=(0,R.hasBasePath)(ee.pathname)?(0,P.removeBasePath)(ee.pathname):ee.pathname;if(eu&&et!==e&&Object.keys(eu).forEach(e=>{eu&&er[e]===eu[e]&&delete er[e]}),(0,p.isDynamicRoute)(et)){let e=!Q.shallow&&a.resolvedAs?a.resolvedAs:(0,v.addBasePath)((0,E.addLocale)(new URL(r,location.href).pathname,W.locale),!0);(0,R.hasBasePath)(e)&&(e=(0,P.removeBasePath)(e));let t=(0,m.getRouteRegex)(et),n=(0,_.getRouteMatcher)(t)(new URL(e,location.href).pathname);n&&Object.assign(er,n)}}if(\"type\"in a)if(\"redirect-internal\"===a.type)return this.change(e,a.newUrl,a.newAs,n);else return q({url:a.destination,router:this}),new Promise(()=>{});let i=a.Component;if(i&&i.unstable_scriptLoader&&[].concat(i.unstable_scriptLoader()).forEach(e=>{(0,l.handleClientScriptLoad)(e.props)}),(a.__N_SSG||a.__N_SSP)&&a.props){if(a.props.pageProps&&a.props.pageProps.__N_REDIRECT){n.locale=!1;let t=a.props.pageProps.__N_REDIRECT;if(t.startsWith(\"/\")&&!1!==a.props.pageProps.__N_REDIRECT_BASE_PATH){let r=(0,h.parseRelativeUrl)(t);r.pathname=F(r.pathname,M);let{url:o,as:a}=k(this,t,t);return this.change(e,o,a,n)}return q({url:t,router:this}),new Promise(()=>{})}if(W.isPreview=!!a.props.__N_PREVIEW,a.props.notFound===H){let e;try{await this.fetchComponent(\"/404\"),e=\"/404\"}catch(t){e=\"/_error\"}if(a=await this.getRouteInfo({route:e,pathname:e,query:er,as:r,resolvedAs:en,routeProps:{shallow:!1},locale:W.locale,isPreview:W.isPreview,isNotFound:!0}),\"type\"in a)throw Object.defineProperty(Error(\"Unexpected middleware effect on /404\"),\"__NEXT_ERROR_CODE\",{value:\"E158\",enumerable:!1,configurable:!0})}}B&&\"/_error\"===this.pathname&&(null==(f=self.__NEXT_DATA__.props)||null==(c=f.pageProps)?void 0:c.statusCode)===500&&(null==(O=a.props)?void 0:O.pageProps)&&(a.props.pageProps.statusCode=500);let s=n.shallow&&W.route===(null!=(S=a.route)?S:eo),d=null!=(j=n.scroll)?j:!B&&!s,g=null!=o?o:d?{x:0,y:0}:null,b={...W,route:eo,pathname:et,query:er,asPath:J,isFallback:!1};if(B&&es){if(a=await this.getRouteInfo({route:this.pathname,pathname:this.pathname,query:er,as:r,resolvedAs:en,routeProps:{shallow:!1},locale:W.locale,isPreview:W.isPreview,isQueryUpdating:B&&!this.isFallback}),\"type\"in a)throw Object.defineProperty(Error(\"Unexpected middleware effect on \"+this.pathname),\"__NEXT_ERROR_CODE\",{value:\"E225\",enumerable:!1,configurable:!0});\"/_error\"===this.pathname&&(null==(w=self.__NEXT_DATA__.props)||null==(T=w.pageProps)?void 0:T.statusCode)===500&&(null==(x=a.props)?void 0:x.pageProps)&&(a.props.pageProps.statusCode=500);try{await this.set(b,a,g)}catch(e){throw(0,u.default)(e)&&e.cancelled&&z.events.emit(\"routeChangeError\",e,J,Q),e}return!0}if(z.events.emit(\"beforeHistoryChange\",r,Q),this.changeState(e,t,r,n),!(B&&!g&&!G&&!Z&&(0,A.compareRouterStates)(b,this.state))){try{await this.set(b,a,g)}catch(e){if(e.cancelled)a.error=a.error||e;else throw e}if(a.error)throw B||z.events.emit(\"routeChangeError\",a.error,J,Q),a.error;B||z.events.emit(\"routeChangeComplete\",r,Q),d&&/#.+$/.test(r)&&this.scrollToHash(r)}return!0}catch(e){if((0,u.default)(e)&&e.cancelled)return!1;throw e}}changeState(e,t,r,n){void 0===n&&(n={}),(\"pushState\"!==e||(0,d.getURL)()!==r)&&(this._shallow=n.shallow,window.history[e]({url:t,as:r,options:n,__N:!0,key:this._key=\"pushState\"!==e?this._key:G()},\"\",r))}async handleRouteInfoError(e,t,r,n,o,a){if(e.cancelled)throw e;if((0,i.isAssetError)(e)||a)throw z.events.emit(\"routeChangeError\",e,n,o),q({url:n,router:this}),L();console.error(e);try{let n,{page:o,styleSheets:a}=await this.fetchComponent(\"/_error\"),i={props:n,Component:o,styleSheets:a,err:e,error:e};if(!i.props)try{i.props=await this.getInitialProps(o,{err:e,pathname:t,query:r})}catch(e){console.error(\"Error in error page `getInitialProps`: \",e),i.props={}}return i}catch(e){return this.handleRouteInfoError((0,u.default)(e)?e:Object.defineProperty(Error(e+\"\"),\"__NEXT_ERROR_CODE\",{value:\"E394\",enumerable:!1,configurable:!0}),t,r,n,o,!0)}}async getRouteInfo(e){let{route:t,pathname:r,query:n,as:o,resolvedAs:i,routeProps:l,locale:s,hasMiddleware:f,isPreview:d,unstable_skipClientCache:p,isQueryUpdating:h,isMiddlewareRewrite:_,isNotFound:m}=e,b=t;try{var E,y,v,R;let e=this.components[b];if(l.shallow&&e&&this.route===b)return e;let t=V({route:b,router:this});f&&(e=void 0);let u=!e||\"initial\"in e?void 0:e,O={dataHref:this.pageLoader.getDataHref({href:(0,g.formatWithValidation)({pathname:r,query:n}),skipInterpolation:!0,asPath:m?\"/404\":i,locale:s}),hasMiddleware:!0,isServerRender:this.isSsr,parseJSON:!0,inflightCache:h?this.sbc:this.sdc,persistCache:!d,isPrefetch:!1,unstable_skipClientCache:p,isBackground:h},j=h&&!_?null:await B({fetchData:()=>W(O),asPath:m?\"/404\":i,locale:s,router:this}).catch(e=>{if(h)return null;throw e});if(j&&(\"/_error\"===r||\"/404\"===r)&&(j.effect=void 0),h&&(j?j.json=self.__NEXT_DATA__.props:j={json:self.__NEXT_DATA__.props}),t(),(null==j||null==(E=j.effect)?void 0:E.type)===\"redirect-internal\"||(null==j||null==(y=j.effect)?void 0:y.type)===\"redirect-external\")return j.effect;if((null==j||null==(v=j.effect)?void 0:v.type)===\"rewrite\"){let t=(0,a.removeTrailingSlash)(j.effect.resolvedHref),o=await this.pageLoader.getPageList();if((!h||o.includes(t))&&(b=t,r=j.effect.resolvedHref,n={...n,...j.effect.parsedAs.query},i=(0,P.removeBasePath)((0,c.normalizeLocalePath)(j.effect.parsedAs.pathname,this.locales).pathname),e=this.components[b],l.shallow&&e&&this.route===b&&!f))return{...e,route:b}}if((0,S.isAPIRoute)(b))return q({url:o,router:this}),new Promise(()=>{});let T=u||await this.fetchComponent(b).then(e=>({Component:e.page,styleSheets:e.styleSheets,__N_SSG:e.mod.__N_SSG,__N_SSP:e.mod.__N_SSP})),A=null==j||null==(R=j.response)?void 0:R.headers.get(\"x-middleware-skip\"),C=T.__N_SSG||T.__N_SSP;A&&(null==j?void 0:j.dataHref)&&delete this.sdc[j.dataHref];let{props:w,cacheKey:I}=await this._getData(async()=>{if(C){if((null==j?void 0:j.json)&&!A)return{cacheKey:j.cacheKey,props:j.json};let e=(null==j?void 0:j.dataHref)?j.dataHref:this.pageLoader.getDataHref({href:(0,g.formatWithValidation)({pathname:r,query:n}),asPath:i,locale:s}),t=await W({dataHref:e,isServerRender:this.isSsr,parseJSON:!0,inflightCache:A?{}:this.sdc,persistCache:!d,isPrefetch:!1,unstable_skipClientCache:p});return{cacheKey:t.cacheKey,props:t.json||{}}}return{headers:{},props:await this.getInitialProps(T.Component,{pathname:r,query:n,asPath:o,locale:s,locales:this.locales,defaultLocale:this.defaultLocale})}});return T.__N_SSP&&O.dataHref&&I&&delete this.sdc[I],this.isPreview||!T.__N_SSG||h||W(Object.assign({},O,{isBackground:!0,persistCache:!1,inflightCache:this.sbc})).catch(()=>{}),w.pageProps=Object.assign({},w.pageProps),T.props=w,T.route=b,T.query=n,T.resolvedAs=i,this.components[b]=T,T}catch(e){return this.handleRouteInfoError((0,u.getProperError)(e),r,n,o,l)}}set(e,t,r){return this.state=e,this.sub(t,this.components[\"/_app\"].Component,r)}beforePopState(e){this._bps=e}onlyAHashChange(e){if(!this.asPath)return!1;let[t,r]=this.asPath.split(\"#\",2),[n,o]=e.split(\"#\",2);return!!o&&t===n&&r===o||t===n&&r!==o}scrollToHash(e){let[,t=\"\"]=e.split(\"#\",2);(0,x.handleSmoothScroll)(()=>{if(\"\"===t||\"top\"===t)return void window.scrollTo(0,0);let e=decodeURIComponent(t),r=document.getElementById(e);if(r)return void r.scrollIntoView();let n=document.getElementsByName(e)[0];n&&n.scrollIntoView()},{onlyHashChange:this.onlyAHashChange(e)})}urlIsNew(e){return this.asPath!==e}async prefetch(e,t,r){if(void 0===t&&(t=e),void 0===r&&(r={}),(0,w.isBot)(window.navigator.userAgent))return;let n=(0,h.parseRelativeUrl)(e),o=n.pathname,{pathname:i,query:l}=n,u=i,s=await this.pageLoader.getPageList(),c=t,f=void 0!==r.locale?r.locale||void 0:this.locale,d=await D({asPath:t,locale:f,router:this});n.pathname=F(n.pathname,s),(0,p.isDynamicRoute)(n.pathname)&&(i=n.pathname,n.pathname=i,Object.assign(l,(0,_.getRouteMatcher)((0,m.getRouteRegex)(n.pathname))((0,b.parsePath)(t).pathname)||{}),d||(e=(0,g.formatWithValidation)(n)));let E=await B({fetchData:()=>W({dataHref:this.pageLoader.getDataHref({href:(0,g.formatWithValidation)({pathname:u,query:l}),skipInterpolation:!0,asPath:c,locale:f}),hasMiddleware:!0,isServerRender:!1,parseJSON:!0,inflightCache:this.sdc,persistCache:!this.isPreview,isPrefetch:!0}),asPath:t,locale:f,router:this});if((null==E?void 0:E.effect.type)===\"rewrite\"&&(n.pathname=E.effect.resolvedHref,i=E.effect.resolvedHref,l={...l,...E.effect.parsedAs.query},c=E.effect.parsedAs.pathname,e=(0,g.formatWithValidation)(n)),(null==E?void 0:E.effect.type)===\"redirect-external\")return;let y=(0,a.removeTrailingSlash)(i);await this._bfl(t,c,r.locale,!0)&&(this.components[o]={__appRouter:!0}),await Promise.all([this.pageLoader._isSsg(y).then(t=>!!t&&W({dataHref:(null==E?void 0:E.json)?null==E?void 0:E.dataHref:this.pageLoader.getDataHref({href:e,asPath:c,locale:f}),isServerRender:!1,parseJSON:!0,inflightCache:this.sdc,persistCache:!this.isPreview,isPrefetch:!0,unstable_skipClientCache:r.unstable_skipClientCache||r.priority&&!0}).then(()=>!1).catch(()=>!1)),this.pageLoader[r.priority?\"loadPage\":\"prefetch\"](y)])}async fetchComponent(e){let t=V({route:e,router:this});try{let r=await this.pageLoader.loadPage(e);return t(),r}catch(e){throw t(),e}}_getData(e){let t=!1,r=()=>{t=!0};return this.clc=r,e().then(e=>{if(r===this.clc&&(this.clc=null),t){let e=Object.defineProperty(Error(\"Loading initial props cancelled\"),\"__NEXT_ERROR_CODE\",{value:\"E405\",enumerable:!1,configurable:!0});throw e.cancelled=!0,e}return e})}getInitialProps(e,t){let{Component:r}=this.components[\"/_app\"],n=this._wrapApp(r);return t.AppTree=n,(0,d.loadGetInitialProps)(r,{AppTree:n,Component:e,router:this,ctx:t})}get route(){return this.state.route}get pathname(){return this.state.pathname}get query(){return this.state.query}get asPath(){return this.state.asPath}get locale(){return this.state.locale}get isFallback(){return this.state.isFallback}get isPreview(){return this.state.isPreview}constructor(e,t,r,{initialProps:n,pageLoader:o,App:i,wrapApp:l,Component:u,err:s,subscription:c,isFallback:f,locale:_,locales:m,defaultLocale:b,domainLocales:E,isPreview:y}){this.sdc={},this.sbc={},this.isFirstPopStateEvent=!0,this._key=G(),this.onPopState=e=>{let t,{isFirstPopStateEvent:r}=this;this.isFirstPopStateEvent=!1;let n=e.state;if(!n){let{pathname:e,query:t}=this;this.changeState(\"replaceState\",(0,g.formatWithValidation)({pathname:(0,v.addBasePath)(e),query:t}),(0,d.getURL)());return}if(n.__NA)return void window.location.reload();if(!n.__N||r&&this.locale===n.options.locale&&n.as===this.asPath)return;let{url:o,as:a,options:i,key:l}=n;this._key=l;let{pathname:u}=(0,h.parseRelativeUrl)(o);(!this.isSsr||a!==(0,v.addBasePath)(this.asPath)||u!==(0,v.addBasePath)(this.pathname))&&(!this._bps||this._bps(n))&&this.change(\"replaceState\",o,a,Object.assign({},i,{shallow:i.shallow&&this._shallow,locale:i.locale||this.defaultLocale,_h:0}),t)};let P=(0,a.removeTrailingSlash)(e);this.components={},\"/_error\"!==e&&(this.components[P]={Component:u,initial:!0,props:n,err:s,__N_SSG:n&&n.__N_SSG,__N_SSP:n&&n.__N_SSP}),this.components[\"/_app\"]={Component:i,styleSheets:[]},this.events=z.events,this.pageLoader=o;let R=(0,p.isDynamicRoute)(e)&&self.__NEXT_DATA__.autoExport;if(this.basePath=\"\",this.sub=c,this.clc=null,this._wrapApp=l,this.isSsr=!0,this.isLocaleDomain=!1,this.isReady=!!(self.__NEXT_DATA__.gssp||self.__NEXT_DATA__.gip||self.__NEXT_DATA__.isExperimentalCompile||self.__NEXT_DATA__.appGip&&!self.__NEXT_DATA__.gsp||!R&&!self.location.search),this.state={route:P,pathname:e,query:t,asPath:R?e:r,isPreview:!!y,locale:void 0,isFallback:f},this._initialMatchesMiddlewarePromise=Promise.resolve(!1),!r.startsWith(\"//\")){let n={locale:_},o=(0,d.getURL)();this._initialMatchesMiddlewarePromise=D({router:this,locale:_,asPath:o}).then(a=>(n._shouldResolveHref=r!==e,this.changeState(\"replaceState\",a?o:(0,g.formatWithValidation)({pathname:(0,v.addBasePath)(e),query:t}),o,n),a))}window.addEventListener(\"popstate\",this.onPopState)}}z.events=(0,f.default)()},8365:(e,t,r)=>{\"use strict\";function n(e){if(\"function\"!=typeof WeakMap)return null;var t=new WeakMap,r=new WeakMap;return(n=function(e){return e?r:t})(e)}function o(e,t){if(!t&&e&&e.__esModule)return e;if(null===e||\"object\"!=typeof e&&\"function\"!=typeof e)return{default:e};var r=n(t);if(r&&r.has(e))return r.get(e);var o={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(\"default\"!==i&&Object.prototype.hasOwnProperty.call(e,i)){var l=a?Object.getOwnPropertyDescriptor(e,i):null;l&&(l.get||l.set)?Object.defineProperty(o,i,l):o[i]=e[i]}return o.default=e,r&&r.set(e,o),o}r.r(t),r.d(t,{_:()=>o})},8480:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{formatUrl:function(){return a},formatWithValidation:function(){return l},urlObjectKeys:function(){return i}});let n=r(8365)._(r(8040)),o=/https?|ftp|gopher|file/;function a(e){let{auth:t,hostname:r}=e,a=e.protocol||\"\",i=e.pathname||\"\",l=e.hash||\"\",u=e.query||\"\",s=!1;t=t?encodeURIComponent(t).replace(/%3A/i,\":\")+\"@\":\"\",e.host?s=t+e.host:r&&(s=t+(~r.indexOf(\":\")?\"[\"+r+\"]\":r),e.port&&(s+=\":\"+e.port)),u&&\"object\"==typeof u&&(u=String(n.urlQueryToSearchParams(u)));let c=e.search||u&&\"?\"+u||\"\";return a&&!a.endsWith(\":\")&&(a+=\":\"),e.slashes||(!a||o.test(a))&&!1!==s?(s=\"//\"+(s||\"\"),i&&\"/\"!==i[0]&&(i=\"/\"+i)):s||(s=\"\"),l&&\"#\"!==l[0]&&(l=\"#\"+l),c&&\"?\"!==c[0]&&(c=\"?\"+c),\"\"+a+s+(i=i.replace(/[?#]/g,encodeURIComponent))+(c=c.replace(\"#\",\"%23\"))+l}let i=[\"auth\",\"hash\",\"host\",\"hostname\",\"href\",\"path\",\"pathname\",\"port\",\"protocol\",\"query\",\"search\",\"slashes\"];function l(e){return a(e)}},8677:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"ImageConfigContext\",{enumerable:!0,get:function(){return a}});let n=r(4252)._(r(4232)),o=r(7539),a=n.default.createContext(o.imageConfigDefault)},8714:(e,t)=>{\"use strict\";function r(e){return\"(\"===e[0]&&e.endsWith(\")\")}function n(e){return e.startsWith(\"@\")&&\"@children\"!==e}function o(e,t){if(e.includes(a)){let e=JSON.stringify(t);return\"{}\"!==e?a+\"?\"+e:a}return e}Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{DEFAULT_SEGMENT_KEY:function(){return i},PAGE_SEGMENT_KEY:function(){return a},addSearchParamsIfPageSegment:function(){return o},isGroupSegment:function(){return r},isParallelRouteSegment:function(){return n}});let a=\"__PAGE__\",i=\"__DEFAULT__\"},8757:(e,t)=>{\"use strict\";function r(){return\"\"}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"getDeploymentIdQueryOrEmptyString\",{enumerable:!0,get:function(){return r}})},8831:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"HeadManagerContext\",{enumerable:!0,get:function(){return n}});let n=r(4252)._(r(4232)).default.createContext({})},9163:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"isDynamicRoute\",{enumerable:!0,get:function(){return i}});let n=r(7188),o=/\\/[^/]*\\[[^/]+\\][^/]*(?=\\/|$)/,a=/\\/\\[[^/]+\\](?=\\/|$)/;function i(e,t){return(void 0===t&&(t=!0),(0,n.isInterceptionRouteAppPath)(e)&&(e=(0,n.extractInterceptionRouteInformation)(e).interceptedRoute),t)?a.test(e):o.test(e)}},9308:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{ACTION_SUFFIX:function(){return f},APP_DIR_ALIAS:function(){return I},CACHE_ONE_YEAR:function(){return R},DOT_NEXT_ALIAS:function(){return C},ESLINT_DEFAULT_DIRS:function(){return $},GSP_NO_RETURNED_VALUE:function(){return G},GSSP_COMPONENT_MEMBER_ERROR:function(){return z},GSSP_NO_RETURNED_VALUE:function(){return q},INFINITE_CACHE:function(){return O},INSTRUMENTATION_HOOK_FILENAME:function(){return T},MATCHED_PATH_HEADER:function(){return o},MIDDLEWARE_FILENAME:function(){return S},MIDDLEWARE_LOCATION_REGEXP:function(){return j},NEXT_BODY_SUFFIX:function(){return h},NEXT_CACHE_IMPLICIT_TAG_ID:function(){return v},NEXT_CACHE_REVALIDATED_TAGS_HEADER:function(){return m},NEXT_CACHE_REVALIDATE_TAG_TOKEN_HEADER:function(){return g},NEXT_CACHE_SOFT_TAG_MAX_LENGTH:function(){return P},NEXT_CACHE_TAGS_HEADER:function(){return _},NEXT_CACHE_TAG_MAX_ITEMS:function(){return E},NEXT_CACHE_TAG_MAX_LENGTH:function(){return y},NEXT_DATA_SUFFIX:function(){return d},NEXT_INTERCEPTION_MARKER_PREFIX:function(){return n},NEXT_META_SUFFIX:function(){return p},NEXT_QUERY_PARAM_PREFIX:function(){return r},NEXT_RESUME_HEADER:function(){return b},NON_STANDARD_NODE_ENV:function(){return Y},PAGES_DIR_ALIAS:function(){return A},PRERENDER_REVALIDATE_HEADER:function(){return a},PRERENDER_REVALIDATE_ONLY_GENERATED_HEADER:function(){return i},PUBLIC_DIR_MIDDLEWARE_CONFLICT:function(){return k},ROOT_DIR_ALIAS:function(){return w},RSC_ACTION_CLIENT_WRAPPER_ALIAS:function(){return U},RSC_ACTION_ENCRYPTION_ALIAS:function(){return D},RSC_ACTION_PROXY_ALIAS:function(){return M},RSC_ACTION_VALIDATE_ALIAS:function(){return x},RSC_CACHE_WRAPPER_ALIAS:function(){return L},RSC_MOD_REF_PROXY_ALIAS:function(){return N},RSC_PREFETCH_SUFFIX:function(){return l},RSC_SEGMENTS_DIR_SUFFIX:function(){return u},RSC_SEGMENT_SUFFIX:function(){return s},RSC_SUFFIX:function(){return c},SERVER_PROPS_EXPORT_ERROR:function(){return W},SERVER_PROPS_GET_INIT_PROPS_CONFLICT:function(){return B},SERVER_PROPS_SSG_CONFLICT:function(){return H},SERVER_RUNTIME:function(){return Q},SSG_FALLBACK_EXPORT_ERROR:function(){return K},SSG_GET_INITIAL_PROPS_CONFLICT:function(){return F},STATIC_STATUS_PAGE_GET_INITIAL_PROPS_ERROR:function(){return X},UNSTABLE_REVALIDATE_RENAME_ERROR:function(){return V},WEBPACK_LAYERS:function(){return Z},WEBPACK_RESOURCE_QUERIES:function(){return ee}});let r=\"nxtP\",n=\"nxtI\",o=\"x-matched-path\",a=\"x-prerender-revalidate\",i=\"x-prerender-revalidate-if-generated\",l=\".prefetch.rsc\",u=\".segments\",s=\".segment.rsc\",c=\".rsc\",f=\".action\",d=\".json\",p=\".meta\",h=\".body\",_=\"x-next-cache-tags\",m=\"x-next-revalidated-tags\",g=\"x-next-revalidate-tag-token\",b=\"next-resume\",E=128,y=256,P=1024,v=\"_N_T_\",R=31536e3,O=0xfffffffe,S=\"middleware\",j=`(?:src/)?${S}`,T=\"instrumentation\",A=\"private-next-pages\",C=\"private-dot-next\",w=\"private-next-root-dir\",I=\"private-next-app-dir\",N=\"private-next-rsc-mod-ref-proxy\",x=\"private-next-rsc-action-validate\",M=\"private-next-rsc-server-reference\",L=\"private-next-rsc-cache-wrapper\",D=\"private-next-rsc-action-encryption\",U=\"private-next-rsc-action-client-wrapper\",k=\"You can not have a '_next' folder inside of your public folder. This conflicts with the internal '/_next' route. https://nextjs.org/docs/messages/public-next-folder-conflict\",F=\"You can not use getInitialProps with getStaticProps. To use SSG, please remove your getInitialProps\",B=\"You can not use getInitialProps with getServerSideProps. Please remove getInitialProps.\",H=\"You can not use getStaticProps or getStaticPaths with getServerSideProps. To use SSG, please remove getServerSideProps\",X=\"can not have getInitialProps/getServerSideProps, https://nextjs.org/docs/messages/404-get-initial-props\",W=\"pages with `getServerSideProps` can not be exported. See more info here: https://nextjs.org/docs/messages/gssp-export\",G=\"Your `getStaticProps` function did not return an object. Did you forget to add a `return`?\",q=\"Your `getServerSideProps` function did not return an object. Did you forget to add a `return`?\",V=\"The `unstable_revalidate` property is available for general use.\\nPlease use `revalidate` instead.\",z=\"can not be attached to a page's component and must be exported from the page. See more info here: https://nextjs.org/docs/messages/gssp-component-member\",Y='You are using a non-standard \"NODE_ENV\" value in your environment. This creates inconsistencies in the project and is strongly advised against. Read more: https://nextjs.org/docs/messages/non-standard-node-env',K=\"Pages with `fallback` enabled in `getStaticPaths` can not be exported. See more info here: https://nextjs.org/docs/messages/ssg-fallback-true-export\",$=[\"app\",\"pages\",\"components\",\"lib\",\"src\"],Q={edge:\"edge\",experimentalEdge:\"experimental-edge\",nodejs:\"nodejs\"},J={shared:\"shared\",reactServerComponents:\"rsc\",serverSideRendering:\"ssr\",actionBrowser:\"action-browser\",apiNode:\"api-node\",apiEdge:\"api-edge\",middleware:\"middleware\",instrument:\"instrument\",edgeAsset:\"edge-asset\",appPagesBrowser:\"app-pages-browser\",pagesDirBrowser:\"pages-dir-browser\",pagesDirEdge:\"pages-dir-edge\",pagesDirNode:\"pages-dir-node\"},Z={...J,GROUP:{builtinReact:[J.reactServerComponents,J.actionBrowser],serverOnly:[J.reactServerComponents,J.actionBrowser,J.instrument,J.middleware],neutralTarget:[J.apiNode,J.apiEdge],clientOnly:[J.serverSideRendering,J.appPagesBrowser],bundled:[J.reactServerComponents,J.actionBrowser,J.serverSideRendering,J.appPagesBrowser,J.shared,J.instrument,J.middleware],appPages:[J.reactServerComponents,J.serverSideRendering,J.appPagesBrowser,J.actionBrowser]}},ee={edgeSSREntry:\"__next_edge_ssr_entry__\",metadata:\"__next_metadata__\",metadataRoute:\"__next_metadata_route__\",metadataImageMeta:\"__next_metadata_image_meta__\"}},9341:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"default\",{enumerable:!0,get:function(){return c}});let n=r(4252),o=r(7876),a=n._(r(4232)),i=n._(r(5679)),l={400:\"Bad Request\",404:\"This page could not be found\",405:\"Method Not Allowed\",500:\"Internal Server Error\"};function u(e){let{req:t,res:r,err:n}=e;return{statusCode:r&&r.statusCode?r.statusCode:n?n.statusCode:404,hostname:window.location.hostname}}let s={error:{fontFamily:'system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"',height:\"100vh\",textAlign:\"center\",display:\"flex\",flexDirection:\"column\",alignItems:\"center\",justifyContent:\"center\"},desc:{lineHeight:\"48px\"},h1:{display:\"inline-block\",margin:\"0 20px 0 0\",paddingRight:23,fontSize:24,fontWeight:500,verticalAlign:\"top\"},h2:{fontSize:14,fontWeight:400,lineHeight:\"28px\"},wrap:{display:\"inline-block\"}};class c extends a.default.Component{render(){let{statusCode:e,withDarkMode:t=!0}=this.props,r=this.props.title||l[e]||\"An unexpected error has occurred\";return(0,o.jsxs)(\"div\",{style:s.error,children:[(0,o.jsx)(i.default,{children:(0,o.jsx)(\"title\",{children:e?e+\": \"+r:\"Application error: a client-side exception has occurred\"})}),(0,o.jsxs)(\"div\",{style:s.desc,children:[(0,o.jsx)(\"style\",{dangerouslySetInnerHTML:{__html:\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}\"+(t?\"@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\":\"\")}}),e?(0,o.jsx)(\"h1\",{className:\"next-error-h1\",style:s.h1,children:e}):null,(0,o.jsx)(\"div\",{style:s.wrap,children:(0,o.jsxs)(\"h2\",{style:s.h2,children:[this.props.title||e?r:(0,o.jsxs)(o.Fragment,{children:[\"Application error: a client-side exception has occurred\",\" \",!!this.props.hostname&&(0,o.jsxs)(o.Fragment,{children:[\"while loading \",this.props.hostname]}),\" \",\"(see the browser console for more information)\"]}),\".\"]})})]})]})}}c.displayName=\"ErrorPage\",c.getInitialProps=u,c.origGetInitialProps=u,(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9393:()=>{},9525:(e,t,r)=>{\"use strict\";let n,o,a,i,l,u,s,c,f,d,p,h;Object.defineProperty(t,\"__esModule\",{value:!0});let _=r(8365);Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{emitter:function(){return X},hydrate:function(){return eu},initialize:function(){return V},router:function(){return n},version:function(){return H}});let m=r(4252),g=r(7876);r(1291);let b=m._(r(4232)),E=m._(r(8944)),y=r(8831),P=m._(r(9871)),v=r(9948),R=r(3132),O=r(9163),S=r(8040),j=r(2917),T=r(2746),A=r(3090),C=m._(r(4547)),w=m._(r(2792)),I=r(1318),N=r(4294),x=r(6240),M=r(8677),L=r(1025),D=r(6023),U=r(2850),k=r(9609),F=r(5931),B=r(7207);r(4609),r(6999);let H=\"15.3.4\",X=(0,P.default)(),W=e=>[].slice.call(e),G=!1;class q extends b.default.Component{componentDidCatch(e,t){this.props.fn(e,t)}componentDidMount(){this.scrollToHash(),n.isSsr&&(o.isFallback||o.nextExport&&((0,O.isDynamicRoute)(n.pathname)||location.search||G)||o.props&&o.props.__N_SSG&&(location.search||G))&&n.replace(n.pathname+\"?\"+String((0,S.assign)((0,S.urlQueryToSearchParams)(n.query),new URLSearchParams(location.search))),a,{_h:1,shallow:!o.isFallback&&!G}).catch(e=>{if(!e.cancelled)throw e})}componentDidUpdate(){this.scrollToHash()}scrollToHash(){let{hash:e}=location;if(!(e=e&&e.substring(1)))return;let t=document.getElementById(e);t&&setTimeout(()=>t.scrollIntoView(),0)}render(){return this.props.children}}async function V(e){void 0===e&&(e={}),o=JSON.parse(document.getElementById(\"__NEXT_DATA__\").textContent),window.__NEXT_DATA__=o,h=o.defaultLocale;let t=o.assetPrefix||\"\";if(self.__next_set_public_path__(\"\"+t+\"/_next/\"),(0,j.setConfig)({serverRuntimeConfig:{},publicRuntimeConfig:o.runtimeConfig||{}}),a=(0,T.getURL)(),(0,D.hasBasePath)(a)&&(a=(0,L.removeBasePath)(a)),o.scriptLoader){let{initScriptLoader:e}=r(3996);e(o.scriptLoader)}i=new w.default(o.buildId,t);let s=e=>{let[t,r]=e;return i.routeLoader.onEntrypoint(t,r)};return window.__NEXT_P&&window.__NEXT_P.map(e=>setTimeout(()=>s(e),0)),window.__NEXT_P=[],window.__NEXT_P.push=s,(u=(0,C.default)()).getIsSsr=()=>n.isSsr,l=document.getElementById(\"__next\"),{assetPrefix:t}}function z(e,t){return(0,g.jsx)(e,{...t})}function Y(e){var t;let{children:r}=e,o=b.default.useMemo(()=>(0,k.adaptForAppRouterInstance)(n),[]);return(0,g.jsx)(q,{fn:e=>$({App:f,err:e}).catch(e=>console.error(\"Error rendering page: \",e)),children:(0,g.jsx)(U.AppRouterContext.Provider,{value:o,children:(0,g.jsx)(F.SearchParamsContext.Provider,{value:(0,k.adaptForSearchParams)(n),children:(0,g.jsx)(k.PathnameContextProviderAdapter,{router:n,isAutoExport:null!=(t=self.__NEXT_DATA__.autoExport)&&t,children:(0,g.jsx)(F.PathParamsContext.Provider,{value:(0,k.adaptForPathParams)(n),children:(0,g.jsx)(v.RouterContext.Provider,{value:(0,N.makePublicRouterInstance)(n),children:(0,g.jsx)(y.HeadManagerContext.Provider,{value:u,children:(0,g.jsx)(M.ImageConfigContext.Provider,{value:{deviceSizes:[640,750,828,1080,1200,1920,2048,3840],imageSizes:[16,32,48,64,96,128,256,384],path:\"/_next/image/\",loader:\"default\",dangerouslyAllowSVG:!1,unoptimized:!0},children:r})})})})})})})})}let K=e=>t=>{let r={...t,Component:p,err:o.err,router:n};return(0,g.jsx)(Y,{children:z(e,r)})};function $(e){let{App:t,err:l}=e;return console.error(l),console.error(\"A client-side exception has occurred, see here for more info: https://nextjs.org/docs/messages/client-side-exception-occurred\"),i.loadPage(\"/_error\").then(n=>{let{page:o,styleSheets:a}=n;return(null==s?void 0:s.Component)===o?Promise.resolve().then(()=>_._(r(9341))).then(n=>Promise.resolve().then(()=>_._(r(472))).then(r=>(e.App=t=r.default,n))).then(e=>({ErrorComponent:e.default,styleSheets:[]})):{ErrorComponent:o,styleSheets:a}}).then(r=>{var i;let{ErrorComponent:u,styleSheets:s}=r,c=K(t),f={Component:u,AppTree:c,router:n,ctx:{err:l,pathname:o.page,query:o.query,asPath:a,AppTree:c}};return Promise.resolve((null==(i=e.props)?void 0:i.err)?e.props:(0,T.loadGetInitialProps)(t,f)).then(t=>ei({...e,err:l,Component:u,styleSheets:s,props:t}))})}function Q(e){let{callback:t}=e;return b.default.useLayoutEffect(()=>t(),[t]),null}let J={navigationStart:\"navigationStart\",beforeRender:\"beforeRender\",afterRender:\"afterRender\",afterHydrate:\"afterHydrate\",routeChange:\"routeChange\"},Z={hydration:\"Next.js-hydration\",beforeHydration:\"Next.js-before-hydration\",routeChangeToRender:\"Next.js-route-change-to-render\",render:\"Next.js-render\"},ee=null,et=!0;function er(){[J.beforeRender,J.afterHydrate,J.afterRender,J.routeChange].forEach(e=>performance.clearMarks(e))}function en(){T.ST&&(performance.mark(J.afterHydrate),performance.getEntriesByName(J.beforeRender,\"mark\").length&&(performance.measure(Z.beforeHydration,J.navigationStart,J.beforeRender),performance.measure(Z.hydration,J.beforeRender,J.afterHydrate)),d&&performance.getEntriesByName(Z.hydration).forEach(d),er())}function eo(){if(!T.ST)return;performance.mark(J.afterRender);let e=performance.getEntriesByName(J.routeChange,\"mark\");e.length&&(performance.getEntriesByName(J.beforeRender,\"mark\").length&&(performance.measure(Z.routeChangeToRender,e[0].name,J.beforeRender),performance.measure(Z.render,J.beforeRender,J.afterRender),d&&(performance.getEntriesByName(Z.render).forEach(d),performance.getEntriesByName(Z.routeChangeToRender).forEach(d))),er(),[Z.routeChangeToRender,Z.render].forEach(e=>performance.clearMeasures(e)))}function ea(e){let{callbacks:t,children:r}=e;return b.default.useLayoutEffect(()=>t.forEach(e=>e()),[t]),r}function ei(e){let t,r,{App:o,Component:a,props:i,err:u}=e,f=\"initial\"in e?void 0:e.styleSheets;a=a||s.Component;let d={...i=i||s.props,Component:a,err:u,router:n};s=d;let p=!1,h=new Promise((e,t)=>{c&&c(),r=()=>{c=null,e()},c=()=>{p=!0,c=null;let e=Object.defineProperty(Error(\"Cancel rendering route\"),\"__NEXT_ERROR_CODE\",{value:\"E503\",enumerable:!1,configurable:!0});e.cancelled=!0,t(e)}});function _(){r()}!function(){if(!f)return;let e=new Set(W(document.querySelectorAll(\"style[data-n-href]\")).map(e=>e.getAttribute(\"data-n-href\"))),t=document.querySelector(\"noscript[data-n-css]\"),r=null==t?void 0:t.getAttribute(\"data-n-css\");f.forEach(t=>{let{href:n,text:o}=t;if(!e.has(n)){let e=document.createElement(\"style\");e.setAttribute(\"data-n-href\",n),e.setAttribute(\"media\",\"x\"),r&&e.setAttribute(\"nonce\",r),document.head.appendChild(e),e.appendChild(document.createTextNode(o))}})}();let m=(0,g.jsxs)(g.Fragment,{children:[(0,g.jsx)(Q,{callback:function(){if(f&&!p){let e=new Set(f.map(e=>e.href)),t=W(document.querySelectorAll(\"style[data-n-href]\")),r=t.map(e=>e.getAttribute(\"data-n-href\"));for(let n=0;n<r.length;++n)e.has(r[n])?t[n].removeAttribute(\"media\"):t[n].setAttribute(\"media\",\"x\");let n=document.querySelector(\"noscript[data-n-css]\");n&&f.forEach(e=>{let{href:t}=e,r=document.querySelector('style[data-n-href=\"'+t+'\"]');r&&(n.parentNode.insertBefore(r,n.nextSibling),n=r)}),W(document.querySelectorAll(\"link[data-n-p]\")).forEach(e=>{e.parentNode.removeChild(e)})}if(e.scroll){let{x:t,y:r}=e.scroll;(0,R.handleSmoothScroll)(()=>{window.scrollTo(t,r)})}}}),(0,g.jsxs)(Y,{children:[z(o,d),(0,g.jsx)(A.Portal,{type:\"next-route-announcer\",children:(0,g.jsx)(I.RouteAnnouncer,{})})]})]});var y=l;T.ST&&performance.mark(J.beforeRender);let P=(t=et?en:eo,(0,g.jsx)(ea,{callbacks:[t,_],children:(0,g.jsx)(b.default.StrictMode,{children:m})}));return ee?(0,b.default.startTransition)(()=>{ee.render(P)}):(ee=E.default.hydrateRoot(y,P,{onRecoverableError:B.onRecoverableError}),et=!1),h}async function el(e){if(e.err&&(void 0===e.Component||!e.isHydratePass))return void await $(e);try{await ei(e)}catch(r){let t=(0,x.getProperError)(r);if(t.cancelled)throw t;await $({...e,err:t})}}async function eu(e){let t=o.err;try{let e=await i.routeLoader.whenEntrypoint(\"/_app\");if(\"error\"in e)throw e.error;let{component:t,exports:r}=e;f=t,r&&r.reportWebVitals&&(d=e=>{let t,{id:n,name:o,startTime:a,value:i,duration:l,entryType:u,entries:s,attribution:c}=e,f=Date.now()+\"-\"+(Math.floor(Math.random()*(9e12-1))+1e12);s&&s.length&&(t=s[0].startTime);let d={id:n||f,name:o,startTime:a||t,value:null==i?l:i,label:\"mark\"===u||\"measure\"===u?\"custom\":\"web-vital\"};c&&(d.attribution=c),r.reportWebVitals(d)});let n=await i.routeLoader.whenEntrypoint(o.page);if(\"error\"in n)throw n.error;p=n.component}catch(e){t=(0,x.getProperError)(e)}window.__NEXT_PRELOADREADY&&await window.__NEXT_PRELOADREADY(o.dynamicIds),n=(0,N.createRouter)(o.page,o.query,a,{initialProps:o.props,pageLoader:i,App:f,Component:p,wrapApp:K,err:t,isFallback:!!o.isFallback,subscription:(e,t,r)=>el(Object.assign({},e,{App:t,scroll:r})),locale:o.locale,locales:o.locales,defaultLocale:h,domainLocales:o.domainLocales,isPreview:o.isPreview}),G=await n._initialMatchesMiddlewarePromise;let r={App:f,initial:!0,Component:p,props:o.props,err:t,isHydratePass:!0};(null==e?void 0:e.beforeRender)&&await e.beforeRender(),el(r)}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9609:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),!function(e,t){for(var r in t)Object.defineProperty(e,r,{enumerable:!0,get:t[r]})}(t,{PathnameContextProviderAdapter:function(){return p},adaptForAppRouterInstance:function(){return c},adaptForPathParams:function(){return d},adaptForSearchParams:function(){return f}});let n=r(8365),o=r(7876),a=n._(r(4232)),i=r(5931),l=r(3069),u=r(8213),s=r(5214);function c(e){return{back(){e.back()},forward(){e.forward()},refresh(){e.reload()},hmrRefresh(){},push(t,r){let{scroll:n}=void 0===r?{}:r;e.push(t,void 0,{scroll:n})},replace(t,r){let{scroll:n}=void 0===r?{}:r;e.replace(t,void 0,{scroll:n})},prefetch(t){e.prefetch(t)}}}function f(e){return e.isReady&&e.query?(0,u.asPathToSearchParams)(e.asPath):new URLSearchParams}function d(e){if(!e.isReady||!e.query)return null;let t={};for(let r of Object.keys((0,s.getRouteRegex)(e.pathname).groups))t[r]=e.query[r];return t}function p(e){let{children:t,router:r,...n}=e,u=(0,a.useRef)(n.isAutoExport),s=(0,a.useMemo)(()=>{let e,t=u.current;if(t&&(u.current=!1),(0,l.isDynamicRoute)(r.pathname)&&(r.isFallback||t&&!r.isReady))return null;try{e=new URL(r.asPath,\"http://f\")}catch(e){return\"/\"}return e.pathname},[r.asPath,r.isFallback,r.isReady,r.pathname]);return(0,o.jsx)(i.PathnameContext.Provider,{value:s,children:t})}},9611:(e,t)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"setAttributesFromProps\",{enumerable:!0,get:function(){return a}});let r={acceptCharset:\"accept-charset\",className:\"class\",htmlFor:\"for\",httpEquiv:\"http-equiv\",noModule:\"noModule\"},n=[\"onLoad\",\"onReady\",\"dangerouslySetInnerHTML\",\"children\",\"onError\",\"strategy\",\"stylesheets\"];function o(e){return[\"async\",\"defer\",\"noModule\"].includes(e)}function a(e,t){for(let[a,i]of Object.entries(t)){if(!t.hasOwnProperty(a)||n.includes(a)||void 0===i)continue;let l=r[a]||a.toLowerCase();\"SCRIPT\"===e.tagName&&o(l)?e[l]=!!i:e.setAttribute(l,String(i)),(!1===i||\"SCRIPT\"===e.tagName&&o(l)&&(!i||\"false\"===i))&&(e.setAttribute(l,\"\"),e.removeAttribute(l))}}(\"function\"==typeof t.default||\"object\"==typeof t.default&&null!==t.default)&&void 0===t.default.__esModule&&(Object.defineProperty(t.default,\"__esModule\",{value:!0}),Object.assign(t.default,t),e.exports=t.default)},9871:(e,t)=>{\"use strict\";function r(){let e=Object.create(null);return{on(t,r){(e[t]||(e[t]=[])).push(r)},off(t,r){e[t]&&e[t].splice(e[t].indexOf(r)>>>0,1)},emit(t){for(var r=arguments.length,n=Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];(e[t]||[]).slice().map(e=>{e(...n)})}}}Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"default\",{enumerable:!0,get:function(){return r}})},9948:(e,t,r)=>{\"use strict\";Object.defineProperty(t,\"__esModule\",{value:!0}),Object.defineProperty(t,\"RouterContext\",{enumerable:!0,get:function(){return n}});let n=r(4252)._(r(4232)).default.createContext(null)}},e=>{var t=t=>e(e.s=t);e.O(0,[593],()=>t(5842)),_N_E=e.O()}]);",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/main-app-fd417aa5a2a9bb88.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/pages/_app-b3eb694be5fbf7e0.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/pages/_error-bd129d02791125e2.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/polyfills-42372ed130431b0a.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 24343,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 24344
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 29774,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 29775
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 32078,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 32079
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 46535,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 46536
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 60316,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 60317
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 60743,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 60744
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 64892,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 64893
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 64894,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 64895
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'r' is defined but never used.",
        "line": 1,
        "column": 64896,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 64897
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 68413,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 68414
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 78471,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 78472
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 81805,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 81806
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 88512,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 88513
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 100325,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 100326
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 100889,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 100890
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 101232,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 101233
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 101754,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 101755
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 102302,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 102303
      },
      {
        "ruleId": "@typescript-eslint/no-this-alias",
        "severity": 2,
        "message": "Unexpected aliasing of 'this' to local variable.",
        "line": 1,
        "column": 102723,
        "nodeType": "Identifier",
        "messageId": "thisAssignment",
        "endLine": 1,
        "endColumn": 102724
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 112205,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 112206
      }
    ],
    "suppressedMessages": [],
    "errorCount": 20,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "!function(){var t=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{};function e(t){var e={exports:{}};return t(e,e.exports),e.exports}var r,n,o=function(t){return t&&t.Math===Math&&t},i=o(\"object\"==typeof globalThis&&globalThis)||o(\"object\"==typeof window&&window)||o(\"object\"==typeof self&&self)||o(\"object\"==typeof t&&t)||o(\"object\"==typeof t&&t)||function(){return this}()||Function(\"return this\")(),a=function(t){try{return!!t()}catch(t){return!0}},u=!a(function(){return 7!==Object.defineProperty({},1,{get:function(){return 7}})[1]}),s=!a(function(){var t=function(){}.bind();return\"function\"!=typeof t||t.hasOwnProperty(\"prototype\")}),c=Function.prototype.call,f=s?c.bind(c):function(){return c.apply(c,arguments)},l={}.propertyIsEnumerable,h=Object.getOwnPropertyDescriptor,p=h&&!l.call({1:2},1)?function(t){var e=h(this,t);return!!e&&e.enumerable}:l,v={f:p},d=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}},g=Function.prototype,y=g.call,m=s&&g.bind.bind(y,y),b=s?m:function(t){return function(){return y.apply(t,arguments)}},w=b({}.toString),S=b(\"\".slice),E=function(t){return S(w(t),8,-1)},O=Object,x=b(\"\".split),R=a(function(){return!O(\"z\").propertyIsEnumerable(0)})?function(t){return\"String\"===E(t)?x(t,\"\"):O(t)}:O,P=function(t){return null==t},A=TypeError,j=function(t){if(P(t))throw new A(\"Can't call method on \"+t);return t},k=function(t){return R(j(t))},I=\"object\"==typeof document&&document.all,T=void 0===I&&void 0!==I?function(t){return\"function\"==typeof t||t===I}:function(t){return\"function\"==typeof t},M=function(t){return\"object\"==typeof t?null!==t:T(t)},L=function(t,e){return arguments.length<2?T(r=i[t])?r:void 0:i[t]&&i[t][e];var r},U=b({}.isPrototypeOf),N=i.navigator,C=N&&N.userAgent,_=C?String(C):\"\",F=i.process,B=i.Deno,D=F&&F.versions||B&&B.version,z=D&&D.v8;z&&(n=(r=z.split(\".\"))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!n&&_&&(!(r=_.match(/Edge\\/(\\d+)/))||r[1]>=74)&&(r=_.match(/Chrome\\/(\\d+)/))&&(n=+r[1]);var W=n,q=i.String,H=!!Object.getOwnPropertySymbols&&!a(function(){var t=Symbol(\"symbol detection\");return!q(t)||!(Object(t)instanceof Symbol)||!Symbol.sham&&W&&W<41}),$=H&&!Symbol.sham&&\"symbol\"==typeof Symbol.iterator,K=Object,G=$?function(t){return\"symbol\"==typeof t}:function(t){var e=L(\"Symbol\");return T(e)&&U(e.prototype,K(t))},V=String,Y=function(t){try{return V(t)}catch(t){return\"Object\"}},X=TypeError,J=function(t){if(T(t))return t;throw new X(Y(t)+\" is not a function\")},Q=function(t,e){var r=t[e];return P(r)?void 0:J(r)},Z=TypeError,tt=Object.defineProperty,et=function(t,e){try{tt(i,t,{value:e,configurable:!0,writable:!0})}catch(r){i[t]=e}return e},rt=e(function(t){var e=\"__core-js_shared__\",r=t.exports=i[e]||et(e,{});(r.versions||(r.versions=[])).push({version:\"3.38.1\",mode:\"global\",copyright:\"© 2014-2024 Denis Pushkarev (zloirock.ru)\",license:\"https://github.com/zloirock/core-js/blob/v3.38.1/LICENSE\",source:\"https://github.com/zloirock/core-js\"})}),nt=function(t,e){return rt[t]||(rt[t]=e||{})},ot=Object,it=function(t){return ot(j(t))},at=b({}.hasOwnProperty),ut=Object.hasOwn||function(t,e){return at(it(t),e)},st=0,ct=Math.random(),ft=b(1..toString),lt=function(t){return\"Symbol(\"+(void 0===t?\"\":t)+\")_\"+ft(++st+ct,36)},ht=i.Symbol,pt=nt(\"wks\"),vt=$?ht.for||ht:ht&&ht.withoutSetter||lt,dt=function(t){return ut(pt,t)||(pt[t]=H&&ut(ht,t)?ht[t]:vt(\"Symbol.\"+t)),pt[t]},gt=TypeError,yt=dt(\"toPrimitive\"),mt=function(t,e){if(!M(t)||G(t))return t;var r,n=Q(t,yt);if(n){if(void 0===e&&(e=\"default\"),r=f(n,t,e),!M(r)||G(r))return r;throw new gt(\"Can't convert object to primitive value\")}return void 0===e&&(e=\"number\"),function(t,e){var r,n;if(\"string\"===e&&T(r=t.toString)&&!M(n=f(r,t)))return n;if(T(r=t.valueOf)&&!M(n=f(r,t)))return n;if(\"string\"!==e&&T(r=t.toString)&&!M(n=f(r,t)))return n;throw new Z(\"Can't convert object to primitive value\")}(t,e)},bt=function(t){var e=mt(t,\"string\");return G(e)?e:e+\"\"},wt=i.document,St=M(wt)&&M(wt.createElement),Et=function(t){return St?wt.createElement(t):{}},Ot=!u&&!a(function(){return 7!==Object.defineProperty(Et(\"div\"),\"a\",{get:function(){return 7}}).a}),xt=Object.getOwnPropertyDescriptor,Rt={f:u?xt:function(t,e){if(t=k(t),e=bt(e),Ot)try{return xt(t,e)}catch(t){}if(ut(t,e))return d(!f(v.f,t,e),t[e])}},Pt=u&&a(function(){return 42!==Object.defineProperty(function(){},\"prototype\",{value:42,writable:!1}).prototype}),At=String,jt=TypeError,kt=function(t){if(M(t))return t;throw new jt(At(t)+\" is not an object\")},It=TypeError,Tt=Object.defineProperty,Mt=Object.getOwnPropertyDescriptor,Lt=\"enumerable\",Ut=\"configurable\",Nt=\"writable\",Ct={f:u?Pt?function(t,e,r){if(kt(t),e=bt(e),kt(r),\"function\"==typeof t&&\"prototype\"===e&&\"value\"in r&&Nt in r&&!r[Nt]){var n=Mt(t,e);n&&n[Nt]&&(t[e]=r.value,r={configurable:Ut in r?r[Ut]:n[Ut],enumerable:Lt in r?r[Lt]:n[Lt],writable:!1})}return Tt(t,e,r)}:Tt:function(t,e,r){if(kt(t),e=bt(e),kt(r),Ot)try{return Tt(t,e,r)}catch(t){}if(\"get\"in r||\"set\"in r)throw new It(\"Accessors not supported\");return\"value\"in r&&(t[e]=r.value),t}},_t=u?function(t,e,r){return Ct.f(t,e,d(1,r))}:function(t,e,r){return t[e]=r,t},Ft=Function.prototype,Bt=u&&Object.getOwnPropertyDescriptor,Dt=ut(Ft,\"name\"),zt={EXISTS:Dt,PROPER:Dt&&\"something\"===function(){}.name,CONFIGURABLE:Dt&&(!u||u&&Bt(Ft,\"name\").configurable)},Wt=b(Function.toString);T(rt.inspectSource)||(rt.inspectSource=function(t){return Wt(t)});var qt,Ht,$t,Kt=rt.inspectSource,Gt=i.WeakMap,Vt=T(Gt)&&/native code/.test(String(Gt)),Yt=nt(\"keys\"),Xt=function(t){return Yt[t]||(Yt[t]=lt(t))},Jt={},Qt=\"Object already initialized\",Zt=i.TypeError;if(Vt||rt.state){var te=rt.state||(rt.state=new(0,i.WeakMap));te.get=te.get,te.has=te.has,te.set=te.set,qt=function(t,e){if(te.has(t))throw new Zt(Qt);return e.facade=t,te.set(t,e),e},Ht=function(t){return te.get(t)||{}},$t=function(t){return te.has(t)}}else{var ee=Xt(\"state\");Jt[ee]=!0,qt=function(t,e){if(ut(t,ee))throw new Zt(Qt);return e.facade=t,_t(t,ee,e),e},Ht=function(t){return ut(t,ee)?t[ee]:{}},$t=function(t){return ut(t,ee)}}var re,ne={set:qt,get:Ht,has:$t,enforce:function(t){return $t(t)?Ht(t):qt(t,{})},getterFor:function(t){return function(e){var r;if(!M(e)||(r=Ht(e)).type!==t)throw new Zt(\"Incompatible receiver, \"+t+\" required\");return r}}},oe=e(function(t){var e=zt.CONFIGURABLE,r=ne.enforce,n=ne.get,o=String,i=Object.defineProperty,s=b(\"\".slice),c=b(\"\".replace),f=b([].join),l=u&&!a(function(){return 8!==i(function(){},\"length\",{value:8}).length}),h=String(String).split(\"String\"),p=t.exports=function(t,n,a){\"Symbol(\"===s(o(n),0,7)&&(n=\"[\"+c(o(n),/^Symbol\\(([^)]*)\\).*$/,\"$1\")+\"]\"),a&&a.getter&&(n=\"get \"+n),a&&a.setter&&(n=\"set \"+n),(!ut(t,\"name\")||e&&t.name!==n)&&(u?i(t,\"name\",{value:n,configurable:!0}):t.name=n),l&&a&&ut(a,\"arity\")&&t.length!==a.arity&&i(t,\"length\",{value:a.arity});try{a&&ut(a,\"constructor\")&&a.constructor?u&&i(t,\"prototype\",{writable:!1}):t.prototype&&(t.prototype=void 0)}catch(t){}var p=r(t);return ut(p,\"source\")||(p.source=f(h,\"string\"==typeof n?n:\"\")),t};Function.prototype.toString=p(function(){return T(this)&&n(this).source||Kt(this)},\"toString\")}),ie=function(t,e,r,n){n||(n={});var o=n.enumerable,i=void 0!==n.name?n.name:e;if(T(r)&&oe(r,i,n),n.global)o?t[e]=r:et(e,r);else{try{n.unsafe?t[e]&&(o=!0):delete t[e]}catch(t){}o?t[e]=r:Ct.f(t,e,{value:r,enumerable:!1,configurable:!n.nonConfigurable,writable:!n.nonWritable})}return t},ae=Math.ceil,ue=Math.floor,se=Math.trunc||function(t){var e=+t;return(e>0?ue:ae)(e)},ce=function(t){var e=+t;return e!=e||0===e?0:se(e)},fe=Math.max,le=Math.min,he=function(t,e){var r=ce(t);return r<0?fe(r+e,0):le(r,e)},pe=Math.min,ve=function(t){var e=ce(t);return e>0?pe(e,9007199254740991):0},de=function(t){return ve(t.length)},ge=function(t){return function(e,r,n){var o=k(e),i=de(o);if(0===i)return!t&&-1;var a,u=he(n,i);if(t&&r!=r){for(;i>u;)if((a=o[u++])!=a)return!0}else for(;i>u;u++)if((t||u in o)&&o[u]===r)return t||u||0;return!t&&-1}},ye={includes:ge(!0),indexOf:ge(!1)},me=ye.indexOf,be=b([].push),we=function(t,e){var r,n=k(t),o=0,i=[];for(r in n)!ut(Jt,r)&&ut(n,r)&&be(i,r);for(;e.length>o;)ut(n,r=e[o++])&&(~me(i,r)||be(i,r));return i},Se=[\"constructor\",\"hasOwnProperty\",\"isPrototypeOf\",\"propertyIsEnumerable\",\"toLocaleString\",\"toString\",\"valueOf\"],Ee=Se.concat(\"length\",\"prototype\"),Oe={f:Object.getOwnPropertyNames||function(t){return we(t,Ee)}},xe={f:Object.getOwnPropertySymbols},Re=b([].concat),Pe=L(\"Reflect\",\"ownKeys\")||function(t){var e=Oe.f(kt(t)),r=xe.f;return r?Re(e,r(t)):e},Ae=function(t,e,r){for(var n=Pe(e),o=Ct.f,i=Rt.f,a=0;a<n.length;a++){var u=n[a];ut(t,u)||r&&ut(r,u)||o(t,u,i(e,u))}},je=/#|\\.prototype\\./,ke=function(t,e){var r=Te[Ie(t)];return r===Le||r!==Me&&(T(e)?a(e):!!e)},Ie=ke.normalize=function(t){return String(t).replace(je,\".\").toLowerCase()},Te=ke.data={},Me=ke.NATIVE=\"N\",Le=ke.POLYFILL=\"P\",Ue=ke,Ne=Rt.f,Ce=function(t,e){var r,n,o,a,u,s=t.target,c=t.global,f=t.stat;if(r=c?i:f?i[s]||et(s,{}):i[s]&&i[s].prototype)for(n in e){if(a=e[n],o=t.dontCallGetSet?(u=Ne(r,n))&&u.value:r[n],!Ue(c?n:s+(f?\".\":\"#\")+n,t.forced)&&void 0!==o){if(typeof a==typeof o)continue;Ae(a,o)}(t.sham||o&&o.sham)&&_t(a,\"sham\",!0),ie(r,n,a,t)}},_e=Object.keys||function(t){return we(t,Se)},Fe=u&&!Pt?Object.defineProperties:function(t,e){kt(t);for(var r,n=k(e),o=_e(e),i=o.length,a=0;i>a;)Ct.f(t,r=o[a++],n[r]);return t},Be={f:Fe},De=L(\"document\",\"documentElement\"),ze=\"prototype\",We=\"script\",qe=Xt(\"IE_PROTO\"),He=function(){},$e=function(t){return\"<\"+We+\">\"+t+\"</\"+We+\">\"},Ke=function(t){t.write($e(\"\")),t.close();var e=t.parentWindow.Object;return t=null,e},Ge=function(){try{re=new ActiveXObject(\"htmlfile\")}catch(t){}var t,e,r;Ge=\"undefined\"!=typeof document?document.domain&&re?Ke(re):(e=Et(\"iframe\"),r=\"java\"+We+\":\",e.style.display=\"none\",De.appendChild(e),e.src=String(r),(t=e.contentWindow.document).open(),t.write($e(\"document.F=Object\")),t.close(),t.F):Ke(re);for(var n=Se.length;n--;)delete Ge[ze][Se[n]];return Ge()};Jt[qe]=!0;var Ve=Object.create||function(t,e){var r;return null!==t?(He[ze]=kt(t),r=new He,He[ze]=null,r[qe]=t):r=Ge(),void 0===e?r:Be.f(r,e)},Ye=Ct.f,Xe=dt(\"unscopables\"),Je=Array.prototype;void 0===Je[Xe]&&Ye(Je,Xe,{configurable:!0,value:Ve(null)});var Qe=function(t){Je[Xe][t]=!0};Ce({target:\"Array\",proto:!0},{at:function(t){var e=it(this),r=de(e),n=ce(t),o=n>=0?n:r+n;return o<0||o>=r?void 0:e[o]}}),Qe(\"at\");var Ze=function(t,e){return b(i[t].prototype[e])},tr=(Ze(\"Array\",\"at\"),TypeError),er=function(t,e){if(!delete t[e])throw new tr(\"Cannot delete property \"+Y(e)+\" of \"+Y(t))},rr=Math.min,nr=[].copyWithin||function(t,e){var r=it(this),n=de(r),o=he(t,n),i=he(e,n),a=arguments.length>2?arguments[2]:void 0,u=rr((void 0===a?n:he(a,n))-i,n-o),s=1;for(i<o&&o<i+u&&(s=-1,i+=u-1,o+=u-1);u-- >0;)i in r?r[o]=r[i]:er(r,o),o+=s,i+=s;return r};Ce({target:\"Array\",proto:!0},{copyWithin:nr}),Qe(\"copyWithin\"),Ze(\"Array\",\"copyWithin\"),Ce({target:\"Array\",proto:!0},{fill:function(t){for(var e=it(this),r=de(e),n=arguments.length,o=he(n>1?arguments[1]:void 0,r),i=n>2?arguments[2]:void 0,a=void 0===i?r:he(i,r);a>o;)e[o++]=t;return e}}),Qe(\"fill\"),Ze(\"Array\",\"fill\");var or=function(t){if(\"Function\"===E(t))return b(t)},ir=or(or.bind),ar=function(t,e){return J(t),void 0===e?t:s?ir(t,e):function(){return t.apply(e,arguments)}},ur=Array.isArray||function(t){return\"Array\"===E(t)},sr={};sr[dt(\"toStringTag\")]=\"z\";var cr=\"[object z]\"===String(sr),fr=dt(\"toStringTag\"),lr=Object,hr=\"Arguments\"===E(function(){return arguments}()),pr=cr?E:function(t){var e,r,n;return void 0===t?\"Undefined\":null===t?\"Null\":\"string\"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=lr(t),fr))?r:hr?E(e):\"Object\"===(n=E(e))&&T(e.callee)?\"Arguments\":n},vr=function(){},dr=L(\"Reflect\",\"construct\"),gr=/^\\s*(?:class|function)\\b/,yr=b(gr.exec),mr=!gr.test(vr),br=function(t){if(!T(t))return!1;try{return dr(vr,[],t),!0}catch(t){return!1}},wr=function(t){if(!T(t))return!1;switch(pr(t)){case\"AsyncFunction\":case\"GeneratorFunction\":case\"AsyncGeneratorFunction\":return!1}try{return mr||!!yr(gr,Kt(t))}catch(t){return!0}};wr.sham=!0;var Sr=!dr||a(function(){var t;return br(br.call)||!br(Object)||!br(function(){t=!0})||t})?wr:br,Er=dt(\"species\"),Or=Array,xr=function(t,e){return new(function(t){var e;return ur(t)&&(Sr(e=t.constructor)&&(e===Or||ur(e.prototype))||M(e)&&null===(e=e[Er]))&&(e=void 0),void 0===e?Or:e}(t))(0===e?0:e)},Rr=b([].push),Pr=function(t){var e=1===t,r=2===t,n=3===t,o=4===t,i=6===t,a=7===t,u=5===t||i;return function(s,c,f,l){for(var h,p,v=it(s),d=R(v),g=de(d),y=ar(c,f),m=0,b=l||xr,w=e?b(s,g):r||a?b(s,0):void 0;g>m;m++)if((u||m in d)&&(p=y(h=d[m],m,v),t))if(e)w[m]=p;else if(p)switch(t){case 3:return!0;case 5:return h;case 6:return m;case 2:Rr(w,h)}else switch(t){case 4:return!1;case 7:Rr(w,h)}return i?-1:n||o?o:w}},Ar={forEach:Pr(0),map:Pr(1),filter:Pr(2),some:Pr(3),every:Pr(4),find:Pr(5),findIndex:Pr(6),filterReject:Pr(7)},jr=Ar.find,kr=\"find\",Ir=!0;kr in[]&&Array(1)[kr](function(){Ir=!1}),Ce({target:\"Array\",proto:!0,forced:Ir},{find:function(t){return jr(this,t,arguments.length>1?arguments[1]:void 0)}}),Qe(kr),Ze(\"Array\",\"find\");var Tr=Ar.findIndex,Mr=\"findIndex\",Lr=!0;Mr in[]&&Array(1)[Mr](function(){Lr=!1}),Ce({target:\"Array\",proto:!0,forced:Lr},{findIndex:function(t){return Tr(this,t,arguments.length>1?arguments[1]:void 0)}}),Qe(Mr),Ze(\"Array\",\"findIndex\");var Ur=TypeError,Nr=function(t){if(t>9007199254740991)throw Ur(\"Maximum allowed index exceeded\");return t},Cr=function(t,e,r,n,o,i,a,u){for(var s,c,f=o,l=0,h=!!a&&ar(a,u);l<n;)l in r&&(s=h?h(r[l],l,e):r[l],i>0&&ur(s)?(c=de(s),f=Cr(t,e,s,c,f,i-1)-1):(Nr(f+1),t[f]=s),f++),l++;return f},_r=Cr;Ce({target:\"Array\",proto:!0},{flatMap:function(t){var e,r=it(this),n=de(r);return J(t),(e=xr(r,0)).length=_r(e,r,r,n,0,1,t,arguments.length>1?arguments[1]:void 0),e}}),Qe(\"flatMap\"),Ze(\"Array\",\"flatMap\"),Ce({target:\"Array\",proto:!0},{flat:function(){var t=arguments.length?arguments[0]:void 0,e=it(this),r=de(e),n=xr(e,0);return n.length=_r(n,e,e,r,0,void 0===t?1:ce(t)),n}}),Qe(\"flat\"),Ze(\"Array\",\"flat\");var Fr,Br,Dr,zr=String,Wr=function(t){if(\"Symbol\"===pr(t))throw new TypeError(\"Cannot convert a Symbol value to a string\");return zr(t)},qr=b(\"\".charAt),Hr=b(\"\".charCodeAt),$r=b(\"\".slice),Kr=function(t){return function(e,r){var n,o,i=Wr(j(e)),a=ce(r),u=i.length;return a<0||a>=u?t?\"\":void 0:(n=Hr(i,a))<55296||n>56319||a+1===u||(o=Hr(i,a+1))<56320||o>57343?t?qr(i,a):n:t?$r(i,a,a+2):o-56320+(n-55296<<10)+65536}},Gr={codeAt:Kr(!1),charAt:Kr(!0)},Vr=!a(function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}),Yr=Xt(\"IE_PROTO\"),Xr=Object,Jr=Xr.prototype,Qr=Vr?Xr.getPrototypeOf:function(t){var e=it(t);if(ut(e,Yr))return e[Yr];var r=e.constructor;return T(r)&&e instanceof r?r.prototype:e instanceof Xr?Jr:null},Zr=dt(\"iterator\"),tn=!1;[].keys&&(\"next\"in(Dr=[].keys())?(Br=Qr(Qr(Dr)))!==Object.prototype&&(Fr=Br):tn=!0);var en=!M(Fr)||a(function(){var t={};return Fr[Zr].call(t)!==t});en&&(Fr={}),T(Fr[Zr])||ie(Fr,Zr,function(){return this});var rn={IteratorPrototype:Fr,BUGGY_SAFARI_ITERATORS:tn},nn=Ct.f,on=dt(\"toStringTag\"),an=function(t,e,r){t&&!r&&(t=t.prototype),t&&!ut(t,on)&&nn(t,on,{configurable:!0,value:e})},un={},sn=rn.IteratorPrototype,cn=function(){return this},fn=function(t,e,r,n){var o=e+\" Iterator\";return t.prototype=Ve(sn,{next:d(+!n,r)}),an(t,o,!1),un[o]=cn,t},ln=function(t,e,r){try{return b(J(Object.getOwnPropertyDescriptor(t,e)[r]))}catch(t){}},hn=String,pn=TypeError,vn=function(t){if(function(t){return M(t)||null===t}(t))return t;throw new pn(\"Can't set \"+hn(t)+\" as a prototype\")},dn=Object.setPrototypeOf||(\"__proto__\"in{}?function(){var t,e=!1,r={};try{(t=ln(Object.prototype,\"__proto__\",\"set\"))(r,[]),e=r instanceof Array}catch(t){}return function(r,n){return j(r),vn(n),M(r)?(e?t(r,n):r.__proto__=n,r):r}}():void 0),gn=zt.PROPER,yn=zt.CONFIGURABLE,mn=rn.IteratorPrototype,bn=rn.BUGGY_SAFARI_ITERATORS,wn=dt(\"iterator\"),Sn=\"keys\",En=\"values\",On=\"entries\",xn=function(){return this},Rn=function(t,e,r,n,o,i,a){fn(r,e,n);var u,s,c,l=function(t){if(t===o&&g)return g;if(!bn&&t&&t in v)return v[t];switch(t){case Sn:case En:case On:return function(){return new r(this,t)}}return function(){return new r(this)}},h=e+\" Iterator\",p=!1,v=t.prototype,d=v[wn]||v[\"@@iterator\"]||o&&v[o],g=!bn&&d||l(o),y=\"Array\"===e&&v.entries||d;if(y&&(u=Qr(y.call(new t)))!==Object.prototype&&u.next&&(Qr(u)!==mn&&(dn?dn(u,mn):T(u[wn])||ie(u,wn,xn)),an(u,h,!0)),gn&&o===En&&d&&d.name!==En&&(yn?_t(v,\"name\",En):(p=!0,g=function(){return f(d,this)})),o)if(s={values:l(En),keys:i?g:l(Sn),entries:l(On)},a)for(c in s)(bn||p||!(c in v))&&ie(v,c,s[c]);else Ce({target:e,proto:!0,forced:bn||p},s);return v[wn]!==g&&ie(v,wn,g,{name:o}),un[e]=g,s},Pn=function(t,e){return{value:t,done:e}},An=Gr.charAt,jn=\"String Iterator\",kn=ne.set,In=ne.getterFor(jn);Rn(String,\"String\",function(t){kn(this,{type:jn,string:Wr(t),index:0})},function(){var t,e=In(this),r=e.string,n=e.index;return n>=r.length?Pn(void 0,!0):(t=An(r,n),e.index+=t.length,Pn(t,!1))});var Tn=function(t,e,r){var n,o;kt(t);try{if(!(n=Q(t,\"return\"))){if(\"throw\"===e)throw r;return r}n=f(n,t)}catch(t){o=!0,n=t}if(\"throw\"===e)throw r;if(o)throw n;return kt(n),r},Mn=function(t,e,r,n){try{return n?e(kt(r)[0],r[1]):e(r)}catch(e){Tn(t,\"throw\",e)}},Ln=dt(\"iterator\"),Un=Array.prototype,Nn=function(t){return void 0!==t&&(un.Array===t||Un[Ln]===t)},Cn=function(t,e,r){u?Ct.f(t,e,d(0,r)):t[e]=r},_n=dt(\"iterator\"),Fn=function(t){if(!P(t))return Q(t,_n)||Q(t,\"@@iterator\")||un[pr(t)]},Bn=TypeError,Dn=function(t,e){var r=arguments.length<2?Fn(t):e;if(J(r))return kt(f(r,t));throw new Bn(Y(t)+\" is not iterable\")},zn=Array,Wn=function(t){var e=it(t),r=Sr(this),n=arguments.length,o=n>1?arguments[1]:void 0,i=void 0!==o;i&&(o=ar(o,n>2?arguments[2]:void 0));var a,u,s,c,l,h,p=Fn(e),v=0;if(!p||this===zn&&Nn(p))for(a=de(e),u=r?new this(a):zn(a);a>v;v++)h=i?o(e[v],v):e[v],Cn(u,v,h);else for(u=r?new this:[],l=(c=Dn(e,p)).next;!(s=f(l,c)).done;v++)h=i?Mn(c,o,[s.value,v],!0):s.value,Cn(u,v,h);return u.length=v,u},qn=dt(\"iterator\"),Hn=!1;try{var $n=0,Kn={next:function(){return{done:!!$n++}},return:function(){Hn=!0}};Kn[qn]=function(){return this},Array.from(Kn,function(){throw 2})}catch(t){}var Gn=function(t,e){try{if(!e&&!Hn)return!1}catch(t){return!1}var r=!1;try{var n={};n[qn]=function(){return{next:function(){return{done:r=!0}}}},t(n)}catch(t){}return r},Vn=!Gn(function(t){Array.from(t)});Ce({target:\"Array\",stat:!0,forced:Vn},{from:Wn});var Yn=i,Xn=ye.includes,Jn=a(function(){return!Array(1).includes()});Ce({target:\"Array\",proto:!0,forced:Jn},{includes:function(t){return Xn(this,t,arguments.length>1?arguments[1]:void 0)}}),Qe(\"includes\"),Ze(\"Array\",\"includes\");var Qn=Ct.f,Zn=\"Array Iterator\",to=ne.set,eo=ne.getterFor(Zn),ro=Rn(Array,\"Array\",function(t,e){to(this,{type:Zn,target:k(t),index:0,kind:e})},function(){var t=eo(this),e=t.target,r=t.index++;if(!e||r>=e.length)return t.target=null,Pn(void 0,!0);switch(t.kind){case\"keys\":return Pn(r,!1);case\"values\":return Pn(e[r],!1)}return Pn([r,e[r]],!1)},\"values\"),no=un.Arguments=un.Array;if(Qe(\"keys\"),Qe(\"values\"),Qe(\"entries\"),u&&\"values\"!==no.name)try{Qn(no,\"name\",{value:\"values\"})}catch(t){}cr||ie(Object.prototype,\"toString\",cr?{}.toString:function(){return\"[object \"+pr(this)+\"]\"},{unsafe:!0}),Ze(\"Array\",\"values\");var oo=Array,io=a(function(){function t(){}return!(oo.of.call(t)instanceof t)});Ce({target:\"Array\",stat:!0,forced:io},{of:function(){for(var t=0,e=arguments.length,r=new(Sr(this)?this:oo)(e);e>t;)Cn(r,t,arguments[t++]);return r.length=e,r}});var ao=dt(\"hasInstance\"),uo=Function.prototype;ao in uo||Ct.f(uo,ao,{value:oe(function(t){if(!T(this)||!M(t))return!1;var e=this.prototype;return M(e)?U(e,t):t instanceof this},ao)}),dt(\"hasInstance\");var so=function(t,e,r){return r.get&&oe(r.get,e,{getter:!0}),r.set&&oe(r.set,e,{setter:!0}),Ct.f(t,e,r)},co=zt.EXISTS,fo=Function.prototype,lo=b(fo.toString),ho=/function\\b(?:\\s|\\/\\*[\\S\\s]*?\\*\\/|\\/\\/[^\\n\\r]*[\\n\\r]+)*([^\\s(/]*)/,po=b(ho.exec);u&&!co&&so(fo,\"name\",{configurable:!0,get:function(){try{return po(ho,lo(this))[1]}catch(t){return\"\"}}});var vo=b([].slice),go=Oe.f,yo=\"object\"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[],mo={f:function(t){return yo&&\"Window\"===E(t)?function(t){try{return go(t)}catch(t){return vo(yo)}}(t):go(k(t))}},bo=a(function(){if(\"function\"==typeof ArrayBuffer){var t=new ArrayBuffer(8);Object.isExtensible(t)&&Object.defineProperty(t,\"a\",{value:8})}}),wo=Object.isExtensible,So=a(function(){wo(1)})||bo?function(t){return!!M(t)&&(!bo||\"ArrayBuffer\"!==E(t))&&(!wo||wo(t))}:wo,Eo=!a(function(){return Object.isExtensible(Object.preventExtensions({}))}),Oo=e(function(t){var e=Ct.f,r=!1,n=lt(\"meta\"),o=0,i=function(t){e(t,n,{value:{objectID:\"O\"+o++,weakData:{}}})},a=t.exports={enable:function(){a.enable=function(){},r=!0;var t=Oe.f,e=b([].splice),o={};o[n]=1,t(o).length&&(Oe.f=function(r){for(var o=t(r),i=0,a=o.length;i<a;i++)if(o[i]===n){e(o,i,1);break}return o},Ce({target:\"Object\",stat:!0,forced:!0},{getOwnPropertyNames:mo.f}))},fastKey:function(t,e){if(!M(t))return\"symbol\"==typeof t?t:(\"string\"==typeof t?\"S\":\"P\")+t;if(!ut(t,n)){if(!So(t))return\"F\";if(!e)return\"E\";i(t)}return t[n].objectID},getWeakData:function(t,e){if(!ut(t,n)){if(!So(t))return!0;if(!e)return!1;i(t)}return t[n].weakData},onFreeze:function(t){return Eo&&r&&So(t)&&!ut(t,n)&&i(t),t}};Jt[n]=!0}),xo=TypeError,Ro=function(t,e){this.stopped=t,this.result=e},Po=Ro.prototype,Ao=function(t,e,r){var n,o,i,a,u,s,c,l=!(!r||!r.AS_ENTRIES),h=!(!r||!r.IS_RECORD),p=!(!r||!r.IS_ITERATOR),v=!(!r||!r.INTERRUPTED),d=ar(e,r&&r.that),g=function(t){return n&&Tn(n,\"normal\",t),new Ro(!0,t)},y=function(t){return l?(kt(t),v?d(t[0],t[1],g):d(t[0],t[1])):v?d(t,g):d(t)};if(h)n=t.iterator;else if(p)n=t;else{if(!(o=Fn(t)))throw new xo(Y(t)+\" is not iterable\");if(Nn(o)){for(i=0,a=de(t);a>i;i++)if((u=y(t[i]))&&U(Po,u))return u;return new Ro(!1)}n=Dn(t,o)}for(s=h?t.next:n.next;!(c=f(s,n)).done;){try{u=y(c.value)}catch(t){Tn(n,\"throw\",t)}if(\"object\"==typeof u&&u&&U(Po,u))return u}return new Ro(!1)},jo=TypeError,ko=function(t,e){if(U(e,t))return t;throw new jo(\"Incorrect invocation\")},Io=function(t,e,r){var n,o;return dn&&T(n=e.constructor)&&n!==r&&M(o=n.prototype)&&o!==r.prototype&&dn(t,o),t},To=function(t,e,r){var n=-1!==t.indexOf(\"Map\"),o=-1!==t.indexOf(\"Weak\"),u=n?\"set\":\"add\",s=i[t],c=s&&s.prototype,f=s,l={},h=function(t){var e=b(c[t]);ie(c,t,\"add\"===t?function(t){return e(this,0===t?0:t),this}:\"delete\"===t?function(t){return!(o&&!M(t))&&e(this,0===t?0:t)}:\"get\"===t?function(t){return o&&!M(t)?void 0:e(this,0===t?0:t)}:\"has\"===t?function(t){return!(o&&!M(t))&&e(this,0===t?0:t)}:function(t,r){return e(this,0===t?0:t,r),this})};if(Ue(t,!T(s)||!(o||c.forEach&&!a(function(){(new s).entries().next()}))))f=r.getConstructor(e,t,n,u),Oo.enable();else if(Ue(t,!0)){var p=new f,v=p[u](o?{}:-0,1)!==p,d=a(function(){p.has(1)}),g=Gn(function(t){new s(t)}),y=!o&&a(function(){for(var t=new s,e=5;e--;)t[u](e,e);return!t.has(-0)});g||((f=e(function(t,e){ko(t,c);var r=Io(new s,t,f);return P(e)||Ao(e,r[u],{that:r,AS_ENTRIES:n}),r})).prototype=c,c.constructor=f),(d||y)&&(h(\"delete\"),h(\"has\"),n&&h(\"get\")),(y||v)&&h(u),o&&c.clear&&delete c.clear}return l[t]=f,Ce({global:!0,constructor:!0,forced:f!==s},l),an(f,t),o||r.setStrong(f,t,n),f},Mo=function(t,e,r){for(var n in e)ie(t,n,e[n],r);return t},Lo=dt(\"species\"),Uo=function(t){var e=L(t);u&&e&&!e[Lo]&&so(e,Lo,{configurable:!0,get:function(){return this}})},No=Oo.fastKey,Co=ne.set,_o=ne.getterFor,Fo={getConstructor:function(t,e,r,n){var o=t(function(t,o){ko(t,i),Co(t,{type:e,index:Ve(null),first:null,last:null,size:0}),u||(t.size=0),P(o)||Ao(o,t[n],{that:t,AS_ENTRIES:r})}),i=o.prototype,a=_o(e),s=function(t,e,r){var n,o,i=a(t),s=c(t,e);return s?s.value=r:(i.last=s={index:o=No(e,!0),key:e,value:r,previous:n=i.last,next:null,removed:!1},i.first||(i.first=s),n&&(n.next=s),u?i.size++:t.size++,\"F\"!==o&&(i.index[o]=s)),t},c=function(t,e){var r,n=a(t),o=No(e);if(\"F\"!==o)return n.index[o];for(r=n.first;r;r=r.next)if(r.key===e)return r};return Mo(i,{clear:function(){for(var t=a(this),e=t.first;e;)e.removed=!0,e.previous&&(e.previous=e.previous.next=null),e=e.next;t.first=t.last=null,t.index=Ve(null),u?t.size=0:this.size=0},delete:function(t){var e=this,r=a(e),n=c(e,t);if(n){var o=n.next,i=n.previous;delete r.index[n.index],n.removed=!0,i&&(i.next=o),o&&(o.previous=i),r.first===n&&(r.first=o),r.last===n&&(r.last=i),u?r.size--:e.size--}return!!n},forEach:function(t){for(var e,r=a(this),n=ar(t,arguments.length>1?arguments[1]:void 0);e=e?e.next:r.first;)for(n(e.value,e.key,this);e&&e.removed;)e=e.previous},has:function(t){return!!c(this,t)}}),Mo(i,r?{get:function(t){var e=c(this,t);return e&&e.value},set:function(t,e){return s(this,0===t?0:t,e)}}:{add:function(t){return s(this,t=0===t?0:t,t)}}),u&&so(i,\"size\",{configurable:!0,get:function(){return a(this).size}}),o},setStrong:function(t,e,r){var n=e+\" Iterator\",o=_o(e),i=_o(n);Rn(t,e,function(t,e){Co(this,{type:n,target:t,state:o(t),kind:e,last:null})},function(){for(var t=i(this),e=t.kind,r=t.last;r&&r.removed;)r=r.previous;return t.target&&(t.last=r=r?r.next:t.state.first)?Pn(\"keys\"===e?r.key:\"values\"===e?r.value:[r.key,r.value],!1):(t.target=null,Pn(void 0,!0))},r?\"entries\":\"values\",!r,!0),Uo(e)}};To(\"Map\",function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},Fo);var Bo=Map.prototype,Do={Map:Map,set:b(Bo.set),get:b(Bo.get),has:b(Bo.has),remove:b(Bo.delete),proto:Bo},zo=Do.Map,Wo=Do.has,qo=Do.get,Ho=Do.set,$o=b([].push),Ko=a(function(){return 1!==zo.groupBy(\"ab\",function(t){return t}).get(\"a\").length});Ce({target:\"Map\",stat:!0,forced:Ko},{groupBy:function(t,e){j(t),J(e);var r=new zo,n=0;return Ao(t,function(t){var o=e(t,n++);Wo(r,o)?$o(qo(r,o),t):Ho(r,o,[t])}),r}});var Go={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0},Vo=Et(\"span\").classList,Yo=Vo&&Vo.constructor&&Vo.constructor.prototype,Xo=Yo===Object.prototype?void 0:Yo,Jo=dt(\"iterator\"),Qo=ro.values,Zo=function(t,e){if(t){if(t[Jo]!==Qo)try{_t(t,Jo,Qo)}catch(e){t[Jo]=Qo}if(an(t,e,!0),Go[e])for(var r in ro)if(t[r]!==ro[r])try{_t(t,r,ro[r])}catch(e){t[r]=ro[r]}}};for(var ti in Go)Zo(i[ti]&&i[ti].prototype,ti);Zo(Xo,\"DOMTokenList\");var ei=function(t,e,r){return function(n){var o=it(n),i=arguments.length,a=i>1?arguments[1]:void 0,u=void 0!==a,s=u?ar(a,i>2?arguments[2]:void 0):void 0,c=new t,f=0;return Ao(o,function(t){var n=u?s(t,f++):t;r?e(c,kt(n)[0],n[1]):e(c,n)}),c}};Ce({target:\"Map\",stat:!0,forced:!0},{from:ei(Do.Map,Do.set,!0)});var ri=function(t,e,r){return function(){for(var n=new t,o=arguments.length,i=0;i<o;i++){var a=arguments[i];r?e(n,kt(a)[0],a[1]):e(n,a)}return n}};Ce({target:\"Map\",stat:!0,forced:!0},{of:ri(Do.Map,Do.set,!0)});var ni=Do.has,oi=function(t){return ni(t),t},ii=Do.remove;Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{deleteAll:function(){for(var t,e=oi(this),r=!0,n=0,o=arguments.length;n<o;n++)t=ii(e,arguments[n]),r=r&&t;return!!r}});var ai=Do.get,ui=Do.has,si=Do.set;Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{emplace:function(t,e){var r,n,o=oi(this);return ui(o,t)?(r=ai(o,t),\"update\"in e&&(r=e.update(r,t,o),si(o,t,r)),r):(n=e.insert(t,o),si(o,t,n),n)}});var ci=function(t,e,r){for(var n,o,i=r?t:t.iterator,a=t.next;!(n=f(a,i)).done;)if(void 0!==(o=e(n.value)))return o},fi=Do.Map,li=Do.proto,hi=b(li.forEach),pi=b(li.entries),vi=pi(new fi).next,di=function(t,e,r){return r?ci({iterator:pi(t),next:vi},function(t){return e(t[1],t[0])}):hi(t,e)};Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{every:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0);return!1!==di(e,function(t,n){if(!r(t,n,e))return!1},!0)}});var gi=Do.Map,yi=Do.set;Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{filter:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=new gi;return di(e,function(t,o){r(t,o,e)&&yi(n,o,t)}),n}}),Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{find:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=di(e,function(t,n){if(r(t,n,e))return{value:t}},!0);return n&&n.value}}),Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{findKey:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=di(e,function(t,n){if(r(t,n,e))return{key:n}},!0);return n&&n.key}}),Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{includes:function(t){return!0===di(oi(this),function(e){if((r=e)===(n=t)||r!=r&&n!=n)return!0;var r,n},!0)}});var mi=Do.Map;Ce({target:\"Map\",stat:!0,forced:!0},{keyBy:function(t,e){var r=new(T(this)?this:mi);J(e);var n=J(r.set);return Ao(t,function(t){f(n,r,e(t),t)}),r}}),Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{keyOf:function(t){var e=di(oi(this),function(e,r){if(e===t)return{key:r}},!0);return e&&e.key}});var bi=Do.Map,wi=Do.set;Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{mapKeys:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=new bi;return di(e,function(t,o){wi(n,r(t,o,e),t)}),n}});var Si=Do.Map,Ei=Do.set;Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{mapValues:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=new Si;return di(e,function(t,o){Ei(n,o,r(t,o,e))}),n}});var Oi=Do.set;Ce({target:\"Map\",proto:!0,real:!0,arity:1,forced:!0},{merge:function(t){for(var e=oi(this),r=arguments.length,n=0;n<r;)Ao(arguments[n++],function(t,r){Oi(e,t,r)},{AS_ENTRIES:!0});return e}});var xi=TypeError;Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{reduce:function(t){var e=oi(this),r=arguments.length<2,n=r?void 0:arguments[1];if(J(t),di(e,function(o,i){r?(r=!1,n=o):n=t(n,o,i,e)}),r)throw new xi(\"Reduce of empty map with no initial value\");return n}}),Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{some:function(t){var e=oi(this),r=ar(t,arguments.length>1?arguments[1]:void 0);return!0===di(e,function(t,n){if(r(t,n,e))return!0},!0)}});var Ri=TypeError,Pi=Do.get,Ai=Do.has,ji=Do.set;Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{update:function(t,e){var r=oi(this),n=arguments.length;J(e);var o=Ai(r,t);if(!o&&n<3)throw new Ri(\"Updating absent value\");var i=o?Pi(r,t):J(n>2?arguments[2]:void 0)(t,r);return ji(r,t,e(i,t,r)),r}});var ki=TypeError,Ii=function(t,e){var r,n=kt(this),o=J(n.get),i=J(n.has),a=J(n.set),u=arguments.length>2?arguments[2]:void 0;if(!T(e)&&!T(u))throw new ki(\"At least one callback required\");return f(i,n,t)?(r=f(o,n,t),T(e)&&(r=e(r),f(a,n,t,r))):T(u)&&(r=u(),f(a,n,t,r)),r};Ce({target:\"Map\",proto:!0,real:!0,forced:!0},{upsert:Ii}),Ce({target:\"Map\",proto:!0,real:!0,name:\"upsert\",forced:!0},{updateOrInsert:Ii});var Ti=b(1..valueOf),Mi=\"\\t\\n\\v\\f\\r                　\\u2028\\u2029\\ufeff\",Li=b(\"\".replace),Ui=RegExp(\"^[\"+Mi+\"]+\"),Ni=RegExp(\"(^|[^\"+Mi+\"])[\"+Mi+\"]+$\"),Ci=function(t){return function(e){var r=Wr(j(e));return 1&t&&(r=Li(r,Ui,\"\")),2&t&&(r=Li(r,Ni,\"$1\")),r}},_i={start:Ci(1),end:Ci(2),trim:Ci(3)},Fi=Oe.f,Bi=Rt.f,Di=Ct.f,zi=_i.trim,Wi=\"Number\",qi=i[Wi],Hi=qi.prototype,$i=i.TypeError,Ki=b(\"\".slice),Gi=b(\"\".charCodeAt),Vi=Ue(Wi,!qi(\" 0o1\")||!qi(\"0b1\")||qi(\"+0x1\")),Yi=function(t){var e,r=arguments.length<1?0:qi(function(t){var e=mt(t,\"number\");return\"bigint\"==typeof e?e:function(t){var e,r,n,o,i,a,u,s,c=mt(t,\"number\");if(G(c))throw new $i(\"Cannot convert a Symbol value to a number\");if(\"string\"==typeof c&&c.length>2)if(c=zi(c),43===(e=Gi(c,0))||45===e){if(88===(r=Gi(c,2))||120===r)return NaN}else if(48===e){switch(Gi(c,1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+c}for(a=(i=Ki(c,2)).length,u=0;u<a;u++)if((s=Gi(i,u))<48||s>o)return NaN;return parseInt(i,n)}return+c}(e)}(t));return U(Hi,e=this)&&a(function(){Ti(e)})?Io(Object(r),this,Yi):r};Yi.prototype=Hi,Vi&&(Hi.constructor=Yi),Ce({global:!0,constructor:!0,wrap:!0,forced:Vi},{Number:Yi}),Vi&&function(t,e){for(var r,n=u?Fi(e):\"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range\".split(\",\"),o=0;n.length>o;o++)ut(e,r=n[o])&&!ut(t,r)&&Di(t,r,Bi(e,r))}(Yn[Wi],qi),Ce({target:\"Number\",stat:!0,nonConfigurable:!0,nonWritable:!0},{EPSILON:Math.pow(2,-52)});var Xi=i.isFinite;Ce({target:\"Number\",stat:!0},{isFinite:Number.isFinite||function(t){return\"number\"==typeof t&&Xi(t)}});var Ji=Math.floor,Qi=Number.isInteger||function(t){return!M(t)&&isFinite(t)&&Ji(t)===t};Ce({target:\"Number\",stat:!0},{isInteger:Qi}),Ce({target:\"Number\",stat:!0},{isNaN:function(t){return t!=t}});var Zi=Math.abs;Ce({target:\"Number\",stat:!0},{isSafeInteger:function(t){return Qi(t)&&Zi(t)<=9007199254740991}}),Ce({target:\"Number\",stat:!0,nonConfigurable:!0,nonWritable:!0},{MAX_SAFE_INTEGER:9007199254740991}),Ce({target:\"Number\",stat:!0,nonConfigurable:!0,nonWritable:!0},{MIN_SAFE_INTEGER:-9007199254740991});var ta=_i.trim,ea=b(\"\".charAt),ra=i.parseFloat,na=i.Symbol,oa=na&&na.iterator,ia=1/ra(Mi+\"-0\")!=-Infinity||oa&&!a(function(){ra(Object(oa))})?function(t){var e=ta(Wr(t)),r=ra(e);return 0===r&&\"-\"===ea(e,0)?-0:r}:ra;Ce({target:\"Number\",stat:!0,forced:Number.parseFloat!==ia},{parseFloat:ia});var aa=_i.trim,ua=i.parseInt,sa=i.Symbol,ca=sa&&sa.iterator,fa=/^[+-]?0x/i,la=b(fa.exec),ha=8!==ua(Mi+\"08\")||22!==ua(Mi+\"0x16\")||ca&&!a(function(){ua(Object(ca))})?function(t,e){var r=aa(Wr(t));return ua(r,e>>>0||(la(fa,r)?16:10))}:ua;Ce({target:\"Number\",stat:!0,forced:Number.parseInt!==ha},{parseInt:ha});var pa=b(v.f),va=b([].push),da=u&&a(function(){var t=Object.create(null);return t[2]=2,!pa(t,2)}),ga=function(t){return function(e){for(var r,n=k(e),o=_e(n),i=da&&null===Qr(n),a=o.length,s=0,c=[];a>s;)r=o[s++],u&&!(i?r in n:pa(n,r))||va(c,t?[r,n[r]]:n[r]);return c}},ya={entries:ga(!0),values:ga(!1)},ma=ya.entries;Ce({target:\"Object\",stat:!0},{entries:function(t){return ma(t)}}),Ce({target:\"Object\",stat:!0,sham:!u},{getOwnPropertyDescriptors:function(t){for(var e,r,n=k(t),o=Rt.f,i=Pe(n),a={},u=0;i.length>u;)void 0!==(r=o(n,e=i[u++]))&&Cn(a,e,r);return a}});var ba=a(function(){_e(1)});Ce({target:\"Object\",stat:!0,forced:ba},{keys:function(t){return _e(it(t))}});var wa=Object.is||function(t,e){return t===e?0!==t||1/t==1/e:t!=t&&e!=e};Ce({target:\"Object\",stat:!0},{is:wa});var Sa=ya.values;Ce({target:\"Object\",stat:!0},{values:function(t){return Sa(t)}}),Ce({target:\"Object\",stat:!0},{hasOwn:ut});var Ea=Function.prototype,Oa=Ea.apply,xa=Ea.call,Ra=\"object\"==typeof Reflect&&Reflect.apply||(s?xa.bind(Oa):function(){return xa.apply(Oa,arguments)}),Pa=!a(function(){Reflect.apply(function(){})});Ce({target:\"Reflect\",stat:!0,forced:Pa},{apply:function(t,e,r){return Ra(J(t),e,kt(r))}});var Aa=Function,ja=b([].concat),ka=b([].join),Ia={},Ta=s?Aa.bind:function(t){var e=J(this),r=e.prototype,n=vo(arguments,1),o=function(){var r=ja(n,vo(arguments));return this instanceof o?function(t,e,r){if(!ut(Ia,e)){for(var n=[],o=0;o<e;o++)n[o]=\"a[\"+o+\"]\";Ia[e]=Aa(\"C,a\",\"return new C(\"+ka(n,\",\")+\")\")}return Ia[e](t,r)}(e,r.length,r):e.apply(t,r)};return M(r)&&(o.prototype=r),o},Ma=TypeError,La=function(t){if(Sr(t))return t;throw new Ma(Y(t)+\" is not a constructor\")},Ua=L(\"Reflect\",\"construct\"),Na=Object.prototype,Ca=[].push,_a=a(function(){function t(){}return!(Ua(function(){},[],t)instanceof t)}),Fa=!a(function(){Ua(function(){})}),Ba=_a||Fa;Ce({target:\"Reflect\",stat:!0,forced:Ba,sham:Ba},{construct:function(t,e){La(t),kt(e);var r=arguments.length<3?t:La(arguments[2]);if(Fa&&!_a)return Ua(t,e,r);if(t===r){switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3])}var n=[null];return Ra(Ca,n,e),new(Ra(Ta,t,n))}var o=r.prototype,i=Ve(M(o)?o:Na),a=Ra(t,i,e);return M(a)?a:i}});var Da=a(function(){Reflect.defineProperty(Ct.f({},1,{value:1}),1,{value:2})});Ce({target:\"Reflect\",stat:!0,forced:Da,sham:!u},{defineProperty:function(t,e,r){kt(t);var n=bt(e);kt(r);try{return Ct.f(t,n,r),!0}catch(t){return!1}}});var za=Rt.f;Ce({target:\"Reflect\",stat:!0},{deleteProperty:function(t,e){var r=za(kt(t),e);return!(r&&!r.configurable)&&delete t[e]}});var Wa=function(t){return void 0!==t&&(ut(t,\"value\")||ut(t,\"writable\"))};Ce({target:\"Reflect\",stat:!0},{get:function t(e,r){var n,o,i=arguments.length<3?e:arguments[2];return kt(e)===i?e[r]:(n=Rt.f(e,r))?Wa(n)?n.value:void 0===n.get?void 0:f(n.get,i):M(o=Qr(e))?t(o,r,i):void 0}}),Ce({target:\"Reflect\",stat:!0,sham:!u},{getOwnPropertyDescriptor:function(t,e){return Rt.f(kt(t),e)}}),Ce({target:\"Reflect\",stat:!0,sham:!Vr},{getPrototypeOf:function(t){return Qr(kt(t))}}),Ce({target:\"Reflect\",stat:!0},{has:function(t,e){return e in t}}),Ce({target:\"Reflect\",stat:!0},{isExtensible:function(t){return kt(t),So(t)}}),Ce({target:\"Reflect\",stat:!0},{ownKeys:Pe}),Ce({target:\"Reflect\",stat:!0,sham:!Eo},{preventExtensions:function(t){kt(t);try{var e=L(\"Object\",\"preventExtensions\");return e&&e(t),!0}catch(t){return!1}}});var qa=a(function(){var t=function(){},e=Ct.f(new t,\"a\",{configurable:!0});return!1!==Reflect.set(t.prototype,\"a\",1,e)});Ce({target:\"Reflect\",stat:!0,forced:qa},{set:function t(e,r,n){var o,i,a,u=arguments.length<4?e:arguments[3],s=Rt.f(kt(e),r);if(!s){if(M(i=Qr(e)))return t(i,r,n,u);s=d(0)}if(Wa(s)){if(!1===s.writable||!M(u))return!1;if(o=Rt.f(u,r)){if(o.get||o.set||!1===o.writable)return!1;o.value=n,Ct.f(u,r,o)}else Ct.f(u,r,d(0,n))}else{if(void 0===(a=s.set))return!1;f(a,u,n)}return!0}}),dn&&Ce({target:\"Reflect\",stat:!0},{setPrototypeOf:function(t,e){kt(t),vn(e);try{return dn(t,e),!0}catch(t){return!1}}}),Ce({global:!0},{Reflect:{}}),an(i.Reflect,\"Reflect\",!0);var Ha=Oo.getWeakData,$a=ne.set,Ka=ne.getterFor,Ga=Ar.find,Va=Ar.findIndex,Ya=b([].splice),Xa=0,Ja=function(t){return t.frozen||(t.frozen=new Qa)},Qa=function(){this.entries=[]},Za=function(t,e){return Ga(t.entries,function(t){return t[0]===e})};Qa.prototype={get:function(t){var e=Za(this,t);if(e)return e[1]},has:function(t){return!!Za(this,t)},set:function(t,e){var r=Za(this,t);r?r[1]=e:this.entries.push([t,e])},delete:function(t){var e=Va(this.entries,function(e){return e[0]===t});return~e&&Ya(this.entries,e,1),!!~e}};var tu,eu={getConstructor:function(t,e,r,n){var o=t(function(t,o){ko(t,i),$a(t,{type:e,id:Xa++,frozen:null}),P(o)||Ao(o,t[n],{that:t,AS_ENTRIES:r})}),i=o.prototype,a=Ka(e),u=function(t,e,r){var n=a(t),o=Ha(kt(e),!0);return!0===o?Ja(n).set(e,r):o[n.id]=r,t};return Mo(i,{delete:function(t){var e=a(this);if(!M(t))return!1;var r=Ha(t);return!0===r?Ja(e).delete(t):r&&ut(r,e.id)&&delete r[e.id]},has:function(t){var e=a(this);if(!M(t))return!1;var r=Ha(t);return!0===r?Ja(e).has(t):r&&ut(r,e.id)}}),Mo(i,r?{get:function(t){var e=a(this);if(M(t)){var r=Ha(t);if(!0===r)return Ja(e).get(t);if(r)return r[e.id]}},set:function(t,e){return u(this,t,e)}}:{add:function(t){return u(this,t,!0)}}),o}},ru=ne.enforce,nu=Object,ou=Array.isArray,iu=nu.isExtensible,au=nu.isFrozen,uu=nu.isSealed,su=nu.freeze,cu=nu.seal,fu=!i.ActiveXObject&&\"ActiveXObject\"in i,lu=function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},hu=To(\"WeakMap\",lu,eu),pu=hu.prototype,vu=b(pu.set);if(Vt)if(fu){tu=eu.getConstructor(lu,\"WeakMap\",!0),Oo.enable();var du=b(pu.delete),gu=b(pu.has),yu=b(pu.get);Mo(pu,{delete:function(t){if(M(t)&&!iu(t)){var e=ru(this);return e.frozen||(e.frozen=new tu),du(this,t)||e.frozen.delete(t)}return du(this,t)},has:function(t){if(M(t)&&!iu(t)){var e=ru(this);return e.frozen||(e.frozen=new tu),gu(this,t)||e.frozen.has(t)}return gu(this,t)},get:function(t){if(M(t)&&!iu(t)){var e=ru(this);return e.frozen||(e.frozen=new tu),gu(this,t)?yu(this,t):e.frozen.get(t)}return yu(this,t)},set:function(t,e){if(M(t)&&!iu(t)){var r=ru(this);r.frozen||(r.frozen=new tu),gu(this,t)?vu(this,t,e):r.frozen.set(t,e)}else vu(this,t,e);return this}})}else Eo&&a(function(){var t=su([]);return vu(new hu,t,1),!au(t)})&&Mo(pu,{set:function(t,e){var r;return ou(t)&&(au(t)?r=su:uu(t)&&(r=cu)),vu(this,t,e),r&&r(t),this}});var mu=L(\"Map\"),bu=L(\"WeakMap\"),wu=b([].push),Su=nt(\"metadata\"),Eu=Su.store||(Su.store=new bu),Ou=function(t,e,r){var n=Eu.get(t);if(!n){if(!r)return;Eu.set(t,n=new mu)}var o=n.get(e);if(!o){if(!r)return;n.set(e,o=new mu)}return o},xu={store:Eu,getMap:Ou,has:function(t,e,r){var n=Ou(e,r,!1);return void 0!==n&&n.has(t)},get:function(t,e,r){var n=Ou(e,r,!1);return void 0===n?void 0:n.get(t)},set:function(t,e,r,n){Ou(r,n,!0).set(t,e)},keys:function(t,e){var r=Ou(t,e,!1),n=[];return r&&r.forEach(function(t,e){wu(n,e)}),n},toKey:function(t){return void 0===t||\"symbol\"==typeof t?t:String(t)}},Ru=xu.toKey,Pu=xu.set;Ce({target:\"Reflect\",stat:!0},{defineMetadata:function(t,e,r){var n=arguments.length<4?void 0:Ru(arguments[3]);Pu(t,e,kt(r),n)}});var Au=xu.toKey,ju=xu.getMap,ku=xu.store;Ce({target:\"Reflect\",stat:!0},{deleteMetadata:function(t,e){var r=arguments.length<3?void 0:Au(arguments[2]),n=ju(kt(e),r,!1);if(void 0===n||!n.delete(t))return!1;if(n.size)return!0;var o=ku.get(e);return o.delete(r),!!o.size||ku.delete(e)}});var Iu=xu.has,Tu=xu.get,Mu=xu.toKey,Lu=function(t,e,r){if(Iu(t,e,r))return Tu(t,e,r);var n=Qr(e);return null!==n?Lu(t,n,r):void 0};Ce({target:\"Reflect\",stat:!0},{getMetadata:function(t,e){var r=arguments.length<3?void 0:Mu(arguments[2]);return Lu(t,kt(e),r)}});var Uu=Do.Map,Nu=Do.has,Cu=Do.set,_u=b([].push),Fu=b(function(t){var e,r,n,o=it(this),i=de(o),a=[],u=new Uu,s=P(t)?function(t){return t}:J(t);for(e=0;e<i;e++)n=s(r=o[e]),Nu(u,n)||Cu(u,n,r);return di(u,function(t){_u(a,t)}),a}),Bu=b([].concat),Du=xu.keys,zu=xu.toKey,Wu=function(t,e){var r=Du(t,e),n=Qr(t);if(null===n)return r;var o=Wu(n,e);return o.length?r.length?Fu(Bu(r,o)):o:r};Ce({target:\"Reflect\",stat:!0},{getMetadataKeys:function(t){var e=arguments.length<2?void 0:zu(arguments[1]);return Wu(kt(t),e)}});var qu=xu.get,Hu=xu.toKey;Ce({target:\"Reflect\",stat:!0},{getOwnMetadata:function(t,e){var r=arguments.length<3?void 0:Hu(arguments[2]);return qu(t,kt(e),r)}});var $u=xu.keys,Ku=xu.toKey;Ce({target:\"Reflect\",stat:!0},{getOwnMetadataKeys:function(t){var e=arguments.length<2?void 0:Ku(arguments[1]);return $u(kt(t),e)}});var Gu=xu.has,Vu=xu.toKey,Yu=function(t,e,r){if(Gu(t,e,r))return!0;var n=Qr(e);return null!==n&&Yu(t,n,r)};Ce({target:\"Reflect\",stat:!0},{hasMetadata:function(t,e){var r=arguments.length<3?void 0:Vu(arguments[2]);return Yu(t,kt(e),r)}});var Xu=xu.has,Ju=xu.toKey;Ce({target:\"Reflect\",stat:!0},{hasOwnMetadata:function(t,e){var r=arguments.length<3?void 0:Ju(arguments[2]);return Xu(t,kt(e),r)}});var Qu=xu.toKey,Zu=xu.set;Ce({target:\"Reflect\",stat:!0},{metadata:function(t,e){return function(r,n){Zu(t,e,kt(r),Qu(n))}}});var ts=dt(\"match\"),es=function(t){var e;return M(t)&&(void 0!==(e=t[ts])?!!e:\"RegExp\"===E(t))},rs=function(){var t=kt(this),e=\"\";return t.hasIndices&&(e+=\"d\"),t.global&&(e+=\"g\"),t.ignoreCase&&(e+=\"i\"),t.multiline&&(e+=\"m\"),t.dotAll&&(e+=\"s\"),t.unicode&&(e+=\"u\"),t.unicodeSets&&(e+=\"v\"),t.sticky&&(e+=\"y\"),e},ns=RegExp.prototype,os=function(t){var e=t.flags;return void 0!==e||\"flags\"in ns||ut(t,\"flags\")||!U(ns,t)?e:f(rs,t)},is=i.RegExp,as=a(function(){var t=is(\"a\",\"y\");return t.lastIndex=2,null!==t.exec(\"abcd\")}),us=as||a(function(){return!is(\"a\",\"y\").sticky}),ss=as||a(function(){var t=is(\"^r\",\"gy\");return t.lastIndex=2,null!==t.exec(\"str\")}),cs={BROKEN_CARET:ss,MISSED_STICKY:us,UNSUPPORTED_Y:as},fs=Ct.f,ls=function(t,e,r){r in t||fs(t,r,{configurable:!0,get:function(){return e[r]},set:function(t){e[r]=t}})},hs=i.RegExp,ps=a(function(){var t=hs(\".\",\"s\");return!(t.dotAll&&t.test(\"\\n\")&&\"s\"===t.flags)}),vs=i.RegExp,ds=a(function(){var t=vs(\"(?<a>b)\",\"g\");return\"b\"!==t.exec(\"b\").groups.a||\"bc\"!==\"b\".replace(t,\"$<a>c\")}),gs=Oe.f,ys=ne.enforce,ms=dt(\"match\"),bs=i.RegExp,ws=bs.prototype,Ss=i.SyntaxError,Es=b(ws.exec),Os=b(\"\".charAt),xs=b(\"\".replace),Rs=b(\"\".indexOf),Ps=b(\"\".slice),As=/^\\?<[^\\s\\d!#%&*+<=>@^][^\\s!#%&*+<=>@^]*>/,js=/a/g,ks=/a/g,Is=new bs(js)!==js,Ts=cs.MISSED_STICKY,Ms=cs.UNSUPPORTED_Y,Ls=u&&(!Is||Ts||ps||ds||a(function(){return ks[ms]=!1,bs(js)!==js||bs(ks)===ks||\"/a/i\"!==String(bs(js,\"i\"))}));if(Ue(\"RegExp\",Ls)){for(var Us=function(t,e){var r,n,o,i,a,u,s=U(ws,this),c=es(t),f=void 0===e,l=[],h=t;if(!s&&c&&f&&t.constructor===Us)return t;if((c||U(ws,t))&&(t=t.source,f&&(e=os(h))),t=void 0===t?\"\":Wr(t),e=void 0===e?\"\":Wr(e),h=t,ps&&\"dotAll\"in js&&(n=!!e&&Rs(e,\"s\")>-1)&&(e=xs(e,/s/g,\"\")),r=e,Ts&&\"sticky\"in js&&(o=!!e&&Rs(e,\"y\")>-1)&&Ms&&(e=xs(e,/y/g,\"\")),ds&&(i=function(t){for(var e,r=t.length,n=0,o=\"\",i=[],a=Ve(null),u=!1,s=!1,c=0,f=\"\";n<=r;n++){if(\"\\\\\"===(e=Os(t,n)))e+=Os(t,++n);else if(\"]\"===e)u=!1;else if(!u)switch(!0){case\"[\"===e:u=!0;break;case\"(\"===e:if(o+=e,\"?:\"===Ps(t,n+1,n+3))continue;Es(As,Ps(t,n+1))&&(n+=2,s=!0),c++;continue;case\">\"===e&&s:if(\"\"===f||ut(a,f))throw new Ss(\"Invalid capture group name\");a[f]=!0,i[i.length]=[f,c],s=!1,f=\"\";continue}s?f+=e:o+=e}return[o,i]}(t),t=i[0],l=i[1]),a=Io(bs(t,e),s?this:ws,Us),(n||o||l.length)&&(u=ys(a),n&&(u.dotAll=!0,u.raw=Us(function(t){for(var e,r=t.length,n=0,o=\"\",i=!1;n<=r;n++)\"\\\\\"!==(e=Os(t,n))?i||\".\"!==e?(\"[\"===e?i=!0:\"]\"===e&&(i=!1),o+=e):o+=\"[\\\\s\\\\S]\":o+=e+Os(t,++n);return o}(t),r)),o&&(u.sticky=!0),l.length&&(u.groups=l)),t!==h)try{_t(a,\"source\",\"\"===h?\"(?:)\":h)}catch(t){}return a},Ns=gs(bs),Cs=0;Ns.length>Cs;)ls(Us,bs,Ns[Cs++]);ws.constructor=Us,Us.prototype=ws,ie(i,\"RegExp\",Us,{constructor:!0})}Uo(\"RegExp\");var _s=zt.PROPER,Fs=\"toString\",Bs=RegExp.prototype,Ds=Bs[Fs];(a(function(){return\"/a/b\"!==Ds.call({source:\"a\",flags:\"b\"})})||_s&&Ds.name!==Fs)&&ie(Bs,Fs,function(){var t=kt(this);return\"/\"+Wr(t.source)+\"/\"+Wr(os(t))},{unsafe:!0});var zs=ne.get,Ws=RegExp.prototype,qs=TypeError;u&&ps&&so(Ws,\"dotAll\",{configurable:!0,get:function(){if(this!==Ws){if(\"RegExp\"===E(this))return!!zs(this).dotAll;throw new qs(\"Incompatible receiver, RegExp required\")}}});var Hs=ne.get,$s=nt(\"native-string-replace\",String.prototype.replace),Ks=RegExp.prototype.exec,Gs=Ks,Vs=b(\"\".charAt),Ys=b(\"\".indexOf),Xs=b(\"\".replace),Js=b(\"\".slice),Qs=function(){var t=/a/,e=/b*/g;return f(Ks,t,\"a\"),f(Ks,e,\"a\"),0!==t.lastIndex||0!==e.lastIndex}(),Zs=cs.BROKEN_CARET,tc=void 0!==/()??/.exec(\"\")[1];(Qs||tc||Zs||ps||ds)&&(Gs=function(t){var e,r,n,o,i,a,u,s=this,c=Hs(s),l=Wr(t),h=c.raw;if(h)return h.lastIndex=s.lastIndex,e=f(Gs,h,l),s.lastIndex=h.lastIndex,e;var p=c.groups,v=Zs&&s.sticky,d=f(rs,s),g=s.source,y=0,m=l;if(v&&(d=Xs(d,\"y\",\"\"),-1===Ys(d,\"g\")&&(d+=\"g\"),m=Js(l,s.lastIndex),s.lastIndex>0&&(!s.multiline||s.multiline&&\"\\n\"!==Vs(l,s.lastIndex-1))&&(g=\"(?: \"+g+\")\",m=\" \"+m,y++),r=new RegExp(\"^(?:\"+g+\")\",d)),tc&&(r=new RegExp(\"^\"+g+\"$(?!\\\\s)\",d)),Qs&&(n=s.lastIndex),o=f(Ks,v?r:s,m),v?o?(o.input=Js(o.input,y),o[0]=Js(o[0],y),o.index=s.lastIndex,s.lastIndex+=o[0].length):s.lastIndex=0:Qs&&o&&(s.lastIndex=s.global?o.index+o[0].length:n),tc&&o&&o.length>1&&f($s,o[0],r,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(o[i]=void 0)}),o&&p)for(o.groups=a=Ve(null),i=0;i<p.length;i++)a[(u=p[i])[0]]=o[u[1]];return o});var ec=Gs;Ce({target:\"RegExp\",proto:!0,forced:/./.exec!==ec},{exec:ec});var rc=i.RegExp,nc=rc.prototype;u&&a(function(){var t=!0;try{rc(\".\",\"d\")}catch(e){t=!1}var e={},r=\"\",n=t?\"dgimsy\":\"gimsy\",o=function(t,n){Object.defineProperty(e,t,{get:function(){return r+=n,!0}})},i={dotAll:\"s\",global:\"g\",ignoreCase:\"i\",multiline:\"m\",sticky:\"y\"};for(var a in t&&(i.hasIndices=\"d\"),i)o(a,i[a]);return Object.getOwnPropertyDescriptor(nc,\"flags\").get.call(e)!==n||r!==n})&&so(nc,\"flags\",{configurable:!0,get:rs});var oc=ne.get,ic=RegExp.prototype,ac=TypeError;u&&cs.MISSED_STICKY&&so(ic,\"sticky\",{configurable:!0,get:function(){if(this!==ic){if(\"RegExp\"===E(this))return!!oc(this).sticky;throw new ac(\"Incompatible receiver, RegExp required\")}}});var uc,sc,cc=(uc=!1,(sc=/[ac]/).exec=function(){return uc=!0,/./.exec.apply(this,arguments)},!0===sc.test(\"abc\")&&uc),fc=/./.test;Ce({target:\"RegExp\",proto:!0,forced:!cc},{test:function(t){var e=kt(this),r=Wr(t),n=e.exec;if(!T(n))return f(fc,e,r);var o=f(n,e,r);return null!==o&&(kt(o),!0)}});var lc=dt(\"species\"),hc=RegExp.prototype,pc=function(t,e,r,n){var o=dt(t),i=!a(function(){var e={};return e[o]=function(){return 7},7!==\"\"[t](e)}),u=i&&!a(function(){var e=!1,r=/a/;return\"split\"===t&&((r={}).constructor={},r.constructor[lc]=function(){return r},r.flags=\"\",r[o]=/./[o]),r.exec=function(){return e=!0,null},r[o](\"\"),!e});if(!i||!u||r){var s=/./[o],c=e(o,\"\"[t],function(t,e,r,n,o){var a=e.exec;return a===ec||a===hc.exec?i&&!o?{done:!0,value:f(s,e,r,n)}:{done:!0,value:f(t,r,e,n)}:{done:!1}});ie(String.prototype,t,c[0]),ie(hc,o,c[1])}n&&_t(hc[o],\"sham\",!0)},vc=Gr.charAt,dc=function(t,e,r){return e+(r?vc(t,e).length:1)},gc=TypeError,yc=function(t,e){var r=t.exec;if(T(r)){var n=f(r,t,e);return null!==n&&kt(n),n}if(\"RegExp\"===E(t))return f(ec,t,e);throw new gc(\"RegExp#exec called on incompatible receiver\")};pc(\"match\",function(t,e,r){return[function(e){var r=j(this),n=P(e)?void 0:Q(e,t);return n?f(n,e,r):new RegExp(e)[t](Wr(r))},function(t){var n=kt(this),o=Wr(t),i=r(e,n,o);if(i.done)return i.value;if(!n.global)return yc(n,o);var a=n.unicode;n.lastIndex=0;for(var u,s=[],c=0;null!==(u=yc(n,o));){var f=Wr(u[0]);s[c]=f,\"\"===f&&(n.lastIndex=dc(o,ve(n.lastIndex),a)),c++}return 0===c?null:s}]});var mc=Math.floor,bc=b(\"\".charAt),wc=b(\"\".replace),Sc=b(\"\".slice),Ec=/\\$([$&'`]|\\d{1,2}|<[^>]*>)/g,Oc=/\\$([$&'`]|\\d{1,2})/g,xc=function(t,e,r,n,o,i){var a=r+t.length,u=n.length,s=Oc;return void 0!==o&&(o=it(o),s=Ec),wc(i,s,function(i,s){var c;switch(bc(s,0)){case\"$\":return\"$\";case\"&\":return t;case\"`\":return Sc(e,0,r);case\"'\":return Sc(e,a);case\"<\":c=o[Sc(s,1,-1)];break;default:var f=+s;if(0===f)return i;if(f>u){var l=mc(f/10);return 0===l?i:l<=u?void 0===n[l-1]?bc(s,1):n[l-1]+bc(s,1):i}c=n[f-1]}return void 0===c?\"\":c})},Rc=dt(\"replace\"),Pc=Math.max,Ac=Math.min,jc=b([].concat),kc=b([].push),Ic=b(\"\".indexOf),Tc=b(\"\".slice),Mc=\"$0\"===\"a\".replace(/./,\"$0\"),Lc=!!/./[Rc]&&\"\"===/./[Rc](\"a\",\"$0\"),Uc=!a(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:\"7\"},t},\"7\"!==\"\".replace(t,\"$<a>\")});pc(\"replace\",function(t,e,r){var n=Lc?\"$\":\"$0\";return[function(t,r){var n=j(this),o=P(t)?void 0:Q(t,Rc);return o?f(o,t,n,r):f(e,Wr(n),t,r)},function(t,o){var i=kt(this),a=Wr(t);if(\"string\"==typeof o&&-1===Ic(o,n)&&-1===Ic(o,\"$<\")){var u=r(e,i,a,o);if(u.done)return u.value}var s=T(o);s||(o=Wr(o));var c,f=i.global;f&&(c=i.unicode,i.lastIndex=0);for(var l,h=[];null!==(l=yc(i,a))&&(kc(h,l),f);)\"\"===Wr(l[0])&&(i.lastIndex=dc(a,ve(i.lastIndex),c));for(var p,v=\"\",d=0,g=0;g<h.length;g++){for(var y,m=Wr((l=h[g])[0]),b=Pc(Ac(ce(l.index),a.length),0),w=[],S=1;S<l.length;S++)kc(w,void 0===(p=l[S])?p:String(p));var E=l.groups;if(s){var O=jc([m],w,b,a);void 0!==E&&kc(O,E),y=Wr(Ra(o,void 0,O))}else y=xc(m,a,b,w,E,o);b>=d&&(v+=Tc(a,d,b)+y,d=b+m.length)}return v+Tc(a,d)}]},!Uc||!Mc||Lc),pc(\"search\",function(t,e,r){return[function(e){var r=j(this),n=P(e)?void 0:Q(e,t);return n?f(n,e,r):new RegExp(e)[t](Wr(r))},function(t){var n=kt(this),o=Wr(t),i=r(e,n,o);if(i.done)return i.value;var a=n.lastIndex;wa(a,0)||(n.lastIndex=0);var u=yc(n,o);return wa(n.lastIndex,a)||(n.lastIndex=a),null===u?-1:u.index}]});var Nc=dt(\"species\"),Cc=function(t,e){var r,n=kt(t).constructor;return void 0===n||P(r=kt(n)[Nc])?e:La(r)},_c=cs.UNSUPPORTED_Y,Fc=Math.min,Bc=b([].push),Dc=b(\"\".slice),zc=!a(function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var r=\"ab\".split(t);return 2!==r.length||\"a\"!==r[0]||\"b\"!==r[1]}),Wc=\"c\"===\"abbc\".split(/(b)*/)[1]||4!==\"test\".split(/(?:)/,-1).length||2!==\"ab\".split(/(?:ab)*/).length||4!==\".\".split(/(.?)(.?)/).length||\".\".split(/()()/).length>1||\"\".split(/.?/).length;pc(\"split\",function(t,e,r){var n=\"0\".split(void 0,0).length?function(t,r){return void 0===t&&0===r?[]:f(e,this,t,r)}:e;return[function(e,r){var o=j(this),i=P(e)?void 0:Q(e,t);return i?f(i,e,o,r):f(n,Wr(o),e,r)},function(t,o){var i=kt(this),a=Wr(t);if(!Wc){var u=r(n,i,a,o,n!==e);if(u.done)return u.value}var s=Cc(i,RegExp),c=i.unicode,f=new s(_c?\"^(?:\"+i.source+\")\":i,(i.ignoreCase?\"i\":\"\")+(i.multiline?\"m\":\"\")+(i.unicode?\"u\":\"\")+(_c?\"g\":\"y\")),l=void 0===o?4294967295:o>>>0;if(0===l)return[];if(0===a.length)return null===yc(f,a)?[a]:[];for(var h=0,p=0,v=[];p<a.length;){f.lastIndex=_c?0:p;var d,g=yc(f,_c?Dc(a,p):a);if(null===g||(d=Fc(ve(f.lastIndex+(_c?p:0)),a.length))===h)p=dc(a,p,c);else{if(Bc(v,Dc(a,h,p)),v.length===l)return v;for(var y=1;y<=g.length-1;y++)if(Bc(v,g[y]),v.length===l)return v;p=h=d}}return Bc(v,Dc(a,h)),v}]},Wc||!zc,_c);var qc=TypeError,Hc=RangeError,$c=function(t){var e=Wr(j(this)),r=\"\",n=ce(t);if(n<0||Infinity===n)throw new Hc(\"Wrong number of repetitions\");for(;n>0;(n>>>=1)&&(e+=e))1&n&&(r+=e);return r},Kc=b($c),Gc=b(\"\".slice),Vc=Math.ceil,Yc=function(t){return function(e,r,n){var o,i,a=Wr(j(e)),u=ve(r),s=a.length,c=void 0===n?\" \":Wr(n);return u<=s||\"\"===c?a:((i=Kc(c,Vc((o=u-s)/c.length))).length>o&&(i=Gc(i,0,o)),t?a+i:i+a)}},Xc={start:Yc(!1),end:Yc(!0)},Jc=Xc.start,Qc=Array,Zc=RegExp.escape,tf=b(\"\".charAt),ef=b(\"\".charCodeAt),rf=b(1.1.toString),nf=b([].join),of=/^[0-9a-z]/i,af=/^[$()*+./?[\\\\\\]^{|}]/,uf=RegExp(\"^[!\\\"#%&',\\\\-:;<=>@`~\"+Mi+\"]\"),sf=b(of.exec),cf={\"\\t\":\"t\",\"\\n\":\"n\",\"\\v\":\"v\",\"\\f\":\"f\",\"\\r\":\"r\"},ff=function(t){var e=rf(ef(t,0),16);return e.length<3?\"\\\\x\"+Jc(e,2,\"0\"):\"\\\\u\"+Jc(e,4,\"0\")},lf=!Zc||\"\\\\x61b\"!==Zc(\"ab\");Ce({target:\"RegExp\",stat:!0,forced:lf},{escape:function(t){!function(t){if(\"string\"==typeof t)return t;throw new qc(\"Argument is not a string\")}(t);for(var e=t.length,r=Qc(e),n=0;n<e;n++){var o=tf(t,n);if(0===n&&sf(of,o))r[n]=ff(o);else if(ut(cf,o))r[n]=\"\\\\\"+cf[o];else if(sf(af,o))r[n]=\"\\\\\"+o;else if(sf(uf,o))r[n]=ff(o);else{var i=ef(o,0);55296!=(63488&i)?r[n]=o:i>=56320||n+1>=e||56320!=(64512&ef(t,n+1))?r[n]=ff(o):(r[n]=o,r[++n]=tf(t,n))}}return nf(r,\"\")}}),To(\"Set\",function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},Fo);var hf=Set.prototype,pf={Set:Set,add:b(hf.add),has:b(hf.has),remove:b(hf.delete),proto:hf},vf=pf.has,df=function(t){return vf(t),t},gf=pf.Set,yf=pf.proto,mf=b(yf.forEach),bf=b(yf.keys),wf=bf(new gf).next,Sf=function(t,e,r){return r?ci({iterator:bf(t),next:wf},e):mf(t,e)},Ef=pf.Set,Of=pf.add,xf=function(t){var e=new Ef;return Sf(t,function(t){Of(e,t)}),e},Rf=ln(pf.proto,\"size\",\"get\")||function(t){return t.size},Pf=\"Invalid size\",Af=RangeError,jf=TypeError,kf=Math.max,If=function(t,e){this.set=t,this.size=kf(e,0),this.has=J(t.has),this.keys=J(t.keys)};If.prototype={getIterator:function(){return{iterator:t=kt(f(this.keys,this.set)),next:t.next,done:!1};var t},includes:function(t){return f(this.has,this.set,t)}};var Tf=function(t){kt(t);var e=+t.size;if(e!=e)throw new jf(Pf);var r=ce(e);if(r<0)throw new Af(Pf);return new If(t,r)},Mf=pf.has,Lf=pf.remove,Uf=function(t){var e=df(this),r=Tf(t),n=xf(e);return Rf(e)<=r.size?Sf(e,function(t){r.includes(t)&&Lf(n,t)}):ci(r.getIterator(),function(t){Mf(e,t)&&Lf(n,t)}),n},Nf=function(t){return{size:t,has:function(){return!1},keys:function(){return{next:function(){return{done:!0}}}}}},Cf=function(t){var e=L(\"Set\");try{(new e)[t](Nf(0));try{return(new e)[t](Nf(-1)),!1}catch(t){return!0}}catch(t){return!1}};Ce({target:\"Set\",proto:!0,real:!0,forced:!Cf(\"difference\")},{difference:Uf});var _f=pf.Set,Ff=pf.add,Bf=pf.has,Df=function(t){var e=df(this),r=Tf(t),n=new _f;return Rf(e)>r.size?ci(r.getIterator(),function(t){Bf(e,t)&&Ff(n,t)}):Sf(e,function(t){r.includes(t)&&Ff(n,t)}),n},zf=!Cf(\"intersection\")||a(function(){return\"3,2\"!==String(Array.from(new Set([1,2,3]).intersection(new Set([3,2]))))});Ce({target:\"Set\",proto:!0,real:!0,forced:zf},{intersection:Df});var Wf=pf.has,qf=function(t){var e=df(this),r=Tf(t);if(Rf(e)<=r.size)return!1!==Sf(e,function(t){if(r.includes(t))return!1},!0);var n=r.getIterator();return!1!==ci(n,function(t){if(Wf(e,t))return Tn(n,\"normal\",!1)})};Ce({target:\"Set\",proto:!0,real:!0,forced:!Cf(\"isDisjointFrom\")},{isDisjointFrom:qf});var Hf=function(t){var e=df(this),r=Tf(t);return!(Rf(e)>r.size)&&!1!==Sf(e,function(t){if(!r.includes(t))return!1},!0)};Ce({target:\"Set\",proto:!0,real:!0,forced:!Cf(\"isSubsetOf\")},{isSubsetOf:Hf});var $f=pf.has,Kf=function(t){var e=df(this),r=Tf(t);if(Rf(e)<r.size)return!1;var n=r.getIterator();return!1!==ci(n,function(t){if(!$f(e,t))return Tn(n,\"normal\",!1)})};Ce({target:\"Set\",proto:!0,real:!0,forced:!Cf(\"isSupersetOf\")},{isSupersetOf:Kf});var Gf=pf.add,Vf=pf.has,Yf=pf.remove,Xf=function(t){var e=df(this),r=Tf(t).getIterator(),n=xf(e);return ci(r,function(t){Vf(e,t)?Yf(n,t):Gf(n,t)}),n};Ce({target:\"Set\",proto:!0,real:!0,forced:!Cf(\"symmetricDifference\")},{symmetricDifference:Xf});var Jf=pf.add,Qf=function(t){var e=df(this),r=Tf(t).getIterator(),n=xf(e);return ci(r,function(t){Jf(n,t)}),n};Ce({target:\"Set\",proto:!0,real:!0,forced:!Cf(\"union\")},{union:Qf}),Ce({target:\"Set\",stat:!0,forced:!0},{from:ei(pf.Set,pf.add,!1)}),Ce({target:\"Set\",stat:!0,forced:!0},{of:ri(pf.Set,pf.add,!1)});var Zf=pf.add;Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{addAll:function(){for(var t=df(this),e=0,r=arguments.length;e<r;e++)Zf(t,arguments[e]);return t}});var tl=pf.remove;Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{deleteAll:function(){for(var t,e=df(this),r=!0,n=0,o=arguments.length;n<o;n++)t=tl(e,arguments[n]),r=r&&t;return!!r}}),Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{every:function(t){var e=df(this),r=ar(t,arguments.length>1?arguments[1]:void 0);return!1!==Sf(e,function(t){if(!r(t,t,e))return!1},!0)}});var el=dt(\"iterator\"),rl=Object,nl=L(\"Set\"),ol=function(t){return function(t){return M(t)&&\"number\"==typeof t.size&&T(t.has)&&T(t.keys)}(t)?t:function(t){if(P(t))return!1;var e=rl(t);return void 0!==e[el]||\"@@iterator\"in e||ut(un,pr(e))}(t)?new nl(t):t};Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{difference:function(t){return f(Uf,this,ol(t))}});var il=pf.Set,al=pf.add;Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{filter:function(t){var e=df(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=new il;return Sf(e,function(t){r(t,t,e)&&al(n,t)}),n}}),Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{find:function(t){var e=df(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=Sf(e,function(t){if(r(t,t,e))return{value:t}},!0);return n&&n.value}}),Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{intersection:function(t){return f(Df,this,ol(t))}}),Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{isDisjointFrom:function(t){return f(qf,this,ol(t))}}),Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{isSubsetOf:function(t){return f(Hf,this,ol(t))}}),Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{isSupersetOf:function(t){return f(Kf,this,ol(t))}});var ul=b([].join),sl=b([].push);Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{join:function(t){var e=df(this),r=void 0===t?\",\":Wr(t),n=[];return Sf(e,function(t){sl(n,t)}),ul(n,r)}});var cl=pf.Set,fl=pf.add;Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{map:function(t){var e=df(this),r=ar(t,arguments.length>1?arguments[1]:void 0),n=new cl;return Sf(e,function(t){fl(n,r(t,t,e))}),n}});var ll=TypeError;Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{reduce:function(t){var e=df(this),r=arguments.length<2,n=r?void 0:arguments[1];if(J(t),Sf(e,function(o){r?(r=!1,n=o):n=t(n,o,o,e)}),r)throw new ll(\"Reduce of empty set with no initial value\");return n}}),Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{some:function(t){var e=df(this),r=ar(t,arguments.length>1?arguments[1]:void 0);return!0===Sf(e,function(t){if(r(t,t,e))return!0},!0)}}),Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{symmetricDifference:function(t){return f(Xf,this,ol(t))}}),Ce({target:\"Set\",proto:!0,real:!0,forced:!0},{union:function(t){return f(Qf,this,ol(t))}});var hl=dt(\"species\"),pl=dt(\"isConcatSpreadable\"),vl=W>=51||!a(function(){var t=[];return t[pl]=!1,t.concat()[0]!==t}),dl=function(t){if(!M(t))return!1;var e=t[pl];return void 0!==e?!!e:ur(t)},gl=!(vl&&(W>=51||!a(function(){var t=[];return(t.constructor={})[hl]=function(){return{foo:1}},1!==t.concat(Boolean).foo})));Ce({target:\"Array\",proto:!0,arity:1,forced:gl},{concat:function(t){var e,r,n,o,i,a=it(this),u=xr(a,0),s=0;for(e=-1,n=arguments.length;e<n;e++)if(dl(i=-1===e?a:arguments[e]))for(o=de(i),Nr(s+o),r=0;r<o;r++,s++)r in i&&Cn(u,s,i[r]);else Nr(s+1),Cn(u,s++,i);return u.length=s,u}});var yl={f:dt},ml=Ct.f,bl=function(t){var e=Yn.Symbol||(Yn.Symbol={});ut(e,t)||ml(e,t,{value:yl.f(t)})},wl=function(){var t=L(\"Symbol\"),e=t&&t.prototype,r=e&&e.valueOf,n=dt(\"toPrimitive\");e&&!e[n]&&ie(e,n,function(t){return f(r,this)},{arity:1})},Sl=Ar.forEach,El=Xt(\"hidden\"),Ol=\"Symbol\",xl=\"prototype\",Rl=ne.set,Pl=ne.getterFor(Ol),Al=Object[xl],jl=i.Symbol,kl=jl&&jl[xl],Il=i.RangeError,Tl=i.TypeError,Ml=i.QObject,Ll=Rt.f,Ul=Ct.f,Nl=mo.f,Cl=v.f,_l=b([].push),Fl=nt(\"symbols\"),Bl=nt(\"op-symbols\"),Dl=nt(\"wks\"),zl=!Ml||!Ml[xl]||!Ml[xl].findChild,Wl=function(t,e,r){var n=Ll(Al,e);n&&delete Al[e],Ul(t,e,r),n&&t!==Al&&Ul(Al,e,n)},ql=u&&a(function(){return 7!==Ve(Ul({},\"a\",{get:function(){return Ul(this,\"a\",{value:7}).a}})).a})?Wl:Ul,Hl=function(t,e){var r=Fl[t]=Ve(kl);return Rl(r,{type:Ol,tag:t,description:e}),u||(r.description=e),r},$l=function(t,e,r){t===Al&&$l(Bl,e,r),kt(t);var n=bt(e);return kt(r),ut(Fl,n)?(r.enumerable?(ut(t,El)&&t[El][n]&&(t[El][n]=!1),r=Ve(r,{enumerable:d(0,!1)})):(ut(t,El)||Ul(t,El,d(1,Ve(null))),t[El][n]=!0),ql(t,n,r)):Ul(t,n,r)},Kl=function(t,e){kt(t);var r=k(e),n=_e(r).concat(Xl(r));return Sl(n,function(e){u&&!f(Gl,r,e)||$l(t,e,r[e])}),t},Gl=function(t){var e=bt(t),r=f(Cl,this,e);return!(this===Al&&ut(Fl,e)&&!ut(Bl,e))&&(!(r||!ut(this,e)||!ut(Fl,e)||ut(this,El)&&this[El][e])||r)},Vl=function(t,e){var r=k(t),n=bt(e);if(r!==Al||!ut(Fl,n)||ut(Bl,n)){var o=Ll(r,n);return!o||!ut(Fl,n)||ut(r,El)&&r[El][n]||(o.enumerable=!0),o}},Yl=function(t){var e=Nl(k(t)),r=[];return Sl(e,function(t){ut(Fl,t)||ut(Jt,t)||_l(r,t)}),r},Xl=function(t){var e=t===Al,r=Nl(e?Bl:k(t)),n=[];return Sl(r,function(t){!ut(Fl,t)||e&&!ut(Al,t)||_l(n,Fl[t])}),n};H||(jl=function(){if(U(kl,this))throw new Tl(\"Symbol is not a constructor\");var t=arguments.length&&void 0!==arguments[0]?Wr(arguments[0]):void 0,e=lt(t),r=function(t){var n=void 0===this?i:this;n===Al&&f(r,Bl,t),ut(n,El)&&ut(n[El],e)&&(n[El][e]=!1);var o=d(1,t);try{ql(n,e,o)}catch(t){if(!(t instanceof Il))throw t;Wl(n,e,o)}};return u&&zl&&ql(Al,e,{configurable:!0,set:r}),Hl(e,t)},ie(kl=jl[xl],\"toString\",function(){return Pl(this).tag}),ie(jl,\"withoutSetter\",function(t){return Hl(lt(t),t)}),v.f=Gl,Ct.f=$l,Be.f=Kl,Rt.f=Vl,Oe.f=mo.f=Yl,xe.f=Xl,yl.f=function(t){return Hl(dt(t),t)},u&&(so(kl,\"description\",{configurable:!0,get:function(){return Pl(this).description}}),ie(Al,\"propertyIsEnumerable\",Gl,{unsafe:!0}))),Ce({global:!0,constructor:!0,wrap:!0,forced:!H,sham:!H},{Symbol:jl}),Sl(_e(Dl),function(t){bl(t)}),Ce({target:Ol,stat:!0,forced:!H},{useSetter:function(){zl=!0},useSimple:function(){zl=!1}}),Ce({target:\"Object\",stat:!0,forced:!H,sham:!u},{create:function(t,e){return void 0===e?Ve(t):Kl(Ve(t),e)},defineProperty:$l,defineProperties:Kl,getOwnPropertyDescriptor:Vl}),Ce({target:\"Object\",stat:!0,forced:!H},{getOwnPropertyNames:Yl}),wl(),an(jl,Ol),Jt[El]=!0;var Jl=H&&!!Symbol.for&&!!Symbol.keyFor,Ql=nt(\"string-to-symbol-registry\"),Zl=nt(\"symbol-to-string-registry\");Ce({target:\"Symbol\",stat:!0,forced:!Jl},{for:function(t){var e=Wr(t);if(ut(Ql,e))return Ql[e];var r=L(\"Symbol\")(e);return Ql[e]=r,Zl[r]=e,r}});var th=nt(\"symbol-to-string-registry\");Ce({target:\"Symbol\",stat:!0,forced:!Jl},{keyFor:function(t){if(!G(t))throw new TypeError(Y(t)+\" is not a symbol\");if(ut(th,t))return th[t]}});var eh=b([].push),rh=String,nh=L(\"JSON\",\"stringify\"),oh=b(/./.exec),ih=b(\"\".charAt),ah=b(\"\".charCodeAt),uh=b(\"\".replace),sh=b(1..toString),ch=/[\\uD800-\\uDFFF]/g,fh=/^[\\uD800-\\uDBFF]$/,lh=/^[\\uDC00-\\uDFFF]$/,hh=!H||a(function(){var t=L(\"Symbol\")(\"stringify detection\");return\"[null]\"!==nh([t])||\"{}\"!==nh({a:t})||\"{}\"!==nh(Object(t))}),ph=a(function(){return'\"\\\\udf06\\\\ud834\"'!==nh(\"\\udf06\\ud834\")||'\"\\\\udead\"'!==nh(\"\\udead\")}),vh=function(t,e){var r=vo(arguments),n=function(t){if(T(t))return t;if(ur(t)){for(var e=t.length,r=[],n=0;n<e;n++){var o=t[n];\"string\"==typeof o?eh(r,o):\"number\"!=typeof o&&\"Number\"!==E(o)&&\"String\"!==E(o)||eh(r,Wr(o))}var i=r.length,a=!0;return function(t,e){if(a)return a=!1,e;if(ur(this))return e;for(var n=0;n<i;n++)if(r[n]===t)return e}}}(e);if(T(n)||void 0!==t&&!G(t))return r[1]=function(t,e){if(T(n)&&(e=f(n,this,rh(t),e)),!G(e))return e},Ra(nh,null,r)},dh=function(t,e,r){var n=ih(r,e-1),o=ih(r,e+1);return oh(fh,t)&&!oh(lh,o)||oh(lh,t)&&!oh(fh,n)?\"\\\\u\"+sh(ah(t,0),16):t};nh&&Ce({target:\"JSON\",stat:!0,arity:3,forced:hh||ph},{stringify:function(t,e,r){var n=vo(arguments),o=Ra(hh?vh:nh,null,n);return ph&&\"string\"==typeof o?uh(o,ch,dh):o}});var gh=!H||a(function(){xe.f(1)});Ce({target:\"Object\",stat:!0,forced:gh},{getOwnPropertySymbols:function(t){var e=xe.f;return e?e(it(t)):[]}}),bl(\"asyncIterator\");var yh=i.Symbol,mh=yh&&yh.prototype;if(u&&T(yh)&&(!(\"description\"in mh)||void 0!==yh().description)){var bh={},wh=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:Wr(arguments[0]),e=U(mh,this)?new yh(t):void 0===t?yh():yh(t);return\"\"===t&&(bh[e]=!0),e};Ae(wh,yh),wh.prototype=mh,mh.constructor=wh;var Sh=\"Symbol(description detection)\"===String(yh(\"description detection\")),Eh=b(mh.valueOf),Oh=b(mh.toString),xh=/^Symbol\\((.*)\\)[^)]+$/,Rh=b(\"\".replace),Ph=b(\"\".slice);so(mh,\"description\",{configurable:!0,get:function(){var t=Eh(this);if(ut(bh,t))return\"\";var e=Oh(t),r=Sh?Ph(e,7,-1):Rh(e,xh,\"$1\");return\"\"===r?void 0:r}}),Ce({global:!0,constructor:!0,forced:!0},{Symbol:wh})}bl(\"hasInstance\"),bl(\"isConcatSpreadable\"),bl(\"iterator\"),bl(\"match\"),bl(\"matchAll\"),bl(\"replace\"),bl(\"search\"),bl(\"species\"),bl(\"split\"),bl(\"toPrimitive\"),wl(),bl(\"toStringTag\"),an(L(\"Symbol\"),\"Symbol\"),bl(\"unscopables\"),an(i.JSON,\"JSON\",!0),an(Math,\"Math\",!0);var Ah=Ct.f,jh=dt(\"metadata\"),kh=Function.prototype;void 0===kh[jh]&&Ah(kh,jh,{value:null});var Ih=Ct.f,Th=Rt.f,Mh=i.Symbol;if(bl(\"asyncDispose\"),Mh){var Lh=Th(Mh,\"asyncDispose\");Lh.enumerable&&Lh.configurable&&Lh.writable&&Ih(Mh,\"asyncDispose\",{value:Lh.value,enumerable:!1,configurable:!1,writable:!1})}var Uh=Ct.f,Nh=Rt.f,Ch=i.Symbol;if(bl(\"dispose\"),Ch){var _h=Nh(Ch,\"dispose\");_h.enumerable&&_h.configurable&&_h.writable&&Uh(Ch,\"dispose\",{value:_h.value,enumerable:!1,configurable:!1,writable:!1})}bl(\"metadata\");var Fh=L(\"Symbol\"),Bh=Fh.keyFor,Dh=b(Fh.prototype.valueOf),zh=Fh.isRegisteredSymbol||function(t){try{return void 0!==Bh(Dh(t))}catch(t){return!1}};Ce({target:\"Symbol\",stat:!0},{isRegisteredSymbol:zh});for(var Wh=L(\"Symbol\"),qh=Wh.isWellKnownSymbol,Hh=L(\"Object\",\"getOwnPropertyNames\"),$h=b(Wh.prototype.valueOf),Kh=nt(\"wks\"),Gh=0,Vh=Hh(Wh),Yh=Vh.length;Gh<Yh;Gh++)try{var Xh=Vh[Gh];G(Wh[Xh])&&dt(Xh)}catch(t){}var Jh=function(t){if(qh&&qh(t))return!0;try{for(var e=$h(t),r=0,n=Hh(Kh),o=n.length;r<o;r++)if(Kh[n[r]]==e)return!0}catch(t){}return!1};Ce({target:\"Symbol\",stat:!0,forced:!0},{isWellKnownSymbol:Jh}),bl(\"customMatcher\"),bl(\"observable\"),Ce({target:\"Symbol\",stat:!0,name:\"isRegisteredSymbol\"},{isRegistered:zh}),Ce({target:\"Symbol\",stat:!0,name:\"isWellKnownSymbol\",forced:!0},{isWellKnown:Jh}),bl(\"matcher\"),bl(\"metadataKey\"),bl(\"patternMatch\"),bl(\"replaceAll\"),yl.f(\"asyncIterator\");var Qh=Gr.codeAt;Ce({target:\"String\",proto:!0},{codePointAt:function(t){return Qh(this,t)}}),Ze(\"String\",\"codePointAt\");var Zh=TypeError,tp=function(t){if(es(t))throw new Zh(\"The method doesn't accept regular expressions\");return t},ep=dt(\"match\"),rp=function(t){var e=/./;try{\"/./\"[t](e)}catch(r){try{return e[ep]=!1,\"/./\"[t](e)}catch(t){}}return!1},np=Rt.f,op=or(\"\".slice),ip=Math.min,ap=rp(\"endsWith\"),up=!ap&&!!function(){var t=np(String.prototype,\"endsWith\");return t&&!t.writable}();Ce({target:\"String\",proto:!0,forced:!up&&!ap},{endsWith:function(t){var e=Wr(j(this));tp(t);var r=arguments.length>1?arguments[1]:void 0,n=e.length,o=void 0===r?n:ip(ve(r),n),i=Wr(t);return op(e,o-i.length,o)===i}}),Ze(\"String\",\"endsWith\");var sp=RangeError,cp=String.fromCharCode,fp=String.fromCodePoint,lp=b([].join);Ce({target:\"String\",stat:!0,arity:1,forced:!!fp&&1!==fp.length},{fromCodePoint:function(t){for(var e,r=[],n=arguments.length,o=0;n>o;){if(e=+arguments[o++],he(e,1114111)!==e)throw new sp(e+\" is not a valid code point\");r[o]=e<65536?cp(e):cp(55296+((e-=65536)>>10),e%1024+56320)}return lp(r,\"\")}});var hp=b(\"\".indexOf);Ce({target:\"String\",proto:!0,forced:!rp(\"includes\")},{includes:function(t){return!!~hp(Wr(j(this)),Wr(tp(t)),arguments.length>1?arguments[1]:void 0)}}),Ze(\"String\",\"includes\"),b(un.String);var pp=/Version\\/10(?:\\.\\d+){1,2}(?: [\\w./]+)?(?: Mobile\\/\\w+)? Safari\\//.test(_),vp=Xc.start;Ce({target:\"String\",proto:!0,forced:pp},{padStart:function(t){return vp(this,t,arguments.length>1?arguments[1]:void 0)}}),Ze(\"String\",\"padStart\");var dp=Xc.end;Ce({target:\"String\",proto:!0,forced:pp},{padEnd:function(t){return dp(this,t,arguments.length>1?arguments[1]:void 0)}}),Ze(\"String\",\"padEnd\");var gp=b([].push),yp=b([].join);Ce({target:\"String\",stat:!0},{raw:function(t){var e=k(it(t).raw),r=de(e);if(!r)return\"\";for(var n=arguments.length,o=[],i=0;;){if(gp(o,Wr(e[i++])),i===r)return yp(o,\"\");i<n&&gp(o,Wr(arguments[i]))}}}),Ce({target:\"String\",proto:!0},{repeat:$c}),Ze(\"String\",\"repeat\");var mp=Rt.f,bp=or(\"\".slice),wp=Math.min,Sp=rp(\"startsWith\"),Ep=!Sp&&!!function(){var t=mp(String.prototype,\"startsWith\");return t&&!t.writable}();Ce({target:\"String\",proto:!0,forced:!Ep&&!Sp},{startsWith:function(t){var e=Wr(j(this));tp(t);var r=ve(wp(arguments.length>1?arguments[1]:void 0,e.length)),n=Wr(t);return bp(e,r,r+n.length)===n}}),Ze(\"String\",\"startsWith\");var Op=zt.PROPER,xp=function(t){return a(function(){return!!Mi[t]()||\"​᠎\"!==\"​᠎\"[t]()||Op&&Mi[t].name!==t})},Rp=_i.start,Pp=xp(\"trimStart\")?function(){return Rp(this)}:\"\".trimStart;Ce({target:\"String\",proto:!0,name:\"trimStart\",forced:\"\".trimLeft!==Pp},{trimLeft:Pp}),Ce({target:\"String\",proto:!0,name:\"trimStart\",forced:\"\".trimStart!==Pp},{trimStart:Pp}),Ze(\"String\",\"trimLeft\");var Ap=_i.end,jp=xp(\"trimEnd\")?function(){return Ap(this)}:\"\".trimEnd;Ce({target:\"String\",proto:!0,name:\"trimEnd\",forced:\"\".trimRight!==jp},{trimRight:jp}),Ce({target:\"String\",proto:!0,name:\"trimEnd\",forced:\"\".trimEnd!==jp},{trimEnd:jp}),Ze(\"String\",\"trimRight\");var kp=Object.getOwnPropertyDescriptor,Ip=function(t){if(!u)return i[t];var e=kp(i,t);return e&&e.value},Tp=dt(\"iterator\"),Mp=!a(function(){var t=new URL(\"b?a=1&b=2&c=3\",\"https://a\"),e=t.searchParams,r=new URLSearchParams(\"a=1&a=2&b=3\"),n=\"\";return t.pathname=\"c%20d\",e.forEach(function(t,r){e.delete(\"b\"),n+=r+t}),r.delete(\"a\",2),r.delete(\"b\",void 0),!e.size&&!u||!e.sort||\"https://a/c%20d?a=1&c=3\"!==t.href||\"3\"!==e.get(\"c\")||\"a=1\"!==String(new URLSearchParams(\"?a=1\"))||!e[Tp]||\"a\"!==new URL(\"https://a@b\").username||\"b\"!==new URLSearchParams(new URLSearchParams(\"a=b\")).get(\"a\")||\"xn--e1aybc\"!==new URL(\"https://тест\").host||\"#%D0%B1\"!==new URL(\"https://a#б\").hash||\"a1c3\"!==n||\"x\"!==new URL(\"https://x\",void 0).host}),Lp=TypeError,Up=function(t,e){if(t<e)throw new Lp(\"Not enough arguments\");return t},Np=Math.floor,Cp=function(t,e){var r=t.length;if(r<8)for(var n,o,i=1;i<r;){for(o=i,n=t[i];o&&e(t[o-1],n)>0;)t[o]=t[--o];o!==i++&&(t[o]=n)}else for(var a=Np(r/2),u=Cp(vo(t,0,a),e),s=Cp(vo(t,a),e),c=u.length,f=s.length,l=0,h=0;l<c||h<f;)t[l+h]=l<c&&h<f?e(u[l],s[h])<=0?u[l++]:s[h++]:l<c?u[l++]:s[h++];return t},_p=Cp,Fp=dt(\"iterator\"),Bp=\"URLSearchParams\",Dp=Bp+\"Iterator\",zp=ne.set,Wp=ne.getterFor(Bp),qp=ne.getterFor(Dp),Hp=Ip(\"fetch\"),$p=Ip(\"Request\"),Kp=Ip(\"Headers\"),Gp=$p&&$p.prototype,Vp=Kp&&Kp.prototype,Yp=i.TypeError,Xp=i.encodeURIComponent,Jp=String.fromCharCode,Qp=L(\"String\",\"fromCodePoint\"),Zp=parseInt,tv=b(\"\".charAt),ev=b([].join),rv=b([].push),nv=b(\"\".replace),ov=b([].shift),iv=b([].splice),av=b(\"\".split),uv=b(\"\".slice),sv=b(/./.exec),cv=/\\+/g,fv=/^[0-9a-f]+$/i,lv=function(t,e){var r=uv(t,e,e+2);return sv(fv,r)?Zp(r,16):NaN},hv=function(t){for(var e=0,r=128;r>0&&0!=(t&r);r>>=1)e++;return e},pv=function(t){var e=null;switch(t.length){case 1:e=t[0];break;case 2:e=(31&t[0])<<6|63&t[1];break;case 3:e=(15&t[0])<<12|(63&t[1])<<6|63&t[2];break;case 4:e=(7&t[0])<<18|(63&t[1])<<12|(63&t[2])<<6|63&t[3]}return e>1114111?null:e},vv=function(t){for(var e=(t=nv(t,cv,\" \")).length,r=\"\",n=0;n<e;){var o=tv(t,n);if(\"%\"===o){if(\"%\"===tv(t,n+1)||n+3>e){r+=\"%\",n++;continue}var i=lv(t,n+1);if(i!=i){r+=o,n++;continue}n+=2;var a=hv(i);if(0===a)o=Jp(i);else{if(1===a||a>4){r+=\"�\",n++;continue}for(var u=[i],s=1;s<a&&!(3+ ++n>e||\"%\"!==tv(t,n));){var c=lv(t,n+1);if(c!=c){n+=3;break}if(c>191||c<128)break;rv(u,c),n+=2,s++}if(u.length!==a){r+=\"�\";continue}var f=pv(u);null===f?r+=\"�\":o=Qp(f)}}r+=o,n++}return r},dv=/[!'()~]|%20/g,gv={\"!\":\"%21\",\"'\":\"%27\",\"(\":\"%28\",\")\":\"%29\",\"~\":\"%7E\",\"%20\":\"+\"},yv=function(t){return gv[t]},mv=function(t){return nv(Xp(t),dv,yv)},bv=fn(function(t,e){zp(this,{type:Dp,target:Wp(t).entries,index:0,kind:e})},Bp,function(){var t=qp(this),e=t.target,r=t.index++;if(!e||r>=e.length)return t.target=null,Pn(void 0,!0);var n=e[r];switch(t.kind){case\"keys\":return Pn(n.key,!1);case\"values\":return Pn(n.value,!1)}return Pn([n.key,n.value],!1)},!0),wv=function(t){this.entries=[],this.url=null,void 0!==t&&(M(t)?this.parseObject(t):this.parseQuery(\"string\"==typeof t?\"?\"===tv(t,0)?uv(t,1):t:Wr(t)))};wv.prototype={type:Bp,bindURL:function(t){this.url=t,this.update()},parseObject:function(t){var e,r,n,o,i,a,u,s=this.entries,c=Fn(t);if(c)for(r=(e=Dn(t,c)).next;!(n=f(r,e)).done;){if(o=Dn(kt(n.value)),(a=f(i=o.next,o)).done||(u=f(i,o)).done||!f(i,o).done)throw new Yp(\"Expected sequence with length 2\");rv(s,{key:Wr(a.value),value:Wr(u.value)})}else for(var l in t)ut(t,l)&&rv(s,{key:l,value:Wr(t[l])})},parseQuery:function(t){if(t)for(var e,r,n=this.entries,o=av(t,\"&\"),i=0;i<o.length;)(e=o[i++]).length&&(r=av(e,\"=\"),rv(n,{key:vv(ov(r)),value:vv(ev(r,\"=\"))}))},serialize:function(){for(var t,e=this.entries,r=[],n=0;n<e.length;)t=e[n++],rv(r,mv(t.key)+\"=\"+mv(t.value));return ev(r,\"&\")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var Sv=function(){ko(this,Ev);var t=zp(this,new wv(arguments.length>0?arguments[0]:void 0));u||(this.size=t.entries.length)},Ev=Sv.prototype;if(Mo(Ev,{append:function(t,e){var r=Wp(this);Up(arguments.length,2),rv(r.entries,{key:Wr(t),value:Wr(e)}),u||this.length++,r.updateURL()},delete:function(t){for(var e=Wp(this),r=Up(arguments.length,1),n=e.entries,o=Wr(t),i=r<2?void 0:arguments[1],a=void 0===i?i:Wr(i),s=0;s<n.length;){var c=n[s];if(c.key!==o||void 0!==a&&c.value!==a)s++;else if(iv(n,s,1),void 0!==a)break}u||(this.size=n.length),e.updateURL()},get:function(t){var e=Wp(this).entries;Up(arguments.length,1);for(var r=Wr(t),n=0;n<e.length;n++)if(e[n].key===r)return e[n].value;return null},getAll:function(t){var e=Wp(this).entries;Up(arguments.length,1);for(var r=Wr(t),n=[],o=0;o<e.length;o++)e[o].key===r&&rv(n,e[o].value);return n},has:function(t){for(var e=Wp(this).entries,r=Up(arguments.length,1),n=Wr(t),o=r<2?void 0:arguments[1],i=void 0===o?o:Wr(o),a=0;a<e.length;){var u=e[a++];if(u.key===n&&(void 0===i||u.value===i))return!0}return!1},set:function(t,e){var r=Wp(this);Up(arguments.length,1);for(var n,o=r.entries,i=!1,a=Wr(t),s=Wr(e),c=0;c<o.length;c++)(n=o[c]).key===a&&(i?iv(o,c--,1):(i=!0,n.value=s));i||rv(o,{key:a,value:s}),u||(this.size=o.length),r.updateURL()},sort:function(){var t=Wp(this);_p(t.entries,function(t,e){return t.key>e.key?1:-1}),t.updateURL()},forEach:function(t){for(var e,r=Wp(this).entries,n=ar(t,arguments.length>1?arguments[1]:void 0),o=0;o<r.length;)n((e=r[o++]).value,e.key,this)},keys:function(){return new bv(this,\"keys\")},values:function(){return new bv(this,\"values\")},entries:function(){return new bv(this,\"entries\")}},{enumerable:!0}),ie(Ev,Fp,Ev.entries,{name:\"entries\"}),ie(Ev,\"toString\",function(){return Wp(this).serialize()},{enumerable:!0}),u&&so(Ev,\"size\",{get:function(){return Wp(this).entries.length},configurable:!0,enumerable:!0}),an(Sv,Bp),Ce({global:!0,constructor:!0,forced:!Mp},{URLSearchParams:Sv}),!Mp&&T(Kp)){var Ov=b(Vp.has),xv=b(Vp.set),Rv=function(t){if(M(t)){var e,r=t.body;if(pr(r)===Bp)return e=t.headers?new Kp(t.headers):new Kp,Ov(e,\"content-type\")||xv(e,\"content-type\",\"application/x-www-form-urlencoded;charset=UTF-8\"),Ve(t,{body:d(0,Wr(r)),headers:d(0,e)})}return t};if(T(Hp)&&Ce({global:!0,enumerable:!0,dontCallGetSet:!0,forced:!0},{fetch:function(t){return Hp(t,arguments.length>1?Rv(arguments[1]):{})}}),T($p)){var Pv=function(t){return ko(this,Gp),new $p(t,arguments.length>1?Rv(arguments[1]):{})};Gp.constructor=Pv,Pv.prototype=Gp,Ce({global:!0,constructor:!0,dontCallGetSet:!0,forced:!0},{Request:Pv})}}var Av={URLSearchParams:Sv,getState:Wp},jv=URLSearchParams,kv=jv.prototype,Iv=b(kv.append),Tv=b(kv.delete),Mv=b(kv.forEach),Lv=b([].push),Uv=new jv(\"a=1&a=2&b=3\");Uv.delete(\"a\",1),Uv.delete(\"b\",void 0),Uv+\"\"!=\"a=2\"&&ie(kv,\"delete\",function(t){var e=arguments.length,r=e<2?void 0:arguments[1];if(e&&void 0===r)return Tv(this,t);var n=[];Mv(this,function(t,e){Lv(n,{key:e,value:t})}),Up(e,1);for(var o,i=Wr(t),a=Wr(r),u=0,s=0,c=!1,f=n.length;u<f;)o=n[u++],c||o.key===i?(c=!0,Tv(this,o.key)):s++;for(;s<f;)(o=n[s++]).key===i&&o.value===a||Iv(this,o.key,o.value)},{enumerable:!0,unsafe:!0});var Nv=URLSearchParams,Cv=Nv.prototype,_v=b(Cv.getAll),Fv=b(Cv.has),Bv=new Nv(\"a=1\");!Bv.has(\"a\",2)&&Bv.has(\"a\",void 0)||ie(Cv,\"has\",function(t){var e=arguments.length,r=e<2?void 0:arguments[1];if(e&&void 0===r)return Fv(this,t);var n=_v(this,t);Up(e,1);for(var o=Wr(r),i=0;i<n.length;)if(n[i++]===o)return!0;return!1},{enumerable:!0,unsafe:!0});var Dv=URLSearchParams.prototype,zv=b(Dv.forEach);u&&!(\"size\"in Dv)&&so(Dv,\"size\",{get:function(){var t=0;return zv(this,function(){t++}),t},configurable:!0,enumerable:!0});var Wv,qv=Object.assign,Hv=Object.defineProperty,$v=b([].concat),Kv=!qv||a(function(){if(u&&1!==qv({b:1},qv(Hv({},\"a\",{enumerable:!0,get:function(){Hv(this,\"b\",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var t={},e={},r=Symbol(\"assign detection\"),n=\"abcdefghijklmnopqrst\";return t[r]=7,n.split(\"\").forEach(function(t){e[t]=t}),7!==qv({},t)[r]||_e(qv({},e)).join(\"\")!==n})?function(t,e){for(var r=it(t),n=arguments.length,o=1,i=xe.f,a=v.f;n>o;)for(var s,c=R(arguments[o++]),l=i?$v(_e(c),i(c)):_e(c),h=l.length,p=0;h>p;)s=l[p++],u&&!f(a,c,s)||(r[s]=c[s]);return r}:qv,Gv=2147483647,Vv=/[^\\0-\\u007E]/,Yv=/[.\\u3002\\uFF0E\\uFF61]/g,Xv=\"Overflow: input needs wider integers to process\",Jv=RangeError,Qv=b(Yv.exec),Zv=Math.floor,td=String.fromCharCode,ed=b(\"\".charCodeAt),rd=b([].join),nd=b([].push),od=b(\"\".replace),id=b(\"\".split),ad=b(\"\".toLowerCase),ud=function(t){return t+22+75*(t<26)},sd=function(t,e,r){var n=0;for(t=r?Zv(t/700):t>>1,t+=Zv(t/e);t>455;)t=Zv(t/35),n+=36;return Zv(n+36*t/(t+38))},cd=function(t){var e=[];t=function(t){for(var e=[],r=0,n=t.length;r<n;){var o=ed(t,r++);if(o>=55296&&o<=56319&&r<n){var i=ed(t,r++);56320==(64512&i)?nd(e,((1023&o)<<10)+(1023&i)+65536):(nd(e,o),r--)}else nd(e,o)}return e}(t);var r,n,o=t.length,i=128,a=0,u=72;for(r=0;r<t.length;r++)(n=t[r])<128&&nd(e,td(n));var s=e.length,c=s;for(s&&nd(e,\"-\");c<o;){var f=Gv;for(r=0;r<t.length;r++)(n=t[r])>=i&&n<f&&(f=n);var l=c+1;if(f-i>Zv((Gv-a)/l))throw new Jv(Xv);for(a+=(f-i)*l,i=f,r=0;r<t.length;r++){if((n=t[r])<i&&++a>Gv)throw new Jv(Xv);if(n===i){for(var h=a,p=36;;){var v=p<=u?1:p>=u+26?26:p-u;if(h<v)break;var d=h-v,g=36-v;nd(e,td(ud(v+d%g))),h=Zv(d/g),p+=36}nd(e,td(ud(h))),u=sd(a,l,c===s),a=0,c++}}a++,i++}return rd(e,\"\")},fd=Gr.codeAt,ld=ne.set,hd=ne.getterFor(\"URL\"),pd=Av.URLSearchParams,vd=Av.getState,dd=i.URL,gd=i.TypeError,yd=i.parseInt,md=Math.floor,bd=Math.pow,wd=b(\"\".charAt),Sd=b(/./.exec),Ed=b([].join),Od=b(1..toString),xd=b([].pop),Rd=b([].push),Pd=b(\"\".replace),Ad=b([].shift),jd=b(\"\".split),kd=b(\"\".slice),Id=b(\"\".toLowerCase),Td=b([].unshift),Md=\"Invalid scheme\",Ld=\"Invalid host\",Ud=\"Invalid port\",Nd=/[a-z]/i,Cd=/[\\d+-.a-z]/i,_d=/\\d/,Fd=/^0x/i,Bd=/^[0-7]+$/,Dd=/^\\d+$/,zd=/^[\\da-f]+$/i,Wd=/[\\0\\t\\n\\r #%/:<>?@[\\\\\\]^|]/,qd=/[\\0\\t\\n\\r #/:<>?@[\\\\\\]^|]/,Hd=/^[\\u0000-\\u0020]+/,$d=/(^|[^\\u0000-\\u0020])[\\u0000-\\u0020]+$/,Kd=/[\\t\\n\\r]/g,Gd=function(t){var e,r,n,o;if(\"number\"==typeof t){for(e=[],r=0;r<4;r++)Td(e,t%256),t=md(t/256);return Ed(e,\".\")}if(\"object\"==typeof t){for(e=\"\",n=function(t){for(var e=null,r=1,n=null,o=0,i=0;i<8;i++)0!==t[i]?(o>r&&(e=n,r=o),n=null,o=0):(null===n&&(n=i),++o);return o>r?n:e}(t),r=0;r<8;r++)o&&0===t[r]||(o&&(o=!1),n===r?(e+=r?\":\":\"::\",o=!0):(e+=Od(t[r],16),r<7&&(e+=\":\")));return\"[\"+e+\"]\"}return t},Vd={},Yd=Kv({},Vd,{\" \":1,'\"':1,\"<\":1,\">\":1,\"`\":1}),Xd=Kv({},Yd,{\"#\":1,\"?\":1,\"{\":1,\"}\":1}),Jd=Kv({},Xd,{\"/\":1,\":\":1,\";\":1,\"=\":1,\"@\":1,\"[\":1,\"\\\\\":1,\"]\":1,\"^\":1,\"|\":1}),Qd=function(t,e){var r=fd(t,0);return r>32&&r<127&&!ut(e,t)?t:encodeURIComponent(t)},Zd={ftp:21,file:null,http:80,https:443,ws:80,wss:443},tg=function(t,e){var r;return 2===t.length&&Sd(Nd,wd(t,0))&&(\":\"===(r=wd(t,1))||!e&&\"|\"===r)},eg=function(t){var e;return t.length>1&&tg(kd(t,0,2))&&(2===t.length||\"/\"===(e=wd(t,2))||\"\\\\\"===e||\"?\"===e||\"#\"===e)},rg=function(t){return\".\"===t||\"%2e\"===Id(t)},ng={},og={},ig={},ag={},ug={},sg={},cg={},fg={},lg={},hg={},pg={},vg={},dg={},gg={},yg={},mg={},bg={},wg={},Sg={},Eg={},Og={},xg=function(t,e,r){var n,o,i,a=Wr(t);if(e){if(o=this.parse(a))throw new gd(o);this.searchParams=null}else{if(void 0!==r&&(n=new xg(r,!0)),o=this.parse(a,null,n))throw new gd(o);(i=vd(new pd)).bindURL(this),this.searchParams=i}};xg.prototype={type:\"URL\",parse:function(t,e,r){var n,o,i,a,u,s=this,c=e||ng,f=0,l=\"\",h=!1,p=!1,v=!1;for(t=Wr(t),e||(s.scheme=\"\",s.username=\"\",s.password=\"\",s.host=null,s.port=null,s.path=[],s.query=null,s.fragment=null,s.cannotBeABaseURL=!1,t=Pd(t,Hd,\"\"),t=Pd(t,$d,\"$1\")),t=Pd(t,Kd,\"\"),n=Wn(t);f<=n.length;){switch(o=n[f],c){case ng:if(!o||!Sd(Nd,o)){if(e)return Md;c=ig;continue}l+=Id(o),c=og;break;case og:if(o&&(Sd(Cd,o)||\"+\"===o||\"-\"===o||\".\"===o))l+=Id(o);else{if(\":\"!==o){if(e)return Md;l=\"\",c=ig,f=0;continue}if(e&&(s.isSpecial()!==ut(Zd,l)||\"file\"===l&&(s.includesCredentials()||null!==s.port)||\"file\"===s.scheme&&!s.host))return;if(s.scheme=l,e)return void(s.isSpecial()&&Zd[s.scheme]===s.port&&(s.port=null));l=\"\",\"file\"===s.scheme?c=gg:s.isSpecial()&&r&&r.scheme===s.scheme?c=ag:s.isSpecial()?c=fg:\"/\"===n[f+1]?(c=ug,f++):(s.cannotBeABaseURL=!0,Rd(s.path,\"\"),c=Sg)}break;case ig:if(!r||r.cannotBeABaseURL&&\"#\"!==o)return Md;if(r.cannotBeABaseURL&&\"#\"===o){s.scheme=r.scheme,s.path=vo(r.path),s.query=r.query,s.fragment=\"\",s.cannotBeABaseURL=!0,c=Og;break}c=\"file\"===r.scheme?gg:sg;continue;case ag:if(\"/\"!==o||\"/\"!==n[f+1]){c=sg;continue}c=lg,f++;break;case ug:if(\"/\"===o){c=hg;break}c=wg;continue;case sg:if(s.scheme=r.scheme,o===Wv)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=vo(r.path),s.query=r.query;else if(\"/\"===o||\"\\\\\"===o&&s.isSpecial())c=cg;else if(\"?\"===o)s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=vo(r.path),s.query=\"\",c=Eg;else{if(\"#\"!==o){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=vo(r.path),s.path.length--,c=wg;continue}s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,s.path=vo(r.path),s.query=r.query,s.fragment=\"\",c=Og}break;case cg:if(!s.isSpecial()||\"/\"!==o&&\"\\\\\"!==o){if(\"/\"!==o){s.username=r.username,s.password=r.password,s.host=r.host,s.port=r.port,c=wg;continue}c=hg}else c=lg;break;case fg:if(c=lg,\"/\"!==o||\"/\"!==wd(l,f+1))continue;f++;break;case lg:if(\"/\"!==o&&\"\\\\\"!==o){c=hg;continue}break;case hg:if(\"@\"===o){h&&(l=\"%40\"+l),h=!0,i=Wn(l);for(var d=0;d<i.length;d++){var g=i[d];if(\":\"!==g||v){var y=Qd(g,Jd);v?s.password+=y:s.username+=y}else v=!0}l=\"\"}else if(o===Wv||\"/\"===o||\"?\"===o||\"#\"===o||\"\\\\\"===o&&s.isSpecial()){if(h&&\"\"===l)return\"Invalid authority\";f-=Wn(l).length+1,l=\"\",c=pg}else l+=o;break;case pg:case vg:if(e&&\"file\"===s.scheme){c=mg;continue}if(\":\"!==o||p){if(o===Wv||\"/\"===o||\"?\"===o||\"#\"===o||\"\\\\\"===o&&s.isSpecial()){if(s.isSpecial()&&\"\"===l)return Ld;if(e&&\"\"===l&&(s.includesCredentials()||null!==s.port))return;if(a=s.parseHost(l))return a;if(l=\"\",c=bg,e)return;continue}\"[\"===o?p=!0:\"]\"===o&&(p=!1),l+=o}else{if(\"\"===l)return Ld;if(a=s.parseHost(l))return a;if(l=\"\",c=dg,e===vg)return}break;case dg:if(!Sd(_d,o)){if(o===Wv||\"/\"===o||\"?\"===o||\"#\"===o||\"\\\\\"===o&&s.isSpecial()||e){if(\"\"!==l){var m=yd(l,10);if(m>65535)return Ud;s.port=s.isSpecial()&&m===Zd[s.scheme]?null:m,l=\"\"}if(e)return;c=bg;continue}return Ud}l+=o;break;case gg:if(s.scheme=\"file\",\"/\"===o||\"\\\\\"===o)c=yg;else{if(!r||\"file\"!==r.scheme){c=wg;continue}switch(o){case Wv:s.host=r.host,s.path=vo(r.path),s.query=r.query;break;case\"?\":s.host=r.host,s.path=vo(r.path),s.query=\"\",c=Eg;break;case\"#\":s.host=r.host,s.path=vo(r.path),s.query=r.query,s.fragment=\"\",c=Og;break;default:eg(Ed(vo(n,f),\"\"))||(s.host=r.host,s.path=vo(r.path),s.shortenPath()),c=wg;continue}}break;case yg:if(\"/\"===o||\"\\\\\"===o){c=mg;break}r&&\"file\"===r.scheme&&!eg(Ed(vo(n,f),\"\"))&&(tg(r.path[0],!0)?Rd(s.path,r.path[0]):s.host=r.host),c=wg;continue;case mg:if(o===Wv||\"/\"===o||\"\\\\\"===o||\"?\"===o||\"#\"===o){if(!e&&tg(l))c=wg;else if(\"\"===l){if(s.host=\"\",e)return;c=bg}else{if(a=s.parseHost(l))return a;if(\"localhost\"===s.host&&(s.host=\"\"),e)return;l=\"\",c=bg}continue}l+=o;break;case bg:if(s.isSpecial()){if(c=wg,\"/\"!==o&&\"\\\\\"!==o)continue}else if(e||\"?\"!==o)if(e||\"#\"!==o){if(o!==Wv&&(c=wg,\"/\"!==o))continue}else s.fragment=\"\",c=Og;else s.query=\"\",c=Eg;break;case wg:if(o===Wv||\"/\"===o||\"\\\\\"===o&&s.isSpecial()||!e&&(\"?\"===o||\"#\"===o)){if(\"..\"===(u=Id(u=l))||\"%2e.\"===u||\".%2e\"===u||\"%2e%2e\"===u?(s.shortenPath(),\"/\"===o||\"\\\\\"===o&&s.isSpecial()||Rd(s.path,\"\")):rg(l)?\"/\"===o||\"\\\\\"===o&&s.isSpecial()||Rd(s.path,\"\"):(\"file\"===s.scheme&&!s.path.length&&tg(l)&&(s.host&&(s.host=\"\"),l=wd(l,0)+\":\"),Rd(s.path,l)),l=\"\",\"file\"===s.scheme&&(o===Wv||\"?\"===o||\"#\"===o))for(;s.path.length>1&&\"\"===s.path[0];)Ad(s.path);\"?\"===o?(s.query=\"\",c=Eg):\"#\"===o&&(s.fragment=\"\",c=Og)}else l+=Qd(o,Xd);break;case Sg:\"?\"===o?(s.query=\"\",c=Eg):\"#\"===o?(s.fragment=\"\",c=Og):o!==Wv&&(s.path[0]+=Qd(o,Vd));break;case Eg:e||\"#\"!==o?o!==Wv&&(\"'\"===o&&s.isSpecial()?s.query+=\"%27\":s.query+=\"#\"===o?\"%23\":Qd(o,Vd)):(s.fragment=\"\",c=Og);break;case Og:o!==Wv&&(s.fragment+=Qd(o,Yd))}f++}},parseHost:function(t){var e,r,n;if(\"[\"===wd(t,0)){if(\"]\"!==wd(t,t.length-1))return Ld;if(e=function(t){var e,r,n,o,i,a,u,s=[0,0,0,0,0,0,0,0],c=0,f=null,l=0,h=function(){return wd(t,l)};if(\":\"===h()){if(\":\"!==wd(t,1))return;l+=2,f=++c}for(;h();){if(8===c)return;if(\":\"!==h()){for(e=r=0;r<4&&Sd(zd,h());)e=16*e+yd(h(),16),l++,r++;if(\".\"===h()){if(0===r)return;if(l-=r,c>6)return;for(n=0;h();){if(o=null,n>0){if(!(\".\"===h()&&n<4))return;l++}if(!Sd(_d,h()))return;for(;Sd(_d,h());){if(i=yd(h(),10),null===o)o=i;else{if(0===o)return;o=10*o+i}if(o>255)return;l++}s[c]=256*s[c]+o,2!=++n&&4!==n||c++}if(4!==n)return;break}if(\":\"===h()){if(l++,!h())return}else if(h())return;s[c++]=e}else{if(null!==f)return;l++,f=++c}}if(null!==f)for(a=c-f,c=7;0!==c&&a>0;)u=s[c],s[c--]=s[f+a-1],s[f+--a]=u;else if(8!==c)return;return s}(kd(t,1,-1)),!e)return Ld;this.host=e}else if(this.isSpecial()){if(t=function(t){var e,r,n=[],o=id(od(ad(t),Yv,\".\"),\".\");for(e=0;e<o.length;e++)nd(n,Qv(Vv,r=o[e])?\"xn--\"+cd(r):r);return rd(n,\".\")}(t),Sd(Wd,t))return Ld;if(e=function(t){var e,r,n,o,i,a,u,s=jd(t,\".\");if(s.length&&\"\"===s[s.length-1]&&s.length--,(e=s.length)>4)return t;for(r=[],n=0;n<e;n++){if(\"\"===(o=s[n]))return t;if(i=10,o.length>1&&\"0\"===wd(o,0)&&(i=Sd(Fd,o)?16:8,o=kd(o,8===i?1:2)),\"\"===o)a=0;else{if(!Sd(10===i?Dd:8===i?Bd:zd,o))return t;a=yd(o,i)}Rd(r,a)}for(n=0;n<e;n++)if(a=r[n],n===e-1){if(a>=bd(256,5-e))return null}else if(a>255)return null;for(u=xd(r),n=0;n<r.length;n++)u+=r[n]*bd(256,3-n);return u}(t),null===e)return Ld;this.host=e}else{if(Sd(qd,t))return Ld;for(e=\"\",r=Wn(t),n=0;n<r.length;n++)e+=Qd(r[n],Vd);this.host=e}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||\"file\"===this.scheme},includesCredentials:function(){return\"\"!==this.username||\"\"!==this.password},isSpecial:function(){return ut(Zd,this.scheme)},shortenPath:function(){var t=this.path,e=t.length;!e||\"file\"===this.scheme&&1===e&&tg(t[0],!0)||t.length--},serialize:function(){var t=this,e=t.scheme,r=t.username,n=t.password,o=t.host,i=t.port,a=t.path,u=t.query,s=t.fragment,c=e+\":\";return null!==o?(c+=\"//\",t.includesCredentials()&&(c+=r+(n?\":\"+n:\"\")+\"@\"),c+=Gd(o),null!==i&&(c+=\":\"+i)):\"file\"===e&&(c+=\"//\"),c+=t.cannotBeABaseURL?a[0]:a.length?\"/\"+Ed(a,\"/\"):\"\",null!==u&&(c+=\"?\"+u),null!==s&&(c+=\"#\"+s),c},setHref:function(t){var e=this.parse(t);if(e)throw new gd(e);this.searchParams.update()},getOrigin:function(){var t=this.scheme,e=this.port;if(\"blob\"===t)try{return new Rg(t.path[0]).origin}catch(t){return\"null\"}return\"file\"!==t&&this.isSpecial()?t+\"://\"+Gd(this.host)+(null!==e?\":\"+e:\"\"):\"null\"},getProtocol:function(){return this.scheme+\":\"},setProtocol:function(t){this.parse(Wr(t)+\":\",ng)},getUsername:function(){return this.username},setUsername:function(t){var e=Wn(Wr(t));if(!this.cannotHaveUsernamePasswordPort()){this.username=\"\";for(var r=0;r<e.length;r++)this.username+=Qd(e[r],Jd)}},getPassword:function(){return this.password},setPassword:function(t){var e=Wn(Wr(t));if(!this.cannotHaveUsernamePasswordPort()){this.password=\"\";for(var r=0;r<e.length;r++)this.password+=Qd(e[r],Jd)}},getHost:function(){var t=this.host,e=this.port;return null===t?\"\":null===e?Gd(t):Gd(t)+\":\"+e},setHost:function(t){this.cannotBeABaseURL||this.parse(t,pg)},getHostname:function(){var t=this.host;return null===t?\"\":Gd(t)},setHostname:function(t){this.cannotBeABaseURL||this.parse(t,vg)},getPort:function(){var t=this.port;return null===t?\"\":Wr(t)},setPort:function(t){this.cannotHaveUsernamePasswordPort()||(\"\"===(t=Wr(t))?this.port=null:this.parse(t,dg))},getPathname:function(){var t=this.path;return this.cannotBeABaseURL?t[0]:t.length?\"/\"+Ed(t,\"/\"):\"\"},setPathname:function(t){this.cannotBeABaseURL||(this.path=[],this.parse(t,bg))},getSearch:function(){var t=this.query;return t?\"?\"+t:\"\"},setSearch:function(t){\"\"===(t=Wr(t))?this.query=null:(\"?\"===wd(t,0)&&(t=kd(t,1)),this.query=\"\",this.parse(t,Eg)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var t=this.fragment;return t?\"#\"+t:\"\"},setHash:function(t){\"\"!==(t=Wr(t))?(\"#\"===wd(t,0)&&(t=kd(t,1)),this.fragment=\"\",this.parse(t,Og)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var Rg=function(t){var e=ko(this,Pg),r=Up(arguments.length,1)>1?arguments[1]:void 0,n=ld(e,new xg(t,!1,r));u||(e.href=n.serialize(),e.origin=n.getOrigin(),e.protocol=n.getProtocol(),e.username=n.getUsername(),e.password=n.getPassword(),e.host=n.getHost(),e.hostname=n.getHostname(),e.port=n.getPort(),e.pathname=n.getPathname(),e.search=n.getSearch(),e.searchParams=n.getSearchParams(),e.hash=n.getHash())},Pg=Rg.prototype,Ag=function(t,e){return{get:function(){return hd(this)[t]()},set:e&&function(t){return hd(this)[e](t)},configurable:!0,enumerable:!0}};if(u&&(so(Pg,\"href\",Ag(\"serialize\",\"setHref\")),so(Pg,\"origin\",Ag(\"getOrigin\")),so(Pg,\"protocol\",Ag(\"getProtocol\",\"setProtocol\")),so(Pg,\"username\",Ag(\"getUsername\",\"setUsername\")),so(Pg,\"password\",Ag(\"getPassword\",\"setPassword\")),so(Pg,\"host\",Ag(\"getHost\",\"setHost\")),so(Pg,\"hostname\",Ag(\"getHostname\",\"setHostname\")),so(Pg,\"port\",Ag(\"getPort\",\"setPort\")),so(Pg,\"pathname\",Ag(\"getPathname\",\"setPathname\")),so(Pg,\"search\",Ag(\"getSearch\",\"setSearch\")),so(Pg,\"searchParams\",Ag(\"getSearchParams\")),so(Pg,\"hash\",Ag(\"getHash\",\"setHash\"))),ie(Pg,\"toJSON\",function(){return hd(this).serialize()},{enumerable:!0}),ie(Pg,\"toString\",function(){return hd(this).serialize()},{enumerable:!0}),dd){var jg=dd.createObjectURL,kg=dd.revokeObjectURL;jg&&ie(Rg,\"createObjectURL\",ar(jg,dd)),kg&&ie(Rg,\"revokeObjectURL\",ar(kg,dd))}an(Rg,\"URL\"),Ce({global:!0,constructor:!0,forced:!Mp,sham:!u},{URL:Rg});var Ig=L(\"URL\"),Tg=Mp&&a(function(){Ig.canParse()}),Mg=a(function(){return 1!==Ig.canParse.length});Ce({target:\"URL\",stat:!0,forced:!Tg||Mg},{canParse:function(t){var e=Up(arguments.length,1),r=Wr(t),n=e<2||void 0===arguments[1]?void 0:Wr(arguments[1]);try{return!!new Ig(r,n)}catch(t){return!1}}});var Lg=L(\"URL\");Ce({target:\"URL\",stat:!0,forced:!Mp},{parse:function(t){var e=Up(arguments.length,1),r=Wr(t),n=e<2||void 0===arguments[1]?void 0:Wr(arguments[1]);try{return new Lg(r,n)}catch(t){return null}}}),Ce({target:\"URL\",proto:!0,enumerable:!0},{toJSON:function(){return f(URL.prototype.toString,this)}});var Ug=WeakMap.prototype,Ng={WeakMap:WeakMap,set:b(Ug.set),get:b(Ug.get),has:b(Ug.has),remove:b(Ug.delete)},Cg=Ng.has,_g=function(t){return Cg(t),t},Fg=Ng.get,Bg=Ng.has,Dg=Ng.set;Ce({target:\"WeakMap\",proto:!0,real:!0,forced:!0},{emplace:function(t,e){var r,n,o=_g(this);return Bg(o,t)?(r=Fg(o,t),\"update\"in e&&(r=e.update(r,t,o),Dg(o,t,r)),r):(n=e.insert(t,o),Dg(o,t,n),n)}}),Ce({target:\"WeakMap\",stat:!0,forced:!0},{from:ei(Ng.WeakMap,Ng.set,!0)}),Ce({target:\"WeakMap\",stat:!0,forced:!0},{of:ri(Ng.WeakMap,Ng.set,!0)});var zg=Ng.remove;Ce({target:\"WeakMap\",proto:!0,real:!0,forced:!0},{deleteAll:function(){for(var t,e=_g(this),r=!0,n=0,o=arguments.length;n<o;n++)t=zg(e,arguments[n]),r=r&&t;return!!r}}),Ce({target:\"WeakMap\",proto:!0,real:!0,forced:!0},{upsert:Ii}),To(\"WeakSet\",function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}},eu);var Wg=WeakSet.prototype,qg={WeakSet:WeakSet,add:b(Wg.add),has:b(Wg.has),remove:b(Wg.delete)},Hg=qg.has,$g=function(t){return Hg(t),t},Kg=qg.add;Ce({target:\"WeakSet\",proto:!0,real:!0,forced:!0},{addAll:function(){for(var t=$g(this),e=0,r=arguments.length;e<r;e++)Kg(t,arguments[e]);return t}});var Gg=qg.remove;Ce({target:\"WeakSet\",proto:!0,real:!0,forced:!0},{deleteAll:function(){for(var t,e=$g(this),r=!0,n=0,o=arguments.length;n<o;n++)t=Gg(e,arguments[n]),r=r&&t;return!!r}}),Ce({target:\"WeakSet\",stat:!0,forced:!0},{from:ei(qg.WeakSet,qg.add,!1)}),Ce({target:\"WeakSet\",stat:!0,forced:!0},{of:ri(qg.WeakSet,qg.add,!1)});var Vg=Error,Yg=b(\"\".replace),Xg=String(new Vg(\"zxcasd\").stack),Jg=/\\n\\s*at [^:]*:[^\\n]*/,Qg=Jg.test(Xg),Zg=!a(function(){var t=new Error(\"a\");return!(\"stack\"in t)||(Object.defineProperty(t,\"stack\",d(1,7)),7!==t.stack)}),ty=Error.captureStackTrace,ey=dt(\"toStringTag\"),ry=Error,ny=[].push,oy=function(t,e){var r,n,o,i,a,u=U(iy,this);dn?r=dn(new ry,u?Qr(this):iy):(r=u?this:Ve(iy),_t(r,ey,\"Error\")),void 0!==e&&_t(r,\"message\",function(t,e){return void 0===t?arguments.length<2?\"\":e:Wr(t)}(e)),i=r,a=r.stack,Zg&&(ty?ty(i,oy):_t(i,\"stack\",function(t,e){if(Qg&&\"string\"==typeof t&&!Vg.prepareStackTrace)for(;e--;)t=Yg(t,Jg,\"\");return t}(a,1))),arguments.length>2&&(n=r,M(o=arguments[2])&&\"cause\"in o&&_t(n,\"cause\",o.cause));var s=[];return Ao(t,ny,{that:s}),_t(r,\"errors\",s),r};dn?dn(oy,ry):Ae(oy,ry,{name:!0});var iy=oy.prototype=Ve(ry.prototype,{constructor:d(1,oy),message:d(1,\"\"),name:d(1,\"AggregateError\")});Ce({global:!0,constructor:!0,arity:2},{AggregateError:oy});var ay,uy,sy,cy,fy=function(t){return _.slice(0,t.length)===t},ly=fy(\"Bun/\")?\"BUN\":fy(\"Cloudflare-Workers\")?\"CLOUDFLARE\":fy(\"Deno/\")?\"DENO\":fy(\"Node.js/\")?\"NODE\":i.Bun&&\"string\"==typeof Bun.version?\"BUN\":i.Deno&&\"object\"==typeof Deno.version?\"DENO\":\"process\"===E(i.process)?\"NODE\":i.window&&i.document?\"BROWSER\":\"REST\",hy=\"NODE\"===ly,py=/(?:ipad|iphone|ipod).*applewebkit/i.test(_),vy=i.setImmediate,dy=i.clearImmediate,gy=i.process,yy=i.Dispatch,my=i.Function,by=i.MessageChannel,wy=i.String,Sy=0,Ey={},Oy=\"onreadystatechange\";a(function(){ay=i.location});var xy=function(t){if(ut(Ey,t)){var e=Ey[t];delete Ey[t],e()}},Ry=function(t){return function(){xy(t)}},Py=function(t){xy(t.data)},Ay=function(t){i.postMessage(wy(t),ay.protocol+\"//\"+ay.host)};vy&&dy||(vy=function(t){Up(arguments.length,1);var e=T(t)?t:my(t),r=vo(arguments,1);return Ey[++Sy]=function(){Ra(e,void 0,r)},uy(Sy),Sy},dy=function(t){delete Ey[t]},hy?uy=function(t){gy.nextTick(Ry(t))}:yy&&yy.now?uy=function(t){yy.now(Ry(t))}:by&&!py?(cy=(sy=new by).port2,sy.port1.onmessage=Py,uy=ar(cy.postMessage,cy)):i.addEventListener&&T(i.postMessage)&&!i.importScripts&&ay&&\"file:\"!==ay.protocol&&!a(Ay)?(uy=Ay,i.addEventListener(\"message\",Py,!1)):uy=Oy in Et(\"script\")?function(t){De.appendChild(Et(\"script\"))[Oy]=function(){De.removeChild(this),xy(t)}}:function(t){setTimeout(Ry(t),0)});var jy={set:vy,clear:dy},ky=function(){this.head=null,this.tail=null};ky.prototype={add:function(t){var e={item:t,next:null},r=this.tail;r?r.next=e:this.head=e,this.tail=e},get:function(){var t=this.head;if(t)return null===(this.head=t.next)&&(this.tail=null),t.item}};var Iy,Ty,My,Ly,Uy,Ny=ky,Cy=/ipad|iphone|ipod/i.test(_)&&\"undefined\"!=typeof Pebble,_y=/web0s(?!.*chrome)/i.test(_),Fy=jy.set,By=i.MutationObserver||i.WebKitMutationObserver,Dy=i.document,zy=i.process,Wy=i.Promise,qy=Ip(\"queueMicrotask\");if(!qy){var Hy=new Ny,$y=function(){var t,e;for(hy&&(t=zy.domain)&&t.exit();e=Hy.get();)try{e()}catch(t){throw Hy.head&&Iy(),t}t&&t.enter()};py||hy||_y||!By||!Dy?!Cy&&Wy&&Wy.resolve?((Ly=Wy.resolve(void 0)).constructor=Wy,Uy=ar(Ly.then,Ly),Iy=function(){Uy($y)}):hy?Iy=function(){zy.nextTick($y)}:(Fy=ar(Fy,i),Iy=function(){Fy($y)}):(Ty=!0,My=Dy.createTextNode(\"\"),new By($y).observe(My,{characterData:!0}),Iy=function(){My.data=Ty=!Ty}),qy=function(t){Hy.head||Iy(),Hy.add(t)}}var Ky,Gy,Vy,Yy=qy,Xy=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}},Jy=i.Promise,Qy=dt(\"species\"),Zy=!1,tm=T(i.PromiseRejectionEvent),em=Ue(\"Promise\",function(){var t=Kt(Jy),e=t!==String(Jy);if(!e&&66===W)return!0;if(!W||W<51||!/native code/.test(t)){var r=new Jy(function(t){t(1)}),n=function(t){t(function(){},function(){})};if((r.constructor={})[Qy]=n,!(Zy=r.then(function(){})instanceof n))return!0}return!(e||\"BROWSER\"!==ly&&\"DENO\"!==ly||tm)}),rm={CONSTRUCTOR:em,REJECTION_EVENT:tm,SUBCLASSING:Zy},nm=TypeError,om=function(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw new nm(\"Bad Promise constructor\");e=t,r=n}),this.resolve=J(e),this.reject=J(r)},im={f:function(t){return new om(t)}},am=jy.set,um=\"Promise\",sm=rm.CONSTRUCTOR,cm=rm.REJECTION_EVENT,fm=rm.SUBCLASSING,lm=ne.getterFor(um),hm=ne.set,pm=Jy&&Jy.prototype,vm=Jy,dm=pm,gm=i.TypeError,ym=i.document,mm=i.process,bm=im.f,wm=bm,Sm=!!(ym&&ym.createEvent&&i.dispatchEvent),Em=\"unhandledrejection\",Om=function(t){var e;return!(!M(t)||!T(e=t.then))&&e},xm=function(t,e){var r,n,o,i=e.value,a=1===e.state,u=a?t.ok:t.fail,s=t.resolve,c=t.reject,l=t.domain;try{u?(a||(2===e.rejection&&km(e),e.rejection=1),!0===u?r=i:(l&&l.enter(),r=u(i),l&&(l.exit(),o=!0)),r===t.promise?c(new gm(\"Promise-chain cycle\")):(n=Om(r))?f(n,r,s,c):s(r)):c(i)}catch(t){l&&!o&&l.exit(),c(t)}},Rm=function(t,e){t.notified||(t.notified=!0,Yy(function(){for(var r,n=t.reactions;r=n.get();)xm(r,t);t.notified=!1,e&&!t.rejection&&Am(t)}))},Pm=function(t,e,r){var n,o;Sm?((n=ym.createEvent(\"Event\")).promise=e,n.reason=r,n.initEvent(t,!1,!0),i.dispatchEvent(n)):n={promise:e,reason:r},!cm&&(o=i[\"on\"+t])?o(n):t===Em&&function(t,e){try{1===arguments.length?console.error(t):console.error(t,e)}catch(t){}}(\"Unhandled promise rejection\",r)},Am=function(t){f(am,i,function(){var e,r=t.facade,n=t.value;if(jm(t)&&(e=Xy(function(){hy?mm.emit(\"unhandledRejection\",n,r):Pm(Em,r,n)}),t.rejection=hy||jm(t)?2:1,e.error))throw e.value})},jm=function(t){return 1!==t.rejection&&!t.parent},km=function(t){f(am,i,function(){var e=t.facade;hy?mm.emit(\"rejectionHandled\",e):Pm(\"rejectionhandled\",e,t.value)})},Im=function(t,e,r){return function(n){t(e,n,r)}},Tm=function(t,e,r){t.done||(t.done=!0,r&&(t=r),t.value=e,t.state=2,Rm(t,!0))},Mm=function(t,e,r){if(!t.done){t.done=!0,r&&(t=r);try{if(t.facade===e)throw new gm(\"Promise can't be resolved itself\");var n=Om(e);n?Yy(function(){var r={done:!1};try{f(n,e,Im(Mm,r,t),Im(Tm,r,t))}catch(e){Tm(r,e,t)}}):(t.value=e,t.state=1,Rm(t,!1))}catch(e){Tm({done:!1},e,t)}}};if(sm&&(vm=function(t){ko(this,dm),J(t),f(Ky,this);var e=lm(this);try{t(Im(Mm,e),Im(Tm,e))}catch(t){Tm(e,t)}},(Ky=function(t){hm(this,{type:um,done:!1,notified:!1,parent:!1,reactions:new Ny,rejection:!1,state:0,value:null})}).prototype=ie(dm=vm.prototype,\"then\",function(t,e){var r=lm(this),n=bm(Cc(this,vm));return r.parent=!0,n.ok=!T(t)||t,n.fail=T(e)&&e,n.domain=hy?mm.domain:void 0,0===r.state?r.reactions.add(n):Yy(function(){xm(n,r)}),n.promise}),Gy=function(){var t=new Ky,e=lm(t);this.promise=t,this.resolve=Im(Mm,e),this.reject=Im(Tm,e)},im.f=bm=function(t){return t===vm||void 0===t?new Gy(t):wm(t)},T(Jy)&&pm!==Object.prototype)){Vy=pm.then,fm||ie(pm,\"then\",function(t,e){var r=this;return new vm(function(t,e){f(Vy,r,t,e)}).then(t,e)},{unsafe:!0});try{delete pm.constructor}catch(t){}dn&&dn(pm,dm)}Ce({global:!0,constructor:!0,wrap:!0,forced:sm},{Promise:vm}),an(vm,um,!1),Uo(um);var Lm=rm.CONSTRUCTOR||!Gn(function(t){Jy.all(t).then(void 0,function(){})});Ce({target:\"Promise\",stat:!0,forced:Lm},{all:function(t){var e=this,r=im.f(e),n=r.resolve,o=r.reject,i=Xy(function(){var r=J(e.resolve),i=[],a=0,u=1;Ao(t,function(t){var s=a++,c=!1;u++,f(r,e,t).then(function(t){c||(c=!0,i[s]=t,--u||n(i))},o)}),--u||n(i)});return i.error&&o(i.value),r.promise}});var Um=Jy&&Jy.prototype;if(Ce({target:\"Promise\",proto:!0,forced:rm.CONSTRUCTOR,real:!0},{catch:function(t){return this.then(void 0,t)}}),T(Jy)){var Nm=L(\"Promise\").prototype.catch;Um.catch!==Nm&&ie(Um,\"catch\",Nm,{unsafe:!0})}Ce({target:\"Promise\",stat:!0,forced:Lm},{race:function(t){var e=this,r=im.f(e),n=r.reject,o=Xy(function(){var o=J(e.resolve);Ao(t,function(t){f(o,e,t).then(r.resolve,n)})});return o.error&&n(o.value),r.promise}}),Ce({target:\"Promise\",stat:!0,forced:rm.CONSTRUCTOR},{reject:function(t){var e=im.f(this);return(0,e.reject)(t),e.promise}});var Cm=function(t,e){if(kt(t),M(e)&&e.constructor===t)return e;var r=im.f(t);return(0,r.resolve)(e),r.promise};Ce({target:\"Promise\",stat:!0,forced:rm.CONSTRUCTOR},{resolve:function(t){return Cm(this,t)}}),Ce({target:\"Promise\",stat:!0,forced:Lm},{allSettled:function(t){var e=this,r=im.f(e),n=r.resolve,o=r.reject,i=Xy(function(){var r=J(e.resolve),o=[],i=0,a=1;Ao(t,function(t){var u=i++,s=!1;a++,f(r,e,t).then(function(t){s||(s=!0,o[u]={status:\"fulfilled\",value:t},--a||n(o))},function(t){s||(s=!0,o[u]={status:\"rejected\",reason:t},--a||n(o))})}),--a||n(o)});return i.error&&o(i.value),r.promise}});var _m=\"No one promise resolved\";Ce({target:\"Promise\",stat:!0,forced:Lm},{any:function(t){var e=this,r=L(\"AggregateError\"),n=im.f(e),o=n.resolve,i=n.reject,a=Xy(function(){var n=J(e.resolve),a=[],u=0,s=1,c=!1;Ao(t,function(t){var l=u++,h=!1;s++,f(n,e,t).then(function(t){h||c||(c=!0,o(t))},function(t){h||c||(h=!0,a[l]=t,--s||i(new r(a,_m)))})}),--s||i(new r(a,_m))});return a.error&&i(a.value),n.promise}}),Ce({target:\"Promise\",stat:!0},{withResolvers:function(){var t=im.f(this);return{promise:t.promise,resolve:t.resolve,reject:t.reject}}});var Fm=Jy&&Jy.prototype,Bm=!!Jy&&a(function(){Fm.finally.call({then:function(){}},function(){})});if(Ce({target:\"Promise\",proto:!0,real:!0,forced:Bm},{finally:function(t){var e=Cc(this,L(\"Promise\")),r=T(t);return this.then(r?function(r){return Cm(e,t()).then(function(){return r})}:t,r?function(r){return Cm(e,t()).then(function(){throw r})}:t)}}),T(Jy)){var Dm=L(\"Promise\").prototype.finally;Fm.finally!==Dm&&ie(Fm,\"finally\",Dm,{unsafe:!0})}var zm=i.Promise,Wm=!1,qm=!zm||!zm.try||Xy(function(){zm.try(function(t){Wm=8===t},8)}).error||!Wm;Ce({target:\"Promise\",stat:!0,forced:qm},{try:function(t){var e=arguments.length>1?vo(arguments,1):[],r=im.f(this),n=Xy(function(){return Ra(J(t),void 0,e)});return(n.error?r.reject:r.resolve)(n.value),r.promise}}),Ze(\"Promise\",\"finally\");var Hm=\"URLSearchParams\"in self,$m=\"Symbol\"in self&&\"iterator\"in Symbol,Km=\"FileReader\"in self&&\"Blob\"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),Gm=\"FormData\"in self,Vm=\"ArrayBuffer\"in self;if(Vm)var Ym=[\"[object Int8Array]\",\"[object Uint8Array]\",\"[object Uint8ClampedArray]\",\"[object Int16Array]\",\"[object Uint16Array]\",\"[object Int32Array]\",\"[object Uint32Array]\",\"[object Float32Array]\",\"[object Float64Array]\"],Xm=ArrayBuffer.isView||function(t){return t&&Ym.indexOf(Object.prototype.toString.call(t))>-1};function Jm(t){if(\"string\"!=typeof t&&(t=String(t)),/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError(\"Invalid character in header field name\");return t.toLowerCase()}function Qm(t){return\"string\"!=typeof t&&(t=String(t)),t}function Zm(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return $m&&(e[Symbol.iterator]=function(){return e}),e}function tb(t){this.map={},t instanceof tb?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function eb(t){if(t.bodyUsed)return Promise.reject(new TypeError(\"Already read\"));t.bodyUsed=!0}function rb(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function nb(t){var e=new FileReader,r=rb(e);return e.readAsArrayBuffer(t),r}function ob(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function ib(){return this.bodyUsed=!1,this._initBody=function(t){var e;this._bodyInit=t,t?\"string\"==typeof t?this._bodyText=t:Km&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:Gm&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:Hm&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():Vm&&Km&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=ob(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):Vm&&(ArrayBuffer.prototype.isPrototypeOf(t)||Xm(t))?this._bodyArrayBuffer=ob(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText=\"\",this.headers.get(\"content-type\")||(\"string\"==typeof t?this.headers.set(\"content-type\",\"text/plain;charset=UTF-8\"):this._bodyBlob&&this._bodyBlob.type?this.headers.set(\"content-type\",this._bodyBlob.type):Hm&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set(\"content-type\",\"application/x-www-form-urlencoded;charset=UTF-8\"))},Km&&(this.blob=function(){var t=eb(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error(\"could not read FormData body as blob\");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?eb(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(nb)}),this.text=function(){var t=eb(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,r=rb(e);return e.readAsText(t),r}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join(\"\")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error(\"could not read FormData body as text\");return Promise.resolve(this._bodyText)},Gm&&(this.formData=function(){return this.text().then(sb)}),this.json=function(){return this.text().then(JSON.parse)},this}tb.prototype.append=function(t,e){t=Jm(t),e=Qm(e);var r=this.map[t];this.map[t]=r?r+\", \"+e:e},tb.prototype.delete=function(t){delete this.map[Jm(t)]},tb.prototype.get=function(t){return t=Jm(t),this.has(t)?this.map[t]:null},tb.prototype.has=function(t){return this.map.hasOwnProperty(Jm(t))},tb.prototype.set=function(t,e){this.map[Jm(t)]=Qm(e)},tb.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},tb.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),Zm(t)},tb.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),Zm(t)},tb.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),Zm(t)},$m&&(tb.prototype[Symbol.iterator]=tb.prototype.entries);var ab=[\"DELETE\",\"GET\",\"HEAD\",\"OPTIONS\",\"POST\",\"PUT\"];function ub(t,e){var r=(e=e||{}).body;if(t instanceof ub){if(t.bodyUsed)throw new TypeError(\"Already read\");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new tb(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||\"same-origin\",!e.headers&&this.headers||(this.headers=new tb(e.headers)),this.method=function(t){var e=t.toUpperCase();return ab.indexOf(e)>-1?e:t}(e.method||this.method||\"GET\"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,(\"GET\"===this.method||\"HEAD\"===this.method)&&r)throw new TypeError(\"Body not allowed for GET or HEAD requests\");this._initBody(r)}function sb(t){var e=new FormData;return t.trim().split(\"&\").forEach(function(t){if(t){var r=t.split(\"=\"),n=r.shift().replace(/\\+/g,\" \"),o=r.join(\"=\").replace(/\\+/g,\" \");e.append(decodeURIComponent(n),decodeURIComponent(o))}}),e}function cb(t,e){e||(e={}),this.type=\"default\",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText=\"statusText\"in e?e.statusText:\"OK\",this.headers=new tb(e.headers),this.url=e.url||\"\",this._initBody(t)}ub.prototype.clone=function(){return new ub(this,{body:this._bodyInit})},ib.call(ub.prototype),ib.call(cb.prototype),cb.prototype.clone=function(){return new cb(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new tb(this.headers),url:this.url})},cb.error=function(){var t=new cb(null,{status:0,statusText:\"\"});return t.type=\"error\",t};var fb=[301,302,303,307,308];cb.redirect=function(t,e){if(-1===fb.indexOf(e))throw new RangeError(\"Invalid status code\");return new cb(null,{status:e,headers:{location:t}})};var lb=self.DOMException;try{new lb}catch(t){(lb=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),lb.prototype.constructor=lb}function hb(t,e){return new Promise(function(r,n){var o=new ub(t,e);if(o.signal&&o.signal.aborted)return n(new lb(\"Aborted\",\"AbortError\"));var i=new XMLHttpRequest;function a(){i.abort()}i.onload=function(){var t,e,n={status:i.status,statusText:i.statusText,headers:(t=i.getAllResponseHeaders()||\"\",e=new tb,t.replace(/\\r?\\n[\\t ]+/g,\" \").split(/\\r?\\n/).forEach(function(t){var r=t.split(\":\"),n=r.shift().trim();if(n){var o=r.join(\":\").trim();e.append(n,o)}}),e)};n.url=\"responseURL\"in i?i.responseURL:n.headers.get(\"X-Request-URL\"),r(new cb(\"response\"in i?i.response:i.responseText,n))},i.onerror=function(){n(new TypeError(\"Network request failed\"))},i.ontimeout=function(){n(new TypeError(\"Network request failed\"))},i.onabort=function(){n(new lb(\"Aborted\",\"AbortError\"))},i.open(o.method,o.url,!0),\"include\"===o.credentials?i.withCredentials=!0:\"omit\"===o.credentials&&(i.withCredentials=!1),\"responseType\"in i&&Km&&(i.responseType=\"blob\"),o.headers.forEach(function(t,e){i.setRequestHeader(e,t)}),o.signal&&(o.signal.addEventListener(\"abort\",a),i.onreadystatechange=function(){4===i.readyState&&o.signal.removeEventListener(\"abort\",a)}),i.send(void 0===o._bodyInit?null:o._bodyInit)})}hb.polyfill=!0,self.fetch||(self.fetch=hb,self.Headers=tb,self.Request=ub,self.Response=cb);var pb=Object.getOwnPropertySymbols,vb=Object.prototype.hasOwnProperty,db=Object.prototype.propertyIsEnumerable,gb=function(){try{if(!Object.assign)return!1;var t=new String(\"abc\");if(t[5]=\"de\",\"5\"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},r=0;r<10;r++)e[\"_\"+String.fromCharCode(r)]=r;if(\"0123456789\"!==Object.getOwnPropertyNames(e).map(function(t){return e[t]}).join(\"\"))return!1;var n={};return\"abcdefghijklmnopqrst\".split(\"\").forEach(function(t){n[t]=t}),\"abcdefghijklmnopqrst\"===Object.keys(Object.assign({},n)).join(\"\")}catch(t){return!1}}()?Object.assign:function(t,e){for(var r,n,o=function(t){if(null==t)throw new TypeError(\"Object.assign cannot be called with null or undefined\");return Object(t)}(t),i=1;i<arguments.length;i++){for(var a in r=Object(arguments[i]))vb.call(r,a)&&(o[a]=r[a]);if(pb){n=pb(r);for(var u=0;u<n.length;u++)db.call(r,n[u])&&(o[n[u]]=r[n[u]])}}return o};Object.assign=gb}();\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/chunks/webpack-f0fe7dd661052818.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 1156,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 1157
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 1,
        "column": 1173,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 1174
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'a' is defined but never used.",
        "line": 1,
        "column": 1429,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 1430
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "(()=>{\"use strict\";var e={},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var i=t[o]={exports:{}},a=!0;try{e[o](i,i.exports,r),a=!1}finally{a&&delete t[o]}return i.exports}r.m=e,(()=>{var e=[];r.O=(t,o,n,i)=>{if(o){i=i||0;for(var a=e.length;a>0&&e[a-1][2]>i;a--)e[a]=e[a-1];e[a]=[o,n,i];return}for(var u=1/0,a=0;a<e.length;a++){for(var[o,n,i]=e[a],l=!0,c=0;c<o.length;c++)(!1&i||u>=i)&&Object.keys(r.O).every(e=>r.O[e](o[c]))?o.splice(c--,1):(l=!1,i<u&&(u=i));if(l){e.splice(a--,1);var f=n();void 0!==f&&(t=f)}}return t}})(),(()=>{var e,t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__;r.t=function(o,n){if(1&n&&(o=this(o)),8&n||\"object\"==typeof o&&o&&(4&n&&o.__esModule||16&n&&\"function\"==typeof o.then))return o;var i=Object.create(null);r.r(i);var a={};e=e||[null,t({}),t([]),t(t)];for(var u=2&n&&o;\"object\"==typeof u&&!~e.indexOf(u);u=t(u))Object.getOwnPropertyNames(u).forEach(e=>a[e]=()=>o[e]);return a.default=()=>o,r.d(i,a),i}})(),r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.f={},r.e=e=>Promise.all(Object.keys(r.f).reduce((t,o)=>(r.f[o](e,t),t),[])),r.u=e=>{},r.miniCssF=e=>{},r.g=function(){if(\"object\"==typeof globalThis)return globalThis;try{return this||Function(\"return this\")()}catch(e){if(\"object\"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e={},t=\"_N_E:\";r.l=(o,n,i,a)=>{if(e[o])return void e[o].push(n);if(void 0!==i)for(var u,l,c=document.getElementsByTagName(\"script\"),f=0;f<c.length;f++){var s=c[f];if(s.getAttribute(\"src\")==o||s.getAttribute(\"data-webpack\")==t+i){u=s;break}}u||(l=!0,(u=document.createElement(\"script\")).charset=\"utf-8\",u.timeout=120,r.nc&&u.setAttribute(\"nonce\",r.nc),u.setAttribute(\"data-webpack\",t+i),u.src=r.tu(o)),e[o]=[n];var d=(t,r)=>{u.onerror=u.onload=null,clearTimeout(p);var n=e[o];if(delete e[o],u.parentNode&&u.parentNode.removeChild(u),n&&n.forEach(e=>e(r)),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:\"timeout\",target:u}),12e4);u.onerror=d.bind(null,u.onerror),u.onload=d.bind(null,u.onload),l&&document.head.appendChild(u)}})(),r.r=e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})},(()=>{var e;r.tt=()=>(void 0===e&&(e={createScriptURL:e=>e},\"undefined\"!=typeof trustedTypes&&trustedTypes.createPolicy&&(e=trustedTypes.createPolicy(\"nextjs#bundler\",e))),e)})(),r.tu=e=>r.tt().createScriptURL(e),r.p=\"/_next/\",(()=>{var e={68:0,614:0,533:0};r.f.j=(t,o)=>{var n=r.o(e,t)?e[t]:void 0;if(0!==n)if(n)o.push(n[2]);else if(/^(533|614|68)$/.test(t))e[t]=0;else{var i=new Promise((r,o)=>n=e[t]=[r,o]);o.push(n[2]=i);var a=r.p+r.u(t),u=Error();r.l(a,o=>{if(r.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var i=o&&(\"load\"===o.type?\"missing\":o.type),a=o&&o.target&&o.target.src;u.message=\"Loading chunk \"+t+\" failed.\\n(\"+i+\": \"+a+\")\",u.name=\"ChunkLoadError\",u.type=i,u.request=a,n[1](u)}},\"chunk-\"+t,t)}},r.O.j=t=>0===e[t];var t=(t,o)=>{var n,i,[a,u,l]=o,c=0;if(a.some(t=>0!==e[t])){for(n in u)r.o(u,n)&&(r.m[n]=u[n]);if(l)var f=l(r)}for(t&&t(o);c<a.length;c++)i=a[c],r.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return r.O(f)},o=self.webpackChunk_N_E=self.webpackChunk_N_E||[];o.forEach(t.bind(null,0)),o.push=t.bind(null,o.push.bind(o))})()})();",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/daxtk4W2iovQ1k6qKWkK2/_buildManifest.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'t' is defined but never used.",
        "line": 1,
        "column": 36,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 37
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "self.__BUILD_MANIFEST=function(e,r,t){return{__rewrites:{afterFiles:[],beforeFiles:[],fallback:[]},__routerFilterStatic:{numItems:13,errorRate:1e-4,numBits:250,numHashes:14,bitArray:[0,1,0,1,r,r,e,r,e,r,r,r,r,e,r,e,e,e,r,e,e,r,e,r,e,e,e,e,e,e,e,r,e,r,r,e,e,r,e,e,e,e,r,r,r,e,e,e,e,e,r,r,r,r,e,e,e,r,e,e,e,e,e,r,r,e,e,e,r,e,e,e,r,e,e,r,r,e,r,e,e,r,e,e,e,r,e,r,r,e,e,e,e,r,r,r,e,e,e,r,e,e,e,e,r,r,r,e,e,e,e,r,e,r,r,r,r,r,r,r,r,e,e,r,r,e,e,e,r,r,e,e,e,e,r,e,r,e,e,e,r,r,r,e,r,e,e,r,e,e,e,r,e,r,e,r,r,e,r,e,e,r,r,r,r,e,r,e,e,r,e,e,r,e,e,e,r,e,r,r,r,e,r,e,r,r,r,r,e,e,r,e,r,e,r,r,r,e,r,r,r,e,e,e,e,r,e,r,e,e,e,e,r,e,e,e,r,e,r,e,r,r,e,e,e,e,r,r,e,r,e,e,r,r,e,r,e,r,r,r,r,r,e,e,e,e,r,r,e,r]},__routerFilterDynamic:{numItems:r,errorRate:1e-4,numBits:r,numHashes:null,bitArray:[]},\"/_error\":[\"static/chunks/pages/_error-bd129d02791125e2.js\"],sortedPages:[\"/_app\",\"/_error\"]}}(1,0,1e-4),self.__BUILD_MANIFEST_CB&&self.__BUILD_MANIFEST_CB();",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/_next/static/daxtk4W2iovQ1k6qKWkK2/_ssgManifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/server/app/_not-found/page_client-reference-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/server/app/contact/page_client-reference-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/server/app/dashboard/page_client-reference-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/server/app/demo/page_client-reference-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/server/app/page_client-reference-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/server/middleware-build-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/server/middleware-react-loadable-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/server/next-font-manifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/chunks/app/layout.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/chunks/webpack.js",
    "messages": [
      {
        "ruleId": "@next/next/no-assign-module-variable",
        "severity": 2,
        "message": "Do not assign to the variable `module`. See: https://nextjs.org/docs/messages/no-assign-module-variable",
        "line": 25,
        "column": 12,
        "nodeType": "VariableDeclaration",
        "endLine": 29,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'chunkId' is defined but never used.",
        "line": 162,
        "column": 37,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 162,
        "endColumn": 44
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'chunkId' is defined but never used.",
        "line": 180,
        "column": 44,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 180,
        "endColumn": 51
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'chunkId' is defined but never used.",
        "line": 218,
        "column": 53,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 218,
        "endColumn": 60
      },
      {
        "ruleId": "@next/next/no-assign-module-variable",
        "severity": 2,
        "message": "Do not assign to the variable `module`. See: https://nextjs.org/docs/messages/no-assign-module-variable",
        "line": 331,
        "column": 13,
        "nodeType": "VariableDeclaration",
        "endLine": 331,
        "endColumn": 41
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'loadStylesheet' is assigned a value but never used.",
        "line": 786,
        "column": 16,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 786,
        "endColumn": 30
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'options' is defined but never used.",
        "line": 798,
        "column": 32,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 798,
        "endColumn": 39
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'updatedModulesList' is defined but never used.",
        "line": 810,
        "column": 114,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 810,
        "endColumn": 132
      },
      {
        "ruleId": "@next/next/no-assign-module-variable",
        "severity": 2,
        "message": "Do not assign to the variable `module`. See: https://nextjs.org/docs/messages/no-assign-module-variable",
        "line": 945,
        "column": 15,
        "nodeType": "VariableDeclaration",
        "endLine": 945,
        "endColumn": 60
      },
      {
        "ruleId": "@next/next/no-assign-module-variable",
        "severity": 2,
        "message": "Do not assign to the variable `module`. See: https://nextjs.org/docs/messages/no-assign-module-variable",
        "line": 1108,
        "column": 14,
        "nodeType": "VariableDeclaration",
        "endLine": 1108,
        "endColumn": 67
      },
      {
        "ruleId": "@next/next/no-assign-module-variable",
        "severity": 2,
        "message": "Do not assign to the variable `module`. See: https://nextjs.org/docs/messages/no-assign-module-variable",
        "line": 1138,
        "column": 16,
        "nodeType": "VariableDeclaration",
        "endLine": 1138,
        "endColumn": 61
      },
      {
        "ruleId": "@next/next/no-assign-module-variable",
        "severity": 2,
        "message": "Do not assign to the variable `module`. See: https://nextjs.org/docs/messages/no-assign-module-variable",
        "line": 1203,
        "column": 17,
        "nodeType": "VariableDeclaration",
        "endLine": 1203,
        "endColumn": 70
      }
    ],
    "suppressedMessages": [],
    "errorCount": 12,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n/******/ (() => { // webpackBootstrap\n/******/ \t\"use strict\";\n/******/ \tvar __webpack_modules__ = ({});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\tif (cachedModule.error !== undefined) throw cachedModule.error;\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\tvar threw = true;\n/******/ \t\ttry {\n/******/ \t\t\tvar execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };\n/******/ \t\t\t__webpack_require__.i.forEach(function(handler) { handler(execOptions); });\n/******/ \t\t\tmodule = execOptions.module;\n/******/ \t\t\texecOptions.factory.call(module.exports, module, module.exports, execOptions.require);\n/******/ \t\t\tthrew = false;\n/******/ \t\t} finally {\n/******/ \t\t\tif(threw) delete __webpack_module_cache__[moduleId];\n/******/ \t\t}\n/******/ \t\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = __webpack_modules__;\n/******/ \t\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = __webpack_module_cache__;\n/******/ \t\n/******/ \t// expose the module execution interceptor\n/******/ \t__webpack_require__.i = [];\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/chunk loaded */\n/******/ \t(() => {\n/******/ \t\tvar deferred = [];\n/******/ \t\t__webpack_require__.O = (result, chunkIds, fn, priority) => {\n/******/ \t\t\tif(chunkIds) {\n/******/ \t\t\t\tpriority = priority || 0;\n/******/ \t\t\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n/******/ \t\t\t\tdeferred[i] = [chunkIds, fn, priority];\n/******/ \t\t\t\treturn;\n/******/ \t\t\t}\n/******/ \t\t\tvar notFulfilled = Infinity;\n/******/ \t\t\tfor (var i = 0; i < deferred.length; i++) {\n/******/ \t\t\t\tvar [chunkIds, fn, priority] = deferred[i];\n/******/ \t\t\t\tvar fulfilled = true;\n/******/ \t\t\t\tfor (var j = 0; j < chunkIds.length; j++) {\n/******/ \t\t\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n/******/ \t\t\t\t\t\tchunkIds.splice(j--, 1);\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tfulfilled = false;\n/******/ \t\t\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t\t\tif(fulfilled) {\n/******/ \t\t\t\t\tdeferred.splice(i--, 1)\n/******/ \t\t\t\t\tvar r = fn();\n/******/ \t\t\t\t\tif (r !== undefined) result = r;\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\treturn result;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__webpack_require__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__webpack_require__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/create fake namespace object */\n/******/ \t(() => {\n/******/ \t\tvar getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\n/******/ \t\tvar leafPrototypes;\n/******/ \t\t// create a fake namespace object\n/******/ \t\t// mode & 1: value is a module id, require it\n/******/ \t\t// mode & 2: merge all properties of value into the ns\n/******/ \t\t// mode & 4: return value when already ns object\n/******/ \t\t// mode & 16: return value when it's Promise-like\n/******/ \t\t// mode & 8|1: behave like require\n/******/ \t\t__webpack_require__.t = function(value, mode) {\n/******/ \t\t\tif(mode & 1) value = this(value);\n/******/ \t\t\tif(mode & 8) return value;\n/******/ \t\t\tif(typeof value === 'object' && value) {\n/******/ \t\t\t\tif((mode & 4) && value.__esModule) return value;\n/******/ \t\t\t\tif((mode & 16) && typeof value.then === 'function') return value;\n/******/ \t\t\t}\n/******/ \t\t\tvar ns = Object.create(null);\n/******/ \t\t\t__webpack_require__.r(ns);\n/******/ \t\t\tvar def = {};\n/******/ \t\t\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n/******/ \t\t\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n/******/ \t\t\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n/******/ \t\t\t}\n/******/ \t\t\tdef['default'] = () => (value);\n/******/ \t\t\t__webpack_require__.d(ns, def);\n/******/ \t\t\treturn ns;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__webpack_require__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/ensure chunk */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.f = {};\n/******/ \t\t// This file contains only the entry chunk.\n/******/ \t\t// The chunk loading function for additional chunks\n/******/ \t\t__webpack_require__.e = (chunkId) => {\n/******/ \t\t\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n/******/ \t\t\t\t__webpack_require__.f[key](chunkId, promises);\n/******/ \t\t\t\treturn promises;\n/******/ \t\t\t}, []));\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get javascript chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference async chunks\n/******/ \t\t__webpack_require__.u = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn undefined;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get javascript update chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference all chunks\n/******/ \t\t__webpack_require__.hu = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"static/webpack/\" + chunkId + \".\" + __webpack_require__.h() + \".hot-update.js\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get mini-css chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference async chunks\n/******/ \t\t__webpack_require__.miniCssF = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn undefined;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get update manifest filename */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.hmrF = () => (\"static/webpack/\" + __webpack_require__.h() + \".webpack.hot-update.json\");\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/getFullHash */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.h = () => (\"4ff9fef39b3a8772\")\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/global */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.g = (function() {\n/******/ \t\t\tif (typeof globalThis === 'object') return globalThis;\n/******/ \t\t\ttry {\n/******/ \t\t\t\treturn this || new Function('return this')();\n/******/ \t\t\t} catch (e) {\n/******/ \t\t\t\tif (typeof window === 'object') return window;\n/******/ \t\t\t}\n/******/ \t\t})();\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/load script */\n/******/ \t(() => {\n/******/ \t\tvar inProgress = {};\n/******/ \t\tvar dataWebpackPrefix = \"_N_E:\";\n/******/ \t\t// loadScript function to load a script via script tag\n/******/ \t\t__webpack_require__.l = (url, done, key, chunkId) => {\n/******/ \t\t\tif(inProgress[url]) { inProgress[url].push(done); return; }\n/******/ \t\t\tvar script, needAttach;\n/******/ \t\t\tif(key !== undefined) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n/******/ \t\t\t\tfor(var i = 0; i < scripts.length; i++) {\n/******/ \t\t\t\t\tvar s = scripts[i];\n/******/ \t\t\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(!script) {\n/******/ \t\t\t\tneedAttach = true;\n/******/ \t\t\t\tscript = document.createElement('script');\n/******/ \t\t\n/******/ \t\t\t\tscript.charset = 'utf-8';\n/******/ \t\t\t\tscript.timeout = 120;\n/******/ \t\t\t\tif (__webpack_require__.nc) {\n/******/ \t\t\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n/******/ \t\t\n/******/ \t\t\t\tscript.src = __webpack_require__.tu(url);\n/******/ \t\t\t}\n/******/ \t\t\tinProgress[url] = [done];\n/******/ \t\t\tvar onScriptComplete = (prev, event) => {\n/******/ \t\t\t\t// avoid mem leaks in IE.\n/******/ \t\t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\t\tclearTimeout(timeout);\n/******/ \t\t\t\tvar doneFns = inProgress[url];\n/******/ \t\t\t\tdelete inProgress[url];\n/******/ \t\t\t\tscript.parentNode && script.parentNode.removeChild(script);\n/******/ \t\t\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n/******/ \t\t\t\tif(prev) return prev(event);\n/******/ \t\t\t}\n/******/ \t\t\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n/******/ \t\t\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n/******/ \t\t\tscript.onload = onScriptComplete.bind(null, script.onload);\n/******/ \t\t\tneedAttach && document.head.appendChild(script);\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__webpack_require__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/node module decorator */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.nmd = (module) => {\n/******/ \t\t\tmodule.paths = [];\n/******/ \t\t\tif (!module.children) module.children = [];\n/******/ \t\t\treturn module;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/trusted types policy */\n/******/ \t(() => {\n/******/ \t\tvar policy;\n/******/ \t\t__webpack_require__.tt = () => {\n/******/ \t\t\t// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.\n/******/ \t\t\tif (policy === undefined) {\n/******/ \t\t\t\tpolicy = {\n/******/ \t\t\t\t\tcreateScript: (script) => (script),\n/******/ \t\t\t\t\tcreateScriptURL: (url) => (url)\n/******/ \t\t\t\t};\n/******/ \t\t\t\tif (typeof trustedTypes !== \"undefined\" && trustedTypes.createPolicy) {\n/******/ \t\t\t\t\tpolicy = trustedTypes.createPolicy(\"nextjs#bundler\", policy);\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\treturn policy;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/trusted types script */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.ts = (script) => (__webpack_require__.tt().createScript(script));\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/trusted types script url */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.tu = (url) => (__webpack_require__.tt().createScriptURL(url));\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hot module replacement */\n/******/ \t(() => {\n/******/ \t\tvar currentModuleData = {};\n/******/ \t\tvar installedModules = __webpack_require__.c;\n/******/ \t\t\n/******/ \t\t// module and require creation\n/******/ \t\tvar currentChildModule;\n/******/ \t\tvar currentParents = [];\n/******/ \t\t\n/******/ \t\t// status\n/******/ \t\tvar registeredStatusHandlers = [];\n/******/ \t\tvar currentStatus = \"idle\";\n/******/ \t\t\n/******/ \t\t// while downloading\n/******/ \t\tvar blockingPromises = 0;\n/******/ \t\tvar blockingPromisesWaiting = [];\n/******/ \t\t\n/******/ \t\t// The update info\n/******/ \t\tvar currentUpdateApplyHandlers;\n/******/ \t\tvar queuedInvalidatedModules;\n/******/ \t\t\n/******/ \t\t__webpack_require__.hmrD = currentModuleData;\n/******/ \t\t\n/******/ \t\t__webpack_require__.i.push(function (options) {\n/******/ \t\t\tvar module = options.module;\n/******/ \t\t\tvar require = createRequire(options.require, options.id);\n/******/ \t\t\tmodule.hot = createModuleHotObject(options.id, module);\n/******/ \t\t\tmodule.parents = currentParents;\n/******/ \t\t\tmodule.children = [];\n/******/ \t\t\tcurrentParents = [];\n/******/ \t\t\toptions.require = require;\n/******/ \t\t});\n/******/ \t\t\n/******/ \t\t__webpack_require__.hmrC = {};\n/******/ \t\t__webpack_require__.hmrI = {};\n/******/ \t\t\n/******/ \t\tfunction createRequire(require, moduleId) {\n/******/ \t\t\tvar me = installedModules[moduleId];\n/******/ \t\t\tif (!me) return require;\n/******/ \t\t\tvar fn = function (request) {\n/******/ \t\t\t\tif (me.hot.active) {\n/******/ \t\t\t\t\tif (installedModules[request]) {\n/******/ \t\t\t\t\t\tvar parents = installedModules[request].parents;\n/******/ \t\t\t\t\t\tif (parents.indexOf(moduleId) === -1) {\n/******/ \t\t\t\t\t\t\tparents.push(moduleId);\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tcurrentParents = [moduleId];\n/******/ \t\t\t\t\t\tcurrentChildModule = request;\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t\tif (me.children.indexOf(request) === -1) {\n/******/ \t\t\t\t\t\tme.children.push(request);\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t} else {\n/******/ \t\t\t\t\tconsole.warn(\n/******/ \t\t\t\t\t\t\"[HMR] unexpected require(\" +\n/******/ \t\t\t\t\t\t\trequest +\n/******/ \t\t\t\t\t\t\t\") from disposed module \" +\n/******/ \t\t\t\t\t\t\tmoduleId\n/******/ \t\t\t\t\t);\n/******/ \t\t\t\t\tcurrentParents = [];\n/******/ \t\t\t\t}\n/******/ \t\t\t\treturn require(request);\n/******/ \t\t\t};\n/******/ \t\t\tvar createPropertyDescriptor = function (name) {\n/******/ \t\t\t\treturn {\n/******/ \t\t\t\t\tconfigurable: true,\n/******/ \t\t\t\t\tenumerable: true,\n/******/ \t\t\t\t\tget: function () {\n/******/ \t\t\t\t\t\treturn require[name];\n/******/ \t\t\t\t\t},\n/******/ \t\t\t\t\tset: function (value) {\n/******/ \t\t\t\t\t\trequire[name] = value;\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t};\n/******/ \t\t\t};\n/******/ \t\t\tfor (var name in require) {\n/******/ \t\t\t\tif (Object.prototype.hasOwnProperty.call(require, name) && name !== \"e\") {\n/******/ \t\t\t\t\tObject.defineProperty(fn, name, createPropertyDescriptor(name));\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tfn.e = function (chunkId, fetchPriority) {\n/******/ \t\t\t\treturn trackBlockingPromise(require.e(chunkId, fetchPriority));\n/******/ \t\t\t};\n/******/ \t\t\treturn fn;\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tfunction createModuleHotObject(moduleId, me) {\n/******/ \t\t\tvar _main = currentChildModule !== moduleId;\n/******/ \t\t\tvar hot = {\n/******/ \t\t\t\t// private stuff\n/******/ \t\t\t\t_acceptedDependencies: {},\n/******/ \t\t\t\t_acceptedErrorHandlers: {},\n/******/ \t\t\t\t_declinedDependencies: {},\n/******/ \t\t\t\t_selfAccepted: false,\n/******/ \t\t\t\t_selfDeclined: false,\n/******/ \t\t\t\t_selfInvalidated: false,\n/******/ \t\t\t\t_disposeHandlers: [],\n/******/ \t\t\t\t_main: _main,\n/******/ \t\t\t\t_requireSelf: function () {\n/******/ \t\t\t\t\tcurrentParents = me.parents.slice();\n/******/ \t\t\t\t\tcurrentChildModule = _main ? undefined : moduleId;\n/******/ \t\t\t\t\t__webpack_require__(moduleId);\n/******/ \t\t\t\t},\n/******/ \t\t\n/******/ \t\t\t\t// Module API\n/******/ \t\t\t\tactive: true,\n/******/ \t\t\t\taccept: function (dep, callback, errorHandler) {\n/******/ \t\t\t\t\tif (dep === undefined) hot._selfAccepted = true;\n/******/ \t\t\t\t\telse if (typeof dep === \"function\") hot._selfAccepted = dep;\n/******/ \t\t\t\t\telse if (typeof dep === \"object\" && dep !== null) {\n/******/ \t\t\t\t\t\tfor (var i = 0; i < dep.length; i++) {\n/******/ \t\t\t\t\t\t\thot._acceptedDependencies[dep[i]] = callback || function () {};\n/******/ \t\t\t\t\t\t\thot._acceptedErrorHandlers[dep[i]] = errorHandler;\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\thot._acceptedDependencies[dep] = callback || function () {};\n/******/ \t\t\t\t\t\thot._acceptedErrorHandlers[dep] = errorHandler;\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t},\n/******/ \t\t\t\tdecline: function (dep) {\n/******/ \t\t\t\t\tif (dep === undefined) hot._selfDeclined = true;\n/******/ \t\t\t\t\telse if (typeof dep === \"object\" && dep !== null)\n/******/ \t\t\t\t\t\tfor (var i = 0; i < dep.length; i++)\n/******/ \t\t\t\t\t\t\thot._declinedDependencies[dep[i]] = true;\n/******/ \t\t\t\t\telse hot._declinedDependencies[dep] = true;\n/******/ \t\t\t\t},\n/******/ \t\t\t\tdispose: function (callback) {\n/******/ \t\t\t\t\thot._disposeHandlers.push(callback);\n/******/ \t\t\t\t},\n/******/ \t\t\t\taddDisposeHandler: function (callback) {\n/******/ \t\t\t\t\thot._disposeHandlers.push(callback);\n/******/ \t\t\t\t},\n/******/ \t\t\t\tremoveDisposeHandler: function (callback) {\n/******/ \t\t\t\t\tvar idx = hot._disposeHandlers.indexOf(callback);\n/******/ \t\t\t\t\tif (idx >= 0) hot._disposeHandlers.splice(idx, 1);\n/******/ \t\t\t\t},\n/******/ \t\t\t\tinvalidate: function () {\n/******/ \t\t\t\t\tthis._selfInvalidated = true;\n/******/ \t\t\t\t\tswitch (currentStatus) {\n/******/ \t\t\t\t\t\tcase \"idle\":\n/******/ \t\t\t\t\t\t\tcurrentUpdateApplyHandlers = [];\n/******/ \t\t\t\t\t\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n/******/ \t\t\t\t\t\t\t\t__webpack_require__.hmrI[key](\n/******/ \t\t\t\t\t\t\t\t\tmoduleId,\n/******/ \t\t\t\t\t\t\t\t\tcurrentUpdateApplyHandlers\n/******/ \t\t\t\t\t\t\t\t);\n/******/ \t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t\tsetStatus(\"ready\");\n/******/ \t\t\t\t\t\t\tbreak;\n/******/ \t\t\t\t\t\tcase \"ready\":\n/******/ \t\t\t\t\t\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n/******/ \t\t\t\t\t\t\t\t__webpack_require__.hmrI[key](\n/******/ \t\t\t\t\t\t\t\t\tmoduleId,\n/******/ \t\t\t\t\t\t\t\t\tcurrentUpdateApplyHandlers\n/******/ \t\t\t\t\t\t\t\t);\n/******/ \t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t\tbreak;\n/******/ \t\t\t\t\t\tcase \"prepare\":\n/******/ \t\t\t\t\t\tcase \"check\":\n/******/ \t\t\t\t\t\tcase \"dispose\":\n/******/ \t\t\t\t\t\tcase \"apply\":\n/******/ \t\t\t\t\t\t\t(queuedInvalidatedModules = queuedInvalidatedModules || []).push(\n/******/ \t\t\t\t\t\t\t\tmoduleId\n/******/ \t\t\t\t\t\t\t);\n/******/ \t\t\t\t\t\t\tbreak;\n/******/ \t\t\t\t\t\tdefault:\n/******/ \t\t\t\t\t\t\t// ignore requests in error states\n/******/ \t\t\t\t\t\t\tbreak;\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t},\n/******/ \t\t\n/******/ \t\t\t\t// Management API\n/******/ \t\t\t\tcheck: hotCheck,\n/******/ \t\t\t\tapply: hotApply,\n/******/ \t\t\t\tstatus: function (l) {\n/******/ \t\t\t\t\tif (!l) return currentStatus;\n/******/ \t\t\t\t\tregisteredStatusHandlers.push(l);\n/******/ \t\t\t\t},\n/******/ \t\t\t\taddStatusHandler: function (l) {\n/******/ \t\t\t\t\tregisteredStatusHandlers.push(l);\n/******/ \t\t\t\t},\n/******/ \t\t\t\tremoveStatusHandler: function (l) {\n/******/ \t\t\t\t\tvar idx = registeredStatusHandlers.indexOf(l);\n/******/ \t\t\t\t\tif (idx >= 0) registeredStatusHandlers.splice(idx, 1);\n/******/ \t\t\t\t},\n/******/ \t\t\n/******/ \t\t\t\t// inherit from previous dispose call\n/******/ \t\t\t\tdata: currentModuleData[moduleId]\n/******/ \t\t\t};\n/******/ \t\t\tcurrentChildModule = undefined;\n/******/ \t\t\treturn hot;\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tfunction setStatus(newStatus) {\n/******/ \t\t\tcurrentStatus = newStatus;\n/******/ \t\t\tvar results = [];\n/******/ \t\t\n/******/ \t\t\tfor (var i = 0; i < registeredStatusHandlers.length; i++)\n/******/ \t\t\t\tresults[i] = registeredStatusHandlers[i].call(null, newStatus);\n/******/ \t\t\n/******/ \t\t\treturn Promise.all(results).then(function () {});\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tfunction unblock() {\n/******/ \t\t\tif (--blockingPromises === 0) {\n/******/ \t\t\t\tsetStatus(\"ready\").then(function () {\n/******/ \t\t\t\t\tif (blockingPromises === 0) {\n/******/ \t\t\t\t\t\tvar list = blockingPromisesWaiting;\n/******/ \t\t\t\t\t\tblockingPromisesWaiting = [];\n/******/ \t\t\t\t\t\tfor (var i = 0; i < list.length; i++) {\n/******/ \t\t\t\t\t\t\tlist[i]();\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t});\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tfunction trackBlockingPromise(promise) {\n/******/ \t\t\tswitch (currentStatus) {\n/******/ \t\t\t\tcase \"ready\":\n/******/ \t\t\t\t\tsetStatus(\"prepare\");\n/******/ \t\t\t\t/* fallthrough */\n/******/ \t\t\t\tcase \"prepare\":\n/******/ \t\t\t\t\tblockingPromises++;\n/******/ \t\t\t\t\tpromise.then(unblock, unblock);\n/******/ \t\t\t\t\treturn promise;\n/******/ \t\t\t\tdefault:\n/******/ \t\t\t\t\treturn promise;\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tfunction waitForBlockingPromises(fn) {\n/******/ \t\t\tif (blockingPromises === 0) return fn();\n/******/ \t\t\treturn new Promise(function (resolve) {\n/******/ \t\t\t\tblockingPromisesWaiting.push(function () {\n/******/ \t\t\t\t\tresolve(fn());\n/******/ \t\t\t\t});\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tfunction hotCheck(applyOnUpdate) {\n/******/ \t\t\tif (currentStatus !== \"idle\") {\n/******/ \t\t\t\tthrow new Error(\"check() is only allowed in idle status\");\n/******/ \t\t\t}\n/******/ \t\t\treturn setStatus(\"check\")\n/******/ \t\t\t\t.then(__webpack_require__.hmrM)\n/******/ \t\t\t\t.then(function (update) {\n/******/ \t\t\t\t\tif (!update) {\n/******/ \t\t\t\t\t\treturn setStatus(applyInvalidatedModules() ? \"ready\" : \"idle\").then(\n/******/ \t\t\t\t\t\t\tfunction () {\n/******/ \t\t\t\t\t\t\t\treturn null;\n/******/ \t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t);\n/******/ \t\t\t\t\t}\n/******/ \t\t\n/******/ \t\t\t\t\treturn setStatus(\"prepare\").then(function () {\n/******/ \t\t\t\t\t\tvar updatedModules = [];\n/******/ \t\t\t\t\t\tcurrentUpdateApplyHandlers = [];\n/******/ \t\t\n/******/ \t\t\t\t\t\treturn Promise.all(\n/******/ \t\t\t\t\t\t\tObject.keys(__webpack_require__.hmrC).reduce(function (\n/******/ \t\t\t\t\t\t\t\tpromises,\n/******/ \t\t\t\t\t\t\t\tkey\n/******/ \t\t\t\t\t\t\t) {\n/******/ \t\t\t\t\t\t\t\t__webpack_require__.hmrC[key](\n/******/ \t\t\t\t\t\t\t\t\tupdate.c,\n/******/ \t\t\t\t\t\t\t\t\tupdate.r,\n/******/ \t\t\t\t\t\t\t\t\tupdate.m,\n/******/ \t\t\t\t\t\t\t\t\tpromises,\n/******/ \t\t\t\t\t\t\t\t\tcurrentUpdateApplyHandlers,\n/******/ \t\t\t\t\t\t\t\t\tupdatedModules\n/******/ \t\t\t\t\t\t\t\t);\n/******/ \t\t\t\t\t\t\t\treturn promises;\n/******/ \t\t\t\t\t\t\t}, [])\n/******/ \t\t\t\t\t\t).then(function () {\n/******/ \t\t\t\t\t\t\treturn waitForBlockingPromises(function () {\n/******/ \t\t\t\t\t\t\t\tif (applyOnUpdate) {\n/******/ \t\t\t\t\t\t\t\t\treturn internalApply(applyOnUpdate);\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\treturn setStatus(\"ready\").then(function () {\n/******/ \t\t\t\t\t\t\t\t\treturn updatedModules;\n/******/ \t\t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t});\n/******/ \t\t\t\t\t});\n/******/ \t\t\t\t});\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tfunction hotApply(options) {\n/******/ \t\t\tif (currentStatus !== \"ready\") {\n/******/ \t\t\t\treturn Promise.resolve().then(function () {\n/******/ \t\t\t\t\tthrow new Error(\n/******/ \t\t\t\t\t\t\"apply() is only allowed in ready status (state: \" +\n/******/ \t\t\t\t\t\t\tcurrentStatus +\n/******/ \t\t\t\t\t\t\t\")\"\n/******/ \t\t\t\t\t);\n/******/ \t\t\t\t});\n/******/ \t\t\t}\n/******/ \t\t\treturn internalApply(options);\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tfunction internalApply(options) {\n/******/ \t\t\toptions = options || {};\n/******/ \t\t\n/******/ \t\t\tapplyInvalidatedModules();\n/******/ \t\t\n/******/ \t\t\tvar results = currentUpdateApplyHandlers.map(function (handler) {\n/******/ \t\t\t\treturn handler(options);\n/******/ \t\t\t});\n/******/ \t\t\tcurrentUpdateApplyHandlers = undefined;\n/******/ \t\t\n/******/ \t\t\tvar errors = results\n/******/ \t\t\t\t.map(function (r) {\n/******/ \t\t\t\t\treturn r.error;\n/******/ \t\t\t\t})\n/******/ \t\t\t\t.filter(Boolean);\n/******/ \t\t\n/******/ \t\t\tif (errors.length > 0) {\n/******/ \t\t\t\treturn setStatus(\"abort\").then(function () {\n/******/ \t\t\t\t\tthrow errors[0];\n/******/ \t\t\t\t});\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t\t// Now in \"dispose\" phase\n/******/ \t\t\tvar disposePromise = setStatus(\"dispose\");\n/******/ \t\t\n/******/ \t\t\tresults.forEach(function (result) {\n/******/ \t\t\t\tif (result.dispose) result.dispose();\n/******/ \t\t\t});\n/******/ \t\t\n/******/ \t\t\t// Now in \"apply\" phase\n/******/ \t\t\tvar applyPromise = setStatus(\"apply\");\n/******/ \t\t\n/******/ \t\t\tvar error;\n/******/ \t\t\tvar reportError = function (err) {\n/******/ \t\t\t\tif (!error) error = err;\n/******/ \t\t\t};\n/******/ \t\t\n/******/ \t\t\tvar outdatedModules = [];\n/******/ \t\t\tresults.forEach(function (result) {\n/******/ \t\t\t\tif (result.apply) {\n/******/ \t\t\t\t\tvar modules = result.apply(reportError);\n/******/ \t\t\t\t\tif (modules) {\n/******/ \t\t\t\t\t\tfor (var i = 0; i < modules.length; i++) {\n/******/ \t\t\t\t\t\t\toutdatedModules.push(modules[i]);\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t\t});\n/******/ \t\t\n/******/ \t\t\treturn Promise.all([disposePromise, applyPromise]).then(function () {\n/******/ \t\t\t\t// handle errors in accept handlers and self accepted module load\n/******/ \t\t\t\tif (error) {\n/******/ \t\t\t\t\treturn setStatus(\"fail\").then(function () {\n/******/ \t\t\t\t\t\tthrow error;\n/******/ \t\t\t\t\t});\n/******/ \t\t\t\t}\n/******/ \t\t\n/******/ \t\t\t\tif (queuedInvalidatedModules) {\n/******/ \t\t\t\t\treturn internalApply(options).then(function (list) {\n/******/ \t\t\t\t\t\toutdatedModules.forEach(function (moduleId) {\n/******/ \t\t\t\t\t\t\tif (list.indexOf(moduleId) < 0) list.push(moduleId);\n/******/ \t\t\t\t\t\t});\n/******/ \t\t\t\t\t\treturn list;\n/******/ \t\t\t\t\t});\n/******/ \t\t\t\t}\n/******/ \t\t\n/******/ \t\t\t\treturn setStatus(\"idle\").then(function () {\n/******/ \t\t\t\t\treturn outdatedModules;\n/******/ \t\t\t\t});\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tfunction applyInvalidatedModules() {\n/******/ \t\t\tif (queuedInvalidatedModules) {\n/******/ \t\t\t\tif (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];\n/******/ \t\t\t\tObject.keys(__webpack_require__.hmrI).forEach(function (key) {\n/******/ \t\t\t\t\tqueuedInvalidatedModules.forEach(function (moduleId) {\n/******/ \t\t\t\t\t\t__webpack_require__.hmrI[key](\n/******/ \t\t\t\t\t\t\tmoduleId,\n/******/ \t\t\t\t\t\t\tcurrentUpdateApplyHandlers\n/******/ \t\t\t\t\t\t);\n/******/ \t\t\t\t\t});\n/******/ \t\t\t\t});\n/******/ \t\t\t\tqueuedInvalidatedModules = undefined;\n/******/ \t\t\t\treturn true;\n/******/ \t\t\t}\n/******/ \t\t}\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\t__webpack_require__.p = \"/_next/\";\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/react refresh */\n/******/ \t(() => {\n/******/ \t\tif (__webpack_require__.i) {\n/******/ \t\t__webpack_require__.i.push((options) => {\n/******/ \t\t\tconst originalFactory = options.factory;\n/******/ \t\t\toptions.factory = (moduleObject, moduleExports, webpackRequire) => {\n/******/ \t\t\t\tconst hasRefresh = typeof self !== \"undefined\" && !!self.$RefreshInterceptModuleExecution$;\n/******/ \t\t\t\tconst cleanup = hasRefresh ? self.$RefreshInterceptModuleExecution$(moduleObject.id) : () => {};\n/******/ \t\t\t\ttry {\n/******/ \t\t\t\t\toriginalFactory.call(this, moduleObject, moduleExports, webpackRequire);\n/******/ \t\t\t\t} finally {\n/******/ \t\t\t\t\tcleanup();\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t})\n/******/ \t\t}\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/compat */\n/******/ \t\n/******/ \t\n/******/ \t// noop fns to prevent runtime errors during initialization\n/******/ \tif (typeof self !== \"undefined\") {\n/******/ \t\tself.$RefreshReg$ = function () {};\n/******/ \t\tself.$RefreshSig$ = function () {\n/******/ \t\t\treturn function (type) {\n/******/ \t\t\t\treturn type;\n/******/ \t\t\t};\n/******/ \t\t};\n/******/ \t}\n/******/ \t\n/******/ \t/* webpack/runtime/css loading */\n/******/ \t(() => {\n/******/ \t\tvar createStylesheet = (chunkId, fullhref, resolve, reject) => {\n/******/ \t\t\tvar linkTag = document.createElement(\"link\");\n/******/ \t\t\n/******/ \t\t\tlinkTag.rel = \"stylesheet\";\n/******/ \t\t\tlinkTag.type = \"text/css\";\n/******/ \t\t\tvar onLinkComplete = (event) => {\n/******/ \t\t\t\t// avoid mem leaks.\n/******/ \t\t\t\tlinkTag.onerror = linkTag.onload = null;\n/******/ \t\t\t\tif (event.type === 'load') {\n/******/ \t\t\t\t\tresolve();\n/******/ \t\t\t\t} else {\n/******/ \t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n/******/ \t\t\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + realHref + \")\");\n/******/ \t\t\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n/******/ \t\t\t\t\terr.type = errorType;\n/******/ \t\t\t\t\terr.request = realHref;\n/******/ \t\t\t\t\tlinkTag.parentNode.removeChild(linkTag)\n/******/ \t\t\t\t\treject(err);\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n/******/ \t\t\tlinkTag.href = fullhref;\n/******/ \t\t\n/******/ \t\t\t(function(linkTag) {\n/******/ \t\t\t                if (typeof _N_E_STYLE_LOAD === 'function') {\n/******/ \t\t\t                    const { href, onload, onerror } = linkTag;\n/******/ \t\t\t                    _N_E_STYLE_LOAD(href.indexOf(window.location.origin) === 0 ? new URL(href).pathname : href).then(()=>onload == null ? void 0 : onload.call(linkTag, {\n/******/ \t\t\t                            type: 'load'\n/******/ \t\t\t                        }), ()=>onerror == null ? void 0 : onerror.call(linkTag, {}));\n/******/ \t\t\t                } else {\n/******/ \t\t\t                    document.head.appendChild(linkTag);\n/******/ \t\t\t                }\n/******/ \t\t\t            })(linkTag)\n/******/ \t\t\treturn linkTag;\n/******/ \t\t};\n/******/ \t\tvar findStylesheet = (href, fullhref) => {\n/******/ \t\t\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n/******/ \t\t\tfor(var i = 0; i < existingLinkTags.length; i++) {\n/******/ \t\t\t\tvar tag = existingLinkTags[i];\n/******/ \t\t\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n/******/ \t\t\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n/******/ \t\t\t}\n/******/ \t\t\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n/******/ \t\t\tfor(var i = 0; i < existingStyleTags.length; i++) {\n/******/ \t\t\t\tvar tag = existingStyleTags[i];\n/******/ \t\t\t\tvar dataHref = tag.getAttribute(\"data-href\");\n/******/ \t\t\t\tif(dataHref === href || dataHref === fullhref) return tag;\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\tvar loadStylesheet = (chunkId) => {\n/******/ \t\t\treturn new Promise((resolve, reject) => {\n/******/ \t\t\t\tvar href = __webpack_require__.miniCssF(chunkId);\n/******/ \t\t\t\tvar fullhref = __webpack_require__.p + href;\n/******/ \t\t\t\tif(findStylesheet(href, fullhref)) return resolve();\n/******/ \t\t\t\tcreateStylesheet(chunkId, fullhref, resolve, reject);\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t\t// no chunk loading\n/******/ \t\t\n/******/ \t\tvar oldTags = [];\n/******/ \t\tvar newTags = [];\n/******/ \t\tvar applyHandler = (options) => {\n/******/ \t\t\treturn { dispose: () => {\n/******/ \t\t\t\tfor(var i = 0; i < oldTags.length; i++) {\n/******/ \t\t\t\t\tvar oldTag = oldTags[i];\n/******/ \t\t\t\t\tif(oldTag.parentNode) oldTag.parentNode.removeChild(oldTag);\n/******/ \t\t\t\t}\n/******/ \t\t\t\toldTags.length = 0;\n/******/ \t\t\t}, apply: () => {\n/******/ \t\t\t\tfor(var i = 0; i < newTags.length; i++) newTags[i].rel = \"stylesheet\";\n/******/ \t\t\t\tnewTags.length = 0;\n/******/ \t\t\t} };\n/******/ \t\t}\n/******/ \t\t__webpack_require__.hmrC.miniCss = (chunkIds, removedChunks, removedModules, promises, applyHandlers, updatedModulesList) => {\n/******/ \t\t\tapplyHandlers.push(applyHandler);\n/******/ \t\t\tchunkIds.forEach((chunkId) => {\n/******/ \t\t\t\tvar href = __webpack_require__.miniCssF(chunkId);\n/******/ \t\t\t\tvar fullhref = __webpack_require__.p + href;\n/******/ \t\t\t\tvar oldTag = findStylesheet(href, fullhref);\n/******/ \t\t\t\tif(!oldTag) return;\n/******/ \t\t\t\tpromises.push(new Promise((resolve, reject) => {\n/******/ \t\t\t\t\tvar tag = createStylesheet(chunkId, fullhref, () => {\n/******/ \t\t\t\t\t\ttag.as = \"style\";\n/******/ \t\t\t\t\t\ttag.rel = \"preload\";\n/******/ \t\t\t\t\t\tresolve();\n/******/ \t\t\t\t\t}, reject);\n/******/ \t\t\t\t\toldTags.push(oldTag);\n/******/ \t\t\t\t\tnewTags.push(tag);\n/******/ \t\t\t\t}));\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/jsonp chunk loading */\n/******/ \t(() => {\n/******/ \t\t// no baseURI\n/******/ \t\t\n/******/ \t\t// object to store loaded and loading chunks\n/******/ \t\t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n/******/ \t\t// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\n/******/ \t\tvar installedChunks = __webpack_require__.hmrS_jsonp = __webpack_require__.hmrS_jsonp || {\n/******/ \t\t\t\"webpack\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__webpack_require__.f.j = (chunkId, promises) => {\n/******/ \t\t\t\t// JSONP chunk loading for javascript\n/******/ \t\t\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n/******/ \t\t\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n/******/ \t\t\n/******/ \t\t\t\t\t// a Promise means \"currently loading\".\n/******/ \t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\tpromises.push(installedChunkData[2]);\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tif(\"webpack\" != chunkId) {\n/******/ \t\t\t\t\t\t\t// setup Promise in chunk cache\n/******/ \t\t\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n/******/ \t\t\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n/******/ \t\t\n/******/ \t\t\t\t\t\t\t// start chunk loading\n/******/ \t\t\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n/******/ \t\t\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\t\t\t\tvar error = new Error();\n/******/ \t\t\t\t\t\t\tvar loadingEnded = (event) => {\n/******/ \t\t\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n/******/ \t\t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n/******/ \t\t\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n/******/ \t\t\t\t\t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n/******/ \t\t\t\t\t\t} else installedChunks[chunkId] = 0;\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no prefetching\n/******/ \t\t\n/******/ \t\t// no preloaded\n/******/ \t\t\n/******/ \t\tvar currentUpdatedModulesList;\n/******/ \t\tvar waitingUpdateResolves = {};\n/******/ \t\tfunction loadUpdateChunk(chunkId, updatedModulesList) {\n/******/ \t\t\tcurrentUpdatedModulesList = updatedModulesList;\n/******/ \t\t\treturn new Promise((resolve, reject) => {\n/******/ \t\t\t\twaitingUpdateResolves[chunkId] = resolve;\n/******/ \t\t\t\t// start update chunk loading\n/******/ \t\t\t\tvar url = __webpack_require__.p + __webpack_require__.hu(chunkId);\n/******/ \t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\tvar error = new Error();\n/******/ \t\t\t\tvar loadingEnded = (event) => {\n/******/ \t\t\t\t\tif(waitingUpdateResolves[chunkId]) {\n/******/ \t\t\t\t\t\twaitingUpdateResolves[chunkId] = undefined\n/******/ \t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\terror.message = 'Loading hot update chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n/******/ \t\t\t\t\t\terror.name = 'ChunkLoadError';\n/******/ \t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\treject(error);\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t};\n/******/ \t\t\t\t__webpack_require__.l(url, loadingEnded);\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tself[\"webpackHotUpdate_N_E\"] = (chunkId, moreModules, runtime) => {\n/******/ \t\t\tfor(var moduleId in moreModules) {\n/******/ \t\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n/******/ \t\t\t\t\tcurrentUpdate[moduleId] = moreModules[moduleId];\n/******/ \t\t\t\t\tif(currentUpdatedModulesList) currentUpdatedModulesList.push(moduleId);\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(runtime) currentUpdateRuntime.push(runtime);\n/******/ \t\t\tif(waitingUpdateResolves[chunkId]) {\n/******/ \t\t\t\twaitingUpdateResolves[chunkId]();\n/******/ \t\t\t\twaitingUpdateResolves[chunkId] = undefined;\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\tvar currentUpdateChunks;\n/******/ \t\tvar currentUpdate;\n/******/ \t\tvar currentUpdateRemovedChunks;\n/******/ \t\tvar currentUpdateRuntime;\n/******/ \t\tfunction applyHandler(options) {\n/******/ \t\t\tif (__webpack_require__.f) delete __webpack_require__.f.jsonpHmr;\n/******/ \t\t\tcurrentUpdateChunks = undefined;\n/******/ \t\t\tfunction getAffectedModuleEffects(updateModuleId) {\n/******/ \t\t\t\tvar outdatedModules = [updateModuleId];\n/******/ \t\t\t\tvar outdatedDependencies = {};\n/******/ \t\t\n/******/ \t\t\t\tvar queue = outdatedModules.map(function (id) {\n/******/ \t\t\t\t\treturn {\n/******/ \t\t\t\t\t\tchain: [id],\n/******/ \t\t\t\t\t\tid: id\n/******/ \t\t\t\t\t};\n/******/ \t\t\t\t});\n/******/ \t\t\t\twhile (queue.length > 0) {\n/******/ \t\t\t\t\tvar queueItem = queue.pop();\n/******/ \t\t\t\t\tvar moduleId = queueItem.id;\n/******/ \t\t\t\t\tvar chain = queueItem.chain;\n/******/ \t\t\t\t\tvar module = __webpack_require__.c[moduleId];\n/******/ \t\t\t\t\tif (\n/******/ \t\t\t\t\t\t!module ||\n/******/ \t\t\t\t\t\t(module.hot._selfAccepted && !module.hot._selfInvalidated)\n/******/ \t\t\t\t\t)\n/******/ \t\t\t\t\t\tcontinue;\n/******/ \t\t\t\t\tif (module.hot._selfDeclined) {\n/******/ \t\t\t\t\t\treturn {\n/******/ \t\t\t\t\t\t\ttype: \"self-declined\",\n/******/ \t\t\t\t\t\t\tchain: chain,\n/******/ \t\t\t\t\t\t\tmoduleId: moduleId\n/******/ \t\t\t\t\t\t};\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t\tif (module.hot._main) {\n/******/ \t\t\t\t\t\treturn {\n/******/ \t\t\t\t\t\t\ttype: \"unaccepted\",\n/******/ \t\t\t\t\t\t\tchain: chain,\n/******/ \t\t\t\t\t\t\tmoduleId: moduleId\n/******/ \t\t\t\t\t\t};\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t\tfor (var i = 0; i < module.parents.length; i++) {\n/******/ \t\t\t\t\t\tvar parentId = module.parents[i];\n/******/ \t\t\t\t\t\tvar parent = __webpack_require__.c[parentId];\n/******/ \t\t\t\t\t\tif (!parent) continue;\n/******/ \t\t\t\t\t\tif (parent.hot._declinedDependencies[moduleId]) {\n/******/ \t\t\t\t\t\t\treturn {\n/******/ \t\t\t\t\t\t\t\ttype: \"declined\",\n/******/ \t\t\t\t\t\t\t\tchain: chain.concat([parentId]),\n/******/ \t\t\t\t\t\t\t\tmoduleId: moduleId,\n/******/ \t\t\t\t\t\t\t\tparentId: parentId\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t\tif (outdatedModules.indexOf(parentId) !== -1) continue;\n/******/ \t\t\t\t\t\tif (parent.hot._acceptedDependencies[moduleId]) {\n/******/ \t\t\t\t\t\t\tif (!outdatedDependencies[parentId])\n/******/ \t\t\t\t\t\t\t\toutdatedDependencies[parentId] = [];\n/******/ \t\t\t\t\t\t\taddAllToSet(outdatedDependencies[parentId], [moduleId]);\n/******/ \t\t\t\t\t\t\tcontinue;\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t\tdelete outdatedDependencies[parentId];\n/******/ \t\t\t\t\t\toutdatedModules.push(parentId);\n/******/ \t\t\t\t\t\tqueue.push({\n/******/ \t\t\t\t\t\t\tchain: chain.concat([parentId]),\n/******/ \t\t\t\t\t\t\tid: parentId\n/******/ \t\t\t\t\t\t});\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t\n/******/ \t\t\t\treturn {\n/******/ \t\t\t\t\ttype: \"accepted\",\n/******/ \t\t\t\t\tmoduleId: updateModuleId,\n/******/ \t\t\t\t\toutdatedModules: outdatedModules,\n/******/ \t\t\t\t\toutdatedDependencies: outdatedDependencies\n/******/ \t\t\t\t};\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t\tfunction addAllToSet(a, b) {\n/******/ \t\t\t\tfor (var i = 0; i < b.length; i++) {\n/******/ \t\t\t\t\tvar item = b[i];\n/******/ \t\t\t\t\tif (a.indexOf(item) === -1) a.push(item);\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t\t// at begin all updates modules are outdated\n/******/ \t\t\t// the \"outdated\" status can propagate to parents if they don't accept the children\n/******/ \t\t\tvar outdatedDependencies = {};\n/******/ \t\t\tvar outdatedModules = [];\n/******/ \t\t\tvar appliedUpdate = {};\n/******/ \t\t\n/******/ \t\t\tvar warnUnexpectedRequire = function warnUnexpectedRequire(module) {\n/******/ \t\t\t\tconsole.warn(\n/******/ \t\t\t\t\t\"[HMR] unexpected require(\" + module.id + \") to disposed module\"\n/******/ \t\t\t\t);\n/******/ \t\t\t};\n/******/ \t\t\n/******/ \t\t\tfor (var moduleId in currentUpdate) {\n/******/ \t\t\t\tif (__webpack_require__.o(currentUpdate, moduleId)) {\n/******/ \t\t\t\t\tvar newModuleFactory = currentUpdate[moduleId];\n/******/ \t\t\t\t\t/** @type {TODO} */\n/******/ \t\t\t\t\tvar result = newModuleFactory\n/******/ \t\t\t\t\t\t? getAffectedModuleEffects(moduleId)\n/******/ \t\t\t\t\t\t: {\n/******/ \t\t\t\t\t\t\t\ttype: \"disposed\",\n/******/ \t\t\t\t\t\t\t\tmoduleId: moduleId\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t/** @type {Error|false} */\n/******/ \t\t\t\t\tvar abortError = false;\n/******/ \t\t\t\t\tvar doApply = false;\n/******/ \t\t\t\t\tvar doDispose = false;\n/******/ \t\t\t\t\tvar chainInfo = \"\";\n/******/ \t\t\t\t\tif (result.chain) {\n/******/ \t\t\t\t\t\tchainInfo = \"\\nUpdate propagation: \" + result.chain.join(\" -> \");\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t\tswitch (result.type) {\n/******/ \t\t\t\t\t\tcase \"self-declined\":\n/******/ \t\t\t\t\t\t\tif (options.onDeclined) options.onDeclined(result);\n/******/ \t\t\t\t\t\t\tif (!options.ignoreDeclined)\n/******/ \t\t\t\t\t\t\t\tabortError = new Error(\n/******/ \t\t\t\t\t\t\t\t\t\"Aborted because of self decline: \" +\n/******/ \t\t\t\t\t\t\t\t\t\tresult.moduleId +\n/******/ \t\t\t\t\t\t\t\t\t\tchainInfo\n/******/ \t\t\t\t\t\t\t\t);\n/******/ \t\t\t\t\t\t\tbreak;\n/******/ \t\t\t\t\t\tcase \"declined\":\n/******/ \t\t\t\t\t\t\tif (options.onDeclined) options.onDeclined(result);\n/******/ \t\t\t\t\t\t\tif (!options.ignoreDeclined)\n/******/ \t\t\t\t\t\t\t\tabortError = new Error(\n/******/ \t\t\t\t\t\t\t\t\t\"Aborted because of declined dependency: \" +\n/******/ \t\t\t\t\t\t\t\t\t\tresult.moduleId +\n/******/ \t\t\t\t\t\t\t\t\t\t\" in \" +\n/******/ \t\t\t\t\t\t\t\t\t\tresult.parentId +\n/******/ \t\t\t\t\t\t\t\t\t\tchainInfo\n/******/ \t\t\t\t\t\t\t\t);\n/******/ \t\t\t\t\t\t\tbreak;\n/******/ \t\t\t\t\t\tcase \"unaccepted\":\n/******/ \t\t\t\t\t\t\tif (options.onUnaccepted) options.onUnaccepted(result);\n/******/ \t\t\t\t\t\t\tif (!options.ignoreUnaccepted)\n/******/ \t\t\t\t\t\t\t\tabortError = new Error(\n/******/ \t\t\t\t\t\t\t\t\t\"Aborted because \" + moduleId + \" is not accepted\" + chainInfo\n/******/ \t\t\t\t\t\t\t\t);\n/******/ \t\t\t\t\t\t\tbreak;\n/******/ \t\t\t\t\t\tcase \"accepted\":\n/******/ \t\t\t\t\t\t\tif (options.onAccepted) options.onAccepted(result);\n/******/ \t\t\t\t\t\t\tdoApply = true;\n/******/ \t\t\t\t\t\t\tbreak;\n/******/ \t\t\t\t\t\tcase \"disposed\":\n/******/ \t\t\t\t\t\t\tif (options.onDisposed) options.onDisposed(result);\n/******/ \t\t\t\t\t\t\tdoDispose = true;\n/******/ \t\t\t\t\t\t\tbreak;\n/******/ \t\t\t\t\t\tdefault:\n/******/ \t\t\t\t\t\t\tthrow new Error(\"Unexception type \" + result.type);\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t\tif (abortError) {\n/******/ \t\t\t\t\t\treturn {\n/******/ \t\t\t\t\t\t\terror: abortError\n/******/ \t\t\t\t\t\t};\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t\tif (doApply) {\n/******/ \t\t\t\t\t\tappliedUpdate[moduleId] = newModuleFactory;\n/******/ \t\t\t\t\t\taddAllToSet(outdatedModules, result.outdatedModules);\n/******/ \t\t\t\t\t\tfor (moduleId in result.outdatedDependencies) {\n/******/ \t\t\t\t\t\t\tif (__webpack_require__.o(result.outdatedDependencies, moduleId)) {\n/******/ \t\t\t\t\t\t\t\tif (!outdatedDependencies[moduleId])\n/******/ \t\t\t\t\t\t\t\t\toutdatedDependencies[moduleId] = [];\n/******/ \t\t\t\t\t\t\t\taddAllToSet(\n/******/ \t\t\t\t\t\t\t\t\toutdatedDependencies[moduleId],\n/******/ \t\t\t\t\t\t\t\t\tresult.outdatedDependencies[moduleId]\n/******/ \t\t\t\t\t\t\t\t);\n/******/ \t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t\tif (doDispose) {\n/******/ \t\t\t\t\t\taddAllToSet(outdatedModules, [result.moduleId]);\n/******/ \t\t\t\t\t\tappliedUpdate[moduleId] = warnUnexpectedRequire;\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tcurrentUpdate = undefined;\n/******/ \t\t\n/******/ \t\t\t// Store self accepted outdated modules to require them later by the module system\n/******/ \t\t\tvar outdatedSelfAcceptedModules = [];\n/******/ \t\t\tfor (var j = 0; j < outdatedModules.length; j++) {\n/******/ \t\t\t\tvar outdatedModuleId = outdatedModules[j];\n/******/ \t\t\t\tvar module = __webpack_require__.c[outdatedModuleId];\n/******/ \t\t\t\tif (\n/******/ \t\t\t\t\tmodule &&\n/******/ \t\t\t\t\t(module.hot._selfAccepted || module.hot._main) &&\n/******/ \t\t\t\t\t// removed self-accepted modules should not be required\n/******/ \t\t\t\t\tappliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&\n/******/ \t\t\t\t\t// when called invalidate self-accepting is not possible\n/******/ \t\t\t\t\t!module.hot._selfInvalidated\n/******/ \t\t\t\t) {\n/******/ \t\t\t\t\toutdatedSelfAcceptedModules.push({\n/******/ \t\t\t\t\t\tmodule: outdatedModuleId,\n/******/ \t\t\t\t\t\trequire: module.hot._requireSelf,\n/******/ \t\t\t\t\t\terrorHandler: module.hot._selfAccepted\n/******/ \t\t\t\t\t});\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t\tvar moduleOutdatedDependencies;\n/******/ \t\t\n/******/ \t\t\treturn {\n/******/ \t\t\t\tdispose: function () {\n/******/ \t\t\t\t\tcurrentUpdateRemovedChunks.forEach(function (chunkId) {\n/******/ \t\t\t\t\t\tdelete installedChunks[chunkId];\n/******/ \t\t\t\t\t});\n/******/ \t\t\t\t\tcurrentUpdateRemovedChunks = undefined;\n/******/ \t\t\n/******/ \t\t\t\t\tvar idx;\n/******/ \t\t\t\t\tvar queue = outdatedModules.slice();\n/******/ \t\t\t\t\twhile (queue.length > 0) {\n/******/ \t\t\t\t\t\tvar moduleId = queue.pop();\n/******/ \t\t\t\t\t\tvar module = __webpack_require__.c[moduleId];\n/******/ \t\t\t\t\t\tif (!module) continue;\n/******/ \t\t\n/******/ \t\t\t\t\t\tvar data = {};\n/******/ \t\t\n/******/ \t\t\t\t\t\t// Call dispose handlers\n/******/ \t\t\t\t\t\tvar disposeHandlers = module.hot._disposeHandlers;\n/******/ \t\t\t\t\t\tfor (j = 0; j < disposeHandlers.length; j++) {\n/******/ \t\t\t\t\t\t\tdisposeHandlers[j].call(null, data);\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t__webpack_require__.hmrD[moduleId] = data;\n/******/ \t\t\n/******/ \t\t\t\t\t\t// disable module (this disables requires from this module)\n/******/ \t\t\t\t\t\tmodule.hot.active = false;\n/******/ \t\t\n/******/ \t\t\t\t\t\t// remove module from cache\n/******/ \t\t\t\t\t\tdelete __webpack_require__.c[moduleId];\n/******/ \t\t\n/******/ \t\t\t\t\t\t// when disposing there is no need to call dispose handler\n/******/ \t\t\t\t\t\tdelete outdatedDependencies[moduleId];\n/******/ \t\t\n/******/ \t\t\t\t\t\t// remove \"parents\" references from all children\n/******/ \t\t\t\t\t\tfor (j = 0; j < module.children.length; j++) {\n/******/ \t\t\t\t\t\t\tvar child = __webpack_require__.c[module.children[j]];\n/******/ \t\t\t\t\t\t\tif (!child) continue;\n/******/ \t\t\t\t\t\t\tidx = child.parents.indexOf(moduleId);\n/******/ \t\t\t\t\t\t\tif (idx >= 0) {\n/******/ \t\t\t\t\t\t\t\tchild.parents.splice(idx, 1);\n/******/ \t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t}\n/******/ \t\t\n/******/ \t\t\t\t\t// remove outdated dependency from module children\n/******/ \t\t\t\t\tvar dependency;\n/******/ \t\t\t\t\tfor (var outdatedModuleId in outdatedDependencies) {\n/******/ \t\t\t\t\t\tif (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {\n/******/ \t\t\t\t\t\t\tmodule = __webpack_require__.c[outdatedModuleId];\n/******/ \t\t\t\t\t\t\tif (module) {\n/******/ \t\t\t\t\t\t\t\tmoduleOutdatedDependencies =\n/******/ \t\t\t\t\t\t\t\t\toutdatedDependencies[outdatedModuleId];\n/******/ \t\t\t\t\t\t\t\tfor (j = 0; j < moduleOutdatedDependencies.length; j++) {\n/******/ \t\t\t\t\t\t\t\t\tdependency = moduleOutdatedDependencies[j];\n/******/ \t\t\t\t\t\t\t\t\tidx = module.children.indexOf(dependency);\n/******/ \t\t\t\t\t\t\t\t\tif (idx >= 0) module.children.splice(idx, 1);\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t},\n/******/ \t\t\t\tapply: function (reportError) {\n/******/ \t\t\t\t\t// insert new code\n/******/ \t\t\t\t\tfor (var updateModuleId in appliedUpdate) {\n/******/ \t\t\t\t\t\tif (__webpack_require__.o(appliedUpdate, updateModuleId)) {\n/******/ \t\t\t\t\t\t\t__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t}\n/******/ \t\t\n/******/ \t\t\t\t\t// run new runtime modules\n/******/ \t\t\t\t\tfor (var i = 0; i < currentUpdateRuntime.length; i++) {\n/******/ \t\t\t\t\t\tcurrentUpdateRuntime[i](__webpack_require__);\n/******/ \t\t\t\t\t}\n/******/ \t\t\n/******/ \t\t\t\t\t// call accept handlers\n/******/ \t\t\t\t\tfor (var outdatedModuleId in outdatedDependencies) {\n/******/ \t\t\t\t\t\tif (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {\n/******/ \t\t\t\t\t\t\tvar module = __webpack_require__.c[outdatedModuleId];\n/******/ \t\t\t\t\t\t\tif (module) {\n/******/ \t\t\t\t\t\t\t\tmoduleOutdatedDependencies =\n/******/ \t\t\t\t\t\t\t\t\toutdatedDependencies[outdatedModuleId];\n/******/ \t\t\t\t\t\t\t\tvar callbacks = [];\n/******/ \t\t\t\t\t\t\t\tvar errorHandlers = [];\n/******/ \t\t\t\t\t\t\t\tvar dependenciesForCallbacks = [];\n/******/ \t\t\t\t\t\t\t\tfor (var j = 0; j < moduleOutdatedDependencies.length; j++) {\n/******/ \t\t\t\t\t\t\t\t\tvar dependency = moduleOutdatedDependencies[j];\n/******/ \t\t\t\t\t\t\t\t\tvar acceptCallback =\n/******/ \t\t\t\t\t\t\t\t\t\tmodule.hot._acceptedDependencies[dependency];\n/******/ \t\t\t\t\t\t\t\t\tvar errorHandler =\n/******/ \t\t\t\t\t\t\t\t\t\tmodule.hot._acceptedErrorHandlers[dependency];\n/******/ \t\t\t\t\t\t\t\t\tif (acceptCallback) {\n/******/ \t\t\t\t\t\t\t\t\t\tif (callbacks.indexOf(acceptCallback) !== -1) continue;\n/******/ \t\t\t\t\t\t\t\t\t\tcallbacks.push(acceptCallback);\n/******/ \t\t\t\t\t\t\t\t\t\terrorHandlers.push(errorHandler);\n/******/ \t\t\t\t\t\t\t\t\t\tdependenciesForCallbacks.push(dependency);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\tfor (var k = 0; k < callbacks.length; k++) {\n/******/ \t\t\t\t\t\t\t\t\ttry {\n/******/ \t\t\t\t\t\t\t\t\t\tcallbacks[k].call(null, moduleOutdatedDependencies);\n/******/ \t\t\t\t\t\t\t\t\t} catch (err) {\n/******/ \t\t\t\t\t\t\t\t\t\tif (typeof errorHandlers[k] === \"function\") {\n/******/ \t\t\t\t\t\t\t\t\t\t\ttry {\n/******/ \t\t\t\t\t\t\t\t\t\t\t\terrorHandlers[k](err, {\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\tmoduleId: outdatedModuleId,\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\tdependencyId: dependenciesForCallbacks[k]\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t\t\t\t\t\t} catch (err2) {\n/******/ \t\t\t\t\t\t\t\t\t\t\t\tif (options.onErrored) {\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\toptions.onErrored({\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"accept-error-handler-errored\",\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\t\tmoduleId: outdatedModuleId,\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\t\tdependencyId: dependenciesForCallbacks[k],\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\t\terror: err2,\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\t\toriginalError: err\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t\t\t\t\tif (!options.ignoreErrored) {\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\treportError(err2);\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\treportError(err);\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t\t\t} else {\n/******/ \t\t\t\t\t\t\t\t\t\t\tif (options.onErrored) {\n/******/ \t\t\t\t\t\t\t\t\t\t\t\toptions.onErrored({\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\ttype: \"accept-errored\",\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\tmoduleId: outdatedModuleId,\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\tdependencyId: dependenciesForCallbacks[k],\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t\terror: err\n/******/ \t\t\t\t\t\t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t\t\t\tif (!options.ignoreErrored) {\n/******/ \t\t\t\t\t\t\t\t\t\t\t\treportError(err);\n/******/ \t\t\t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t}\n/******/ \t\t\n/******/ \t\t\t\t\t// Load self accepted modules\n/******/ \t\t\t\t\tfor (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {\n/******/ \t\t\t\t\t\tvar item = outdatedSelfAcceptedModules[o];\n/******/ \t\t\t\t\t\tvar moduleId = item.module;\n/******/ \t\t\t\t\t\ttry {\n/******/ \t\t\t\t\t\t\titem.require(moduleId);\n/******/ \t\t\t\t\t\t} catch (err) {\n/******/ \t\t\t\t\t\t\tif (typeof item.errorHandler === \"function\") {\n/******/ \t\t\t\t\t\t\t\ttry {\n/******/ \t\t\t\t\t\t\t\t\titem.errorHandler(err, {\n/******/ \t\t\t\t\t\t\t\t\t\tmoduleId: moduleId,\n/******/ \t\t\t\t\t\t\t\t\t\tmodule: __webpack_require__.c[moduleId]\n/******/ \t\t\t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t\t\t} catch (err1) {\n/******/ \t\t\t\t\t\t\t\t\tif (options.onErrored) {\n/******/ \t\t\t\t\t\t\t\t\t\toptions.onErrored({\n/******/ \t\t\t\t\t\t\t\t\t\t\ttype: \"self-accept-error-handler-errored\",\n/******/ \t\t\t\t\t\t\t\t\t\t\tmoduleId: moduleId,\n/******/ \t\t\t\t\t\t\t\t\t\t\terror: err1,\n/******/ \t\t\t\t\t\t\t\t\t\t\toriginalError: err\n/******/ \t\t\t\t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t\tif (!options.ignoreErrored) {\n/******/ \t\t\t\t\t\t\t\t\t\treportError(err1);\n/******/ \t\t\t\t\t\t\t\t\t\treportError(err);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t} else {\n/******/ \t\t\t\t\t\t\t\tif (options.onErrored) {\n/******/ \t\t\t\t\t\t\t\t\toptions.onErrored({\n/******/ \t\t\t\t\t\t\t\t\t\ttype: \"self-accept-errored\",\n/******/ \t\t\t\t\t\t\t\t\t\tmoduleId: moduleId,\n/******/ \t\t\t\t\t\t\t\t\t\terror: err\n/******/ \t\t\t\t\t\t\t\t\t});\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\tif (!options.ignoreErrored) {\n/******/ \t\t\t\t\t\t\t\t\treportError(err);\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t}\n/******/ \t\t\t\t\t}\n/******/ \t\t\n/******/ \t\t\t\t\treturn outdatedModules;\n/******/ \t\t\t\t}\n/******/ \t\t\t};\n/******/ \t\t}\n/******/ \t\t__webpack_require__.hmrI.jsonp = function (moduleId, applyHandlers) {\n/******/ \t\t\tif (!currentUpdate) {\n/******/ \t\t\t\tcurrentUpdate = {};\n/******/ \t\t\t\tcurrentUpdateRuntime = [];\n/******/ \t\t\t\tcurrentUpdateRemovedChunks = [];\n/******/ \t\t\t\tapplyHandlers.push(applyHandler);\n/******/ \t\t\t}\n/******/ \t\t\tif (!__webpack_require__.o(currentUpdate, moduleId)) {\n/******/ \t\t\t\tcurrentUpdate[moduleId] = __webpack_require__.m[moduleId];\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\t__webpack_require__.hmrC.jsonp = function (\n/******/ \t\t\tchunkIds,\n/******/ \t\t\tremovedChunks,\n/******/ \t\t\tremovedModules,\n/******/ \t\t\tpromises,\n/******/ \t\t\tapplyHandlers,\n/******/ \t\t\tupdatedModulesList\n/******/ \t\t) {\n/******/ \t\t\tapplyHandlers.push(applyHandler);\n/******/ \t\t\tcurrentUpdateChunks = {};\n/******/ \t\t\tcurrentUpdateRemovedChunks = removedChunks;\n/******/ \t\t\tcurrentUpdate = removedModules.reduce(function (obj, key) {\n/******/ \t\t\t\tobj[key] = false;\n/******/ \t\t\t\treturn obj;\n/******/ \t\t\t}, {});\n/******/ \t\t\tcurrentUpdateRuntime = [];\n/******/ \t\t\tchunkIds.forEach(function (chunkId) {\n/******/ \t\t\t\tif (\n/******/ \t\t\t\t\t__webpack_require__.o(installedChunks, chunkId) &&\n/******/ \t\t\t\t\tinstalledChunks[chunkId] !== undefined\n/******/ \t\t\t\t) {\n/******/ \t\t\t\t\tpromises.push(loadUpdateChunk(chunkId, updatedModulesList));\n/******/ \t\t\t\t\tcurrentUpdateChunks[chunkId] = true;\n/******/ \t\t\t\t} else {\n/******/ \t\t\t\t\tcurrentUpdateChunks[chunkId] = false;\n/******/ \t\t\t\t}\n/******/ \t\t\t});\n/******/ \t\t\tif (__webpack_require__.f) {\n/******/ \t\t\t\t__webpack_require__.f.jsonpHmr = function (chunkId, promises) {\n/******/ \t\t\t\t\tif (\n/******/ \t\t\t\t\t\tcurrentUpdateChunks &&\n/******/ \t\t\t\t\t\t__webpack_require__.o(currentUpdateChunks, chunkId) &&\n/******/ \t\t\t\t\t\t!currentUpdateChunks[chunkId]\n/******/ \t\t\t\t\t) {\n/******/ \t\t\t\t\t\tpromises.push(loadUpdateChunk(chunkId));\n/******/ \t\t\t\t\t\tcurrentUpdateChunks[chunkId] = true;\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t};\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__webpack_require__.hmrM = () => {\n/******/ \t\t\tif (typeof fetch === \"undefined\") throw new Error(\"No browser support: need fetch API\");\n/******/ \t\t\treturn fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {\n/******/ \t\t\t\tif(response.status === 404) return; // no update available\n/******/ \t\t\t\tif(!response.ok) throw new Error(\"Failed to fetch update manifest \" + response.statusText);\n/******/ \t\t\t\treturn response.json();\n/******/ \t\t\t});\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n/******/ \t\t\n/******/ \t\t// install a JSONP callback for chunk loading\n/******/ \t\tvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n/******/ \t\t\tvar [chunkIds, moreModules, runtime] = data;\n/******/ \t\t\t// add \"moreModules\" to the modules object,\n/******/ \t\t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\t\tvar moduleId, chunkId, i = 0;\n/******/ \t\t\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n/******/ \t\t\t\tfor(moduleId in moreModules) {\n/******/ \t\t\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n/******/ \t\t\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t\t\tif(runtime) var result = runtime(__webpack_require__);\n/******/ \t\t\t}\n/******/ \t\t\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n/******/ \t\t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\t\tchunkId = chunkIds[i];\n/******/ \t\t\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n/******/ \t\t\t\t\tinstalledChunks[chunkId][0]();\n/******/ \t\t\t\t}\n/******/ \t\t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t\t}\n/******/ \t\t\treturn __webpack_require__.O(result);\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tvar chunkLoadingGlobal = self[\"webpackChunk_N_E\"] = self[\"webpackChunk_N_E\"] || [];\n/******/ \t\tchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n/******/ \t\tchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// module cache are used so entry inlining is disabled\n/******/ \t\n/******/ })()\n;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/development/_buildManifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/development/_ssgManifest.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/app/layout.06a716aec4269468.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/app/layout.4b651b34a86fa124.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/app/layout.5096f164a2b558cf.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/app/layout.520786211804ce97.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/app/layout.5c108861e24f545b.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/app/layout.8f2329f786c01995.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/app/layout.a14420a62aac6c7e.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/app/layout.a3417584444541c5.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/app/layout.c7e7b5fe1ccb35b4.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/app/layout.e438b6982e7b3bd5.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/webpack.06a716aec4269468.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/webpack.4b651b34a86fa124.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/webpack.5096f164a2b558cf.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/webpack.520786211804ce97.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/webpack.5c108861e24f545b.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/webpack.8f2329f786c01995.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/webpack.a14420a62aac6c7e.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/webpack.a3417584444541c5.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/webpack.c7e7b5fe1ccb35b4.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/static/webpack/webpack.e438b6982e7b3bd5.hot-update.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/out/sw.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/pages/_document.js",
    "messages": [
      {
        "ruleId": "@next/next/google-font-preconnect",
        "severity": 1,
        "message": "`rel=\"preconnect\"` is missing from Google Font. See: https://nextjs.org/docs/messages/google-font-preconnect",
        "line": 20,
        "column": 9,
        "nodeType": "JSXOpeningElement",
        "endLine": 20,
        "endColumn": 69
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Html, Head, Main, NextScript } from 'next/document';\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head>\n        <meta name=\"robots\" content=\"index, follow\" />\n        <meta name=\"googlebot\" content=\"index, follow\" />\n        <link rel=\"canonical\" href=\"https://alphaaistockx.com\" />\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n        <link rel=\"apple-touch-icon\" href=\"/apple-touch-icon.png\" />\n        <link rel=\"manifest\" href=\"/site.webmanifest\" />\n\n        {/* Preconnect to external domains */}\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n\n        {/* DNS Prefetch */}\n        <link rel=\"dns-prefetch\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"dns-prefetch\" href=\"https://fonts.gstatic.com\" />\n\n        {/* Critical CSS for above-the-fold content */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `\n            body { \n              margin: 0; \n              font-family: system-ui, -apple-system, sans-serif;\n              background: #0f172a;\n              color: #ffffff;\n            }\n            .loading-screen {\n              position: fixed;\n              top: 0;\n              left: 0;\n              width: 100%;\n              height: 100%;\n              background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);\n              display: flex;\n              align-items: center;\n              justify-content: center;\n              z-index: 9999;\n            }\n          `,\n          }}\n        />\n      </Head>\n      <body>\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/postcss.config.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/public/sw.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/react-demo/src/App.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/react-demo/src/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/scripts/format-project.js",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 1,
        "column": 22,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 1,
        "endColumn": 46
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'path' is assigned a value but never used.",
        "line": 2,
        "column": 7,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 11
      },
      {
        "ruleId": "@typescript-eslint/no-var-requires",
        "severity": 2,
        "message": "Require statement not part of import statement.",
        "line": 2,
        "column": 14,
        "nodeType": "CallExpression",
        "messageId": "noVarReqs",
        "endLine": 2,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { execSync } = require('child_process');\nconst path = require('path');\n\n// Define colors for console output\nconst colors = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n};\n\nconsole.log(`${colors.bright}${colors.blue}Starting project cleanup...${colors.reset}\\n`);\n\ntry {\n  // Install dependencies if needed\n  console.log(`${colors.yellow}Installing ESLint and Prettier dependencies...${colors.reset}`);\n  execSync('npm install', { stdio: 'inherit' });\n\n  // Run ESLint fix\n  console.log(`\\n${colors.yellow}Running ESLint to fix code issues...${colors.reset}`);\n  execSync('npm run lint', { stdio: 'inherit' });\n\n  // Run Prettier\n  console.log(`\\n${colors.yellow}Running Prettier to format code...${colors.reset}`);\n  execSync('npm run format', { stdio: 'inherit' });\n\n  // Check for remaining issues\n  console.log(`\\n${colors.yellow}Checking for any remaining issues...${colors.reset}`);\n  try {\n    execSync('npm run check-all', { stdio: 'inherit' });\n    console.log(\n      `\\n${colors.bright}${colors.green}Project cleanup completed successfully!${colors.reset}`\n    );\n  } catch (error) {\n    console.log(\n      `\\n${colors.magenta}Some issues could not be automatically fixed. Please review the errors above.${colors.reset}`\n    );\n    process.exit(1);\n  }\n} catch (error) {\n  console.error(`\\nAn error occurred during project cleanup: ${error.message}`);\n  process.exit(1);\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/src/App.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/src/components/FeatureList.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/src/components/Header.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/src/components/StockResult.jsx",
    "messages": [
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'data' is missing in props validation",
        "line": 1,
        "column": 24,
        "nodeType": "Property",
        "messageId": "missingPropType",
        "endLine": 1,
        "endColumn": 28
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'data.change' is missing in props validation",
        "line": 2,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 2,
        "endColumn": 51
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'data.symbol' is missing in props validation",
        "line": 22,
        "column": 77,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 22,
        "endColumn": 83
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'data.price' is missing in props validation",
        "line": 24,
        "column": 74,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 24,
        "endColumn": 79
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'data.change' is missing in props validation",
        "line": 33,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 33,
        "endColumn": 25
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'data.aiScore' is missing in props validation",
        "line": 54,
        "column": 73,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 54,
        "endColumn": 80
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'data.consciousness' is missing in props validation",
        "line": 66,
        "column": 71,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 66,
        "endColumn": 84
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'data.prediction' is missing in props validation",
        "line": 78,
        "column": 71,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 78,
        "endColumn": 81
      },
      {
        "ruleId": "react/prop-types",
        "severity": 2,
        "message": "'data.quantumInsight' is missing in props validation",
        "line": 92,
        "column": 61,
        "nodeType": "Identifier",
        "messageId": "missingPropType",
        "endLine": 92,
        "endColumn": 75
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const StockResult = ({ data }) => {\n  const isPositive = Number.parseFloat(data.change) >= 0;\n\n  return (\n    <div\n      style={{\n        background: 'rgba(255, 255, 255, 0.1)',\n        borderRadius: '12px',\n        padding: '2rem',\n        border: '1px solid rgba(139, 92, 246, 0.3)',\n        backdropFilter: 'blur(10px)',\n      }}\n    >\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n          marginBottom: '1.5rem',\n        }}\n      >\n        <h3 style={{ margin: 0, fontSize: '2rem', color: '#8b5cf6' }}>{data.symbol}</h3>\n        <div style={{ textAlign: 'right' }}>\n          <div style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>${data.price}</div>\n          <div\n            style={{\n              color: isPositive ? '#10b981' : '#ef4444',\n              fontSize: '1.1rem',\n              fontWeight: 'bold',\n            }}\n          >\n            {isPositive ? '+' : ''}\n            {data.change}\n          </div>\n        </div>\n      </div>\n\n      <div\n        style={{\n          display: 'grid',\n          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))',\n          gap: '1.5rem',\n        }}\n      >\n        <div\n          style={{\n            background: 'rgba(139, 92, 246, 0.2)',\n            padding: '1rem',\n            borderRadius: '8px',\n            border: '1px solid rgba(139, 92, 246, 0.4)',\n          }}\n        >\n          <h4 style={{ margin: '0 0 0.5rem 0', color: '#a78bfa' }}>🧠 AI Confidence Score</h4>\n          <div style={{ fontSize: '1.5rem', fontWeight: 'bold' }}>{data.aiScore}/100</div>\n        </div>\n\n        <div\n          style={{\n            background: 'rgba(236, 72, 153, 0.2)',\n            padding: '1rem',\n            borderRadius: '8px',\n            border: '1px solid rgba(236, 72, 153, 0.4)',\n          }}\n        >\n          <h4 style={{ margin: '0 0 0.5rem 0', color: '#f472b6' }}>⚛️ Consciousness Level</h4>\n          <div style={{ fontSize: '1rem', fontWeight: 'bold' }}>{data.consciousness}</div>\n        </div>\n\n        <div\n          style={{\n            background: 'rgba(6, 182, 212, 0.2)',\n            padding: '1rem',\n            borderRadius: '8px',\n            border: '1px solid rgba(6, 182, 212, 0.4)',\n          }}\n        >\n          <h4 style={{ margin: '0 0 0.5rem 0', color: '#22d3ee' }}>🎯 AI Prediction</h4>\n          <div style={{ fontSize: '1rem', fontWeight: 'bold' }}>{data.prediction}</div>\n        </div>\n      </div>\n\n      <div\n        style={{\n          marginTop: '1.5rem',\n          padding: '1rem',\n          background: 'rgba(16, 185, 129, 0.1)',\n          borderRadius: '8px',\n          border: '1px solid rgba(16, 185, 129, 0.3)',\n        }}\n      >\n        <h4 style={{ margin: '0 0 0.5rem 0', color: '#34d399' }}>🌟 Quantum Insight</h4>\n        <p style={{ margin: 0, fontStyle: 'italic' }}>{data.quantumInsight}</p>\n      </div>\n\n      <div\n        style={{\n          marginTop: '1rem',\n          fontSize: '0.8rem',\n          opacity: 0.7,\n          textAlign: 'center',\n        }}\n      >\n        ⚡ Analysis completed in 0.047 seconds by 47 conscious AI beings\n      </div>\n    </div>\n  );\n};\n\nexport default StockResult;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/src/components/StockSearch.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/src/index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/sw.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/tailwind.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
