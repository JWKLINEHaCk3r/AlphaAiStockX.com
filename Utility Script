// filepath: /Users/Josephkline/AlphaAiStockX/AlphaAiStockX.com/fix-missing-components.js
const fs = require('fs');
const path = require('path');

console.log('ðŸ”§ Creating missing components...');

function createMissingComponents() {
    // Ensure components/ui directory exists
    const uiDir = './components/ui';
    if (!fs.existsSync(uiDir)) {
        fs.mkdirSync(uiDir, { recursive: true });
    }

    // Create missing UI components
    createCardComponent();
    createButtonComponent();
    createInputComponent();
    createBadgeComponent();
    createProgressComponent();
    createToastComponents();
    createCalendarComponent();

    console.log('âœ… All missing components created!');
}

function createCardComponent() {
    const cardContent = `import React from 'react';

interface CardProps {
  children: React.ReactNode;
  className?: string;
}

export const Card: React.FC<CardProps> = ({ children, className = '' }) => {
  return (
    <div className={\`bg-white rounded-lg shadow-md border p-4 \${className}\`}>
      {children}
    </div>
  );
};

export const CardHeader: React.FC<CardProps> = ({ children, className = '' }) => {
  return (
    <div className={\`mb-4 \${className}\`}>
      {children}
    </div>
  );
};

export const CardTitle: React.FC<CardProps> = ({ children, className = '' }) => {
  return (
    <h3 className={\`text-xl font-semibold \${className}\`}>
      {children}
    </h3>
  );
};

export const CardContent: React.FC<CardProps> = ({ children, className = '' }) => {
  return (
    <div className={\`\${className}\`}>
      {children}
    </div>
  );
};`;

    fs.writeFileSync('./components/ui/card.tsx', cardContent);
}

function createButtonComponent() {
    const buttonContent = `import React from 'react';

interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  className?: string;
  disabled?: boolean;
  type?: 'button' | 'submit' | 'reset';
}

export const Button: React.FC<ButtonProps> = ({ 
  children, 
  onClick, 
  className = '', 
  disabled = false,
  type = 'button'
}) => {
  return (
    <button
      type={type}
      onClick={onClick}
      disabled={disabled}
      className={\`px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 \${className}\`}
    >
      {children}
    </button>
  );
};`;

    fs.writeFileSync('./components/ui/button.tsx', buttonContent);
}

function createInputComponent() {
    const inputContent = `import React from 'react';

interface InputProps {
  type?: string;
  placeholder?: string;
  value?: string;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  className?: string;
  disabled?: boolean;
}

export const Input: React.FC<InputProps> = ({ 
  type = 'text',
  placeholder = '',
  value,
  onChange,
  className = '',
  disabled = false
}) => {
  return (
    <input
      type={type}
      placeholder={placeholder}
      value={value}
      onChange={onChange}
      disabled={disabled}
      className={\`px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 \${className}\`}
    />
  );
};`;

    fs.writeFileSync('./components/ui/input.tsx', inputContent);
}

function createBadgeComponent() {
    const badgeContent = `import React from 'react';

interface BadgeProps {
  children: React.ReactNode;
  variant?: 'default' | 'success' | 'warning' | 'error';
  className?: string;
}

export const Badge: React.FC<BadgeProps> = ({ 
  children, 
  variant = 'default',
  className = ''
}) => {
  const variantClasses = {
    default: 'bg-gray-200 text-gray-800',
    success: 'bg-green-200 text-green-800',
    warning: 'bg-yellow-200 text-yellow-800',
    error: 'bg-red-200 text-red-800'
  };

  return (
    <span className={\`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium \${variantClasses[variant]} \${className}\`}>
      {children}
    </span>
  );
};`;

    fs.writeFileSync('./components/ui/badge.tsx', badgeContent);
}

function createProgressComponent() {
    const progressContent = `import React from 'react';

interface ProgressProps {
  value: number;
  max?: number;
  className?: string;
}

export const Progress: React.FC<ProgressProps> = ({ 
  value, 
  max = 100,
  className = ''
}) => {
  const percentage = Math.min((value / max) * 100, 100);

  return (
    <div className={\`w-full bg-gray-200 rounded-full h-2.5 \${className}\`}>
      <div 
        className="bg-blue-600 h-2.5 rounded-full transition-all duration-300 ease-in-out"
        style={{ width: \`\${percentage}%\` }}
      />
    </div>
  );
};`;

    fs.writeFileSync('./components/ui/progress.tsx', progressContent);
}

function createToastComponents() {
    const toastContent = `import React from 'react';

interface ToastProps {
  title?: string;
  description?: string;
  variant?: 'default' | 'destructive';
}

export const Toast: React.FC<ToastProps> = ({ title, description, variant = 'default' }) => {
  const variantClasses = {
    default: 'bg-white border-gray-200',
    destructive: 'bg-red-50 border-red-200'
  };

  return (
    <div className={\`rounded-md border p-4 \${variantClasses[variant]}\`}>
      {title && <div className="font-semibold">{title}</div>}
      {description && <div className="text-sm text-gray-600">{description}</div>}
    </div>
  );
};`;

    fs.writeFileSync('./components/ui/toast.tsx', toastContent);

    const toasterContent = `import React from 'react';

export const Toaster: React.FC = () => {
  return (
    <div className="fixed bottom-4 right-4 z-50">
      {/* Toast container */}
    </div>
  );
};`;

    fs.writeFileSync('./components/ui/toaster.tsx', toasterContent);
}

function createCalendarComponent() {
    const calendarContent = `import React from 'react';

interface CalendarProps {
  selected?: Date;
  onSelect?: (date: Date) => void;
  className?: string;
}

export const Calendar: React.FC<CalendarProps> = ({ 
  selected, 
  onSelect,
  className = ''
}) => {
  return (
    <div className={\`p-4 bg-white border rounded-lg \${className}\`}>
      <div className="text-center text-gray-600">
        Calendar Component
      </div>
      {selected && (
        <div className="mt-2 text-sm text-center">
          Selected: {selected.toDateString()}
        </div>
      )}
    </div>
  );
};`;

    fs.writeFileSync('./components/ui/calendar.tsx', calendarContent);
}

createMissingComponents();