'use client';
import React, { useState } from 'react';
import { Card, CardHeader, CardContent, CardTitle } from "../../../components/ui/card";
import { Badge } from "../../../components/ui/badge";
import { Button } from "../../../components/ui/button";
import { 
  TrendingUp, 
  Zap, 
  Activity, 
  Settings, 
  RefreshCw,
  CheckCircle,
  AlertTriangle,
  Clock,
  Target,
  Cpu, 
  MemoryStick 
} from 'lucide-react';

interface PerformanceMetric {
  id: string;
  name: string;
  current: number;
  target: number;
  unit: string;
  status: 'good' | 'warning' | 'critical';
  trend: 'up' | 'down' | 'stable';
}

interface OptimizationSuggestion {
  id: string;
  title: string;
  description: string;
  impact: 'high' | 'medium' | 'low';
  effort: 'easy' | 'medium' | 'hard';
  category: string;
}

export default function PerformanceOptimizer() {
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [lastOptimized, setLastOptimized] = useState('2 hours ago');
  const [autoOptimize, setAutoOptimize] = useState(true);

  const performanceMetrics: PerformanceMetric[] = [
    {
      id: 'response-time',
      name: 'Response Time',
      current: 127,
      target: 100,
      unit: 'ms',
      status: 'warning',
      trend: 'down'
    },
    {
      id: 'throughput',
      name: 'Throughput',
      current: 2840,
      target: 3000,
      unit: 'req/s',
      status: 'good',
      trend: 'up'
    },
    {
      id: 'error-rate',
      name: 'Error Rate',
      current: 0.23,
      target: 0.1,
      unit: '%',
      status: 'warning',
      trend: 'stable'
    },
    {
      id: 'cpu-usage',
      name: 'CPU Usage',
      current: 68,
      target: 70,
      unit: '%',
      status: 'good',
      trend: 'stable'
    },
    {
      id: 'memory-usage',
      name: 'Memory Usage',
      current: 84,
      target: 80,
      unit: '%',
      status: 'warning',
      trend: 'up'
    },
    {
      id: 'cache-hit-rate',
      name: 'Cache Hit Rate',
      current: 94.7,
      target: 95,
      unit: '%',
      status: 'good',
      trend: 'up'
    }
  ];

  const optimizationSuggestions: OptimizationSuggestion[] = [
    {
      id: 'cache-optimization',
      title: 'Implement Redis Caching',
      description: 'Add Redis caching layer for frequently accessed data to reduce database load',
      impact: 'high',
      effort: 'medium',
      category: 'Database'
    },
    {
      id: 'api-compression',
      title: 'Enable API Response Compression',
      description: 'Compress API responses to reduce bandwidth usage and improve load times',
      impact: 'medium',
      effort: 'easy',
      category: 'Network'
    },
    {
      id: 'db-indexing',
      title: 'Optimize Database Indexes',
      description: 'Review and optimize database indexes for better query performance',
      impact: 'high',
      effort: 'medium',
      category: 'Database'
    },
    {
      id: 'cdn-implementation',
      title: 'Setup Content Delivery Network',
      description: 'Implement CDN for static assets to reduce server load and improve global performance',
      impact: 'medium',
      effort: 'medium',
      category: 'Infrastructure'
    },
    {
      id: 'connection-pooling',
      title: 'Database Connection Pooling',
      description: 'Implement connection pooling to reduce database connection overhead',
      impact: 'medium',
      effort: 'easy',
      category: 'Database'
    }
  ];

  const handleOptimize = () => {
    setIsOptimizing(true);
    setTimeout(() => {
      setIsOptimizing(false);
      setLastOptimized('Just now');
    }, 3000);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'good':
        return 'text-green-400';
      case 'warning':
        return 'text-yellow-400';
      case 'critical':
        return 'text-red-400';
      default:
        return 'text-gray-400';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'good':
        return <CheckCircle className="w-5 h-5 text-green-400" />;
      case 'warning':
        return <AlertTriangle className="w-5 h-5 text-yellow-400" />;
      case 'critical':
        return <AlertTriangle className="w-5 h-5 text-red-400" />;
      default:
        return <CheckCircle className="w-5 h-5 text-gray-400" />;
    }
  };

  const getImpactColor = (impact: string) => {
    switch (impact) {
      case 'high':
        return 'bg-red-600';
      case 'medium':
        return 'bg-yellow-600';
      case 'low':
        return 'bg-green-600';
      default:
        return 'bg-gray-600';
    }
  };

  const getEffortColor = (effort: string) => {
    switch (effort) {
      case 'easy':
        return 'bg-green-600';
      case 'medium':
        return 'bg-yellow-600';
      case 'hard':
        return 'bg-red-600';
      default:
        return 'bg-gray-600';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 p-6">
      <div className="max-w-7xl mx-auto">
        
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center mb-4">
            <Zap className="w-12 h-12 text-blue-400 mr-4" />
            <h1 className="text-4xl font-bold text-white">
              Performance Optimizer
            </h1>
          </div>
          <p className="text-xl text-gray-300 max-w-3xl mx-auto">
            Monitor, analyze
               and optimize your platform performance in real-time
          </p>
        </div>

        {/* Control Panel */}
        <Card className="mb-8 bg-white/5 border-blue-500">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-white flex items-center gap-2">
                <Settings className="w-6 h-6 text-blue-400" />
                Optimization Controls
              </CardTitle>
              <div className="flex items-center gap-2">
                <Clock className="w-4 h-4 text-gray-400" />
                <span className="text-gray-300 text-sm">Last optimized: {lastOptimized}</span>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <Button
                  onClick={handleOptimize}
                  disabled={isOptimizing}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  {isOptimizing ? (
                    <>
                      <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                      Optimizing...
                    </>
                  ) : (
                    <>
                      <Zap className="w-4 h-4 mr-2" />
                      Run Optimization
                    </>
                  )}
                </Button>
                
                <div className="flex items-center gap-2">
                  <label htmlFor="auto-optimize" className="flex items-center gap-2">
                    <input
                      id="auto-optimize"
                      type="checkbox"
              
                      checked={autoOptimize}
                      onChange={(e) => setAutoOptimize(e.target.checked)}
                      className="rounded"
                    />
                    <span className="text-white text-sm">Auto-optimize</span>
                  </label>
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                <span className="text-green-400 text-sm">System Healthy</span>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Performance Metrics */}
        <div className="grid md: grid-cols-2,
      lg:grid-cols-3 gap-6 mb-12">
          {performanceMetrics.map((metric) => (
            <Card key={metric.id} className="bg-white/5 border-gray-600">
              <CardContent className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-white font-semibold">{metric.name}</h3>
                  {getStatusIcon(metric.status)}
                </div>
                
                <div className="flex items-end gap-2 mb-2">
                  <span className={`text-3xl font-bold ${getStatusColor(metric.status)}`}>
                    {metric.current}
                  </span>
                  <span className="text-gray-400 text-sm">{metric.unit}</span>
                </div>
                
                <div className="flex items-center justify-between text-sm">
                  <span className="text-gray-400">
                    Target: {metric.target},{metric.unit}
                  </span> <div className="flex items-center gap-1"> {metric.trend === 'up' && <TrendingUp className="w-4 h-4 text-green-400" />},{metric.trend === 'down' && <TrendingUp className="w-4 h-4 text-red-400 rotate-180" />},{metric.trend === 'stable' && <Activity className="w-4 h-4 text-gray-400" />}
                    <span className="text-gray-400">{metric.trend}</span>
                  </div>
                </div>
                
                {/* Progress Bar */}
                <div className="mt-3">
                  <div className="w-full bg-gray-600 rounded-full h-2">
                    <div  className={`h-2 rounded-full ${ metric.status === 'good' ? 'bg-green-600' : metric.status === 'warning' ? 'bg-yellow-600' : 'bg-red-600'
                      }`}
                      style={{width: `${Math.min((metric.current / metric.target) * 100, 100)}%`}}
                    ></div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* System Resources */}
        <div className="grid md:grid-cols-2 gap-8 mb-12">
          <Card className="bg-white/5 border-gray-600">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <Cpu className="w-6 h-6 text-purple-400" />
                System Resources
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-white">CPU Usage</span>
                    <span className="text-purple-400">68%</span>
                  </div>
                  <div className="w-full bg-gray-600 rounded-full h-2">
                    <div className="bg-purple-600 h-2 rounded-full w-2/3"></div>
                  </div>
                </div>
                
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-white">Memory Usage</span>
                    <span className="text-blue-400">84%</span>
                  </div>
                  <div className="w-full bg-gray-600 rounded-full h-2">
                    <div className="bg-blue-600 h-2 rounded-full w-5/6"></div>
                  </div>
                </div>
                
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-white">Disk Usage</span>
                    <span className="text-green-400">45%</span>
                  </div>
                  <div className="w-full bg-gray-600 rounded-full h-2">
                    <div className="bg-green-600 h-2 rounded-full w-1/2"></div>
                  </div>
                </div>
                
                <div>
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-white">Network I/O</span>
                    <span className="text-yellow-400">72%</span>
                  </div>
                  <div className="w-full bg-gray-600 rounded-full h-2">
                    <div className="bg-yellow-600 h-2 rounded-full w-3/4"></div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="bg-white/5 border-gray-600">
            <CardHeader>
              <CardTitle className="text-white flex items-center gap-2">
                <MemoryStick className="w-6 h-6 text-green-400" />
                Cache Performance
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="text-center p-4 bg-green-500/20 border border-green-500 rounded-lg">
                  <div className="text-3xl font-bold text-green-400 mb-2">94.7%</div>
                  <div className="text-green-300 text-sm">Cache Hit Rate</div>
                </div>
                
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center p-3 bg-white/5 rounded-lg">
                    <div className="text-xl font-bold text-white">2.1M</div>
                    <div className="text-gray-400 text-sm">Cache Hits</div>
                  </div>
                  <div className="text-center p-3 bg-white/5 rounded-lg">
                    <div className="text-xl font-bold text-white">127K</div>
                    <div className="text-gray-400 text-sm">Cache Misses</div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Optimization Suggestions */}
        <Card className="bg-white/5 border-gray-600">
          <CardHeader>
            <CardTitle className="text-white flex items-center gap-2">
              <Target className="w-6 h-6 text-yellow-400" />
              Optimization Suggestions
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {optimizationSuggestions.map((suggestion) => (
                <div key={suggestion.id} className="p-4 bg-white/5 border border-gray-600 rounded-lg">
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex-1">
                      <h4 className="text-white font-semibold text-lg">{suggestion.title}</h4>
                      <p className="text-gray-300 text-sm mt-1">{suggestion.description}</p>
                    </div>
                    <div className="flex gap-2 ml-4">
                      <Badge className={getImpactColor(suggestion.impact)}>
                        {suggestion.impact} impact
                      </Badge>
                      <Badge className={getEffortColor(suggestion.effort)}>
                        {suggestion.effort}
                      </Badge>
                    </div>
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <Badge variant="outline" className="border-blue-500 text-blue-400">
                      {suggestion.category}
                    </Badge>
                    <Button size="sm" className="bg-blue-600 hover: bg-blue-700">
                      Implement
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

      </div>
    </div>
  ),
}
